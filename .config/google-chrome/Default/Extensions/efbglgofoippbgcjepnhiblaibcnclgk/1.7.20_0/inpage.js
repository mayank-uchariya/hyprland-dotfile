(()=>{"use strict";var e,t=function(e,t,n,s,a){if("m"===s)throw new TypeError("Private method is not writable");if("a"===s&&!a)throw new TypeError("Private accessor was defined without a setter");if("function"===typeof t?e!==t||!a:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===s?a.call(e,n):a?a.value=n:t.set(e,n),n},n=function(e,t,n,s){if("a"===n&&!s)throw new TypeError("Private accessor was defined without a getter");if("function"===typeof t?e!==t||!s:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?s:"a"===n?s.call(e):s?s.value:t.get(e)};function s(e){const t=t=>{let{register:n}=t;return n(e)};try{window.dispatchEvent(new a(t))}catch(n){console.error("wallet-standard:register-wallet event could not be dispatched\n",n)}try{window.addEventListener("wallet-standard:app-ready",(e=>{let{detail:n}=e;return t(n)}))}catch(n){console.error("wallet-standard:app-ready event listener could not be added\n",n)}}class a extends Event{constructor(n){super("wallet-standard:register-wallet",{bubbles:!1,cancelable:!1,composed:!1}),e.set(this,void 0),t(this,e,n,"f")}get detail(){return n(this,e,"f")}get type(){return"wallet-standard:register-wallet"}preventDefault(){throw new Error("preventDefault cannot be called")}stopImmediatePropagation(){throw new Error("stopImmediatePropagation cannot be called")}stopPropagation(){throw new Error("stopPropagation cannot be called")}}e=new WeakMap;var i;function r(e,t,n){!function(e,t){if(t.has(e))throw new TypeError("Cannot initialize the same private elements twice on an object")}(e,t),t.set(e,n)}function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function c(e){var t=function(e,t){if("object"!=o(e)||!e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var s=n.call(e,t||"default");if("object"!=o(s))return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(e,"string");return"symbol"==o(t)?t:t+""}function d(e,t,n){return(t=c(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t,n){if("function"==typeof e?e===t:e.has(t))return arguments.length<3?t:n;throw new TypeError("Private element is not present on this object")}!function(e){e.VIEW_ACCOUNT="viewAccount",e.SUGGEST_TX="suggestTransactions"}(i||(i={}));const u="sui:devnet",h="sui:testnet";var g=function(e,t,n,s){var a,i=arguments.length,r=i<3?t:null===s?s=Object.getOwnPropertyDescriptor(t,n):s;if("object"===typeof Reflect&&"function"===typeof Reflect.decorate)r=Reflect.decorate(e,t,n,s);else for(var o=e.length-1;o>=0;o--)(a=e[o])&&(r=(i<3?a(r):i>3?a(t,n,r):a(t,n))||r);return i>3&&r&&Object.defineProperty(t,n,r),r},w=new WeakMap;class m{constructor(){d(this,"chains",[u,h]),d(this,"name","Martian Sui Wallet"),d(this,"connecting",!1),d(this,"connected",!1),d(this,"wallet",null),r(this,w,[])}get icon(){return"https://cdn.martianwallet.xyz/assets/icon.png"}get accounts(){return t=this,(e=w).get(l(e,t));var e,t}get version(){return"1.0.0"}get features(){return{"standard:connect":{version:"1.0.0",connect:async()=>{const e=await this.connect();var t,n,s;return t=w,n=this,s=e.accounts,t.set(l(t,n),s),e}},"standard:events":{version:"1.0.0",on:()=>this.on()},"sui:signAndExecuteTransactionBlock":{version:"1.0.0",signAndExecuteTransactionBlock:async e=>await this.signAndExecuteTransactionBlock(e)},"sui:signTransactionBlock":{version:"1.0.0",signTransactionBlock:async e=>await this.signTransactionBlock(e)},"sui:signMessage":{version:"1.0.0",signMessage:async e=>await this.signMessage(e)},"sui:signPersonalMessage":{version:"1.0.0",signPersonalMessage:async e=>await this.signPersonalMessage(e)}}}on(){return()=>{}}async hasPermissions(e){const t=this.wallet;return await t.hasPermissions(e)}async connect(){const e=this.wallet,t=await e.connect([i.VIEW_ACCOUNT,i.SUGGEST_TX]),n=await e.network();return{accounts:[{address:t.address,publicKey:(new TextEncoder).encode(t.publicKey),chains:[n||h],features:["standard:connect","standard:events","sui:signAndExecuteTransaction"]}]}}async signAndExecuteTransactionBlock(e){const t=this.wallet;return await t.signAndExecuteTransactionBlock({transactionBlockSerialized:e.transactionBlock.serialize(),options:e.options})}async signTransactionBlock(e){const t=this.wallet;return await t.signTransactionBlock({transactionBlockSerialized:e.transactionBlock.serialize()})}async disconnect(){const e=this.wallet;await e.disconnect()}async getAccounts(){const e=this.wallet;return await e.getAccounts()}async signMessage(e){const t=this.wallet;return await t.signMessage(e)}async signPersonalMessage(e){const t=this.wallet,n=await t.signMessage(e);return{bytes:n.messageBytes,signature:n.signature}}async getPublicKey(){const e=this.wallet;return await e.getPublicKey()}}function p(){return(e,t,n)=>{const s=n.value;return n.value=function(){if(!window.martian)return function(){throw new Error("You need to install Martian Extension from Chrome Store")}();e.wallet||(e.wallet=window.martian.sui);for(var t=arguments.length,n=new Array(t),a=0;a<t;a++)n[a]=arguments[a];return s.apply(e,n)},n}}function y(e,t){if(!Object.prototype.hasOwnProperty.call(e,t))throw new TypeError("attempted to use private field on non-instance");return e}g([p()],m.prototype,"hasPermissions",null),g([p()],m.prototype,"connect",null),g([p()],m.prototype,"signAndExecuteTransactionBlock",null),g([p()],m.prototype,"signTransactionBlock",null),g([p()],m.prototype,"disconnect",null),g([p()],m.prototype,"getAccounts",null),g([p()],m.prototype,"signMessage",null),g([p()],m.prototype,"signPersonalMessage",null),g([p()],m.prototype,"getPublicKey",null);var v=0;function _(e){return"__private_"+v+++"_"+e}function f(){return Math.random().toString(36).substring(2,15)}var b=_("validateBlockchain");function T(e){return!(!e.blockchain||!["sui","aptos"].includes(e.blockchain))}const k=function(e){};class E{constructor(){this.log=console.log.bind(console)}}var C=_("log"),A=_("createLogger");class P extends E{constructor(e){if(super(),Object.defineProperty(this,A,{value:M}),Object.defineProperty(this,C,{writable:!0,value:void 0}),P._instance)throw new Error("Singleton classes can't be instantiated more than once.");P._instance=this;const{level:t}=e||{};y(this,C)[C]=this.log,y(this,A)[A](t)}changeLogLevel(e){y(this,A)[A](e)}}function M(e){this.error=console.error.bind(console),this.warn="error"===e?k:console.warn.bind(console),this.log="verbose"===e?y(this,C)[C]:k}const S=new P({level:"warn"});window.martian=new class{constructor(){this.eventListenerMap={},this._isConnected=!1,window.dispatchEvent(new CustomEvent("martian_wallet_injected",{detail:{status:"available"}})),window.addEventListener("changeAddress",(e=>{window.martian.address=e.detail.address,"changeAddress"in this.eventListenerMap&&this.eventListenerMap.changeAddress(e.detail.address)})),window.addEventListener("martian_wallet_network_change",(e=>{"networkChange"in this.eventListenerMap&&this.eventListenerMap.networkChange(e.detail.networkName)}))}onAccountChange(e){this.eventListenerMap.changeAddress=e}onNetworkChange(e){this.eventListenerMap.networkChange=e}async connect(){return new Promise((async(e,t)=>{try{const t=await this._message("connect",{});window.martian._isConnected=!0,window.martian.address=t.address,e(t)}catch(n){t(n)}}))}async isConnected(){return Promise.resolve(this._isConnected)}async disconnect(){const e=await this._message("disconnect",{});return this._isConnected=!1,this.address=null,e}async account(){return this._message("account",this.address)}async getAccount(e){return this._message("getAccount",e)}async getAccountResources(e,t){return this._message("getAccountResources",{address:e,query:t})}async getAccountTransactions(e,t){return this._message("getAccountTransactions",{address:e,query:t})}async signAndSubmitTransaction(e){return await this._message("signAndSubmitTxn",e)}async signAndSubmitBCSTransaction(e,t){return await this._message("signAndSubmitBCSTxn",{transaction:e,options:t})}async generateSignAndSubmitTransaction(e,t,n){return await this._message("generateSignAndSubmitTxn",{sender:e,payload:t,options:n})}async generateTransaction(e,t,n){return await this._message("generateTransaction",{sender:e,payload:t,options:n})}async signGenericTransaction(e){return await this._message("signGenericTxn",e)}async signTransaction(e){return await this._message("signTransaction",e)}async signMessage(e){return await this._message("signMessage",e)}async submitTransaction(e){return await this._message("submitTransaction",e)}async getChainId(){return await this._message("getChainId",{})}async getCurrentBlockchain(){return this._message("getCurrentBlockchain",this.address)}async getLedgerInfo(){return await this._message("getLedgerInfo",{})}async getTransactions(e){return await this._message("getTransactions",e)}async getTransaction(e){return await this._message("getTransaction",e)}async transactionPending(e){return await this._message("getTransactionPending",e)}async getTableItem(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return await this._message("getTableItem",{handle:e,data:t,params:n})}async createCollection(e,t,n){return this._message("createCollection",{name:e,description:t,uri:n})}async createToken(e,t,n,s,a){let i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:this.address,r=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,o=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,c=arguments.length>8&&void 0!==arguments[8]?arguments[8]:[],d=arguments.length>9&&void 0!==arguments[9]?arguments[9]:[],l=arguments.length>10&&void 0!==arguments[10]?arguments[10]:[],u=arguments.length>11&&void 0!==arguments[11]?arguments[11]:9007199254740991;return this._message("createToken",{collectionName:e,name:t,description:n,supply:s,uri:a,royalty_payee_address:"0"===i.toString()?this.address:i,royalty_points_denominator:r,royalty_points_numerator:o,property_keys:c,property_values:d,property_types:l,max:u})}async publishModule(e){return await this._message("publishModule",e)}async cancelSubmittedTransactions(){return await this._message("cancelSubmittedTransactions")}async addNetwork(e,t){return await this._message("addNetwork",{nodeUrl:e,faucetUrl:t})}async getNetworks(){return await this._message("getNetworks")}async changeNetwork(e){return await this._message("changeNetwork",{nodeUrl:e})}async network(){return await this._message("network")}_message(e,t){const n=f();return new Promise((function(s,a){const i=t=>{if(t.detail.responseMethod===e&&t.detail.id===n){const n=t.detail.response;var r;if(window.removeEventListener("martian_contentscript_message",i),"connect"===e&&(window.martian._isConnected=200===n.status),n.error)a(null!==(r=n.error)&&void 0!==r?r:"Error");else s(n)}};window.addEventListener("martian_contentscript_message",i),window.dispatchEvent(new CustomEvent("martian_injected_script_message",{detail:{method:e,data:t,id:n,blockchain:"aptos-bc"}}))}))}},window.martian.sui=new class{constructor(){this.connected=this._isConnected,this.features={"standard:connect":{version:this.version,connect:e=>this.connect(e)},"standard:disconnect":{version:this.version,disconnect:()=>this.disconnect()},"standard:events":{version:this.version,on:()=>"This function is not implemented"},"sui:signAndExecuteTransactionBlock":{version:this.version,signAndExecuteTransactionBlock:e=>this.signAndExecuteTransactionBlock(e)},"sui:signTransactionBlock":{version:this.version,signTransactionBlock:e=>this.signTransactionBlock(e)}},this.eventListenerMap={},this.version="1.0.0",this.name="Martian Sui Wallet",this.icon="https://cdn.martianwallet.xyz/assets/icon.png",this._isConnected=!1,this.connecting=!1,this.accounts=[],window.dispatchEvent(new CustomEvent("martian_wallet_injected",{detail:this.features})),window.addEventListener("changeAddress",(e=>{window.martian.address=e.detail.address,"changeAddress"in this.eventListenerMap&&this.eventListenerMap.changeAddress(e.detail.address)})),window.addEventListener("martian_wallet_network_change",(e=>{"networkChange"in this.eventListenerMap&&this.eventListenerMap.networkChange(e.detail.networkName)}))}onAccountChange(e){this.eventListenerMap.changeAddress=e}onNetworkChange(e){this.eventListenerMap.networkChange=e}async hasPermissions(e){try{const t=(await this._message("getPermissionsSui")).permissions;return e.filter((e=>t.includes(e))).length===e.length}catch(t){return S.error("[MARTIAN_SUI_INPAGE_ERROR][hasPermissions]",t),!1}}async requestPermissions(e){return this.connect(e)}async connect(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:["viewAccount","suggestTransactions"];return new Promise((async(t,n)=>{try{const n=await this._message("connect",{permissions:e});window.martian._isConnected=!0,window.martian.address=n.address,this.accounts=[n],t(n)}catch(s){n(s)}}))}async isConnected(){return Promise.resolve(this._isConnected)}async disconnect(){const e=await this._message("disconnect",{});return this._isConnected=!1,this.address=null,e}async getAccounts(){return this._message("getAccounts_sui",this.address)}async getCurrentBlockchain(){return this._message("getCurrentBlockchain")}async signAndExecuteTransactionBlock(e){if(!e.transactionBlockSerialized)throw new Error("Unexpect transaction format found. Ensure that you are using the `TransactionBlock` class.");return await this._message("signAndExecuteTransaction",{transaction:e.transactionBlockSerialized,options:e.options})}async signTransactionBlock(e){if(!e.transactionBlockSerialized)throw new Error("Unexpect transaction format found. Ensure that you are using the `TransactionBlock` class.");return await this._message("signTransaction",{transaction:e.transactionBlockSerialized})}async getPublicKey(){return await this._message("getPublicKey")}async getOldAddress(e){return await this._message("getOldAddressSui",{publicKey:e})}async signMessage(e){try{if(!e||"string"===typeof e||!("message"in e))return"Invalid input";e.message=(new TextDecoder).decode(e.message);const{messageBytes:t,signature:n}=await this._message("signMessage",e);return{messageBytes:t,signature:n}}catch(t){S.error("[SignMessage Error]",t)}}async network(){return await this._message("getActiveSuiNetwork")}_message(e,t){const n=f();return new Promise((function(s,a){const i=t=>{if(t.detail.responseMethod===e&&t.detail.id===n){const n=t.detail.response;var r;if(window.removeEventListener("martian_contentscript_message",i),"connect"===e&&(window.martian._isConnected=200===n.status),n.error)a(null!==(r=n.error)&&void 0!==r?r:"Error");else s(n)}};window.addEventListener("martian_contentscript_message",i),window.dispatchEvent(new CustomEvent("martian_injected_script_message",{detail:{method:e,data:t,id:n,blockchain:"sui-bc"}}))}))}},window.martian.internal=new class{constructor(){Object.defineProperty(this,b,{value:T}),this.connected=this._isConnected,this.features={connect:{version:this.version,connect:()=>this.connect()},disconnect:{version:this.version,disconnect:()=>this.disconnect()},signAndSubmitTransaction:{version:this.version,signAndSubmitTransaction:e=>this.signAndSubmitTransaction(e)}},this.eventListenerMap={},this.version="1.0.0",this._isConnected=!1,this.connected=!1,this.connecting=!1,this.accounts=[],window.dispatchEvent(new CustomEvent("martian_wallet_internal_injected",{detail:this.features}))}onNetworkChange(e){this.eventListenerMap.networkChange=e}async connect(e){return new Promise((async(t,n)=>{try{const n=await this._message("connectInternal",{browserId:e.browserId});window.martian._isConnected=!0,t(n)}catch(s){n(s)}}))}async getWalletVersion(){return new Promise((async(e,t)=>{try{e(await this._message("getWalletVersion"))}catch(n){t(n)}}))}async isConnected(){return Promise.resolve(this._isConnected)}async disconnect(){const e=await this._message("disconnectInternal",{});return this._isConnected=!1,e}async signAndSubmitTransaction(e){if(!e.serializedTransaction)throw new Error("serializedTransaction is expected");if(!y(this,b)[b](e))throw new Error("Invalid blockchain");return await this._message("signAndSubmitTransactionInternal",{address:e.address,transaction:e.serializedTransaction,options:e.options,blockchain:e.blockchain})}_message(e,t){const n=f();return new Promise((function(s,a){const i=t=>{if(t.detail.responseMethod===e&&t.detail.id===n){const n=t.detail.response;var r;if(window.removeEventListener("martian_contentscript_message",i),"connectInternal"===e&&(window.martian._isConnected=200===n.status),n.error)a(null!==(r=n.error)&&void 0!==r?r:"Error");else s(n)}};window.addEventListener("martian_contentscript_message",i),window.dispatchEvent(new CustomEvent("martian_injected_script_message",{detail:{method:e,data:t,id:n,apiType:"internal"}}))}))}};try{s(new m)}catch(B){console.warn("Error in registering sui wallet",B)}})();