/*! For license information please see index.js.LICENSE.txt */
!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="/",n(n.s=87)}([,,,,,,,,,,,,,,function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r=p(n(48)),i=p(n(68)),o=p(n(50)),u=p(n(53)),a=p(n(54)),s=p(n(111)),c=p(n(52)),f=p(n(75)),l=p(n(56)),h=p(n(76));function p(t){return t&&t.__esModule?t:{default:t}}function d(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return 1===e.length&&Array.isArray(e[0])&&(e=e[0]),new i.default(e)}d.plugin=function(t,e){function n(){var n=e.apply(void 0,arguments);return n.postcssPlugin=t,n.postcssVersion=(new i.default).version,n}var r;return Object.defineProperty(n,"postcss",{get:function(){return r||(r=n()),r}}),n.process=function(t,e,r){return d([n(r)]).process(t,e)},n},d.stringify=o.default,d.parse=c.default,d.vendor=s.default,d.list=f.default,d.comment=function(t){return new u.default(t)},d.atRule=function(t){return new a.default(t)},d.decl=function(t){return new r.default(t)},d.rule=function(t){return new l.default(t)},d.root=function(t){return new h.default(t)};var v=d;e.default=v,t.exports=e.default},function(t,e,n){"use strict";function r(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}n.d(e,"a",(function(){return r}))},,function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));var r=n(15);function i(t){Object(r.a)(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}},,,,,,,,function(t,e,n){"use strict";n.d(e,"h",(function(){return u})),n.d(e,"g",(function(){return a})),n.d(e,"l",(function(){return d})),n.d(e,"m",(function(){return v})),n.d(e,"k",(function(){return w})),n.d(e,"i",(function(){return m})),n.d(e,"f",(function(){return g})),n.d(e,"o",(function(){return _})),n.d(e,"c",(function(){return C})),n.d(e,"e",(function(){return S})),n.d(e,"a",(function(){return s})),n.d(e,"d",(function(){return c})),n.d(e,"j",(function(){return k})),n.d(e,"b",(function(){return O})),n.d(e,"n",(function(){return M}));var r=n(14),i=function(t){return new RegExp(t+"\\((.*)\\)$")},o=function(){var t=document.querySelector("body");return Array.prototype.slice.call(null==t?void 0:t.childNodes).filter((function(t){if(!t.tagName)return!1;var e=t.tagName.toLowerCase();return"script"!==e&&"style"!==e&&"noscript"!==e&&"stylebot"!==t.id})).map((function(t){return g(t)||m(t)})).filter((function(t){return null!==t}))},u=function(t,e){var n=r.parse(e),u=i(t),a=o(),s=0;return a.forEach((function(t){n.some((function(e){return"rule"===e.type&&e.selector===t}))&&n.walkRules(t,(function(t){t.walkDecls("filter",(function(t){var e=t.value.match(u);e&&e[1]&&(s=parseInt(e[1]))}))}))})),s},a=function(t,e,n){var u=r.parse(e),a=i(t),c=o(),f=function(t,e){return t+"("+e+"%)"}(t,n);return c.forEach((function(t){u.some((function(e){return"rule"===e.type&&e.selector===t}))?u.walkRules(t,(function(e){e.some((function(t){return"decl"===t.type&&"filter"===t.prop}))?e.walkDecls("filter",(function(t){var r=t.value.replace(a,"").trim();"0"!==n?t.value=r?r+" "+f:""+f:r?t.value=r:(t.remove(),e.some((function(t){return"decl"!==t.type}))||e.remove())})):"0"!==n&&(u=r.parse(s("filter",f,t,u.toString())))})):"0"!==n&&(u=r.parse(s("filter",f,t,u.toString())))})),u.toString()},s=function(t,e,n,i){var o=r.parse(i),u=[];o.walkRules(n,(function(t){return u.push(t)}));var a=u.length>0?u[0]:null;if(!a){if(e){var s=n+" {\n  "+t+": "+e+";\n}";return o.some((function(t){return!!t}))?o.append("\n\n"+s):o.append(s),o.toString()}return i}return a.some((function(e){return"decl"===e.type&&e.prop===t}))?(a.walkDecls(t,(function(t){e?t.value=e:t.remove()})),a.some((function(t){return!!t}))||a.remove(),o.toString()):e?(a.append("\n  "+t+": "+e+";"),o.toString()):i},c=function(t){var e=r.parse(t),n=function(t){return"atrule"===t.type||("decl"===t.type||"rule"===t.type)&&n(t.parent)};return e.walkDecls((function(t){n(t)||(t.important=!0)})),e.toString()},f=function(t){return new Promise((function(e){var n=r.parse(t),i=[];n.walkAtRules("import",(function(t){var e=t.params.replace(/"/g,"").replace(/\'/g,"").match(/^(url\()?([^\)]*)(\))?$/);e&&(i.push(e[2]),t.remove())}));var o=i.map((function(t){return new Promise((function(e){var n={name:"GetImportCss",url:t};chrome.runtime.sendMessage(n,(function(t){e(t)}))}))})),u=n.toString();Promise.all(o).then((function(t){var n=t.join("\n\n");n&&(u=n+"\n\n"+u),e(u)}))}))},l=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,a)}s((r=r.apply(t,e||[])).next())}))},h=function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=u.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},p=function(t){return"stylebot-css-"+t},d=function(t,e){return l(void 0,void 0,Promise,(function(){var n,r,i,o;return h(this,(function(u){switch(u.label){case 0:return[4,f(t)];case 1:return n=u.sent(),r=p(e),(i=document.getElementById(r))?(i.innerHTML=n,[2]):((o=document.createElement("style")).type="text/css",o.setAttribute("id",r),o.appendChild(document.createTextNode(n)),document.documentElement.appendChild(o),[2])}}))}))},v=function(t,e){var n=c(t.toString());d(n,e)},g=function(t){var e,n=null===(e=t.getAttribute("class"))||void 0===e?void 0:e.trim().replace(/\s{2,}/g," ");if(n){for(var r=n.split(" "),i=r.length,o=t.tagName.toLowerCase(),u=0;u<i;u++)o+="."+r[u];return o}return null},m=function(t){var e=t.getAttribute("id");return e?"#"+e:null},y=function(t,e){void 0===e&&(e=0);var n=t.tagName.toLowerCase();if(e<2&&t.parentElement){var r=t.parentElement;return y(r,e+1)+" "+n}return n},w=function(t){var e=g(t);return e||(e=m(t)),e||y(t)},_=function(t){if(!t)return!1;try{return document.querySelector(t),!0}catch(t){return!1}},b=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,a)}s((r=r.apply(t,e||[])).next())}))},x=function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=u.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},A=function(t){var e="https://fonts.googleapis.com/css2?family="+t.replace(" ","+")+":ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap";return{url:e,params:"url("+e+")"}},C=function(t,e){return b(void 0,void 0,Promise,(function(){var n,i,o,u;return x(this,(function(a){return n=Object(r.parse)(e),i=A(t),o=i.url,u=i.params,[2,new Promise((function(t){fetch(o).then((function(i){var o;if(400!==i.status){var a=!1;if(n.walkAtRules("import",(function(t){t.params===u&&(a=!0)})),!a){var s=Object(r.parse)("@import "+u+";");n.prepend(s);var c=null===(o=n.first)||void 0===o?void 0:o.next();c&&(c.raws.before="\n\n")}t(n.toString())}else t(e)})).catch((function(n){console.error(n),t(e)}))}))]}))}))},S=function(t){var e=Object(r.parse)(t),n=[];e.walkDecls("font-family",(function(t){t.value.split(",").forEach((function(t){var e=t.trim();e&&-1===n.indexOf(e)&&n.push(e)}))}));var i=n.map((function(t){return A(t).params}));return e.walkAtRules("import",(function(t){-1===i.indexOf(t.params)&&t.remove()})),e.toString()},k=function(t,e){var n=r.parse(t),i=[];return n.walkRules(e,(function(t){return i.push(t)})),i.length>0?i[0]:null},O=function(t,e){var n=e+" {\n  \n}";return""+t.replace(/((.*)\})\n*$/,"$1\n\n")+n},M=function(t){var e=r.parse(t);return e.walkRules((function(t){t.first||t.remove()})),e.toString()}},,,,,,,,,function(t,e,n){"use strict";n.d(e,"a",(function(){return Y})),n.d(e,"b",(function(){return q})),n.d(e,"c",(function(){return $}));var r=n(17),i=n(15);function o(t){Object(i.a)(1,arguments);var e=Object(r.a)(t);return!isNaN(e)}var u=n(86);function a(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function s(t,e){Object(i.a)(2,arguments);var n=Object(r.a)(t).getTime(),o=a(e);return new Date(n+o)}function c(t,e){Object(i.a)(2,arguments);var n=a(e);return s(t,-n)}function f(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}var l={y:function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return f("yy"===e?r%100:r,e.length)},M:function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):f(n+1,2)},d:function(t,e){return f(t.getUTCDate(),e.length)},a:function(t,e){var n=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":case"aaa":return n.toUpperCase();case"aaaaa":return n[0];case"aaaa":default:return"am"===n?"a.m.":"p.m."}},h:function(t,e){return f(t.getUTCHours()%12||12,e.length)},H:function(t,e){return f(t.getUTCHours(),e.length)},m:function(t,e){return f(t.getUTCMinutes(),e.length)},s:function(t,e){return f(t.getUTCSeconds(),e.length)},S:function(t,e){var n=e.length,r=t.getUTCMilliseconds();return f(Math.floor(r*Math.pow(10,n-3)),e.length)}};function h(t){Object(i.a)(1,arguments);var e=1,n=Object(r.a)(t),o=n.getUTCDay(),u=(o<e?7:0)+o-e;return n.setUTCDate(n.getUTCDate()-u),n.setUTCHours(0,0,0,0),n}function p(t){Object(i.a)(1,arguments);var e=Object(r.a)(t),n=e.getUTCFullYear(),o=new Date(0);o.setUTCFullYear(n+1,0,4),o.setUTCHours(0,0,0,0);var u=h(o),a=new Date(0);a.setUTCFullYear(n,0,4),a.setUTCHours(0,0,0,0);var s=h(a);return e.getTime()>=u.getTime()?n+1:e.getTime()>=s.getTime()?n:n-1}function d(t){Object(i.a)(1,arguments);var e=p(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var r=h(n);return r}function v(t,e){Object(i.a)(1,arguments);var n=e||{},o=n.locale,u=o&&o.options&&o.options.weekStartsOn,s=null==u?0:a(u),c=null==n.weekStartsOn?s:a(n.weekStartsOn);if(!(c>=0&&c<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var f=Object(r.a)(t),l=f.getUTCDay(),h=(l<c?7:0)+l-c;return f.setUTCDate(f.getUTCDate()-h),f.setUTCHours(0,0,0,0),f}function g(t,e){Object(i.a)(1,arguments);var n=Object(r.a)(t,e),o=n.getUTCFullYear(),u=e||{},s=u.locale,c=s&&s.options&&s.options.firstWeekContainsDate,f=null==c?1:a(c),l=null==u.firstWeekContainsDate?f:a(u.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var h=new Date(0);h.setUTCFullYear(o+1,0,l),h.setUTCHours(0,0,0,0);var p=v(h,e),d=new Date(0);d.setUTCFullYear(o,0,l),d.setUTCHours(0,0,0,0);var g=v(d,e);return n.getTime()>=p.getTime()?o+1:n.getTime()>=g.getTime()?o:o-1}function m(t,e){Object(i.a)(1,arguments);var n=e||{},r=n.locale,o=r&&r.options&&r.options.firstWeekContainsDate,u=null==o?1:a(o),s=null==n.firstWeekContainsDate?u:a(n.firstWeekContainsDate),c=g(t,e),f=new Date(0);f.setUTCFullYear(c,0,s),f.setUTCHours(0,0,0,0);var l=v(f,e);return l}var y="midnight",w="noon",_="morning",b="afternoon",x="evening",A="night";function C(t,e){var n=t>0?"-":"+",r=Math.abs(t),i=Math.floor(r/60),o=r%60;if(0===o)return n+String(i);var u=e||"";return n+String(i)+u+f(o,2)}function S(t,e){return t%60==0?(t>0?"-":"+")+f(Math.abs(t)/60,2):k(t,e)}function k(t,e){var n=e||"",r=t>0?"-":"+",i=Math.abs(t);return r+f(Math.floor(i/60),2)+n+f(i%60,2)}var O={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),i=r>0?r:1-r;return n.ordinalNumber(i,{unit:"year"})}return l.y(t,e)},Y:function(t,e,n,r){var i=g(t,r),o=i>0?i:1-i;return"YY"===e?f(o%100,2):"Yo"===e?n.ordinalNumber(o,{unit:"year"}):f(o,e.length)},R:function(t,e){return f(p(t),e.length)},u:function(t,e){return f(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return f(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return f(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return l.M(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return f(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,o){var u=function(t,e){Object(i.a)(1,arguments);var n=Object(r.a)(t),o=v(n,e).getTime()-m(n,e).getTime();return Math.round(o/6048e5)+1}(t,o);return"wo"===e?n.ordinalNumber(u,{unit:"week"}):f(u,e.length)},I:function(t,e,n){var o=function(t){Object(i.a)(1,arguments);var e=Object(r.a)(t),n=h(e).getTime()-d(e).getTime();return Math.round(n/6048e5)+1}(t);return"Io"===e?n.ordinalNumber(o,{unit:"week"}):f(o,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):l.d(t,e)},D:function(t,e,n){var o=function(t){Object(i.a)(1,arguments);var e=Object(r.a)(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var o=e.getTime(),u=n-o;return Math.floor(u/864e5)+1}(t);return"Do"===e?n.ordinalNumber(o,{unit:"dayOfYear"}):f(o,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var i=t.getUTCDay(),o=(i-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(o);case"ee":return f(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(i,{width:"short",context:"formatting"});case"eeee":default:return n.day(i,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var i=t.getUTCDay(),o=(i-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(o);case"cc":return f(o,e.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(i,{width:"narrow",context:"standalone"});case"cccccc":return n.day(i,{width:"short",context:"standalone"});case"cccc":default:return n.day(i,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),i=0===r?7:r;switch(e){case"i":return String(i);case"ii":return f(i,e.length);case"io":return n.ordinalNumber(i,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,i=t.getUTCHours();switch(r=12===i?w:0===i?y:i/12>=1?"pm":"am",e){case"b":case"bb":case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,i=t.getUTCHours();switch(r=i>=17?x:i>=12?b:i>=4?_:A,e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return l.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):l.H(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):f(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):f(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):l.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):l.s(t,e)},S:function(t,e){return l.S(t,e)},X:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();if(0===i)return"Z";switch(e){case"X":return S(i);case"XXXX":case"XX":return k(i);case"XXXXX":case"XXX":default:return k(i,":")}},x:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return S(i);case"xxxx":case"xx":return k(i);case"xxxxx":case"xxx":default:return k(i,":")}},O:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+C(i,":");case"OOOO":default:return"GMT"+k(i,":")}},z:function(t,e,n,r){var i=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+C(i,":");case"zzzz":default:return"GMT"+k(i,":")}},t:function(t,e,n,r){var i=r._originalDate||t;return f(Math.floor(i.getTime()/1e3),e.length)},T:function(t,e,n,r){return f((r._originalDate||t).getTime(),e.length)}};function M(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});case"PPPP":default:return e.date({width:"full"})}}function E(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});case"pppp":default:return e.time({width:"full"})}}var T={p:E,P:function(t,e){var n,r=t.match(/(P+)(p+)?/),i=r[1],o=r[2];if(!o)return M(t,e);switch(i){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;case"PPPP":default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",M(i,e)).replace("{{time}}",E(o,e))}},R=n(81),P=["D","DD"],j=["YY","YYYY"];function L(t){return-1!==P.indexOf(t)}function U(t){return-1!==j.indexOf(t)}function B(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var D=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,I=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,N=/^'([^]*?)'?$/,z=/''/g,W=/[a-zA-Z]/;function F(t){return t.match(N)[1].replace(z,"'")}var Y=function(){return function(t,e,n){Object(i.a)(2,arguments);var s=String(e),f=n||{},l=f.locale||u.a,h=l.options&&l.options.firstWeekContainsDate,p=null==h?1:a(h),d=null==f.firstWeekContainsDate?p:a(f.firstWeekContainsDate);if(!(d>=1&&d<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var v=l.options&&l.options.weekStartsOn,g=null==v?0:a(v),m=null==f.weekStartsOn?g:a(f.weekStartsOn);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!l.localize)throw new RangeError("locale must contain localize property");if(!l.formatLong)throw new RangeError("locale must contain formatLong property");var y=Object(r.a)(t);if(!o(y))throw new RangeError("Invalid time value");var w=Object(R.a)(y),_=c(y,w),b={firstWeekContainsDate:d,weekStartsOn:m,locale:l,_originalDate:y},x=s.match(I).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,T[e])(t,l.formatLong,b):t})).join("").match(D).map((function(n){if("''"===n)return"'";var r=n[0];if("'"===r)return F(n);var i=O[r];if(i)return!f.useAdditionalWeekYearTokens&&U(n)&&B(n,e,t),!f.useAdditionalDayOfYearTokens&&L(n)&&B(n,e,t),i(_,n,l.localize,b);if(r.match(W))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return n})).join("");return x}(new Date,"yyyy-MM-dd'T'HH:mm:ss.SSSxxx")},G=function(t){return"notification~"+t},q=function(t){return new Promise((function(e){chrome.storage.local.get(G(t),(function(n){e(n[G(t)])}))}))},$=function(t,e){return new Promise((function(n){var r;chrome.storage.local.set(((r={})[G(t)]=e,r),(function(){n()}))}))}},,,function(t,e){e.getArg=function(t,e,n){if(e in t)return t[e];if(3===arguments.length)return n;throw new Error('"'+e+'" is a required argument.')};var n=/^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.-]*)(?::(\d+))?(.*)$/,r=/^data:.+\,.+$/;function i(t){var e=t.match(n);return e?{scheme:e[1],auth:e[2],host:e[3],port:e[4],path:e[5]}:null}function o(t){var e="";return t.scheme&&(e+=t.scheme+":"),e+="//",t.auth&&(e+=t.auth+"@"),t.host&&(e+=t.host),t.port&&(e+=":"+t.port),t.path&&(e+=t.path),e}function u(t){var n=t,r=i(t);if(r){if(!r.path)return t;n=r.path}for(var u,a=e.isAbsolute(n),s=n.split(/\/+/),c=0,f=s.length-1;f>=0;f--)"."===(u=s[f])?s.splice(f,1):".."===u?c++:c>0&&(""===u?(s.splice(f+1,c),c=0):(s.splice(f,2),c--));return""===(n=s.join("/"))&&(n=a?"/":"."),r?(r.path=n,o(r)):n}function a(t,e){""===t&&(t="."),""===e&&(e=".");var n=i(e),a=i(t);if(a&&(t=a.path||"/"),n&&!n.scheme)return a&&(n.scheme=a.scheme),o(n);if(n||e.match(r))return e;if(a&&!a.host&&!a.path)return a.host=e,o(a);var s="/"===e.charAt(0)?e:u(t.replace(/\/+$/,"")+"/"+e);return a?(a.path=s,o(a)):s}e.urlParse=i,e.urlGenerate=o,e.normalize=u,e.join=a,e.isAbsolute=function(t){return"/"===t.charAt(0)||n.test(t)},e.relative=function(t,e){""===t&&(t="."),t=t.replace(/\/$/,"");for(var n=0;0!==e.indexOf(t+"/");){var r=t.lastIndexOf("/");if(r<0)return e;if((t=t.slice(0,r)).match(/^([^\/]+:\/)?\/*$/))return e;++n}return Array(n+1).join("../")+e.substr(t.length+1)};var s=!("__proto__"in Object.create(null));function c(t){return t}function f(t){if(!t)return!1;var e=t.length;if(e<9)return!1;if(95!==t.charCodeAt(e-1)||95!==t.charCodeAt(e-2)||111!==t.charCodeAt(e-3)||116!==t.charCodeAt(e-4)||111!==t.charCodeAt(e-5)||114!==t.charCodeAt(e-6)||112!==t.charCodeAt(e-7)||95!==t.charCodeAt(e-8)||95!==t.charCodeAt(e-9))return!1;for(var n=e-10;n>=0;n--)if(36!==t.charCodeAt(n))return!1;return!0}function l(t,e){return t===e?0:null===t?1:null===e?-1:t>e?1:-1}e.toSetString=s?c:function(t){return f(t)?"$"+t:t},e.fromSetString=s?c:function(t){return f(t)?t.slice(1):t},e.compareByOriginalPositions=function(t,e,n){var r=l(t.source,e.source);return 0!==r||0!==(r=t.originalLine-e.originalLine)||0!==(r=t.originalColumn-e.originalColumn)||n||0!==(r=t.generatedColumn-e.generatedColumn)||0!==(r=t.generatedLine-e.generatedLine)?r:l(t.name,e.name)},e.compareByGeneratedPositionsDeflated=function(t,e,n){var r=t.generatedLine-e.generatedLine;return 0!==r||0!==(r=t.generatedColumn-e.generatedColumn)||n||0!==(r=l(t.source,e.source))||0!==(r=t.originalLine-e.originalLine)||0!==(r=t.originalColumn-e.originalColumn)?r:l(t.name,e.name)},e.compareByGeneratedPositionsInflated=function(t,e){var n=t.generatedLine-e.generatedLine;return 0!==n||0!==(n=t.generatedColumn-e.generatedColumn)||0!==(n=l(t.source,e.source))||0!==(n=t.originalLine-e.originalLine)||0!==(n=t.originalColumn-e.originalColumn)?n:l(t.name,e.name)},e.parseSourceMapInput=function(t){return JSON.parse(t.replace(/^\)]}'[^\n]*\n/,""))},e.computeSourceURL=function(t,e,n){if(e=e||"",t&&("/"!==t[t.length-1]&&"/"!==e[0]&&(t+="/"),e=t+e),n){var r=i(n);if(!r)throw new Error("sourceMapURL could not be parsed");if(r.path){var s=r.path.lastIndexOf("/");s>=0&&(r.path=r.path.substring(0,s+1))}e=a(o(r),e)}return u(e)}},,function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},,,,,,,,,function(t,e,n){"use strict";var r;e.__esModule=!0,e.default=void 0;var i=function(t){var e,n;function r(e){var n;return(n=t.call(this,e)||this).type="decl",n}return n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n,r}(((r=n(49))&&r.__esModule?r:{default:r}).default);e.default=i,t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r=u(n(66)),i=u(n(67)),o=u(n(50));function u(t){return t&&t.__esModule?t:{default:t}}var a=function(){function t(t){for(var e in void 0===t&&(t={}),this.raws={},t)this[e]=t[e]}var e=t.prototype;return e.error=function(t,e){if(void 0===e&&(e={}),this.source){var n=this.positionBy(e);return this.source.input.error(t,n.line,n.column,e)}return new r.default(t)},e.warn=function(t,e,n){var r={node:this};for(var i in n)r[i]=n[i];return t.warn(e,r)},e.remove=function(){return this.parent&&this.parent.removeChild(this),this.parent=void 0,this},e.toString=function(t){void 0===t&&(t=o.default),t.stringify&&(t=t.stringify);var e="";return t(this,(function(t){e+=t})),e},e.clone=function(t){void 0===t&&(t={});var e=function t(e,n){var r=new e.constructor;for(var i in e)if(e.hasOwnProperty(i)){var o=e[i],u=typeof o;"parent"===i&&"object"===u?n&&(r[i]=n):"source"===i?r[i]=o:o instanceof Array?r[i]=o.map((function(e){return t(e,r)})):("object"===u&&null!==o&&(o=t(o)),r[i]=o)}return r}(this);for(var n in t)e[n]=t[n];return e},e.cloneBefore=function(t){void 0===t&&(t={});var e=this.clone(t);return this.parent.insertBefore(this,e),e},e.cloneAfter=function(t){void 0===t&&(t={});var e=this.clone(t);return this.parent.insertAfter(this,e),e},e.replaceWith=function(){if(this.parent){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];for(var r=0,i=e;r<i.length;r++){var o=i[r];this.parent.insertBefore(this,o)}this.remove()}return this},e.next=function(){if(this.parent){var t=this.parent.index(this);return this.parent.nodes[t+1]}},e.prev=function(){if(this.parent){var t=this.parent.index(this);return this.parent.nodes[t-1]}},e.before=function(t){return this.parent.insertBefore(this,t),this},e.after=function(t){return this.parent.insertAfter(this,t),this},e.toJSON=function(){var t={};for(var e in this)if(this.hasOwnProperty(e)&&"parent"!==e){var n=this[e];n instanceof Array?t[e]=n.map((function(t){return"object"==typeof t&&t.toJSON?t.toJSON():t})):"object"==typeof n&&n.toJSON?t[e]=n.toJSON():t[e]=n}return t},e.raw=function(t,e){return(new i.default).raw(this,t,e)},e.root=function(){for(var t=this;t.parent;)t=t.parent;return t},e.cleanRaws=function(t){delete this.raws.before,delete this.raws.after,t||delete this.raws.between},e.positionInside=function(t){for(var e=this.toString(),n=this.source.start.column,r=this.source.start.line,i=0;i<t;i++)"\n"===e[i]?(n=1,r+=1):n+=1;return{line:r,column:n}},e.positionBy=function(t){var e=this.source.start;if(t.index)e=this.positionInside(t.index);else if(t.word){var n=this.toString().indexOf(t.word);-1!==n&&(e=this.positionInside(n))}return e},t}();e.default=a,t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r,i=(r=n(67))&&r.__esModule?r:{default:r};var o=function(t,e){new i.default(e).stringify(t)};e.default=o,t.exports=e.default},function(t,e,n){(function(t){function n(t,e){for(var n=0,r=t.length-1;r>=0;r--){var i=t[r];"."===i?t.splice(r,1):".."===i?(t.splice(r,1),n++):n&&(t.splice(r,1),n--)}if(e)for(;n--;n)t.unshift("..");return t}function r(t,e){if(t.filter)return t.filter(e);for(var n=[],r=0;r<t.length;r++)e(t[r],r,t)&&n.push(t[r]);return n}e.resolve=function(){for(var e="",i=!1,o=arguments.length-1;o>=-1&&!i;o--){var u=o>=0?arguments[o]:t.cwd();if("string"!=typeof u)throw new TypeError("Arguments to path.resolve must be strings");u&&(e=u+"/"+e,i="/"===u.charAt(0))}return(i?"/":"")+(e=n(r(e.split("/"),(function(t){return!!t})),!i).join("/"))||"."},e.normalize=function(t){var o=e.isAbsolute(t),u="/"===i(t,-1);return(t=n(r(t.split("/"),(function(t){return!!t})),!o).join("/"))||o||(t="."),t&&u&&(t+="/"),(o?"/":"")+t},e.isAbsolute=function(t){return"/"===t.charAt(0)},e.join=function(){var t=Array.prototype.slice.call(arguments,0);return e.normalize(r(t,(function(t,e){if("string"!=typeof t)throw new TypeError("Arguments to path.join must be strings");return t})).join("/"))},e.relative=function(t,n){function r(t){for(var e=0;e<t.length&&""===t[e];e++);for(var n=t.length-1;n>=0&&""===t[n];n--);return e>n?[]:t.slice(e,n-e+1)}t=e.resolve(t).substr(1),n=e.resolve(n).substr(1);for(var i=r(t.split("/")),o=r(n.split("/")),u=Math.min(i.length,o.length),a=u,s=0;s<u;s++)if(i[s]!==o[s]){a=s;break}var c=[];for(s=a;s<i.length;s++)c.push("..");return(c=c.concat(o.slice(a))).join("/")},e.sep="/",e.delimiter=":",e.dirname=function(t){if("string"!=typeof t&&(t+=""),0===t.length)return".";for(var e=t.charCodeAt(0),n=47===e,r=-1,i=!0,o=t.length-1;o>=1;--o)if(47===(e=t.charCodeAt(o))){if(!i){r=o;break}}else i=!1;return-1===r?n?"/":".":n&&1===r?"/":t.slice(0,r)},e.basename=function(t,e){var n=function(t){"string"!=typeof t&&(t+="");var e,n=0,r=-1,i=!0;for(e=t.length-1;e>=0;--e)if(47===t.charCodeAt(e)){if(!i){n=e+1;break}}else-1===r&&(i=!1,r=e+1);return-1===r?"":t.slice(n,r)}(t);return e&&n.substr(-1*e.length)===e&&(n=n.substr(0,n.length-e.length)),n},e.extname=function(t){"string"!=typeof t&&(t+="");for(var e=-1,n=0,r=-1,i=!0,o=0,u=t.length-1;u>=0;--u){var a=t.charCodeAt(u);if(47!==a)-1===r&&(i=!1,r=u+1),46===a?-1===e?e=u:1!==o&&(o=1):-1!==e&&(o=-1);else if(!i){n=u+1;break}}return-1===e||-1===r||0===o||1===o&&e===r-1&&e===n+1?"":t.slice(e,r)};var i="b"==="ab".substr(-1)?function(t,e,n){return t.substr(e,n)}:function(t,e,n){return e<0&&(e=t.length+e),t.substr(e,n)}}).call(this,n(64))},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r=o(n(106)),i=o(n(108));function o(t){return t&&t.__esModule?t:{default:t}}var u=function(t,e){var n=new i.default(t,e),o=new r.default(n);try{o.parse()}catch(t){throw t}return o.root};e.default=u,t.exports=e.default},function(t,e,n){"use strict";var r;e.__esModule=!0,e.default=void 0;var i=function(t){var e,n;function r(e){var n;return(n=t.call(this,e)||this).type="comment",n}return n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n,r}(((r=n(49))&&r.__esModule?r:{default:r}).default);e.default=i,t.exports=e.default},function(t,e,n){"use strict";var r;e.__esModule=!0,e.default=void 0;var i=function(t){var e,n;function r(e){var n;return(n=t.call(this,e)||this).type="atrule",n}n=t,(e=r).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var i=r.prototype;return i.append=function(){var e;this.nodes||(this.nodes=[]);for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(e=t.prototype.append).call.apply(e,[this].concat(r))},i.prepend=function(){var e;this.nodes||(this.nodes=[]);for(var n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(e=t.prototype.prepend).call.apply(e,[this].concat(r))},r}(((r=n(55))&&r.__esModule?r:{default:r}).default);e.default=i,t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r=o(n(48)),i=o(n(53));function o(t){return t&&t.__esModule?t:{default:t}}function u(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var a=function(t){var e,o;function a(){return t.apply(this,arguments)||this}o=t,(e=a).prototype=Object.create(o.prototype),e.prototype.constructor=e,e.__proto__=o;var s,c,f,l=a.prototype;return l.push=function(t){return t.parent=this,this.nodes.push(t),this},l.each=function(t){this.lastEach||(this.lastEach=0),this.indexes||(this.indexes={}),this.lastEach+=1;var e=this.lastEach;if(this.indexes[e]=0,this.nodes){for(var n,r;this.indexes[e]<this.nodes.length&&(n=this.indexes[e],!1!==(r=t(this.nodes[n],n)));)this.indexes[e]+=1;return delete this.indexes[e],r}},l.walk=function(t){return this.each((function(e,n){var r;try{r=t(e,n)}catch(t){if(t.postcssNode=e,t.stack&&e.source&&/\n\s{4}at /.test(t.stack)){var i=e.source;t.stack=t.stack.replace(/\n\s{4}at /,"$&"+i.input.from+":"+i.start.line+":"+i.start.column+"$&")}throw t}return!1!==r&&e.walk&&(r=e.walk(t)),r}))},l.walkDecls=function(t,e){return e?t instanceof RegExp?this.walk((function(n,r){if("decl"===n.type&&t.test(n.prop))return e(n,r)})):this.walk((function(n,r){if("decl"===n.type&&n.prop===t)return e(n,r)})):(e=t,this.walk((function(t,n){if("decl"===t.type)return e(t,n)})))},l.walkRules=function(t,e){return e?t instanceof RegExp?this.walk((function(n,r){if("rule"===n.type&&t.test(n.selector))return e(n,r)})):this.walk((function(n,r){if("rule"===n.type&&n.selector===t)return e(n,r)})):(e=t,this.walk((function(t,n){if("rule"===t.type)return e(t,n)})))},l.walkAtRules=function(t,e){return e?t instanceof RegExp?this.walk((function(n,r){if("atrule"===n.type&&t.test(n.name))return e(n,r)})):this.walk((function(n,r){if("atrule"===n.type&&n.name===t)return e(n,r)})):(e=t,this.walk((function(t,n){if("atrule"===t.type)return e(t,n)})))},l.walkComments=function(t){return this.walk((function(e,n){if("comment"===e.type)return t(e,n)}))},l.append=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];for(var r=0,i=e;r<i.length;r++){var o=i[r],u=this.normalize(o,this.last),a=u,s=Array.isArray(a),c=0;for(a=s?a:a[Symbol.iterator]();;){var f;if(s){if(c>=a.length)break;f=a[c++]}else{if((c=a.next()).done)break;f=c.value}var l=f;this.nodes.push(l)}}return this},l.prepend=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];var r=e=e.reverse(),i=Array.isArray(r),o=0;for(r=i?r:r[Symbol.iterator]();;){var u;if(i){if(o>=r.length)break;u=r[o++]}else{if((o=r.next()).done)break;u=o.value}var a=u,s=this.normalize(a,this.first,"prepend").reverse(),c=s,f=Array.isArray(c),l=0;for(c=f?c:c[Symbol.iterator]();;){var h;if(f){if(l>=c.length)break;h=c[l++]}else{if((l=c.next()).done)break;h=l.value}var p=h;this.nodes.unshift(p)}for(var d in this.indexes)this.indexes[d]=this.indexes[d]+s.length}return this},l.cleanRaws=function(e){if(t.prototype.cleanRaws.call(this,e),this.nodes){var n=this.nodes,r=Array.isArray(n),i=0;for(n=r?n:n[Symbol.iterator]();;){var o;if(r){if(i>=n.length)break;o=n[i++]}else{if((i=n.next()).done)break;o=i.value}o.cleanRaws(e)}}},l.insertBefore=function(t,e){var n,r=0===(t=this.index(t))&&"prepend",i=this.normalize(e,this.nodes[t],r).reverse(),o=i,u=Array.isArray(o),a=0;for(o=u?o:o[Symbol.iterator]();;){var s;if(u){if(a>=o.length)break;s=o[a++]}else{if((a=o.next()).done)break;s=a.value}var c=s;this.nodes.splice(t,0,c)}for(var f in this.indexes)t<=(n=this.indexes[f])&&(this.indexes[f]=n+i.length);return this},l.insertAfter=function(t,e){t=this.index(t);var n,r=this.normalize(e,this.nodes[t]).reverse(),i=r,o=Array.isArray(i),u=0;for(i=o?i:i[Symbol.iterator]();;){var a;if(o){if(u>=i.length)break;a=i[u++]}else{if((u=i.next()).done)break;a=u.value}var s=a;this.nodes.splice(t+1,0,s)}for(var c in this.indexes)t<(n=this.indexes[c])&&(this.indexes[c]=n+r.length);return this},l.removeChild=function(t){var e;for(var n in t=this.index(t),this.nodes[t].parent=void 0,this.nodes.splice(t,1),this.indexes)(e=this.indexes[n])>=t&&(this.indexes[n]=e-1);return this},l.removeAll=function(){var t=this.nodes,e=Array.isArray(t),n=0;for(t=e?t:t[Symbol.iterator]();;){var r;if(e){if(n>=t.length)break;r=t[n++]}else{if((n=t.next()).done)break;r=n.value}r.parent=void 0}return this.nodes=[],this},l.replaceValues=function(t,e,n){return n||(n=e,e={}),this.walkDecls((function(r){e.props&&-1===e.props.indexOf(r.prop)||e.fast&&-1===r.value.indexOf(e.fast)||(r.value=r.value.replace(t,n))})),this},l.every=function(t){return this.nodes.every(t)},l.some=function(t){return this.nodes.some(t)},l.index=function(t){return"number"==typeof t?t:this.nodes.indexOf(t)},l.normalize=function(t,e){var o=this;if("string"==typeof t)t=function t(e){return e.map((function(e){return e.nodes&&(e.nodes=t(e.nodes)),delete e.source,e}))}(n(52)(t).nodes);else if(Array.isArray(t)){var u=t=t.slice(0),a=Array.isArray(u),s=0;for(u=a?u:u[Symbol.iterator]();;){var c;if(a){if(s>=u.length)break;c=u[s++]}else{if((s=u.next()).done)break;c=s.value}var f=c;f.parent&&f.parent.removeChild(f,"ignore")}}else if("root"===t.type){var l=t=t.nodes.slice(0),h=Array.isArray(l),p=0;for(l=h?l:l[Symbol.iterator]();;){var d;if(h){if(p>=l.length)break;d=l[p++]}else{if((p=l.next()).done)break;d=p.value}var v=d;v.parent&&v.parent.removeChild(v,"ignore")}}else if(t.type)t=[t];else if(t.prop){if(void 0===t.value)throw new Error("Value field is missed in node creation");"string"!=typeof t.value&&(t.value=String(t.value)),t=[new r.default(t)]}else if(t.selector){t=[new(n(56))(t)]}else if(t.name){t=[new(n(54))(t)]}else{if(!t.text)throw new Error("Unknown node type in node creation");t=[new i.default(t)]}return t.map((function(t){return t.parent&&t.parent.removeChild(t),void 0===t.raws.before&&e&&void 0!==e.raws.before&&(t.raws.before=e.raws.before.replace(/[^\s]/g,"")),t.parent=o,t}))},s=a,(c=[{key:"first",get:function(){if(this.nodes)return this.nodes[0]}},{key:"last",get:function(){if(this.nodes)return this.nodes[this.nodes.length-1]}}])&&u(s.prototype,c),f&&u(s,f),a}(o(n(49)).default);e.default=a,t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r=o(n(55)),i=o(n(75));function o(t){return t&&t.__esModule?t:{default:t}}function u(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var a=function(t){var e,n,r,o,a;function s(e){var n;return(n=t.call(this,e)||this).type="rule",n.nodes||(n.nodes=[]),n}return n=t,(e=s).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n,r=s,(o=[{key:"selectors",get:function(){return i.default.comma(this.selector)},set:function(t){var e=this.selector?this.selector.match(/,\s*/):null,n=e?e[0]:","+this.raw("between","beforeOpen");this.selector=t.join(n)}}])&&u(r.prototype,o),a&&u(r,a),s}(r.default);e.default=a,t.exports=e.default},,,,,,,,function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function u(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:u}catch(t){r=u}}();var s,c=[],f=!1,l=-1;function h(){f&&s&&(f=!1,s.length?c=s.concat(c):l=-1,c.length&&p())}function p(){if(!f){var t=a(h);f=!0;for(var e=c.length;e;){for(s=c,c=[];++l<e;)s&&s[l].run();l=-1,e=c.length}s=null,f=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===u||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function v(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||f||a(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},,function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r=u(n(90)),i=u(n(91)),o=u(n(92));function u(t){return t&&t.__esModule?t:{default:t}}function a(t){var e="function"==typeof Map?new Map:void 0;return(a=function(t){if(null===t||(n=t,-1===Function.toString.call(n).indexOf("[native code]")))return t;var n;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==e){if(e.has(t))return e.get(t);e.set(t,r)}function r(){return c(t,arguments,l(this).constructor)}return r.prototype=Object.create(t.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),f(r,t)})(t)}function s(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Date.prototype.toString.call(Reflect.construct(Date,[],(function(){}))),!0}catch(t){return!1}}function c(t,e,n){return(c=s()?Reflect.construct:function(t,e,n){var r=[null];r.push.apply(r,e);var i=new(Function.bind.apply(t,r));return n&&f(i,n.prototype),i}).apply(null,arguments)}function f(t,e){return(f=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t})(t,e)}function l(t){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}var h=function(t){var e,n;function u(e,n,r,i,o,a){var s;return(s=t.call(this,e)||this).name="CssSyntaxError",s.reason=e,o&&(s.file=o),i&&(s.source=i),a&&(s.plugin=a),void 0!==n&&void 0!==r&&(s.line=n,s.column=r),s.setMessage(),Error.captureStackTrace&&Error.captureStackTrace(function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}(s),u),s}n=t,(e=u).prototype=Object.create(n.prototype),e.prototype.constructor=e,e.__proto__=n;var a=u.prototype;return a.setMessage=function(){this.message=this.plugin?this.plugin+": ":"",this.message+=this.file?this.file:"<css input>",void 0!==this.line&&(this.message+=":"+this.line+":"+this.column),this.message+=": "+this.reason},a.showSourceCode=function(t){var e=this;if(!this.source)return"";var n=this.source;o.default&&(void 0===t&&(t=r.default.stdout),t&&(n=(0,o.default)(n)));var u=n.split(/\r?\n/),a=Math.max(this.line-3,0),s=Math.min(this.line+2,u.length),c=String(s).length;function f(e){return t&&i.default.red?i.default.red.bold(e):e}function l(e){return t&&i.default.gray?i.default.gray(e):e}return u.slice(a,s).map((function(t,n){var r=a+1+n,i=" "+(" "+r).slice(-c)+" | ";if(r===e.line){var o=l(i.replace(/\d/g," "))+t.slice(0,e.column-1).replace(/[^\t]/g," ");return f(">")+l(i)+t+"\n "+o+f("^")}return" "+l(i)+t})).join("\n")},a.toString=function(){var t=this.showSourceCode();return t&&(t="\n\n"+t+"\n"),this.name+": "+this.message+t},u}(a(Error));e.default=h,t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r={colon:": ",indent:"    ",beforeDecl:"\n",beforeRule:"\n",beforeOpen:" ",beforeClose:"\n",beforeComment:"\n",after:"\n",emptyBody:"",commentLeft:" ",commentRight:" ",semicolon:!1};var i=function(){function t(t){this.builder=t}var e=t.prototype;return e.stringify=function(t,e){this[t.type](t,e)},e.root=function(t){this.body(t),t.raws.after&&this.builder(t.raws.after)},e.comment=function(t){var e=this.raw(t,"left","commentLeft"),n=this.raw(t,"right","commentRight");this.builder("/*"+e+t.text+n+"*/",t)},e.decl=function(t,e){var n=this.raw(t,"between","colon"),r=t.prop+n+this.rawValue(t,"value");t.important&&(r+=t.raws.important||" !important"),e&&(r+=";"),this.builder(r,t)},e.rule=function(t){this.block(t,this.rawValue(t,"selector")),t.raws.ownSemicolon&&this.builder(t.raws.ownSemicolon,t,"end")},e.atrule=function(t,e){var n="@"+t.name,r=t.params?this.rawValue(t,"params"):"";if(void 0!==t.raws.afterName?n+=t.raws.afterName:r&&(n+=" "),t.nodes)this.block(t,n+r);else{var i=(t.raws.between||"")+(e?";":"");this.builder(n+r+i,t)}},e.body=function(t){for(var e=t.nodes.length-1;e>0&&"comment"===t.nodes[e].type;)e-=1;for(var n=this.raw(t,"semicolon"),r=0;r<t.nodes.length;r++){var i=t.nodes[r],o=this.raw(i,"before");o&&this.builder(o),this.stringify(i,e!==r||n)}},e.block=function(t,e){var n,r=this.raw(t,"between","beforeOpen");this.builder(e+r+"{",t,"start"),t.nodes&&t.nodes.length?(this.body(t),n=this.raw(t,"after")):n=this.raw(t,"after","emptyBody"),n&&this.builder(n),this.builder("}",t,"end")},e.raw=function(t,e,n){var i;if(n||(n=e),e&&void 0!==(i=t.raws[e]))return i;var o=t.parent;if("before"===n&&(!o||"root"===o.type&&o.first===t))return"";if(!o)return r[n];var u=t.root();if(u.rawCache||(u.rawCache={}),void 0!==u.rawCache[n])return u.rawCache[n];if("before"===n||"after"===n)return this.beforeAfter(t,n);var a,s="raw"+((a=n)[0].toUpperCase()+a.slice(1));return this[s]?i=this[s](u,t):u.walk((function(t){if(void 0!==(i=t.raws[e]))return!1})),void 0===i&&(i=r[n]),u.rawCache[n]=i,i},e.rawSemicolon=function(t){var e;return t.walk((function(t){if(t.nodes&&t.nodes.length&&"decl"===t.last.type&&void 0!==(e=t.raws.semicolon))return!1})),e},e.rawEmptyBody=function(t){var e;return t.walk((function(t){if(t.nodes&&0===t.nodes.length&&void 0!==(e=t.raws.after))return!1})),e},e.rawIndent=function(t){return t.raws.indent?t.raws.indent:(t.walk((function(n){var r=n.parent;if(r&&r!==t&&r.parent&&r.parent===t&&void 0!==n.raws.before){var i=n.raws.before.split("\n");return e=(e=i[i.length-1]).replace(/[^\s]/g,""),!1}})),e);var e},e.rawBeforeComment=function(t,e){var n;return t.walkComments((function(t){if(void 0!==t.raws.before)return-1!==(n=t.raws.before).indexOf("\n")&&(n=n.replace(/[^\n]+$/,"")),!1})),void 0===n?n=this.raw(e,null,"beforeDecl"):n&&(n=n.replace(/[^\s]/g,"")),n},e.rawBeforeDecl=function(t,e){var n;return t.walkDecls((function(t){if(void 0!==t.raws.before)return-1!==(n=t.raws.before).indexOf("\n")&&(n=n.replace(/[^\n]+$/,"")),!1})),void 0===n?n=this.raw(e,null,"beforeRule"):n&&(n=n.replace(/[^\s]/g,"")),n},e.rawBeforeRule=function(t){var e;return t.walk((function(n){if(n.nodes&&(n.parent!==t||t.first!==n)&&void 0!==n.raws.before)return-1!==(e=n.raws.before).indexOf("\n")&&(e=e.replace(/[^\n]+$/,"")),!1})),e&&(e=e.replace(/[^\s]/g,"")),e},e.rawBeforeClose=function(t){var e;return t.walk((function(t){if(t.nodes&&t.nodes.length>0&&void 0!==t.raws.after)return-1!==(e=t.raws.after).indexOf("\n")&&(e=e.replace(/[^\n]+$/,"")),!1})),e&&(e=e.replace(/[^\s]/g,"")),e},e.rawBeforeOpen=function(t){var e;return t.walk((function(t){if("decl"!==t.type&&void 0!==(e=t.raws.between))return!1})),e},e.rawColon=function(t){var e;return t.walkDecls((function(t){if(void 0!==t.raws.between)return e=t.raws.between.replace(/[^\s:]/g,""),!1})),e},e.beforeAfter=function(t,e){var n;n="decl"===t.type?this.raw(t,null,"beforeDecl"):"comment"===t.type?this.raw(t,null,"beforeComment"):"before"===e?this.raw(t,null,"beforeRule"):this.raw(t,null,"beforeClose");for(var r=t.parent,i=0;r&&"root"!==r.type;)i+=1,r=r.parent;if(-1!==n.indexOf("\n")){var o=this.raw(t,null,"indent");if(o.length)for(var u=0;u<i;u++)n+=o}return n},e.rawValue=function(t,e){var n=t[e],r=t.raws[e];return r&&r.value===n?r.raw:n},t}();e.default=i,t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r,i=(r=n(69))&&r.__esModule?r:{default:r};var o=function(){function t(t){void 0===t&&(t=[]),this.version="7.0.32",this.plugins=this.normalize(t)}var e=t.prototype;return e.use=function(t){return this.plugins=this.plugins.concat(this.normalize([t])),this},e.process=function(t){function e(e){return t.apply(this,arguments)}return e.toString=function(){return t.toString()},e}((function(t,e){return void 0===e&&(e={}),0===this.plugins.length&&(e.parser,e.stringifier),new i.default(this,t,e)})),e.normalize=function(t){var e=[],n=t,r=Array.isArray(n),i=0;for(n=r?n:n[Symbol.iterator]();;){var o;if(r){if(i>=n.length)break;o=n[i++]}else{if((i=n.next()).done)break;o=i.value}var u=o;if(u.postcss&&(u=u.postcss),"object"==typeof u&&Array.isArray(u.plugins))e=e.concat(u.plugins);else if("function"==typeof u)e.push(u);else{if("object"!=typeof u||!u.parse&&!u.stringify)throw new Error(u+" is not a PostCSS plugin")}}return e},t}();e.default=o,t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r=a(n(93)),i=a(n(50)),o=(a(n(103)),a(n(104))),u=a(n(52));function a(t){return t&&t.__esModule?t:{default:t}}function s(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}function c(t){return"object"==typeof t&&"function"==typeof t.then}var f=function(){function t(e,n,r){var i;if(this.stringified=!1,this.processed=!1,"object"==typeof n&&null!==n&&"root"===n.type)i=n;else if(n instanceof t||n instanceof o.default)i=n.root,n.map&&(void 0===r.map&&(r.map={}),r.map.inline||(r.map.inline=!1),r.map.prev=n.map);else{var a=u.default;r.syntax&&(a=r.syntax.parse),r.parser&&(a=r.parser),a.parse&&(a=a.parse);try{i=a(n,r)}catch(t){this.error=t}}this.result=new o.default(e,i,r)}var e,n,a,f=t.prototype;return f.warnings=function(){return this.sync().warnings()},f.toString=function(){return this.css},f.then=function(t,e){return this.async().then(t,e)},f.catch=function(t){return this.async().catch(t)},f.finally=function(t){return this.async().then(t,t)},f.handleError=function(t,e){try{if(this.error=t,"CssSyntaxError"!==t.name||t.plugin){if(e.postcssVersion);}else t.plugin=e.postcssPlugin,t.setMessage()}catch(t){console&&console.error&&console.error(t)}},f.asyncTick=function(t,e){var n=this;if(this.plugin>=this.processor.plugins.length)return this.processed=!0,t();try{var r=this.processor.plugins[this.plugin],i=this.run(r);this.plugin+=1,c(i)?i.then((function(){n.asyncTick(t,e)})).catch((function(t){n.handleError(t,r),n.processed=!0,e(t)})):this.asyncTick(t,e)}catch(t){this.processed=!0,e(t)}},f.async=function(){var t=this;return this.processed?new Promise((function(e,n){t.error?n(t.error):e(t.stringify())})):(this.processing||(this.processing=new Promise((function(e,n){if(t.error)return n(t.error);t.plugin=0,t.asyncTick(e,n)})).then((function(){return t.processed=!0,t.stringify()}))),this.processing)},f.sync=function(){if(this.processed)return this.result;if(this.processed=!0,this.processing)throw new Error("Use process(css).then(cb) to work with async plugins");if(this.error)throw this.error;var t=this.result.processor.plugins,e=Array.isArray(t),n=0;for(t=e?t:t[Symbol.iterator]();;){var r;if(e){if(n>=t.length)break;r=t[n++]}else{if((n=t.next()).done)break;r=n.value}var i=r;if(c(this.run(i)))throw new Error("Use process(css).then(cb) to work with async plugins")}return this.result},f.run=function(t){this.result.lastPlugin=t;try{return t(this.result.root,this.result)}catch(e){throw this.handleError(e,t),e}},f.stringify=function(){if(this.stringified)return this.result;this.stringified=!0,this.sync();var t=this.result.opts,e=i.default;t.syntax&&(e=t.syntax.stringify),t.stringifier&&(e=t.stringifier),e.stringify&&(e=e.stringify);var n=new r.default(e,this.result.root,this.result.opts).generate();return this.result.css=n[0],this.result.map=n[1],this.result},e=t,(n=[{key:"processor",get:function(){return this.result.processor}},{key:"opts",get:function(){return this.result.opts}},{key:"css",get:function(){return this.stringify().css}},{key:"content",get:function(){return this.stringify().content}},{key:"map",get:function(){return this.stringify().map}},{key:"root",get:function(){return this.sync().root}},{key:"messages",get:function(){return this.sync().messages}}])&&s(e.prototype,n),a&&s(e,a),t}();e.default=f,t.exports=e.default},function(t,e,n){"use strict";(function(t){var r=n(94),i=n(95),o=n(96);function u(){return s.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(t,e){if(u()<e)throw new RangeError("Invalid typed array length");return s.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=s.prototype:(null===t&&(t=new s(e)),t.length=e),t}function s(t,e,n){if(!(s.TYPED_ARRAY_SUPPORT||this instanceof s))return new s(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return l(this,t)}return c(this,t,e,n)}function c(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);s.TYPED_ARRAY_SUPPORT?(t=e).__proto__=s.prototype:t=h(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!s.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|d(e,n),i=(t=a(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(s.isBuffer(e)){var n=0|p(e.length);return 0===(t=a(t,n)).length||e.copy(t,0,0,n),t}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?a(t,0):h(t,e);if("Buffer"===e.type&&o(e.data))return h(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function f(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function l(t,e){if(f(e),t=a(t,e<0?0:0|p(e)),!s.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function h(t,e){var n=e.length<0?0:0|p(e.length);t=a(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function p(t){if(t>=u())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+u().toString(16)+" bytes");return 0|t}function d(t,e){if(s.isBuffer(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return z(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return W(t).length;default:if(r)return z(t).length;e=(""+e).toLowerCase(),r=!0}}function v(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return E(this,e,n);case"utf8":case"utf-8":return k(this,e,n);case"ascii":return O(this,e,n);case"latin1":case"binary":return M(this,e,n);case"base64":return S(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return T(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}function g(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function m(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=s.from(e,r)),s.isBuffer(e))return 0===e.length?-1:y(t,e,n,r,i);if("number"==typeof e)return e&=255,s.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):y(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function y(t,e,n,r,i){var o,u=1,a=t.length,s=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;u=2,a/=2,s/=2,n/=2}function c(t,e){return 1===u?t[e]:t.readUInt16BE(e*u)}if(i){var f=-1;for(o=n;o<a;o++)if(c(t,o)===c(e,-1===f?0:o-f)){if(-1===f&&(f=o),o-f+1===s)return f*u}else-1!==f&&(o-=o-f),f=-1}else for(n+s>a&&(n=a-s),o=n;o>=0;o--){for(var l=!0,h=0;h<s;h++)if(c(t,o+h)!==c(e,h)){l=!1;break}if(l)return o}return-1}function w(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var u=0;u<r;++u){var a=parseInt(e.substr(2*u,2),16);if(isNaN(a))return u;t[n+u]=a}return u}function _(t,e,n,r){return F(z(e,t.length-n),t,n,r)}function b(t,e,n,r){return F(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function x(t,e,n,r){return b(t,e,n,r)}function A(t,e,n,r){return F(W(e),t,n,r)}function C(t,e,n,r){return F(function(t,e){for(var n,r,i,o=[],u=0;u<t.length&&!((e-=2)<0);++u)n=t.charCodeAt(u),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function S(t,e,n){return 0===e&&n===t.length?r.fromByteArray(t):r.fromByteArray(t.slice(e,n))}function k(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,u,a,s,c=t[i],f=null,l=c>239?4:c>223?3:c>191?2:1;if(i+l<=n)switch(l){case 1:c<128&&(f=c);break;case 2:128==(192&(o=t[i+1]))&&(s=(31&c)<<6|63&o)>127&&(f=s);break;case 3:o=t[i+1],u=t[i+2],128==(192&o)&&128==(192&u)&&(s=(15&c)<<12|(63&o)<<6|63&u)>2047&&(s<55296||s>57343)&&(f=s);break;case 4:o=t[i+1],u=t[i+2],a=t[i+3],128==(192&o)&&128==(192&u)&&128==(192&a)&&(s=(15&c)<<18|(63&o)<<12|(63&u)<<6|63&a)>65535&&s<1114112&&(f=s)}null===f?(f=65533,l=1):f>65535&&(f-=65536,r.push(f>>>10&1023|55296),f=56320|1023&f),r.push(f),i+=l}return function(t){var e=t.length;if(e<=4096)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=4096));return n}(r)}e.Buffer=s,e.SlowBuffer=function(t){+t!=t&&(t=0);return s.alloc(+t)},e.INSPECT_MAX_BYTES=50,s.TYPED_ARRAY_SUPPORT=void 0!==t.TYPED_ARRAY_SUPPORT?t.TYPED_ARRAY_SUPPORT:function(){try{var t=new Uint8Array(1);return t.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===t.foo()&&"function"==typeof t.subarray&&0===t.subarray(1,1).byteLength}catch(t){return!1}}(),e.kMaxLength=u(),s.poolSize=8192,s._augment=function(t){return t.__proto__=s.prototype,t},s.from=function(t,e,n){return c(null,t,e,n)},s.TYPED_ARRAY_SUPPORT&&(s.prototype.__proto__=Uint8Array.prototype,s.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&s[Symbol.species]===s&&Object.defineProperty(s,Symbol.species,{value:null,configurable:!0})),s.alloc=function(t,e,n){return function(t,e,n,r){return f(e),e<=0?a(t,e):void 0!==n?"string"==typeof r?a(t,e).fill(n,r):a(t,e).fill(n):a(t,e)}(null,t,e,n)},s.allocUnsafe=function(t){return l(null,t)},s.allocUnsafeSlow=function(t){return l(null,t)},s.isBuffer=function(t){return!(null==t||!t._isBuffer)},s.compare=function(t,e){if(!s.isBuffer(t)||!s.isBuffer(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},s.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},s.concat=function(t,e){if(!o(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return s.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=s.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var u=t[n];if(!s.isBuffer(u))throw new TypeError('"list" argument must be an Array of Buffers');u.copy(r,i),i+=u.length}return r},s.byteLength=d,s.prototype._isBuffer=!0,s.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)g(this,e,e+1);return this},s.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)g(this,e,e+3),g(this,e+1,e+2);return this},s.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)g(this,e,e+7),g(this,e+1,e+6),g(this,e+2,e+5),g(this,e+3,e+4);return this},s.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?k(this,0,t):v.apply(this,arguments)},s.prototype.equals=function(t){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===s.compare(this,t)},s.prototype.inspect=function(){var t="",n=e.INSPECT_MAX_BYTES;return this.length>0&&(t=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(t+=" ... ")),"<Buffer "+t+">"},s.prototype.compare=function(t,e,n,r,i){if(!s.isBuffer(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(this===t)return 0;for(var o=(i>>>=0)-(r>>>=0),u=(n>>>=0)-(e>>>=0),a=Math.min(o,u),c=this.slice(r,i),f=t.slice(e,n),l=0;l<a;++l)if(c[l]!==f[l]){o=c[l],u=f[l];break}return o<u?-1:u<o?1:0},s.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},s.prototype.indexOf=function(t,e,n){return m(this,t,e,n,!0)},s.prototype.lastIndexOf=function(t,e,n){return m(this,t,e,n,!1)},s.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return w(this,t,e,n);case"utf8":case"utf-8":return _(this,t,e,n);case"ascii":return b(this,t,e,n);case"latin1":case"binary":return x(this,t,e,n);case"base64":return A(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},s.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};function O(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function M(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function E(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=N(t[o]);return i}function T(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function R(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function P(t,e,n,r,i,o){if(!s.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function j(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function L(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function U(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function B(t,e,n,r,o){return o||U(t,0,n,4),i.write(t,e,n,r,23,4),n+4}function D(t,e,n,r,o){return o||U(t,0,n,8),i.write(t,e,n,r,52,8),n+8}s.prototype.slice=function(t,e){var n,r=this.length;if((t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),s.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=s.prototype;else{var i=e-t;n=new s(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},s.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||R(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},s.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||R(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},s.prototype.readUInt8=function(t,e){return e||R(t,1,this.length),this[t]},s.prototype.readUInt16LE=function(t,e){return e||R(t,2,this.length),this[t]|this[t+1]<<8},s.prototype.readUInt16BE=function(t,e){return e||R(t,2,this.length),this[t]<<8|this[t+1]},s.prototype.readUInt32LE=function(t,e){return e||R(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},s.prototype.readUInt32BE=function(t,e){return e||R(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},s.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||R(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},s.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||R(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},s.prototype.readInt8=function(t,e){return e||R(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},s.prototype.readInt16LE=function(t,e){e||R(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt16BE=function(t,e){e||R(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},s.prototype.readInt32LE=function(t,e){return e||R(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},s.prototype.readInt32BE=function(t,e){return e||R(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},s.prototype.readFloatLE=function(t,e){return e||R(t,4,this.length),i.read(this,t,!0,23,4)},s.prototype.readFloatBE=function(t,e){return e||R(t,4,this.length),i.read(this,t,!1,23,4)},s.prototype.readDoubleLE=function(t,e){return e||R(t,8,this.length),i.read(this,t,!0,52,8)},s.prototype.readDoubleBE=function(t,e){return e||R(t,8,this.length),i.read(this,t,!1,52,8)},s.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||P(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},s.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||P(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},s.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,1,255,0),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},s.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):j(this,t,e,!0),e+2},s.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,2,65535,0),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):j(this,t,e,!1),e+2},s.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):L(this,t,e,!0),e+4},s.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,4,4294967295,0),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},s.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);P(this,t,e,n,i-1,-i)}var o=0,u=1,a=0;for(this[e]=255&t;++o<n&&(u*=256);)t<0&&0===a&&0!==this[e+o-1]&&(a=1),this[e+o]=(t/u>>0)-a&255;return e+n},s.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);P(this,t,e,n,i-1,-i)}var o=n-1,u=1,a=0;for(this[e+o]=255&t;--o>=0&&(u*=256);)t<0&&0===a&&0!==this[e+o+1]&&(a=1),this[e+o]=(t/u>>0)-a&255;return e+n},s.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,1,127,-128),s.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},s.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):j(this,t,e,!0),e+2},s.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,2,32767,-32768),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):j(this,t,e,!1),e+2},s.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,4,2147483647,-2147483648),s.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):L(this,t,e,!0),e+4},s.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||P(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),s.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):L(this,t,e,!1),e+4},s.prototype.writeFloatLE=function(t,e,n){return B(this,t,e,!0,n)},s.prototype.writeFloatBE=function(t,e,n){return B(this,t,e,!1,n)},s.prototype.writeDoubleLE=function(t,e,n){return D(this,t,e,!0,n)},s.prototype.writeDoubleBE=function(t,e,n){return D(this,t,e,!1,n)},s.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!s.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},s.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!s.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var u=s.isBuffer(t)?t:z(new s(t,r).toString()),a=u.length;for(o=0;o<n-e;++o)this[o+e]=u[o%a]}return this};var I=/[^+\/0-9A-Za-z-_]/g;function N(t){return t<16?"0"+t.toString(16):t.toString(16)}function z(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],u=0;u<r;++u){if((n=t.charCodeAt(u))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(u+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function W(t){return r.toByteArray(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(I,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function F(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}}).call(this,n(39))},function(t,e,n){e.SourceMapGenerator=n(72).SourceMapGenerator,e.SourceMapConsumer=n(99).SourceMapConsumer,e.SourceNode=n(102).SourceNode},function(t,e,n){var r=n(73),i=n(37),o=n(74).ArraySet,u=n(98).MappingList;function a(t){t||(t={}),this._file=i.getArg(t,"file",null),this._sourceRoot=i.getArg(t,"sourceRoot",null),this._skipValidation=i.getArg(t,"skipValidation",!1),this._sources=new o,this._names=new o,this._mappings=new u,this._sourcesContents=null}a.prototype._version=3,a.fromSourceMap=function(t){var e=t.sourceRoot,n=new a({file:t.file,sourceRoot:e});return t.eachMapping((function(t){var r={generated:{line:t.generatedLine,column:t.generatedColumn}};null!=t.source&&(r.source=t.source,null!=e&&(r.source=i.relative(e,r.source)),r.original={line:t.originalLine,column:t.originalColumn},null!=t.name&&(r.name=t.name)),n.addMapping(r)})),t.sources.forEach((function(r){var o=r;null!==e&&(o=i.relative(e,r)),n._sources.has(o)||n._sources.add(o);var u=t.sourceContentFor(r);null!=u&&n.setSourceContent(r,u)})),n},a.prototype.addMapping=function(t){var e=i.getArg(t,"generated"),n=i.getArg(t,"original",null),r=i.getArg(t,"source",null),o=i.getArg(t,"name",null);this._skipValidation||this._validateMapping(e,n,r,o),null!=r&&(r=String(r),this._sources.has(r)||this._sources.add(r)),null!=o&&(o=String(o),this._names.has(o)||this._names.add(o)),this._mappings.add({generatedLine:e.line,generatedColumn:e.column,originalLine:null!=n&&n.line,originalColumn:null!=n&&n.column,source:r,name:o})},a.prototype.setSourceContent=function(t,e){var n=t;null!=this._sourceRoot&&(n=i.relative(this._sourceRoot,n)),null!=e?(this._sourcesContents||(this._sourcesContents=Object.create(null)),this._sourcesContents[i.toSetString(n)]=e):this._sourcesContents&&(delete this._sourcesContents[i.toSetString(n)],0===Object.keys(this._sourcesContents).length&&(this._sourcesContents=null))},a.prototype.applySourceMap=function(t,e,n){var r=e;if(null==e){if(null==t.file)throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');r=t.file}var u=this._sourceRoot;null!=u&&(r=i.relative(u,r));var a=new o,s=new o;this._mappings.unsortedForEach((function(e){if(e.source===r&&null!=e.originalLine){var o=t.originalPositionFor({line:e.originalLine,column:e.originalColumn});null!=o.source&&(e.source=o.source,null!=n&&(e.source=i.join(n,e.source)),null!=u&&(e.source=i.relative(u,e.source)),e.originalLine=o.line,e.originalColumn=o.column,null!=o.name&&(e.name=o.name))}var c=e.source;null==c||a.has(c)||a.add(c);var f=e.name;null==f||s.has(f)||s.add(f)}),this),this._sources=a,this._names=s,t.sources.forEach((function(e){var r=t.sourceContentFor(e);null!=r&&(null!=n&&(e=i.join(n,e)),null!=u&&(e=i.relative(u,e)),this.setSourceContent(e,r))}),this)},a.prototype._validateMapping=function(t,e,n,r){if(e&&"number"!=typeof e.line&&"number"!=typeof e.column)throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");if((!(t&&"line"in t&&"column"in t&&t.line>0&&t.column>=0)||e||n||r)&&!(t&&"line"in t&&"column"in t&&e&&"line"in e&&"column"in e&&t.line>0&&t.column>=0&&e.line>0&&e.column>=0&&n))throw new Error("Invalid mapping: "+JSON.stringify({generated:t,source:n,original:e,name:r}))},a.prototype._serializeMappings=function(){for(var t,e,n,o,u=0,a=1,s=0,c=0,f=0,l=0,h="",p=this._mappings.toArray(),d=0,v=p.length;d<v;d++){if(t="",(e=p[d]).generatedLine!==a)for(u=0;e.generatedLine!==a;)t+=";",a++;else if(d>0){if(!i.compareByGeneratedPositionsInflated(e,p[d-1]))continue;t+=","}t+=r.encode(e.generatedColumn-u),u=e.generatedColumn,null!=e.source&&(o=this._sources.indexOf(e.source),t+=r.encode(o-l),l=o,t+=r.encode(e.originalLine-1-c),c=e.originalLine-1,t+=r.encode(e.originalColumn-s),s=e.originalColumn,null!=e.name&&(n=this._names.indexOf(e.name),t+=r.encode(n-f),f=n)),h+=t}return h},a.prototype._generateSourcesContent=function(t,e){return t.map((function(t){if(!this._sourcesContents)return null;null!=e&&(t=i.relative(e,t));var n=i.toSetString(t);return Object.prototype.hasOwnProperty.call(this._sourcesContents,n)?this._sourcesContents[n]:null}),this)},a.prototype.toJSON=function(){var t={version:this._version,sources:this._sources.toArray(),names:this._names.toArray(),mappings:this._serializeMappings()};return null!=this._file&&(t.file=this._file),null!=this._sourceRoot&&(t.sourceRoot=this._sourceRoot),this._sourcesContents&&(t.sourcesContent=this._generateSourcesContent(t.sources,t.sourceRoot)),t},a.prototype.toString=function(){return JSON.stringify(this.toJSON())},e.SourceMapGenerator=a},function(t,e,n){var r=n(97);e.encode=function(t){var e,n="",i=function(t){return t<0?1+(-t<<1):0+(t<<1)}(t);do{e=31&i,(i>>>=5)>0&&(e|=32),n+=r.encode(e)}while(i>0);return n},e.decode=function(t,e,n){var i,o,u,a,s=t.length,c=0,f=0;do{if(e>=s)throw new Error("Expected more digits in base 64 VLQ value.");if(-1===(o=r.decode(t.charCodeAt(e++))))throw new Error("Invalid base64 digit: "+t.charAt(e-1));i=!!(32&o),c+=(o&=31)<<f,f+=5}while(i);n.value=(a=(u=c)>>1,1==(1&u)?-a:a),n.rest=e}},function(t,e,n){var r=n(37),i=Object.prototype.hasOwnProperty,o="undefined"!=typeof Map;function u(){this._array=[],this._set=o?new Map:Object.create(null)}u.fromArray=function(t,e){for(var n=new u,r=0,i=t.length;r<i;r++)n.add(t[r],e);return n},u.prototype.size=function(){return o?this._set.size:Object.getOwnPropertyNames(this._set).length},u.prototype.add=function(t,e){var n=o?t:r.toSetString(t),u=o?this.has(t):i.call(this._set,n),a=this._array.length;u&&!e||this._array.push(t),u||(o?this._set.set(t,a):this._set[n]=a)},u.prototype.has=function(t){if(o)return this._set.has(t);var e=r.toSetString(t);return i.call(this._set,e)},u.prototype.indexOf=function(t){if(o){var e=this._set.get(t);if(e>=0)return e}else{var n=r.toSetString(t);if(i.call(this._set,n))return this._set[n]}throw new Error('"'+t+'" is not in the set.')},u.prototype.at=function(t){if(t>=0&&t<this._array.length)return this._array[t];throw new Error("No element indexed by "+t)},u.prototype.toArray=function(){return this._array.slice()},e.ArraySet=u},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r={split:function(t,e,n){for(var r=[],i="",o=!1,u=0,a=!1,s=!1,c=0;c<t.length;c++){var f=t[c];a?s?s=!1:"\\"===f?s=!0:f===a&&(a=!1):'"'===f||"'"===f?a=f:"("===f?u+=1:")"===f?u>0&&(u-=1):0===u&&-1!==e.indexOf(f)&&(o=!0),o?(""!==i&&r.push(i.trim()),i="",o=!1):i+=f}return(n||""!==i)&&r.push(i.trim()),r},space:function(t){return r.split(t,[" ","\n","\t"])},comma:function(t){return r.split(t,[","],!0)}},i=r;e.default=i,t.exports=e.default},function(t,e,n){"use strict";var r;e.__esModule=!0,e.default=void 0;var i=function(t){var e,r;function i(e){var n;return(n=t.call(this,e)||this).type="root",n.nodes||(n.nodes=[]),n}r=t,(e=i).prototype=Object.create(r.prototype),e.prototype.constructor=e,e.__proto__=r;var o=i.prototype;return o.removeChild=function(e,n){var r=this.index(e);return!n&&0===r&&this.nodes.length>1&&(this.nodes[1].raws.before=this.nodes[r].raws.before),t.prototype.removeChild.call(this,e)},o.normalize=function(e,n,r){var i=t.prototype.normalize.call(this,e);if(n)if("prepend"===r)this.nodes.length>1?n.raws.before=this.nodes[1].raws.before:delete n.raws.before;else if(this.first!==n){var o=i,u=Array.isArray(o),a=0;for(o=u?o:o[Symbol.iterator]();;){var s;if(u){if(a>=o.length)break;s=o[a++]}else{if((a=o.next()).done)break;s=a.value}s.raws.before=n.raws.before}}return i},o.toResult=function(t){return void 0===t&&(t={}),new(n(69))(new(n(68)),this,t).stringify()},i}(((r=n(55))&&r.__esModule?r:{default:r}).default);e.default=i,t.exports=e.default},,,,,function(t,e,n){"use strict";n.d(e,"a",(function(){return i}));function r(t){return t.getTime()%6e4}function i(t){var e=new Date(t.getTime()),n=Math.ceil(e.getTimezoneOffset());return e.setSeconds(0,0),6e4*n+(n>0?(6e4+r(e))%6e4:r(e))}},,,,,function(t,e,n){"use strict";var r={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function i(t){return function(e){var n=e||{},r=n.width?String(n.width):t.defaultWidth;return t.formats[r]||t.formats[t.defaultWidth]}}var o={date:i({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:i({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:i({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},u={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function a(t){return function(e,n){var r,i=n||{};if("formatting"===(i.context?String(i.context):"standalone")&&t.formattingValues){var o=t.defaultFormattingWidth||t.defaultWidth,u=i.width?String(i.width):o;r=t.formattingValues[u]||t.formattingValues[o]}else{var a=t.defaultWidth,s=i.width?String(i.width):t.defaultWidth;r=t.values[s]||t.values[a]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function s(t){return function(e,n){var r=String(e),i=n||{},o=i.width,u=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],a=r.match(u);if(!a)return null;var s,c=a[0],f=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth];return s="[object Array]"===Object.prototype.toString.call(f)?function(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}(f,(function(t){return t.test(c)})):function(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}(f,(function(t){return t.test(c)})),s=t.valueCallback?t.valueCallback(s):s,{value:s=i.valueCallback?i.valueCallback(s):s,rest:r.slice(c.length)}}}var c,f={code:"en-US",formatDistance:function(t,e,n){var i;return n=n||{},i="string"==typeof r[t]?r[t]:1===e?r[t].one:r[t].other.replace("{{count}}",e),n.addSuffix?n.comparison>0?"in "+i:i+" ago":i},formatLong:o,formatRelative:function(t,e,n,r){return u[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:a({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:a({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return Number(t)-1}}),month:a({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:a({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:a({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(c={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t,e){var n=String(t),r=e||{},i=n.match(c.matchPattern);if(!i)return null;var o=i[0],u=n.match(c.parsePattern);if(!u)return null;var a=c.valueCallback?c.valueCallback(u[0]):u[0];return{value:a=r.valueCallback?r.valueCallback(a):a,rest:n.slice(o.length)}}),era:s({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:s({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:s({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:s({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:s({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};e.a=f},function(t,e,n){"use strict";n.r(e),n.d(e,"getGoogleDriveSyncEnabled",(function(){return s})),n.d(e,"setGoogleDriveSyncEnabled",(function(){return a})),n.d(e,"getGoogleDriveSyncMetadata",(function(){return o})),n.d(e,"setGoogleDriveSyncMetadata",(function(){return u})),n.d(e,"runGoogleDriveSync",(function(){return Y}));var r=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,a)}s((r=r.apply(t,e||[])).next())}))},i=function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=u.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},o=function(){return new Promise((function(t){chrome.storage.local.get("google-drive-sync",(function(e){return r(void 0,void 0,void 0,(function(){return i(this,(function(n){return t(e["google-drive-sync"]),[2]}))}))}))}))},u=function(t){return new Promise((function(e){chrome.storage.local.set({"google-drive-sync":t},(function(){e()}))}))},a=function(t){chrome.storage.local.set({"google-drive-sync-enabled":t})},s=function(){return new Promise((function(t){chrome.storage.local.get("google-drive-sync-enabled",(function(e){t(e["google-drive-sync-enabled"]||!1)}))}))},c=n(88),f=n(34),l=n(112),h=function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return u},p=function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(h(arguments[e]));return t},d=function(t,e){var n={},r=Object.keys(t);return r.forEach((function(r){var i,o;e[r]&&(i=e[r].modifiedTime,o=t[r].modifiedTime,Object(c.a)(new Date(i),new Date(o))>0)&&(n[r]=e[r]),n[r]=t[r]})),l.without.apply(void 0,p([Object.keys(e)],r)).forEach((function(t){n[t]=e[t]})),n},v=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,a)}s((r=r.apply(t,e||[])).next())}))},g=function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=u.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},m="662998053209-s49tq55ic3td87m08gi8vpjqm5t7r9st.apps.googleusercontent.com",y=function(t){return v(void 0,void 0,Promise,(function(){var e,n,r,i;return g(this,(function(o){switch(o.label){case 0:if(!t)throw"Authorization failure";if(u=t.match(/[#?](.*)/),!(e=!u||u.length<1?null:new URLSearchParams(u[1].split("#")[0]).get("access_token")))throw"Authorization failure";return"https://www.googleapis.com/oauth2/v3/tokeninfo",n=new Request("https://www.googleapis.com/oauth2/v3/tokeninfo?access_token="+e,{method:"GET"}),r=function(t){return new Promise((function(n,r){200==t.status?t.json().then((function(t){t.aud&&t.aud===m?n(e):r("Token validation error")})):r("Token validation error")}))},[4,fetch(n)];case 1:return i=o.sent(),[2,r(i)]}var u}))}))},w=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,a)}s((r=r.apply(t,e||[])).next())}))},_=function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=u.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},b=["id","webViewLink","modifiedTime","webContentLink"].join(","),x=function(t){return new Headers({Authorization:"Bearer "+t})},A=function(t,e){return w(void 0,void 0,Promise,(function(){return _(this,(function(n){switch(n.label){case 0:return[4,fetch("https://www.googleapis.com/drive/v3/files/"+t+"?fields="+b,{method:"GET",headers:x(e)})];case 1:return[4,n.sent().json()];case 2:return[2,n.sent()]}}))}))},C=function(t){return w(void 0,void 0,Promise,(function(){var e,n;return _(this,(function(r){switch(r.label){case 0:return e=new FormData,n={name:"stylebot",mimeType:"application/vnd.google-apps.folder"},e.append("metadata",new Blob([JSON.stringify(n)],{type:"application/json"})),[4,fetch("https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields="+b,{method:"POST",headers:x(t),body:e})];case 1:return[4,r.sent().json()];case 2:return[2,r.sent().id]}}))}))},S=function(t,e,n){return w(void 0,void 0,Promise,(function(){var r,i,o;return _(this,(function(u){switch(u.label){case 0:return r=new FormData,i={name:"stylebot_v3_backup.json",parents:[n],mimeType:"application/json",modifiedTime:Object(f.a)()},o=new Blob([JSON.stringify(i)],{type:"application/json"}),r.append("metadata",o),r.append("file",e),[4,fetch("https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart&fields="+b,{method:"POST",headers:x(t),body:r})];case 1:return[4,u.sent().json()];case 2:return[2,u.sent()]}}))}))},k=function(t,e,n){return w(void 0,void 0,Promise,(function(){var r,i,o;return _(this,(function(u){switch(u.label){case 0:return r=new FormData,i={modifiedTime:Object(f.a)()},o=new Blob([JSON.stringify(i)],{type:"application/json"}),r.append("metadata",o),r.append("file",n),[4,fetch("https://www.googleapis.com/upload/drive/v3/files/"+t+"?uploadType=multipart&fields="+b,{method:"PATCH",headers:x(e),body:r})];case 1:return[4,u.sent().json()];case 2:return[2,u.sent()]}}))}))},O=function(t){return w(void 0,void 0,Promise,(function(){var e,n,r;return _(this,(function(i){switch(i.label){case 0:return"name = 'stylebot_v3_backup.json'",e="https://www.googleapis.com/drive/v3/files?q="+encodeURIComponent("name = 'stylebot_v3_backup.json'"),[4,fetch(e,{method:"GET",headers:x(t)})];case 1:return[4,i.sent().json()];case 2:return(n=i.sent().files)&&0!==n.length?[4,A(n[0].id,t)]:[2,null];case 3:return(r=i.sent())?[2,r]:[2,null]}}))}))},M=function(t,e){return w(void 0,void 0,Promise,(function(){return _(this,(function(n){switch(n.label){case 0:return[4,fetch("https://www.googleapis.com/drive/v3/files/"+e+"?alt=media",{method:"GET",headers:x(t)})];case 1:return[4,n.sent().json()];case 2:return[2,n.sent()]}}))}))},E=function(t,e,n){return w(void 0,void 0,Promise,(function(){var r,i;return _(this,(function(o){switch(o.label){case 0:return n?[4,k(n,t,e)]:[3,2];case 1:return r=o.sent(),[3,5];case 2:return[4,C(t)];case 3:return i=o.sent(),[4,S(t,e,i)];case 4:r=o.sent(),o.label=5;case 5:return[2,r]}}))}))},T=(n(14),n(25),function(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),u=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return u}),R=function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(T(arguments[e]));return t},P=(function(){function t(){}t.isWildcard=function(t){return t.indexOf("*")>=0},t.isRegex=function(t){return 0==t.indexOf("^")},t.isValidHTML=function(t){var e=t.split(".").pop();return!e||-1===["json","pdf","xml"].indexOf(e)},t.matchesUrl=function(t,e){var n;try{e=e.trim();var r=null,i=e.match(/^(\w+:)\/\/(.+)$/);i&&(r=(n=T(i.slice(1),2))[0],e=n[1]);var o=new URL(t),u=new URL((null!=r?r:"http:")+"//"+e),a=u.pathname.length>1;return(!r&&!a?("."+o.hostname).endsWith("."+u.hostname):o.host===u.host)&&(!a||(o.pathname+"/").endsWith(u.pathname+"/"))&&(!r||o.protocol===u.protocol)&&["username","password","port","hash"].every((function(t){return!u[t]||o[t]===u[t]}))&&R(u.searchParams).every((function(t){var e=T(t,2),n=e[0],r=e[1];return o.searchParams.get(n)===r}))}catch(t){return!1}},t.matchesUrlCollection=function(t,e){var n=this;return e.split(",").some((function(e){return n.matchesUrl(t,e)}))},t.matchesWildcard=function(t,e){try{var n=~e.indexOf(",");return e=e.replace(/ /g,"").replace(/(\.|\?|\||\(|\)|\[|\]|\+|\$|\^|\\|\{|\})/g,"\\$1").replace(/,/g,"|").replace(/\*\*/g,".*").replace(/(^|\\\.|[^\.])\*/g,"$1[^/]*"),e=n?"("+e+")":e,new RegExp(e,"i").test(t)}catch(t){return console.log("Error occured while running stylebot pattern check",t),!1}},t.matchesRegex=function(t,e){return new RegExp(e).test(t)},t.matches=function(t,e){return this.isRegex(e)?this.matchesRegex(t,e):this.isWildcard(e)?this.matchesWildcard(t,e):this.matchesUrlCollection(t,e)},t.isValidUrl=function(t){if(-1!==t.indexOf("chrome://"))return!1;if(!this.isValidHTML(t))return!1;for(var e=["https://chrome.google.com/webstore","chrome-extension://"],n=0;n<e.length;n++)if(-1!==t.indexOf(e[n]))return!1;return!0}}(),function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,a)}s((r=r.apply(t,e||[])).next())}))}),j=function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=u.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},L=function(){return new Promise((function(t){chrome.storage.local.get("styles",(function(e){e.styles?t(e.styles):t({})}))}))},U=function(t){return P(void 0,void 0,Promise,(function(){return j(this,(function(e){return chrome.storage.local.set({styles:t,"styles-metadata":{modifiedTime:Object(f.a)()}}),[2]}))}))},B=function(){return(B=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},D=function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function u(t){try{s(r.next(t))}catch(t){o(t)}}function a(t){try{s(r.throw(t))}catch(t){o(t)}}function s(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(u,a)}s((r=r.apply(t,e||[])).next())}))},I=function(t,e){var n,r,i,o,u={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;u;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return u.label++,{value:o[1],done:!1};case 5:u.label++,r=o[1],o=[0];continue;case 7:o=u.ops.pop(),u.trys.pop();continue;default:if(!(i=u.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){u=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){u.label=o[1];break}if(6===o[0]&&u.label<i[1]){u.label=i[1],i=o;break}if(i&&u.label<i[2]){u.label=i[2],u.ops.push(o);break}i[2]&&u.ops.pop(),u.trys.pop();continue}o=e.call(t,u)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}},N=function(t){return new Blob([JSON.stringify(t)],{type:"application/json"})},z=function(t,e,n){return D(void 0,void 0,void 0,(function(){var r,i;return I(this,(function(o){switch(o.label){case 0:return r=N(n),[4,E(t,r,e.id)];case 1:return i=o.sent(),[2,u(i)]}}))}))},W=function(t,e){return D(void 0,void 0,void 0,(function(){return I(this,(function(n){switch(n.label){case 0:return[4,U(e)];case 1:return n.sent(),[2,u(B(B({},t),{modifiedTime:Object(f.a)()}))]}}))}))},F=function(t,e){return D(void 0,void 0,void 0,(function(){var n,r,i;return I(this,(function(o){switch(o.label){case 0:return[4,L()];case 1:return n=o.sent(),[4,M(t,e.id)];case 2:return r=o.sent(),i=d(n,r),[4,W(e,i)];case 3:return o.sent(),[4,z(t,e,i)];case 4:return o.sent(),[2]}}))}))},Y=function(){return D(void 0,void 0,Promise,(function(){var t,e,n,a,s,l,h,p,d,w,_;return I(this,(function(b){switch(b.label){case 0:return[4,L()];case 1:return t=b.sent(),[4,v(void 0,void 0,Promise,(function(){var t;return g(this,(function(e){switch(e.label){case 0:return[4,new Promise((function(t){console.debug("Extension redirectURL:",chrome.identity.getRedirectURL());var e=chrome.identity.getRedirectURL(),n="https://accounts.google.com/o/oauth2/auth";return n+="?client_id="+m,n+="&response_type=token",n+="&redirect_uri="+encodeURIComponent(e),n+="&scope="+encodeURIComponent(["https://www.googleapis.com/auth/drive.file"].join(" ")),chrome.identity.launchWebAuthFlow({interactive:!0,url:n},(function(e){return t(e)}))}))];case 1:return t=e.sent(),[2,y(t)]}}))}))];case 2:return e=b.sent(),[4,O(e)];case 3:return n=b.sent(),console.debug("syncing with google drive..."),n?[3,5]:(console.debug("did not find remote sync file, updating remote..."),a=N(t),[4,E(e,a)]);case 4:return s=b.sent(),[2,u(s)];case 5:return[4,o()];case 6:return(l=b.sent())?[4,new Promise((function(t){chrome.storage.local.get("styles-metadata",(function(e){return r(void 0,void 0,void 0,(function(){return i(this,(function(n){return t(e["styles-metadata"]),[2]}))}))}))}))]:(console.debug("no local sync metadata found. merging local and remote..."),[2,F(e,n)]);case 7:return h=b.sent(),p=new Date(l.modifiedTime),d=new Date(n.modifiedTime),w=new Date(h.modifiedTime),console.debug("sync info",{localSyncTime:p,remoteSyncTime:d,localStylesModifiedTime:w}),Object(c.a)(d,p)>0?Object(c.a)(w,d)>0?(console.debug("both local and remote were updated since last sync, merging local and remote..."),[2,F(e,n)]):(console.debug("remote was updated since last sync, updating local..."),[4,M(e,n.id)]):[3,9];case 8:return _=b.sent(),[2,W(n,_)];case 9:return Object(c.a)(w,d)>0?(console.debug("local was updated since last sync, updating remote..."),[2,z(e,n,t)]):[2,u(B(B({},n),{modifiedTime:Object(f.a)()}))]}}))}))}},function(t,e,n){"use strict";n.d(e,"a",(function(){return o}));var r=n(17),i=n(15);function o(t,e){Object(i.a)(2,arguments);var n=Object(r.a)(t),o=Object(r.a)(e),u=n.getTime()-o.getTime();return u<0?-1:u>0?1:u}},,function(t,e){},function(t,e){},function(t,e){},function(t,e,n){"use strict";(function(r){e.__esModule=!0,e.default=void 0;var i=u(n(71)),o=u(n(51));function u(t){return t&&t.__esModule?t:{default:t}}var a=function(){function t(t,e,n){this.stringify=t,this.mapOpts=n.map||{},this.root=e,this.opts=n}var e=t.prototype;return e.isMap=function(){return void 0!==this.opts.map?!!this.opts.map:this.previous().length>0},e.previous=function(){var t=this;return this.previousMaps||(this.previousMaps=[],this.root.walk((function(e){if(e.source&&e.source.input.map){var n=e.source.input.map;-1===t.previousMaps.indexOf(n)&&t.previousMaps.push(n)}}))),this.previousMaps},e.isInline=function(){if(void 0!==this.mapOpts.inline)return this.mapOpts.inline;var t=this.mapOpts.annotation;return(void 0===t||!0===t)&&(!this.previous().length||this.previous().some((function(t){return t.inline})))},e.isSourcesContent=function(){return void 0!==this.mapOpts.sourcesContent?this.mapOpts.sourcesContent:!this.previous().length||this.previous().some((function(t){return t.withContent()}))},e.clearAnnotation=function(){if(!1!==this.mapOpts.annotation)for(var t,e=this.root.nodes.length-1;e>=0;e--)"comment"===(t=this.root.nodes[e]).type&&0===t.text.indexOf("# sourceMappingURL=")&&this.root.removeChild(e)},e.setSourcesContent=function(){var t=this,e={};this.root.walk((function(n){if(n.source){var r=n.source.input.from;if(r&&!e[r]){e[r]=!0;var i=t.relative(r);t.map.setSourceContent(i,n.source.input.css)}}}))},e.applyPrevMaps=function(){var t=this.previous(),e=Array.isArray(t),n=0;for(t=e?t:t[Symbol.iterator]();;){var r;if(e){if(n>=t.length)break;r=t[n++]}else{if((n=t.next()).done)break;r=n.value}var u=r,a=this.relative(u.file),s=u.root||o.default.dirname(u.file),c=void 0;!1===this.mapOpts.sourcesContent?(c=new i.default.SourceMapConsumer(u.text)).sourcesContent&&(c.sourcesContent=c.sourcesContent.map((function(){return null}))):c=u.consumer(),this.map.applySourceMap(c,a,this.relative(s))}},e.isAnnotation=function(){return!!this.isInline()||(void 0!==this.mapOpts.annotation?this.mapOpts.annotation:!this.previous().length||this.previous().some((function(t){return t.annotation})))},e.toBase64=function(t){return r?r.from(t).toString("base64"):window.btoa(unescape(encodeURIComponent(t)))},e.addAnnotation=function(){var t;t=this.isInline()?"data:application/json;base64,"+this.toBase64(this.map.toString()):"string"==typeof this.mapOpts.annotation?this.mapOpts.annotation:this.outputFile()+".map";var e="\n";-1!==this.css.indexOf("\r\n")&&(e="\r\n"),this.css+=e+"/*# sourceMappingURL="+t+" */"},e.outputFile=function(){return this.opts.to?this.relative(this.opts.to):this.opts.from?this.relative(this.opts.from):"to.css"},e.generateMap=function(){return this.generateString(),this.isSourcesContent()&&this.setSourcesContent(),this.previous().length>0&&this.applyPrevMaps(),this.isAnnotation()&&this.addAnnotation(),this.isInline()?[this.css]:[this.css,this.map]},e.relative=function(t){if(0===t.indexOf("<"))return t;if(/^\w+:\/\//.test(t))return t;var e=this.opts.to?o.default.dirname(this.opts.to):".";return"string"==typeof this.mapOpts.annotation&&(e=o.default.dirname(o.default.resolve(e,this.mapOpts.annotation))),t=o.default.relative(e,t),"\\"===o.default.sep?t.replace(/\\/g,"/"):t},e.sourcePath=function(t){return this.mapOpts.from?this.mapOpts.from:this.relative(t.source.input.from)},e.generateString=function(){var t=this;this.css="",this.map=new i.default.SourceMapGenerator({file:this.outputFile()});var e,n,r=1,o=1;this.stringify(this.root,(function(i,u,a){if(t.css+=i,u&&"end"!==a&&(u.source&&u.source.start?t.map.addMapping({source:t.sourcePath(u),generated:{line:r,column:o-1},original:{line:u.source.start.line,column:u.source.start.column-1}}):t.map.addMapping({source:"<no source>",original:{line:1,column:0},generated:{line:r,column:o-1}})),(e=i.match(/\n/g))?(r+=e.length,n=i.lastIndexOf("\n"),o=i.length-n):o+=i.length,u&&"start"!==a){var s=u.parent||{raws:{}};("decl"!==u.type||u!==s.last||s.raws.semicolon)&&(u.source&&u.source.end?t.map.addMapping({source:t.sourcePath(u),generated:{line:r,column:o-2},original:{line:u.source.end.line,column:u.source.end.column-1}}):t.map.addMapping({source:"<no source>",original:{line:1,column:0},generated:{line:r,column:o-1}}))}}))},e.generate=function(){if(this.clearAnnotation(),this.isMap())return this.generateMap();var t="";return this.stringify(this.root,(function(e){t+=e})),[t]},t}();e.default=a,t.exports=e.default}).call(this,n(70).Buffer)},function(t,e,n){"use strict";e.byteLength=function(t){var e=c(t),n=e[0],r=e[1];return 3*(n+r)/4-r},e.toByteArray=function(t){var e,n,r=c(t),u=r[0],a=r[1],s=new o(function(t,e,n){return 3*(e+n)/4-n}(0,u,a)),f=0,l=a>0?u-4:u;for(n=0;n<l;n+=4)e=i[t.charCodeAt(n)]<<18|i[t.charCodeAt(n+1)]<<12|i[t.charCodeAt(n+2)]<<6|i[t.charCodeAt(n+3)],s[f++]=e>>16&255,s[f++]=e>>8&255,s[f++]=255&e;2===a&&(e=i[t.charCodeAt(n)]<<2|i[t.charCodeAt(n+1)]>>4,s[f++]=255&e);1===a&&(e=i[t.charCodeAt(n)]<<10|i[t.charCodeAt(n+1)]<<4|i[t.charCodeAt(n+2)]>>2,s[f++]=e>>8&255,s[f++]=255&e);return s},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],u=0,a=n-i;u<a;u+=16383)o.push(f(t,u,u+16383>a?a:u+16383));1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"="));return o.join("")};for(var r=[],i=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,s=u.length;a<s;++a)r[a]=u[a],i[u.charCodeAt(a)]=a;function c(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=t.indexOf("=");return-1===n&&(n=e),[n,n===e?0:4-n%4]}function f(t,e,n){for(var i,o,u=[],a=e;a<n;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),u.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return u.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},function(t,e){e.read=function(t,e,n,r,i){var o,u,a=8*i-r-1,s=(1<<a)-1,c=s>>1,f=-7,l=n?i-1:0,h=n?-1:1,p=t[e+l];for(l+=h,o=p&(1<<-f)-1,p>>=-f,f+=a;f>0;o=256*o+t[e+l],l+=h,f-=8);for(u=o&(1<<-f)-1,o>>=-f,f+=r;f>0;u=256*u+t[e+l],l+=h,f-=8);if(0===o)o=1-c;else{if(o===s)return u?NaN:1/0*(p?-1:1);u+=Math.pow(2,r),o-=c}return(p?-1:1)*u*Math.pow(2,o-r)},e.write=function(t,e,n,r,i,o){var u,a,s,c=8*o-i-1,f=(1<<c)-1,l=f>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,p=r?0:o-1,d=r?1:-1,v=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,u=f):(u=Math.floor(Math.log(e)/Math.LN2),e*(s=Math.pow(2,-u))<1&&(u--,s*=2),(e+=u+l>=1?h/s:h*Math.pow(2,1-l))*s>=2&&(u++,s/=2),u+l>=f?(a=0,u=f):u+l>=1?(a=(e*s-1)*Math.pow(2,i),u+=l):(a=e*Math.pow(2,l-1)*Math.pow(2,i),u=0));i>=8;t[n+p]=255&a,p+=d,a/=256,i-=8);for(u=u<<i|a,c+=i;c>0;t[n+p]=255&u,p+=d,u/=256,c-=8);t[n+p-d]|=128*v}},function(t,e){var n={}.toString;t.exports=Array.isArray||function(t){return"[object Array]"==n.call(t)}},function(t,e){var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");e.encode=function(t){if(0<=t&&t<n.length)return n[t];throw new TypeError("Must be between 0 and 63: "+t)},e.decode=function(t){return 65<=t&&t<=90?t-65:97<=t&&t<=122?t-97+26:48<=t&&t<=57?t-48+52:43==t?62:47==t?63:-1}},function(t,e,n){var r=n(37);function i(){this._array=[],this._sorted=!0,this._last={generatedLine:-1,generatedColumn:0}}i.prototype.unsortedForEach=function(t,e){this._array.forEach(t,e)},i.prototype.add=function(t){var e,n,i,o,u,a;e=this._last,n=t,i=e.generatedLine,o=n.generatedLine,u=e.generatedColumn,a=n.generatedColumn,o>i||o==i&&a>=u||r.compareByGeneratedPositionsInflated(e,n)<=0?(this._last=t,this._array.push(t)):(this._sorted=!1,this._array.push(t))},i.prototype.toArray=function(){return this._sorted||(this._array.sort(r.compareByGeneratedPositionsInflated),this._sorted=!0),this._array},e.MappingList=i},function(t,e,n){var r=n(37),i=n(100),o=n(74).ArraySet,u=n(73),a=n(101).quickSort;function s(t,e){var n=t;return"string"==typeof t&&(n=r.parseSourceMapInput(t)),null!=n.sections?new l(n,e):new c(n,e)}function c(t,e){var n=t;"string"==typeof t&&(n=r.parseSourceMapInput(t));var i=r.getArg(n,"version"),u=r.getArg(n,"sources"),a=r.getArg(n,"names",[]),s=r.getArg(n,"sourceRoot",null),c=r.getArg(n,"sourcesContent",null),f=r.getArg(n,"mappings"),l=r.getArg(n,"file",null);if(i!=this._version)throw new Error("Unsupported version: "+i);s&&(s=r.normalize(s)),u=u.map(String).map(r.normalize).map((function(t){return s&&r.isAbsolute(s)&&r.isAbsolute(t)?r.relative(s,t):t})),this._names=o.fromArray(a.map(String),!0),this._sources=o.fromArray(u,!0),this._absoluteSources=this._sources.toArray().map((function(t){return r.computeSourceURL(s,t,e)})),this.sourceRoot=s,this.sourcesContent=c,this._mappings=f,this._sourceMapURL=e,this.file=l}function f(){this.generatedLine=0,this.generatedColumn=0,this.source=null,this.originalLine=null,this.originalColumn=null,this.name=null}function l(t,e){var n=t;"string"==typeof t&&(n=r.parseSourceMapInput(t));var i=r.getArg(n,"version"),u=r.getArg(n,"sections");if(i!=this._version)throw new Error("Unsupported version: "+i);this._sources=new o,this._names=new o;var a={line:-1,column:0};this._sections=u.map((function(t){if(t.url)throw new Error("Support for url field in sections not implemented.");var n=r.getArg(t,"offset"),i=r.getArg(n,"line"),o=r.getArg(n,"column");if(i<a.line||i===a.line&&o<a.column)throw new Error("Section offsets must be ordered and non-overlapping.");return a=n,{generatedOffset:{generatedLine:i+1,generatedColumn:o+1},consumer:new s(r.getArg(t,"map"),e)}}))}s.fromSourceMap=function(t,e){return c.fromSourceMap(t,e)},s.prototype._version=3,s.prototype.__generatedMappings=null,Object.defineProperty(s.prototype,"_generatedMappings",{configurable:!0,enumerable:!0,get:function(){return this.__generatedMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__generatedMappings}}),s.prototype.__originalMappings=null,Object.defineProperty(s.prototype,"_originalMappings",{configurable:!0,enumerable:!0,get:function(){return this.__originalMappings||this._parseMappings(this._mappings,this.sourceRoot),this.__originalMappings}}),s.prototype._charIsMappingSeparator=function(t,e){var n=t.charAt(e);return";"===n||","===n},s.prototype._parseMappings=function(t,e){throw new Error("Subclasses must implement _parseMappings")},s.GENERATED_ORDER=1,s.ORIGINAL_ORDER=2,s.GREATEST_LOWER_BOUND=1,s.LEAST_UPPER_BOUND=2,s.prototype.eachMapping=function(t,e,n){var i,o=e||null;switch(n||s.GENERATED_ORDER){case s.GENERATED_ORDER:i=this._generatedMappings;break;case s.ORIGINAL_ORDER:i=this._originalMappings;break;default:throw new Error("Unknown order of iteration.")}var u=this.sourceRoot;i.map((function(t){var e=null===t.source?null:this._sources.at(t.source);return{source:e=r.computeSourceURL(u,e,this._sourceMapURL),generatedLine:t.generatedLine,generatedColumn:t.generatedColumn,originalLine:t.originalLine,originalColumn:t.originalColumn,name:null===t.name?null:this._names.at(t.name)}}),this).forEach(t,o)},s.prototype.allGeneratedPositionsFor=function(t){var e=r.getArg(t,"line"),n={source:r.getArg(t,"source"),originalLine:e,originalColumn:r.getArg(t,"column",0)};if(n.source=this._findSourceIndex(n.source),n.source<0)return[];var o=[],u=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",r.compareByOriginalPositions,i.LEAST_UPPER_BOUND);if(u>=0){var a=this._originalMappings[u];if(void 0===t.column)for(var s=a.originalLine;a&&a.originalLine===s;)o.push({line:r.getArg(a,"generatedLine",null),column:r.getArg(a,"generatedColumn",null),lastColumn:r.getArg(a,"lastGeneratedColumn",null)}),a=this._originalMappings[++u];else for(var c=a.originalColumn;a&&a.originalLine===e&&a.originalColumn==c;)o.push({line:r.getArg(a,"generatedLine",null),column:r.getArg(a,"generatedColumn",null),lastColumn:r.getArg(a,"lastGeneratedColumn",null)}),a=this._originalMappings[++u]}return o},e.SourceMapConsumer=s,c.prototype=Object.create(s.prototype),c.prototype.consumer=s,c.prototype._findSourceIndex=function(t){var e,n=t;if(null!=this.sourceRoot&&(n=r.relative(this.sourceRoot,n)),this._sources.has(n))return this._sources.indexOf(n);for(e=0;e<this._absoluteSources.length;++e)if(this._absoluteSources[e]==t)return e;return-1},c.fromSourceMap=function(t,e){var n=Object.create(c.prototype),i=n._names=o.fromArray(t._names.toArray(),!0),u=n._sources=o.fromArray(t._sources.toArray(),!0);n.sourceRoot=t._sourceRoot,n.sourcesContent=t._generateSourcesContent(n._sources.toArray(),n.sourceRoot),n.file=t._file,n._sourceMapURL=e,n._absoluteSources=n._sources.toArray().map((function(t){return r.computeSourceURL(n.sourceRoot,t,e)}));for(var s=t._mappings.toArray().slice(),l=n.__generatedMappings=[],h=n.__originalMappings=[],p=0,d=s.length;p<d;p++){var v=s[p],g=new f;g.generatedLine=v.generatedLine,g.generatedColumn=v.generatedColumn,v.source&&(g.source=u.indexOf(v.source),g.originalLine=v.originalLine,g.originalColumn=v.originalColumn,v.name&&(g.name=i.indexOf(v.name)),h.push(g)),l.push(g)}return a(n.__originalMappings,r.compareByOriginalPositions),n},c.prototype._version=3,Object.defineProperty(c.prototype,"sources",{get:function(){return this._absoluteSources.slice()}}),c.prototype._parseMappings=function(t,e){for(var n,i,o,s,c,l=1,h=0,p=0,d=0,v=0,g=0,m=t.length,y=0,w={},_={},b=[],x=[];y<m;)if(";"===t.charAt(y))l++,y++,h=0;else if(","===t.charAt(y))y++;else{for((n=new f).generatedLine=l,s=y;s<m&&!this._charIsMappingSeparator(t,s);s++);if(o=w[i=t.slice(y,s)])y+=i.length;else{for(o=[];y<s;)u.decode(t,y,_),c=_.value,y=_.rest,o.push(c);if(2===o.length)throw new Error("Found a source, but no line and column");if(3===o.length)throw new Error("Found a source and line, but no column");w[i]=o}n.generatedColumn=h+o[0],h=n.generatedColumn,o.length>1&&(n.source=v+o[1],v+=o[1],n.originalLine=p+o[2],p=n.originalLine,n.originalLine+=1,n.originalColumn=d+o[3],d=n.originalColumn,o.length>4&&(n.name=g+o[4],g+=o[4])),x.push(n),"number"==typeof n.originalLine&&b.push(n)}a(x,r.compareByGeneratedPositionsDeflated),this.__generatedMappings=x,a(b,r.compareByOriginalPositions),this.__originalMappings=b},c.prototype._findMapping=function(t,e,n,r,o,u){if(t[n]<=0)throw new TypeError("Line must be greater than or equal to 1, got "+t[n]);if(t[r]<0)throw new TypeError("Column must be greater than or equal to 0, got "+t[r]);return i.search(t,e,o,u)},c.prototype.computeColumnSpans=function(){for(var t=0;t<this._generatedMappings.length;++t){var e=this._generatedMappings[t];if(t+1<this._generatedMappings.length){var n=this._generatedMappings[t+1];if(e.generatedLine===n.generatedLine){e.lastGeneratedColumn=n.generatedColumn-1;continue}}e.lastGeneratedColumn=1/0}},c.prototype.originalPositionFor=function(t){var e={generatedLine:r.getArg(t,"line"),generatedColumn:r.getArg(t,"column")},n=this._findMapping(e,this._generatedMappings,"generatedLine","generatedColumn",r.compareByGeneratedPositionsDeflated,r.getArg(t,"bias",s.GREATEST_LOWER_BOUND));if(n>=0){var i=this._generatedMappings[n];if(i.generatedLine===e.generatedLine){var o=r.getArg(i,"source",null);null!==o&&(o=this._sources.at(o),o=r.computeSourceURL(this.sourceRoot,o,this._sourceMapURL));var u=r.getArg(i,"name",null);return null!==u&&(u=this._names.at(u)),{source:o,line:r.getArg(i,"originalLine",null),column:r.getArg(i,"originalColumn",null),name:u}}}return{source:null,line:null,column:null,name:null}},c.prototype.hasContentsOfAllSources=function(){return!!this.sourcesContent&&(this.sourcesContent.length>=this._sources.size()&&!this.sourcesContent.some((function(t){return null==t})))},c.prototype.sourceContentFor=function(t,e){if(!this.sourcesContent)return null;var n=this._findSourceIndex(t);if(n>=0)return this.sourcesContent[n];var i,o=t;if(null!=this.sourceRoot&&(o=r.relative(this.sourceRoot,o)),null!=this.sourceRoot&&(i=r.urlParse(this.sourceRoot))){var u=o.replace(/^file:\/\//,"");if("file"==i.scheme&&this._sources.has(u))return this.sourcesContent[this._sources.indexOf(u)];if((!i.path||"/"==i.path)&&this._sources.has("/"+o))return this.sourcesContent[this._sources.indexOf("/"+o)]}if(e)return null;throw new Error('"'+o+'" is not in the SourceMap.')},c.prototype.generatedPositionFor=function(t){var e=r.getArg(t,"source");if((e=this._findSourceIndex(e))<0)return{line:null,column:null,lastColumn:null};var n={source:e,originalLine:r.getArg(t,"line"),originalColumn:r.getArg(t,"column")},i=this._findMapping(n,this._originalMappings,"originalLine","originalColumn",r.compareByOriginalPositions,r.getArg(t,"bias",s.GREATEST_LOWER_BOUND));if(i>=0){var o=this._originalMappings[i];if(o.source===n.source)return{line:r.getArg(o,"generatedLine",null),column:r.getArg(o,"generatedColumn",null),lastColumn:r.getArg(o,"lastGeneratedColumn",null)}}return{line:null,column:null,lastColumn:null}},e.BasicSourceMapConsumer=c,l.prototype=Object.create(s.prototype),l.prototype.constructor=s,l.prototype._version=3,Object.defineProperty(l.prototype,"sources",{get:function(){for(var t=[],e=0;e<this._sections.length;e++)for(var n=0;n<this._sections[e].consumer.sources.length;n++)t.push(this._sections[e].consumer.sources[n]);return t}}),l.prototype.originalPositionFor=function(t){var e={generatedLine:r.getArg(t,"line"),generatedColumn:r.getArg(t,"column")},n=i.search(e,this._sections,(function(t,e){var n=t.generatedLine-e.generatedOffset.generatedLine;return n||t.generatedColumn-e.generatedOffset.generatedColumn})),o=this._sections[n];return o?o.consumer.originalPositionFor({line:e.generatedLine-(o.generatedOffset.generatedLine-1),column:e.generatedColumn-(o.generatedOffset.generatedLine===e.generatedLine?o.generatedOffset.generatedColumn-1:0),bias:t.bias}):{source:null,line:null,column:null,name:null}},l.prototype.hasContentsOfAllSources=function(){return this._sections.every((function(t){return t.consumer.hasContentsOfAllSources()}))},l.prototype.sourceContentFor=function(t,e){for(var n=0;n<this._sections.length;n++){var r=this._sections[n].consumer.sourceContentFor(t,!0);if(r)return r}if(e)return null;throw new Error('"'+t+'" is not in the SourceMap.')},l.prototype.generatedPositionFor=function(t){for(var e=0;e<this._sections.length;e++){var n=this._sections[e];if(-1!==n.consumer._findSourceIndex(r.getArg(t,"source"))){var i=n.consumer.generatedPositionFor(t);if(i)return{line:i.line+(n.generatedOffset.generatedLine-1),column:i.column+(n.generatedOffset.generatedLine===i.line?n.generatedOffset.generatedColumn-1:0)}}}return{line:null,column:null}},l.prototype._parseMappings=function(t,e){this.__generatedMappings=[],this.__originalMappings=[];for(var n=0;n<this._sections.length;n++)for(var i=this._sections[n],o=i.consumer._generatedMappings,u=0;u<o.length;u++){var s=o[u],c=i.consumer._sources.at(s.source);c=r.computeSourceURL(i.consumer.sourceRoot,c,this._sourceMapURL),this._sources.add(c),c=this._sources.indexOf(c);var f=null;s.name&&(f=i.consumer._names.at(s.name),this._names.add(f),f=this._names.indexOf(f));var l={source:c,generatedLine:s.generatedLine+(i.generatedOffset.generatedLine-1),generatedColumn:s.generatedColumn+(i.generatedOffset.generatedLine===s.generatedLine?i.generatedOffset.generatedColumn-1:0),originalLine:s.originalLine,originalColumn:s.originalColumn,name:f};this.__generatedMappings.push(l),"number"==typeof l.originalLine&&this.__originalMappings.push(l)}a(this.__generatedMappings,r.compareByGeneratedPositionsDeflated),a(this.__originalMappings,r.compareByOriginalPositions)},e.IndexedSourceMapConsumer=l},function(t,e){e.GREATEST_LOWER_BOUND=1,e.LEAST_UPPER_BOUND=2,e.search=function(t,n,r,i){if(0===n.length)return-1;var o=function t(n,r,i,o,u,a){var s=Math.floor((r-n)/2)+n,c=u(i,o[s],!0);return 0===c?s:c>0?r-s>1?t(s,r,i,o,u,a):a==e.LEAST_UPPER_BOUND?r<o.length?r:-1:s:s-n>1?t(n,s,i,o,u,a):a==e.LEAST_UPPER_BOUND?s:n<0?-1:n}(-1,n.length,t,n,r,i||e.GREATEST_LOWER_BOUND);if(o<0)return-1;for(;o-1>=0&&0===r(n[o],n[o-1],!0);)--o;return o}},function(t,e){function n(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function r(t,e,i,o){if(i<o){var u=i-1;n(t,(f=i,l=o,Math.round(f+Math.random()*(l-f))),o);for(var a=t[o],s=i;s<o;s++)e(t[s],a)<=0&&n(t,u+=1,s);n(t,u+1,s);var c=u+1;r(t,e,i,c-1),r(t,e,c+1,o)}var f,l}e.quickSort=function(t,e){r(t,e,0,t.length-1)}},function(t,e,n){var r=n(72).SourceMapGenerator,i=n(37),o=/(\r?\n)/,u="$$$isSourceNode$$$";function a(t,e,n,r,i){this.children=[],this.sourceContents={},this.line=null==t?null:t,this.column=null==e?null:e,this.source=null==n?null:n,this.name=null==i?null:i,this[u]=!0,null!=r&&this.add(r)}a.fromStringWithSourceMap=function(t,e,n){var r=new a,u=t.split(o),s=0,c=function(){return t()+(t()||"");function t(){return s<u.length?u[s++]:void 0}},f=1,l=0,h=null;return e.eachMapping((function(t){if(null!==h){if(!(f<t.generatedLine)){var e=(n=u[s]||"").substr(0,t.generatedColumn-l);return u[s]=n.substr(t.generatedColumn-l),l=t.generatedColumn,p(h,e),void(h=t)}p(h,c()),f++,l=0}for(;f<t.generatedLine;)r.add(c()),f++;if(l<t.generatedColumn){var n=u[s]||"";r.add(n.substr(0,t.generatedColumn)),u[s]=n.substr(t.generatedColumn),l=t.generatedColumn}h=t}),this),s<u.length&&(h&&p(h,c()),r.add(u.splice(s).join(""))),e.sources.forEach((function(t){var o=e.sourceContentFor(t);null!=o&&(null!=n&&(t=i.join(n,t)),r.setSourceContent(t,o))})),r;function p(t,e){if(null===t||void 0===t.source)r.add(e);else{var o=n?i.join(n,t.source):t.source;r.add(new a(t.originalLine,t.originalColumn,o,e,t.name))}}},a.prototype.add=function(t){if(Array.isArray(t))t.forEach((function(t){this.add(t)}),this);else{if(!t[u]&&"string"!=typeof t)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+t);t&&this.children.push(t)}return this},a.prototype.prepend=function(t){if(Array.isArray(t))for(var e=t.length-1;e>=0;e--)this.prepend(t[e]);else{if(!t[u]&&"string"!=typeof t)throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got "+t);this.children.unshift(t)}return this},a.prototype.walk=function(t){for(var e,n=0,r=this.children.length;n<r;n++)(e=this.children[n])[u]?e.walk(t):""!==e&&t(e,{source:this.source,line:this.line,column:this.column,name:this.name})},a.prototype.join=function(t){var e,n,r=this.children.length;if(r>0){for(e=[],n=0;n<r-1;n++)e.push(this.children[n]),e.push(t);e.push(this.children[n]),this.children=e}return this},a.prototype.replaceRight=function(t,e){var n=this.children[this.children.length-1];return n[u]?n.replaceRight(t,e):"string"==typeof n?this.children[this.children.length-1]=n.replace(t,e):this.children.push("".replace(t,e)),this},a.prototype.setSourceContent=function(t,e){this.sourceContents[i.toSetString(t)]=e},a.prototype.walkSourceContents=function(t){for(var e=0,n=this.children.length;e<n;e++)this.children[e][u]&&this.children[e].walkSourceContents(t);var r=Object.keys(this.sourceContents);for(e=0,n=r.length;e<n;e++)t(i.fromSetString(r[e]),this.sourceContents[r[e]])},a.prototype.toString=function(){var t="";return this.walk((function(e){t+=e})),t},a.prototype.toStringWithSourceMap=function(t){var e={code:"",line:1,column:0},n=new r(t),i=!1,o=null,u=null,a=null,s=null;return this.walk((function(t,r){e.code+=t,null!==r.source&&null!==r.line&&null!==r.column?(o===r.source&&u===r.line&&a===r.column&&s===r.name||n.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:e.line,column:e.column},name:r.name}),o=r.source,u=r.line,a=r.column,s=r.name,i=!0):i&&(n.addMapping({generated:{line:e.line,column:e.column}}),o=null,i=!1);for(var c=0,f=t.length;c<f;c++)10===t.charCodeAt(c)?(e.line++,e.column=0,c+1===f?(o=null,i=!1):i&&n.addMapping({source:r.source,original:{line:r.line,column:r.column},generated:{line:e.line,column:e.column},name:r.name})):e.column++})),this.walkSourceContents((function(t,e){n.setSourceContent(t,e)})),{code:e.code,map:n}},e.SourceNode=a},function(t,e,n){"use strict";e.__esModule=!0,e.default=function(t){if(r[t])return;r[t]=!0,"undefined"!=typeof console&&console.warn&&console.warn(t)};var r={};t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r,i=(r=n(105))&&r.__esModule?r:{default:r};function o(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var u=function(){function t(t,e,n){this.processor=t,this.messages=[],this.root=e,this.opts=n,this.css=void 0,this.map=void 0}var e,n,r,u=t.prototype;return u.toString=function(){return this.css},u.warn=function(t,e){void 0===e&&(e={}),e.plugin||this.lastPlugin&&this.lastPlugin.postcssPlugin&&(e.plugin=this.lastPlugin.postcssPlugin);var n=new i.default(t,e);return this.messages.push(n),n},u.warnings=function(){return this.messages.filter((function(t){return"warning"===t.type}))},e=t,(n=[{key:"content",get:function(){return this.css}}])&&o(e.prototype,n),r&&o(e,r),t}();e.default=u,t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r=function(){function t(t,e){if(void 0===e&&(e={}),this.type="warning",this.text=t,e.node&&e.node.source){var n=e.node.positionBy(e);this.line=n.line,this.column=n.column}for(var r in e)this[r]=e[r]}return t.prototype.toString=function(){return this.node?this.node.error(this.text,{plugin:this.plugin,index:this.index,word:this.word}).message:this.plugin?this.plugin+": "+this.text:this.text},t}();e.default=r,t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r=c(n(48)),i=c(n(107)),o=c(n(53)),u=c(n(54)),a=c(n(76)),s=c(n(56));function c(t){return t&&t.__esModule?t:{default:t}}var f=function(){function t(t){this.input=t,this.root=new a.default,this.current=this.root,this.spaces="",this.semicolon=!1,this.createTokenizer(),this.root.source={input:t,start:{line:1,column:1}}}var e=t.prototype;return e.createTokenizer=function(){this.tokenizer=(0,i.default)(this.input)},e.parse=function(){for(var t;!this.tokenizer.endOfFile();)switch((t=this.tokenizer.nextToken())[0]){case"space":this.spaces+=t[1];break;case";":this.freeSemicolon(t);break;case"}":this.end(t);break;case"comment":this.comment(t);break;case"at-word":this.atrule(t);break;case"{":this.emptyRule(t);break;default:this.other(t)}this.endFile()},e.comment=function(t){var e=new o.default;this.init(e,t[2],t[3]),e.source.end={line:t[4],column:t[5]};var n=t[1].slice(2,-2);if(/^\s*$/.test(n))e.text="",e.raws.left=n,e.raws.right="";else{var r=n.match(/^(\s*)([^]*[^\s])(\s*)$/);e.text=r[2],e.raws.left=r[1],e.raws.right=r[3]}},e.emptyRule=function(t){var e=new s.default;this.init(e,t[2],t[3]),e.selector="",e.raws.between="",this.current=e},e.other=function(t){for(var e=!1,n=null,r=!1,i=null,o=[],u=[],a=t;a;){if(n=a[0],u.push(a),"("===n||"["===n)i||(i=a),o.push("("===n?")":"]");else if(0===o.length){if(";"===n){if(r)return void this.decl(u);break}if("{"===n)return void this.rule(u);if("}"===n){this.tokenizer.back(u.pop()),e=!0;break}":"===n&&(r=!0)}else n===o[o.length-1]&&(o.pop(),0===o.length&&(i=null));a=this.tokenizer.nextToken()}if(this.tokenizer.endOfFile()&&(e=!0),o.length>0&&this.unclosedBracket(i),e&&r){for(;u.length&&("space"===(a=u[u.length-1][0])||"comment"===a);)this.tokenizer.back(u.pop());this.decl(u)}else this.unknownWord(u)},e.rule=function(t){t.pop();var e=new s.default;this.init(e,t[0][2],t[0][3]),e.raws.between=this.spacesAndCommentsFromEnd(t),this.raw(e,"selector",t),this.current=e},e.decl=function(t){var e=new r.default;this.init(e);var n,i=t[t.length-1];for(";"===i[0]&&(this.semicolon=!0,t.pop()),i[4]?e.source.end={line:i[4],column:i[5]}:e.source.end={line:i[2],column:i[3]};"word"!==t[0][0];)1===t.length&&this.unknownWord(t),e.raws.before+=t.shift()[1];for(e.source.start={line:t[0][2],column:t[0][3]},e.prop="";t.length;){var o=t[0][0];if(":"===o||"space"===o||"comment"===o)break;e.prop+=t.shift()[1]}for(e.raws.between="";t.length;){if(":"===(n=t.shift())[0]){e.raws.between+=n[1];break}"word"===n[0]&&/\w/.test(n[1])&&this.unknownWord([n]),e.raws.between+=n[1]}"_"!==e.prop[0]&&"*"!==e.prop[0]||(e.raws.before+=e.prop[0],e.prop=e.prop.slice(1)),e.raws.between+=this.spacesAndCommentsFromStart(t),this.precheckMissedSemicolon(t);for(var u=t.length-1;u>0;u--){if("!important"===(n=t[u])[1].toLowerCase()){e.important=!0;var a=this.stringFrom(t,u);" !important"!==(a=this.spacesFromEnd(t)+a)&&(e.raws.important=a);break}if("important"===n[1].toLowerCase()){for(var s=t.slice(0),c="",f=u;f>0;f--){var l=s[f][0];if(0===c.trim().indexOf("!")&&"space"!==l)break;c=s.pop()[1]+c}0===c.trim().indexOf("!")&&(e.important=!0,e.raws.important=c,t=s)}if("space"!==n[0]&&"comment"!==n[0])break}this.raw(e,"value",t),-1!==e.value.indexOf(":")&&this.checkMissedSemicolon(t)},e.atrule=function(t){var e,n,r=new u.default;r.name=t[1].slice(1),""===r.name&&this.unnamedAtrule(r,t),this.init(r,t[2],t[3]);for(var i=!1,o=!1,a=[];!this.tokenizer.endOfFile();){if(";"===(t=this.tokenizer.nextToken())[0]){r.source.end={line:t[2],column:t[3]},this.semicolon=!0;break}if("{"===t[0]){o=!0;break}if("}"===t[0]){if(a.length>0){for(e=a[n=a.length-1];e&&"space"===e[0];)e=a[--n];e&&(r.source.end={line:e[4],column:e[5]})}this.end(t);break}if(a.push(t),this.tokenizer.endOfFile()){i=!0;break}}r.raws.between=this.spacesAndCommentsFromEnd(a),a.length?(r.raws.afterName=this.spacesAndCommentsFromStart(a),this.raw(r,"params",a),i&&(t=a[a.length-1],r.source.end={line:t[4],column:t[5]},this.spaces=r.raws.between,r.raws.between="")):(r.raws.afterName="",r.params=""),o&&(r.nodes=[],this.current=r)},e.end=function(t){this.current.nodes&&this.current.nodes.length&&(this.current.raws.semicolon=this.semicolon),this.semicolon=!1,this.current.raws.after=(this.current.raws.after||"")+this.spaces,this.spaces="",this.current.parent?(this.current.source.end={line:t[2],column:t[3]},this.current=this.current.parent):this.unexpectedClose(t)},e.endFile=function(){this.current.parent&&this.unclosedBlock(),this.current.nodes&&this.current.nodes.length&&(this.current.raws.semicolon=this.semicolon),this.current.raws.after=(this.current.raws.after||"")+this.spaces},e.freeSemicolon=function(t){if(this.spaces+=t[1],this.current.nodes){var e=this.current.nodes[this.current.nodes.length-1];e&&"rule"===e.type&&!e.raws.ownSemicolon&&(e.raws.ownSemicolon=this.spaces,this.spaces="")}},e.init=function(t,e,n){this.current.push(t),t.source={start:{line:e,column:n},input:this.input},t.raws.before=this.spaces,this.spaces="","comment"!==t.type&&(this.semicolon=!1)},e.raw=function(t,e,n){for(var r,i,o,u,a=n.length,s="",c=!0,f=/^([.|#])?([\w])+/i,l=0;l<a;l+=1)"comment"!==(i=(r=n[l])[0])||"rule"!==t.type?"comment"===i||"space"===i&&l===a-1?c=!1:s+=r[1]:(u=n[l-1],o=n[l+1],"space"!==u[0]&&"space"!==o[0]&&f.test(u[1])&&f.test(o[1])?s+=r[1]:c=!1);if(!c){var h=n.reduce((function(t,e){return t+e[1]}),"");t.raws[e]={value:s,raw:h}}t[e]=s},e.spacesAndCommentsFromEnd=function(t){for(var e,n="";t.length&&("space"===(e=t[t.length-1][0])||"comment"===e);)n=t.pop()[1]+n;return n},e.spacesAndCommentsFromStart=function(t){for(var e,n="";t.length&&("space"===(e=t[0][0])||"comment"===e);)n+=t.shift()[1];return n},e.spacesFromEnd=function(t){for(var e="";t.length&&"space"===t[t.length-1][0];)e=t.pop()[1]+e;return e},e.stringFrom=function(t,e){for(var n="",r=e;r<t.length;r++)n+=t[r][1];return t.splice(e,t.length-e),n},e.colon=function(t){for(var e,n,r,i=0,o=0;o<t.length;o++){if("("===(n=(e=t[o])[0])&&(i+=1),")"===n&&(i-=1),0===i&&":"===n){if(r){if("word"===r[0]&&"progid"===r[1])continue;return o}this.doubleColon(e)}r=e}return!1},e.unclosedBracket=function(t){throw this.input.error("Unclosed bracket",t[2],t[3])},e.unknownWord=function(t){throw this.input.error("Unknown word",t[0][2],t[0][3])},e.unexpectedClose=function(t){throw this.input.error("Unexpected }",t[2],t[3])},e.unclosedBlock=function(){var t=this.current.source.start;throw this.input.error("Unclosed block",t.line,t.column)},e.doubleColon=function(t){throw this.input.error("Double colon",t[2],t[3])},e.unnamedAtrule=function(t,e){throw this.input.error("At-rule without name",e[2],e[3])},e.precheckMissedSemicolon=function(){},e.checkMissedSemicolon=function(t){var e=this.colon(t);if(!1!==e){for(var n,r=0,i=e-1;i>=0&&("space"===(n=t[i])[0]||2!==(r+=1));i--);throw this.input.error("Missed semicolon",n[2],n[3])}},t}();e.default=f,t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.default=function(t,e){void 0===e&&(e={});var n,k,O,M,E,T,R,P,j,L,U,B,D,I,N=t.css.valueOf(),z=e.ignoreErrors,W=N.length,F=-1,Y=1,G=0,q=[],$=[];function H(e){throw t.error("Unclosed "+e,Y,G-F)}return{back:function(t){$.push(t)},nextToken:function(t){if($.length)return $.pop();if(!(G>=W)){var e=!!t&&t.ignoreUnclosed;switch(((n=N.charCodeAt(G))===a||n===c||n===l&&N.charCodeAt(G+1)!==a)&&(F=G,Y+=1),n){case a:case s:case f:case l:case c:k=G;do{k+=1,(n=N.charCodeAt(k))===a&&(F=k,Y+=1)}while(n===s||n===a||n===f||n===l||n===c);I=["space",N.slice(G,k)],G=k-1;break;case h:case p:case g:case m:case _:case y:case v:var V=String.fromCharCode(n);I=[V,V,Y,G-F];break;case d:if(B=q.length?q.pop()[1]:"",D=N.charCodeAt(G+1),"url"===B&&D!==r&&D!==i&&D!==s&&D!==a&&D!==f&&D!==c&&D!==l){k=G;do{if(L=!1,-1===(k=N.indexOf(")",k+1))){if(z||e){k=G;break}H("bracket")}for(U=k;N.charCodeAt(U-1)===o;)U-=1,L=!L}while(L);I=["brackets",N.slice(G,k+1),Y,G-F,Y,k-F],G=k}else k=N.indexOf(")",G+1),T=N.slice(G,k+1),-1===k||C.test(T)?I=["(","(",Y,G-F]:(I=["brackets",T,Y,G-F,Y,k-F],G=k);break;case r:case i:O=n===r?"'":'"',k=G;do{if(L=!1,-1===(k=N.indexOf(O,k+1))){if(z||e){k=G+1;break}H("string")}for(U=k;N.charCodeAt(U-1)===o;)U-=1,L=!L}while(L);T=N.slice(G,k+1),M=T.split("\n"),(E=M.length-1)>0?(P=Y+E,j=k-M[E].length):(P=Y,j=F),I=["string",N.slice(G,k+1),Y,G-F,P,k-j],F=j,Y=P,G=k;break;case b:x.lastIndex=G+1,x.test(N),k=0===x.lastIndex?N.length-1:x.lastIndex-2,I=["at-word",N.slice(G,k+1),Y,G-F,Y,k-F],G=k;break;case o:for(k=G,R=!0;N.charCodeAt(k+1)===o;)k+=1,R=!R;if(n=N.charCodeAt(k+1),R&&n!==u&&n!==s&&n!==a&&n!==f&&n!==l&&n!==c&&(k+=1,S.test(N.charAt(k)))){for(;S.test(N.charAt(k+1));)k+=1;N.charCodeAt(k+1)===s&&(k+=1)}I=["word",N.slice(G,k+1),Y,G-F,Y,k-F],G=k;break;default:n===u&&N.charCodeAt(G+1)===w?(0===(k=N.indexOf("*/",G+2)+1)&&(z||e?k=N.length:H("comment")),T=N.slice(G,k+1),M=T.split("\n"),(E=M.length-1)>0?(P=Y+E,j=k-M[E].length):(P=Y,j=F),I=["comment",T,Y,G-F,P,k-j],F=j,Y=P,G=k):(A.lastIndex=G+1,A.test(N),k=0===A.lastIndex?N.length-1:A.lastIndex-2,I=["word",N.slice(G,k+1),Y,G-F,Y,k-F],q.push(I),G=k)}return G++,I}},endOfFile:function(){return 0===$.length&&G>=W},position:function(){return G}}};var r="'".charCodeAt(0),i='"'.charCodeAt(0),o="\\".charCodeAt(0),u="/".charCodeAt(0),a="\n".charCodeAt(0),s=" ".charCodeAt(0),c="\f".charCodeAt(0),f="\t".charCodeAt(0),l="\r".charCodeAt(0),h="[".charCodeAt(0),p="]".charCodeAt(0),d="(".charCodeAt(0),v=")".charCodeAt(0),g="{".charCodeAt(0),m="}".charCodeAt(0),y=";".charCodeAt(0),w="*".charCodeAt(0),_=":".charCodeAt(0),b="@".charCodeAt(0),x=/[ \n\t\r\f{}()'"\\;/[\]#]/g,A=/[ \n\t\r\f(){}:;@!'"\\\][#]|\/(?=\*)/g,C=/.[\\/("'\n]/,S=/[a-f0-9]/i;t.exports=e.default},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r=u(n(51)),i=u(n(66)),o=u(n(109));function u(t){return t&&t.__esModule?t:{default:t}}function a(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var s=0,c=function(){function t(t,e){if(void 0===e&&(e={}),null==t||"object"==typeof t&&!t.toString)throw new Error("PostCSS received "+t+" instead of CSS string");this.css=t.toString(),"\ufeff"===this.css[0]||"\ufffe"===this.css[0]?(this.hasBOM=!0,this.css=this.css.slice(1)):this.hasBOM=!1,e.from&&(/^\w+:\/\//.test(e.from)||r.default.isAbsolute(e.from)?this.file=e.from:this.file=r.default.resolve(e.from));var n=new o.default(this.css,e);if(n.text){this.map=n;var i=n.consumer().file;!this.file&&i&&(this.file=this.mapResolve(i))}this.file||(s+=1,this.id="<input css "+s+">"),this.map&&(this.map.file=this.from)}var e,n,u,c=t.prototype;return c.error=function(t,e,n,r){var o;void 0===r&&(r={});var u=this.origin(e,n);return(o=u?new i.default(t,u.line,u.column,u.source,u.file,r.plugin):new i.default(t,e,n,this.css,this.file,r.plugin)).input={line:e,column:n,source:this.css},this.file&&(o.input.file=this.file),o},c.origin=function(t,e){if(!this.map)return!1;var n=this.map.consumer(),r=n.originalPositionFor({line:t,column:e});if(!r.source)return!1;var i={file:this.mapResolve(r.source),line:r.line,column:r.column},o=n.sourceContentFor(r.source);return o&&(i.source=o),i},c.mapResolve=function(t){return/^\w+:\/\//.test(t)?t:r.default.resolve(this.map.consumer().sourceRoot||".",t)},e=t,(n=[{key:"from",get:function(){return this.file||this.id}}])&&a(e.prototype,n),u&&a(e,u),t}();e.default=c,t.exports=e.default},function(t,e,n){"use strict";(function(r){e.__esModule=!0,e.default=void 0;var i=a(n(71)),o=a(n(51)),u=a(n(110));function a(t){return t&&t.__esModule?t:{default:t}}var s=function(){function t(t,e){this.loadAnnotation(t),this.inline=this.startWith(this.annotation,"data:");var n=e.map?e.map.prev:void 0,r=this.loadMap(e.from,n);r&&(this.text=r)}var e=t.prototype;return e.consumer=function(){return this.consumerCache||(this.consumerCache=new i.default.SourceMapConsumer(this.text)),this.consumerCache},e.withContent=function(){return!!(this.consumer().sourcesContent&&this.consumer().sourcesContent.length>0)},e.startWith=function(t,e){return!!t&&t.substr(0,e.length)===e},e.getAnnotationURL=function(t){return t.match(/\/\*\s*# sourceMappingURL=(.*)\s*\*\//)[1].trim()},e.loadAnnotation=function(t){var e=t.match(/\/\*\s*# sourceMappingURL=(.*)\s*\*\//gm);if(e&&e.length>0){var n=e[e.length-1];n&&(this.annotation=this.getAnnotationURL(n))}},e.decodeInline=function(t){var e,n="data:application/json,";if(this.startWith(t,n))return decodeURIComponent(t.substr(n.length));if(/^data:application\/json;charset=utf-?8;base64,/.test(t)||/^data:application\/json;base64,/.test(t))return e=t.substr(RegExp.lastMatch.length),r?r.from(e,"base64").toString():window.atob(e);var i=t.match(/data:application\/json;([^,]+),/)[1];throw new Error("Unsupported source map encoding "+i)},e.loadMap=function(t,e){if(!1===e)return!1;if(e){if("string"==typeof e)return e;if("function"==typeof e){var n=e(t);if(n&&u.default.existsSync&&u.default.existsSync(n))return u.default.readFileSync(n,"utf-8").toString().trim();throw new Error("Unable to load previous source map: "+n.toString())}if(e instanceof i.default.SourceMapConsumer)return i.default.SourceMapGenerator.fromSourceMap(e).toString();if(e instanceof i.default.SourceMapGenerator)return e.toString();if(this.isMap(e))return JSON.stringify(e);throw new Error("Unsupported previous source map format: "+e.toString())}if(this.inline)return this.decodeInline(this.annotation);if(this.annotation){var r=this.annotation;return t&&(r=o.default.join(o.default.dirname(t),r)),this.root=o.default.dirname(r),!(!u.default.existsSync||!u.default.existsSync(r))&&u.default.readFileSync(r,"utf-8").toString().trim()}},e.isMap=function(t){return"object"==typeof t&&("string"==typeof t.mappings||"string"==typeof t._mappings)},t}();e.default=s,t.exports=e.default}).call(this,n(70).Buffer)},function(t,e){},function(t,e,n){"use strict";e.__esModule=!0,e.default=void 0;var r={prefix:function(t){var e=t.match(/^(-\w+-)/);return e?e[0]:""},unprefixed:function(t){return t.replace(/^-\w+-/,"")}};e.default=r,t.exports=e.default},function(t,e,n){(function(t,r){var i;(function(){var o="Expected a function",u="__lodash_placeholder__",a=[["ary",128],["bind",1],["bindKey",2],["curry",8],["curryRight",16],["flip",512],["partial",32],["partialRight",64],["rearg",256]],s="[object Arguments]",c="[object Array]",f="[object Boolean]",l="[object Date]",h="[object Error]",p="[object Function]",d="[object GeneratorFunction]",v="[object Map]",g="[object Number]",m="[object Object]",y="[object RegExp]",w="[object Set]",_="[object String]",b="[object Symbol]",x="[object WeakMap]",A="[object ArrayBuffer]",C="[object DataView]",S="[object Float32Array]",k="[object Float64Array]",O="[object Int8Array]",M="[object Int16Array]",E="[object Int32Array]",T="[object Uint8Array]",R="[object Uint16Array]",P="[object Uint32Array]",j=/\b__p \+= '';/g,L=/\b(__p \+=) '' \+/g,U=/(__e\(.*?\)|\b__t\)) \+\n'';/g,B=/&(?:amp|lt|gt|quot|#39);/g,D=/[&<>"']/g,I=RegExp(B.source),N=RegExp(D.source),z=/<%-([\s\S]+?)%>/g,W=/<%([\s\S]+?)%>/g,F=/<%=([\s\S]+?)%>/g,Y=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,G=/^\w*$/,q=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,$=/[\\^$.*+?()[\]{}|]/g,H=RegExp($.source),V=/^\s+|\s+$/g,J=/^\s+/,X=/\s+$/,Q=/\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,Z=/\{\n\/\* \[wrapped with (.+)\] \*/,K=/,? & /,tt=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,et=/\\(\\)?/g,nt=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,rt=/\w*$/,it=/^[-+]0x[0-9a-f]+$/i,ot=/^0b[01]+$/i,ut=/^\[object .+?Constructor\]$/,at=/^0o[0-7]+$/i,st=/^(?:0|[1-9]\d*)$/,ct=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,ft=/($^)/,lt=/['\n\r\u2028\u2029\\]/g,ht="\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",pt="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",dt="[\\ud800-\\udfff]",vt="["+pt+"]",gt="["+ht+"]",mt="\\d+",yt="[\\u2700-\\u27bf]",wt="[a-z\\xdf-\\xf6\\xf8-\\xff]",_t="[^\\ud800-\\udfff"+pt+mt+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",bt="\\ud83c[\\udffb-\\udfff]",xt="[^\\ud800-\\udfff]",At="(?:\\ud83c[\\udde6-\\uddff]){2}",Ct="[\\ud800-\\udbff][\\udc00-\\udfff]",St="[A-Z\\xc0-\\xd6\\xd8-\\xde]",kt="(?:"+wt+"|"+_t+")",Ot="(?:"+St+"|"+_t+")",Mt="(?:"+gt+"|"+bt+")"+"?",Et="[\\ufe0e\\ufe0f]?"+Mt+("(?:\\u200d(?:"+[xt,At,Ct].join("|")+")[\\ufe0e\\ufe0f]?"+Mt+")*"),Tt="(?:"+[yt,At,Ct].join("|")+")"+Et,Rt="(?:"+[xt+gt+"?",gt,At,Ct,dt].join("|")+")",Pt=RegExp("['\u2019]","g"),jt=RegExp(gt,"g"),Lt=RegExp(bt+"(?="+bt+")|"+Rt+Et,"g"),Ut=RegExp([St+"?"+wt+"+(?:['\u2019](?:d|ll|m|re|s|t|ve))?(?="+[vt,St,"$"].join("|")+")",Ot+"+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?(?="+[vt,St+kt,"$"].join("|")+")",St+"?"+kt+"+(?:['\u2019](?:d|ll|m|re|s|t|ve))?",St+"+(?:['\u2019](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",mt,Tt].join("|"),"g"),Bt=RegExp("[\\u200d\\ud800-\\udfff"+ht+"\\ufe0e\\ufe0f]"),Dt=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,It=["Array","Buffer","DataView","Date","Error","Float32Array","Float64Array","Function","Int8Array","Int16Array","Int32Array","Map","Math","Object","Promise","RegExp","Set","String","Symbol","TypeError","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","WeakMap","_","clearTimeout","isFinite","parseInt","setTimeout"],Nt=-1,zt={};zt[S]=zt[k]=zt[O]=zt[M]=zt[E]=zt[T]=zt["[object Uint8ClampedArray]"]=zt[R]=zt[P]=!0,zt[s]=zt[c]=zt[A]=zt[f]=zt[C]=zt[l]=zt[h]=zt[p]=zt[v]=zt[g]=zt[m]=zt[y]=zt[w]=zt[_]=zt[x]=!1;var Wt={};Wt[s]=Wt[c]=Wt[A]=Wt[C]=Wt[f]=Wt[l]=Wt[S]=Wt[k]=Wt[O]=Wt[M]=Wt[E]=Wt[v]=Wt[g]=Wt[m]=Wt[y]=Wt[w]=Wt[_]=Wt[b]=Wt[T]=Wt["[object Uint8ClampedArray]"]=Wt[R]=Wt[P]=!0,Wt[h]=Wt[p]=Wt[x]=!1;var Ft={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"},Yt=parseFloat,Gt=parseInt,qt="object"==typeof t&&t&&t.Object===Object&&t,$t="object"==typeof self&&self&&self.Object===Object&&self,Ht=qt||$t||Function("return this")(),Vt=e&&!e.nodeType&&e,Jt=Vt&&"object"==typeof r&&r&&!r.nodeType&&r,Xt=Jt&&Jt.exports===Vt,Qt=Xt&&qt.process,Zt=function(){try{var t=Jt&&Jt.require&&Jt.require("util").types;return t||Qt&&Qt.binding&&Qt.binding("util")}catch(t){}}(),Kt=Zt&&Zt.isArrayBuffer,te=Zt&&Zt.isDate,ee=Zt&&Zt.isMap,ne=Zt&&Zt.isRegExp,re=Zt&&Zt.isSet,ie=Zt&&Zt.isTypedArray;function oe(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}function ue(t,e,n,r){for(var i=-1,o=null==t?0:t.length;++i<o;){var u=t[i];e(r,u,n(u),t)}return r}function ae(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}function se(t,e){for(var n=null==t?0:t.length;n--&&!1!==e(t[n],n,t););return t}function ce(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(!e(t[n],n,t))return!1;return!0}function fe(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var u=t[n];e(u,n,t)&&(o[i++]=u)}return o}function le(t,e){return!!(null==t?0:t.length)&&be(t,e,0)>-1}function he(t,e,n){for(var r=-1,i=null==t?0:t.length;++r<i;)if(n(e,t[r]))return!0;return!1}function pe(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function de(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}function ve(t,e,n,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(n=t[++i]);++i<o;)n=e(n,t[i],i,t);return n}function ge(t,e,n,r){var i=null==t?0:t.length;for(r&&i&&(n=t[--i]);i--;)n=e(n,t[i],i,t);return n}function me(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}var ye=Se("length");function we(t,e,n){var r;return n(t,(function(t,n,i){if(e(t,n,i))return r=n,!1})),r}function _e(t,e,n,r){for(var i=t.length,o=n+(r?1:-1);r?o--:++o<i;)if(e(t[o],o,t))return o;return-1}function be(t,e,n){return e==e?function(t,e,n){var r=n-1,i=t.length;for(;++r<i;)if(t[r]===e)return r;return-1}(t,e,n):_e(t,Ae,n)}function xe(t,e,n,r){for(var i=n-1,o=t.length;++i<o;)if(r(t[i],e))return i;return-1}function Ae(t){return t!=t}function Ce(t,e){var n=null==t?0:t.length;return n?Me(t,e)/n:NaN}function Se(t){return function(e){return null==e?void 0:e[t]}}function ke(t){return function(e){return null==t?void 0:t[e]}}function Oe(t,e,n,r,i){return i(t,(function(t,i,o){n=r?(r=!1,t):e(n,t,i,o)})),n}function Me(t,e){for(var n,r=-1,i=t.length;++r<i;){var o=e(t[r]);void 0!==o&&(n=void 0===n?o:n+o)}return n}function Ee(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}function Te(t){return function(e){return t(e)}}function Re(t,e){return pe(e,(function(e){return t[e]}))}function Pe(t,e){return t.has(e)}function je(t,e){for(var n=-1,r=t.length;++n<r&&be(e,t[n],0)>-1;);return n}function Le(t,e){for(var n=t.length;n--&&be(e,t[n],0)>-1;);return n}function Ue(t,e){for(var n=t.length,r=0;n--;)t[n]===e&&++r;return r}var Be=ke({\u00c0:"A",\u00c1:"A",\u00c2:"A",\u00c3:"A",\u00c4:"A",\u00c5:"A",\u00e0:"a",\u00e1:"a",\u00e2:"a",\u00e3:"a",\u00e4:"a",\u00e5:"a",\u00c7:"C",\u00e7:"c",\u00d0:"D",\u00f0:"d",\u00c8:"E",\u00c9:"E",\u00ca:"E",\u00cb:"E",\u00e8:"e",\u00e9:"e",\u00ea:"e",\u00eb:"e",\u00cc:"I",\u00cd:"I",\u00ce:"I",\u00cf:"I",\u00ec:"i",\u00ed:"i",\u00ee:"i",\u00ef:"i",\u00d1:"N",\u00f1:"n",\u00d2:"O",\u00d3:"O",\u00d4:"O",\u00d5:"O",\u00d6:"O",\u00d8:"O",\u00f2:"o",\u00f3:"o",\u00f4:"o",\u00f5:"o",\u00f6:"o",\u00f8:"o",\u00d9:"U",\u00da:"U",\u00db:"U",\u00dc:"U",\u00f9:"u",\u00fa:"u",\u00fb:"u",\u00fc:"u",\u00dd:"Y",\u00fd:"y",\u00ff:"y",\u00c6:"Ae",\u00e6:"ae",\u00de:"Th",\u00fe:"th",\u00df:"ss",\u0100:"A",\u0102:"A",\u0104:"A",\u0101:"a",\u0103:"a",\u0105:"a",\u0106:"C",\u0108:"C",\u010a:"C",\u010c:"C",\u0107:"c",\u0109:"c",\u010b:"c",\u010d:"c",\u010e:"D",\u0110:"D",\u010f:"d",\u0111:"d",\u0112:"E",\u0114:"E",\u0116:"E",\u0118:"E",\u011a:"E",\u0113:"e",\u0115:"e",\u0117:"e",\u0119:"e",\u011b:"e",\u011c:"G",\u011e:"G",\u0120:"G",\u0122:"G",\u011d:"g",\u011f:"g",\u0121:"g",\u0123:"g",\u0124:"H",\u0126:"H",\u0125:"h",\u0127:"h",\u0128:"I",\u012a:"I",\u012c:"I",\u012e:"I",\u0130:"I",\u0129:"i",\u012b:"i",\u012d:"i",\u012f:"i",\u0131:"i",\u0134:"J",\u0135:"j",\u0136:"K",\u0137:"k",\u0138:"k",\u0139:"L",\u013b:"L",\u013d:"L",\u013f:"L",\u0141:"L",\u013a:"l",\u013c:"l",\u013e:"l",\u0140:"l",\u0142:"l",\u0143:"N",\u0145:"N",\u0147:"N",\u014a:"N",\u0144:"n",\u0146:"n",\u0148:"n",\u014b:"n",\u014c:"O",\u014e:"O",\u0150:"O",\u014d:"o",\u014f:"o",\u0151:"o",\u0154:"R",\u0156:"R",\u0158:"R",\u0155:"r",\u0157:"r",\u0159:"r",\u015a:"S",\u015c:"S",\u015e:"S",\u0160:"S",\u015b:"s",\u015d:"s",\u015f:"s",\u0161:"s",\u0162:"T",\u0164:"T",\u0166:"T",\u0163:"t",\u0165:"t",\u0167:"t",\u0168:"U",\u016a:"U",\u016c:"U",\u016e:"U",\u0170:"U",\u0172:"U",\u0169:"u",\u016b:"u",\u016d:"u",\u016f:"u",\u0171:"u",\u0173:"u",\u0174:"W",\u0175:"w",\u0176:"Y",\u0177:"y",\u0178:"Y",\u0179:"Z",\u017b:"Z",\u017d:"Z",\u017a:"z",\u017c:"z",\u017e:"z",\u0132:"IJ",\u0133:"ij",\u0152:"Oe",\u0153:"oe",\u0149:"'n",\u017f:"s"}),De=ke({"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"});function Ie(t){return"\\"+Ft[t]}function Ne(t){return Bt.test(t)}function ze(t){var e=-1,n=Array(t.size);return t.forEach((function(t,r){n[++e]=[r,t]})),n}function We(t,e){return function(n){return t(e(n))}}function Fe(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var a=t[n];a!==e&&a!==u||(t[n]=u,o[i++]=n)}return o}function Ye(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=t})),n}function Ge(t){var e=-1,n=Array(t.size);return t.forEach((function(t){n[++e]=[t,t]})),n}function qe(t){return Ne(t)?function(t){var e=Lt.lastIndex=0;for(;Lt.test(t);)++e;return e}(t):ye(t)}function $e(t){return Ne(t)?function(t){return t.match(Lt)||[]}(t):function(t){return t.split("")}(t)}var He=ke({"&amp;":"&","&lt;":"<","&gt;":">","&quot;":'"',"&#39;":"'"});var Ve=function t(e){var n,r=(e=null==e?Ht:Ve.defaults(Ht.Object(),e,Ve.pick(Ht,It))).Array,i=e.Date,ht=e.Error,pt=e.Function,dt=e.Math,vt=e.Object,gt=e.RegExp,mt=e.String,yt=e.TypeError,wt=r.prototype,_t=pt.prototype,bt=vt.prototype,xt=e["__core-js_shared__"],At=_t.toString,Ct=bt.hasOwnProperty,St=0,kt=(n=/[^.]+$/.exec(xt&&xt.keys&&xt.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"",Ot=bt.toString,Mt=At.call(vt),Et=Ht._,Tt=gt("^"+At.call(Ct).replace($,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$"),Rt=Xt?e.Buffer:void 0,Lt=e.Symbol,Bt=e.Uint8Array,Ft=Rt?Rt.allocUnsafe:void 0,qt=We(vt.getPrototypeOf,vt),$t=vt.create,Vt=bt.propertyIsEnumerable,Jt=wt.splice,Qt=Lt?Lt.isConcatSpreadable:void 0,Zt=Lt?Lt.iterator:void 0,ye=Lt?Lt.toStringTag:void 0,ke=function(){try{var t=Ki(vt,"defineProperty");return t({},"",{}),t}catch(t){}}(),Je=e.clearTimeout!==Ht.clearTimeout&&e.clearTimeout,Xe=i&&i.now!==Ht.Date.now&&i.now,Qe=e.setTimeout!==Ht.setTimeout&&e.setTimeout,Ze=dt.ceil,Ke=dt.floor,tn=vt.getOwnPropertySymbols,en=Rt?Rt.isBuffer:void 0,nn=e.isFinite,rn=wt.join,on=We(vt.keys,vt),un=dt.max,an=dt.min,sn=i.now,cn=e.parseInt,fn=dt.random,ln=wt.reverse,hn=Ki(e,"DataView"),pn=Ki(e,"Map"),dn=Ki(e,"Promise"),vn=Ki(e,"Set"),gn=Ki(e,"WeakMap"),mn=Ki(vt,"create"),yn=gn&&new gn,wn={},_n=Oo(hn),bn=Oo(pn),xn=Oo(dn),An=Oo(vn),Cn=Oo(gn),Sn=Lt?Lt.prototype:void 0,kn=Sn?Sn.valueOf:void 0,On=Sn?Sn.toString:void 0;function Mn(t){if(Gu(t)&&!ju(t)&&!(t instanceof Pn)){if(t instanceof Rn)return t;if(Ct.call(t,"__wrapped__"))return Mo(t)}return new Rn(t)}var En=function(){function t(){}return function(e){if(!Yu(e))return{};if($t)return $t(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();function Tn(){}function Rn(t,e){this.__wrapped__=t,this.__actions__=[],this.__chain__=!!e,this.__index__=0,this.__values__=void 0}function Pn(t){this.__wrapped__=t,this.__actions__=[],this.__dir__=1,this.__filtered__=!1,this.__iteratees__=[],this.__takeCount__=4294967295,this.__views__=[]}function jn(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Ln(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Un(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Bn(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new Un;++e<n;)this.add(t[e])}function Dn(t){var e=this.__data__=new Ln(t);this.size=e.size}function In(t,e){var n=ju(t),r=!n&&Pu(t),i=!n&&!r&&Du(t),o=!n&&!r&&!i&&Zu(t),u=n||r||i||o,a=u?Ee(t.length,mt):[],s=a.length;for(var c in t)!e&&!Ct.call(t,c)||u&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||uo(c,s))||a.push(c);return a}function Nn(t){var e=t.length;return e?t[Br(0,e-1)]:void 0}function zn(t,e){return Co(mi(t),Jn(e,0,t.length))}function Wn(t){return Co(mi(t))}function Fn(t,e,n){(void 0!==n&&!Eu(t[e],n)||void 0===n&&!(e in t))&&Hn(t,e,n)}function Yn(t,e,n){var r=t[e];Ct.call(t,e)&&Eu(r,n)&&(void 0!==n||e in t)||Hn(t,e,n)}function Gn(t,e){for(var n=t.length;n--;)if(Eu(t[n][0],e))return n;return-1}function qn(t,e,n,r){return tr(t,(function(t,i,o){e(r,t,n(t),o)})),r}function $n(t,e){return t&&yi(e,_a(e),t)}function Hn(t,e,n){"__proto__"==e&&ke?ke(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function Vn(t,e){for(var n=-1,i=e.length,o=r(i),u=null==t;++n<i;)o[n]=u?void 0:va(t,e[n]);return o}function Jn(t,e,n){return t==t&&(void 0!==n&&(t=t<=n?t:n),void 0!==e&&(t=t>=e?t:e)),t}function Xn(t,e,n,r,i,o){var u,a=1&e,c=2&e,h=4&e;if(n&&(u=i?n(t,r,i,o):n(t)),void 0!==u)return u;if(!Yu(t))return t;var x=ju(t);if(x){if(u=function(t){var e=t.length,n=new t.constructor(e);e&&"string"==typeof t[0]&&Ct.call(t,"index")&&(n.index=t.index,n.input=t.input);return n}(t),!a)return mi(t,u)}else{var j=no(t),L=j==p||j==d;if(Du(t))return li(t,a);if(j==m||j==s||L&&!i){if(u=c||L?{}:io(t),!a)return c?function(t,e){return yi(t,eo(t),e)}(t,function(t,e){return t&&yi(e,ba(e),t)}(u,t)):function(t,e){return yi(t,to(t),e)}(t,$n(u,t))}else{if(!Wt[j])return i?t:{};u=function(t,e,n){var r=t.constructor;switch(e){case A:return hi(t);case f:case l:return new r(+t);case C:return function(t,e){var n=e?hi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.byteLength)}(t,n);case S:case k:case O:case M:case E:case T:case"[object Uint8ClampedArray]":case R:case P:return pi(t,n);case v:return new r;case g:case _:return new r(t);case y:return function(t){var e=new t.constructor(t.source,rt.exec(t));return e.lastIndex=t.lastIndex,e}(t);case w:return new r;case b:return i=t,kn?vt(kn.call(i)):{}}var i}(t,j,a)}}o||(o=new Dn);var U=o.get(t);if(U)return U;o.set(t,u),Ju(t)?t.forEach((function(r){u.add(Xn(r,e,n,r,t,o))})):qu(t)&&t.forEach((function(r,i){u.set(i,Xn(r,e,n,i,t,o))}));var B=x?void 0:(h?c?$i:qi:c?ba:_a)(t);return ae(B||t,(function(r,i){B&&(r=t[i=r]),Yn(u,i,Xn(r,e,n,i,t,o))})),u}function Qn(t,e,n){var r=n.length;if(null==t)return!r;for(t=vt(t);r--;){var i=n[r],o=e[i],u=t[i];if(void 0===u&&!(i in t)||!o(u))return!1}return!0}function Zn(t,e,n){if("function"!=typeof t)throw new yt(o);return _o((function(){t.apply(void 0,n)}),e)}function Kn(t,e,n,r){var i=-1,o=le,u=!0,a=t.length,s=[],c=e.length;if(!a)return s;n&&(e=pe(e,Te(n))),r?(o=he,u=!1):e.length>=200&&(o=Pe,u=!1,e=new Bn(e));t:for(;++i<a;){var f=t[i],l=null==n?f:n(f);if(f=r||0!==f?f:0,u&&l==l){for(var h=c;h--;)if(e[h]===l)continue t;s.push(f)}else o(e,l,r)||s.push(f)}return s}Mn.templateSettings={escape:z,evaluate:W,interpolate:F,variable:"",imports:{_:Mn}},Mn.prototype=Tn.prototype,Mn.prototype.constructor=Mn,Rn.prototype=En(Tn.prototype),Rn.prototype.constructor=Rn,Pn.prototype=En(Tn.prototype),Pn.prototype.constructor=Pn,jn.prototype.clear=function(){this.__data__=mn?mn(null):{},this.size=0},jn.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},jn.prototype.get=function(t){var e=this.__data__;if(mn){var n=e[t];return"__lodash_hash_undefined__"===n?void 0:n}return Ct.call(e,t)?e[t]:void 0},jn.prototype.has=function(t){var e=this.__data__;return mn?void 0!==e[t]:Ct.call(e,t)},jn.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=mn&&void 0===e?"__lodash_hash_undefined__":e,this},Ln.prototype.clear=function(){this.__data__=[],this.size=0},Ln.prototype.delete=function(t){var e=this.__data__,n=Gn(e,t);return!(n<0)&&(n==e.length-1?e.pop():Jt.call(e,n,1),--this.size,!0)},Ln.prototype.get=function(t){var e=this.__data__,n=Gn(e,t);return n<0?void 0:e[n][1]},Ln.prototype.has=function(t){return Gn(this.__data__,t)>-1},Ln.prototype.set=function(t,e){var n=this.__data__,r=Gn(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this},Un.prototype.clear=function(){this.size=0,this.__data__={hash:new jn,map:new(pn||Ln),string:new jn}},Un.prototype.delete=function(t){var e=Qi(this,t).delete(t);return this.size-=e?1:0,e},Un.prototype.get=function(t){return Qi(this,t).get(t)},Un.prototype.has=function(t){return Qi(this,t).has(t)},Un.prototype.set=function(t,e){var n=Qi(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this},Bn.prototype.add=Bn.prototype.push=function(t){return this.__data__.set(t,"__lodash_hash_undefined__"),this},Bn.prototype.has=function(t){return this.__data__.has(t)},Dn.prototype.clear=function(){this.__data__=new Ln,this.size=0},Dn.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Dn.prototype.get=function(t){return this.__data__.get(t)},Dn.prototype.has=function(t){return this.__data__.has(t)},Dn.prototype.set=function(t,e){var n=this.__data__;if(n instanceof Ln){var r=n.__data__;if(!pn||r.length<199)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new Un(r)}return n.set(t,e),this.size=n.size,this};var tr=bi(sr),er=bi(cr,!0);function nr(t,e){var n=!0;return tr(t,(function(t,r,i){return n=!!e(t,r,i)})),n}function rr(t,e,n){for(var r=-1,i=t.length;++r<i;){var o=t[r],u=e(o);if(null!=u&&(void 0===a?u==u&&!Qu(u):n(u,a)))var a=u,s=o}return s}function ir(t,e){var n=[];return tr(t,(function(t,r,i){e(t,r,i)&&n.push(t)})),n}function or(t,e,n,r,i){var o=-1,u=t.length;for(n||(n=oo),i||(i=[]);++o<u;){var a=t[o];e>0&&n(a)?e>1?or(a,e-1,n,r,i):de(i,a):r||(i[i.length]=a)}return i}var ur=xi(),ar=xi(!0);function sr(t,e){return t&&ur(t,e,_a)}function cr(t,e){return t&&ar(t,e,_a)}function fr(t,e){return fe(e,(function(e){return zu(t[e])}))}function lr(t,e){for(var n=0,r=(e=ai(e,t)).length;null!=t&&n<r;)t=t[ko(e[n++])];return n&&n==r?t:void 0}function hr(t,e,n){var r=e(t);return ju(t)?r:de(r,n(t))}function pr(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":ye&&ye in vt(t)?function(t){var e=Ct.call(t,ye),n=t[ye];try{t[ye]=void 0;var r=!0}catch(t){}var i=Ot.call(t);r&&(e?t[ye]=n:delete t[ye]);return i}(t):function(t){return Ot.call(t)}(t)}function dr(t,e){return t>e}function vr(t,e){return null!=t&&Ct.call(t,e)}function gr(t,e){return null!=t&&e in vt(t)}function mr(t,e,n){for(var i=n?he:le,o=t[0].length,u=t.length,a=u,s=r(u),c=1/0,f=[];a--;){var l=t[a];a&&e&&(l=pe(l,Te(e))),c=an(l.length,c),s[a]=!n&&(e||o>=120&&l.length>=120)?new Bn(a&&l):void 0}l=t[0];var h=-1,p=s[0];t:for(;++h<o&&f.length<c;){var d=l[h],v=e?e(d):d;if(d=n||0!==d?d:0,!(p?Pe(p,v):i(f,v,n))){for(a=u;--a;){var g=s[a];if(!(g?Pe(g,v):i(t[a],v,n)))continue t}p&&p.push(v),f.push(d)}}return f}function yr(t,e,n){var r=null==(t=go(t,e=ai(e,t)))?t:t[ko(No(e))];return null==r?void 0:oe(r,t,n)}function wr(t){return Gu(t)&&pr(t)==s}function _r(t,e,n,r,i){return t===e||(null==t||null==e||!Gu(t)&&!Gu(e)?t!=t&&e!=e:function(t,e,n,r,i,o){var u=ju(t),a=ju(e),p=u?c:no(t),d=a?c:no(e),x=(p=p==s?m:p)==m,S=(d=d==s?m:d)==m,k=p==d;if(k&&Du(t)){if(!Du(e))return!1;u=!0,x=!1}if(k&&!x)return o||(o=new Dn),u||Zu(t)?Yi(t,e,n,r,i,o):function(t,e,n,r,i,o,u){switch(n){case C:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case A:return!(t.byteLength!=e.byteLength||!o(new Bt(t),new Bt(e)));case f:case l:case g:return Eu(+t,+e);case h:return t.name==e.name&&t.message==e.message;case y:case _:return t==e+"";case v:var a=ze;case w:var s=1&r;if(a||(a=Ye),t.size!=e.size&&!s)return!1;var c=u.get(t);if(c)return c==e;r|=2,u.set(t,e);var p=Yi(a(t),a(e),r,i,o,u);return u.delete(t),p;case b:if(kn)return kn.call(t)==kn.call(e)}return!1}(t,e,p,n,r,i,o);if(!(1&n)){var O=x&&Ct.call(t,"__wrapped__"),M=S&&Ct.call(e,"__wrapped__");if(O||M){var E=O?t.value():t,T=M?e.value():e;return o||(o=new Dn),i(E,T,n,r,o)}}if(!k)return!1;return o||(o=new Dn),function(t,e,n,r,i,o){var u=1&n,a=qi(t),s=a.length,c=qi(e).length;if(s!=c&&!u)return!1;var f=s;for(;f--;){var l=a[f];if(!(u?l in e:Ct.call(e,l)))return!1}var h=o.get(t),p=o.get(e);if(h&&p)return h==e&&p==t;var d=!0;o.set(t,e),o.set(e,t);var v=u;for(;++f<s;){l=a[f];var g=t[l],m=e[l];if(r)var y=u?r(m,g,l,e,t,o):r(g,m,l,t,e,o);if(!(void 0===y?g===m||i(g,m,n,r,o):y)){d=!1;break}v||(v="constructor"==l)}if(d&&!v){var w=t.constructor,_=e.constructor;w==_||!("constructor"in t)||!("constructor"in e)||"function"==typeof w&&w instanceof w&&"function"==typeof _&&_ instanceof _||(d=!1)}return o.delete(t),o.delete(e),d}(t,e,n,r,i,o)}(t,e,n,r,_r,i))}function br(t,e,n,r){var i=n.length,o=i,u=!r;if(null==t)return!o;for(t=vt(t);i--;){var a=n[i];if(u&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++i<o;){var s=(a=n[i])[0],c=t[s],f=a[1];if(u&&a[2]){if(void 0===c&&!(s in t))return!1}else{var l=new Dn;if(r)var h=r(c,f,s,t,e,l);if(!(void 0===h?_r(f,c,3,r,l):h))return!1}}return!0}function xr(t){return!(!Yu(t)||(e=t,kt&&kt in e))&&(zu(t)?Tt:ut).test(Oo(t));var e}function Ar(t){return"function"==typeof t?t:null==t?$a:"object"==typeof t?ju(t)?Er(t[0],t[1]):Mr(t):es(t)}function Cr(t){if(!lo(t))return on(t);var e=[];for(var n in vt(t))Ct.call(t,n)&&"constructor"!=n&&e.push(n);return e}function Sr(t){if(!Yu(t))return function(t){var e=[];if(null!=t)for(var n in vt(t))e.push(n);return e}(t);var e=lo(t),n=[];for(var r in t)("constructor"!=r||!e&&Ct.call(t,r))&&n.push(r);return n}function kr(t,e){return t<e}function Or(t,e){var n=-1,i=Uu(t)?r(t.length):[];return tr(t,(function(t,r,o){i[++n]=e(t,r,o)})),i}function Mr(t){var e=Zi(t);return 1==e.length&&e[0][2]?po(e[0][0],e[0][1]):function(n){return n===t||br(n,t,e)}}function Er(t,e){return so(t)&&ho(e)?po(ko(t),e):function(n){var r=va(n,t);return void 0===r&&r===e?ga(n,t):_r(e,r,3)}}function Tr(t,e,n,r,i){t!==e&&ur(e,(function(o,u){if(i||(i=new Dn),Yu(o))!function(t,e,n,r,i,o,u){var a=yo(t,n),s=yo(e,n),c=u.get(s);if(c)return void Fn(t,n,c);var f=o?o(a,s,n+"",t,e,u):void 0,l=void 0===f;if(l){var h=ju(s),p=!h&&Du(s),d=!h&&!p&&Zu(s);f=s,h||p||d?ju(a)?f=a:Bu(a)?f=mi(a):p?(l=!1,f=li(s,!0)):d?(l=!1,f=pi(s,!0)):f=[]:Hu(s)||Pu(s)?(f=a,Pu(a)?f=ua(a):Yu(a)&&!zu(a)||(f=io(s))):l=!1}l&&(u.set(s,f),i(f,s,r,o,u),u.delete(s));Fn(t,n,f)}(t,e,u,n,Tr,r,i);else{var a=r?r(yo(t,u),o,u+"",t,e,i):void 0;void 0===a&&(a=o),Fn(t,u,a)}}),ba)}function Rr(t,e){var n=t.length;if(n)return uo(e+=e<0?n:0,n)?t[e]:void 0}function Pr(t,e,n){e=e.length?pe(e,(function(t){return ju(t)?function(e){return lr(e,1===t.length?t[0]:t)}:t})):[$a];var r=-1;return e=pe(e,Te(Xi())),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(Or(t,(function(t,n,i){return{criteria:pe(e,(function(e){return e(t)})),index:++r,value:t}})),(function(t,e){return function(t,e,n){var r=-1,i=t.criteria,o=e.criteria,u=i.length,a=n.length;for(;++r<u;){var s=di(i[r],o[r]);if(s){if(r>=a)return s;var c=n[r];return s*("desc"==c?-1:1)}}return t.index-e.index}(t,e,n)}))}function jr(t,e,n){for(var r=-1,i=e.length,o={};++r<i;){var u=e[r],a=lr(t,u);n(a,u)&&Wr(o,ai(u,t),a)}return o}function Lr(t,e,n,r){var i=r?xe:be,o=-1,u=e.length,a=t;for(t===e&&(e=mi(e)),n&&(a=pe(t,Te(n)));++o<u;)for(var s=0,c=e[o],f=n?n(c):c;(s=i(a,f,s,r))>-1;)a!==t&&Jt.call(a,s,1),Jt.call(t,s,1);return t}function Ur(t,e){for(var n=t?e.length:0,r=n-1;n--;){var i=e[n];if(n==r||i!==o){var o=i;uo(i)?Jt.call(t,i,1):Kr(t,i)}}return t}function Br(t,e){return t+Ke(fn()*(e-t+1))}function Dr(t,e){var n="";if(!t||e<1||e>9007199254740991)return n;do{e%2&&(n+=t),(e=Ke(e/2))&&(t+=t)}while(e);return n}function Ir(t,e){return bo(vo(t,e,$a),t+"")}function Nr(t){return Nn(Ea(t))}function zr(t,e){var n=Ea(t);return Co(n,Jn(e,0,n.length))}function Wr(t,e,n,r){if(!Yu(t))return t;for(var i=-1,o=(e=ai(e,t)).length,u=o-1,a=t;null!=a&&++i<o;){var s=ko(e[i]),c=n;if("__proto__"===s||"constructor"===s||"prototype"===s)return t;if(i!=u){var f=a[s];void 0===(c=r?r(f,s,a):void 0)&&(c=Yu(f)?f:uo(e[i+1])?[]:{})}Yn(a,s,c),a=a[s]}return t}var Fr=yn?function(t,e){return yn.set(t,e),t}:$a,Yr=ke?function(t,e){return ke(t,"toString",{configurable:!0,enumerable:!1,value:Ya(e),writable:!0})}:$a;function Gr(t){return Co(Ea(t))}function qr(t,e,n){var i=-1,o=t.length;e<0&&(e=-e>o?0:o+e),(n=n>o?o:n)<0&&(n+=o),o=e>n?0:n-e>>>0,e>>>=0;for(var u=r(o);++i<o;)u[i]=t[i+e];return u}function $r(t,e){var n;return tr(t,(function(t,r,i){return!(n=e(t,r,i))})),!!n}function Hr(t,e,n){var r=0,i=null==t?r:t.length;if("number"==typeof e&&e==e&&i<=2147483647){for(;r<i;){var o=r+i>>>1,u=t[o];null!==u&&!Qu(u)&&(n?u<=e:u<e)?r=o+1:i=o}return i}return Vr(t,e,$a,n)}function Vr(t,e,n,r){var i=0,o=null==t?0:t.length;if(0===o)return 0;for(var u=(e=n(e))!=e,a=null===e,s=Qu(e),c=void 0===e;i<o;){var f=Ke((i+o)/2),l=n(t[f]),h=void 0!==l,p=null===l,d=l==l,v=Qu(l);if(u)var g=r||d;else g=c?d&&(r||h):a?d&&h&&(r||!p):s?d&&h&&!p&&(r||!v):!p&&!v&&(r?l<=e:l<e);g?i=f+1:o=f}return an(o,4294967294)}function Jr(t,e){for(var n=-1,r=t.length,i=0,o=[];++n<r;){var u=t[n],a=e?e(u):u;if(!n||!Eu(a,s)){var s=a;o[i++]=0===u?0:u}}return o}function Xr(t){return"number"==typeof t?t:Qu(t)?NaN:+t}function Qr(t){if("string"==typeof t)return t;if(ju(t))return pe(t,Qr)+"";if(Qu(t))return On?On.call(t):"";var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Zr(t,e,n){var r=-1,i=le,o=t.length,u=!0,a=[],s=a;if(n)u=!1,i=he;else if(o>=200){var c=e?null:Di(t);if(c)return Ye(c);u=!1,i=Pe,s=new Bn}else s=e?[]:a;t:for(;++r<o;){var f=t[r],l=e?e(f):f;if(f=n||0!==f?f:0,u&&l==l){for(var h=s.length;h--;)if(s[h]===l)continue t;e&&s.push(l),a.push(f)}else i(s,l,n)||(s!==a&&s.push(l),a.push(f))}return a}function Kr(t,e){return null==(t=go(t,e=ai(e,t)))||delete t[ko(No(e))]}function ti(t,e,n,r){return Wr(t,e,n(lr(t,e)),r)}function ei(t,e,n,r){for(var i=t.length,o=r?i:-1;(r?o--:++o<i)&&e(t[o],o,t););return n?qr(t,r?0:o,r?o+1:i):qr(t,r?o+1:0,r?i:o)}function ni(t,e){var n=t;return n instanceof Pn&&(n=n.value()),ve(e,(function(t,e){return e.func.apply(e.thisArg,de([t],e.args))}),n)}function ri(t,e,n){var i=t.length;if(i<2)return i?Zr(t[0]):[];for(var o=-1,u=r(i);++o<i;)for(var a=t[o],s=-1;++s<i;)s!=o&&(u[o]=Kn(u[o]||a,t[s],e,n));return Zr(or(u,1),e,n)}function ii(t,e,n){for(var r=-1,i=t.length,o=e.length,u={};++r<i;){var a=r<o?e[r]:void 0;n(u,t[r],a)}return u}function oi(t){return Bu(t)?t:[]}function ui(t){return"function"==typeof t?t:$a}function ai(t,e){return ju(t)?t:so(t,e)?[t]:So(aa(t))}var si=Ir;function ci(t,e,n){var r=t.length;return n=void 0===n?r:n,!e&&n>=r?t:qr(t,e,n)}var fi=Je||function(t){return Ht.clearTimeout(t)};function li(t,e){if(e)return t.slice();var n=t.length,r=Ft?Ft(n):new t.constructor(n);return t.copy(r),r}function hi(t){var e=new t.constructor(t.byteLength);return new Bt(e).set(new Bt(t)),e}function pi(t,e){var n=e?hi(t.buffer):t.buffer;return new t.constructor(n,t.byteOffset,t.length)}function di(t,e){if(t!==e){var n=void 0!==t,r=null===t,i=t==t,o=Qu(t),u=void 0!==e,a=null===e,s=e==e,c=Qu(e);if(!a&&!c&&!o&&t>e||o&&u&&s&&!a&&!c||r&&u&&s||!n&&s||!i)return 1;if(!r&&!o&&!c&&t<e||c&&n&&i&&!r&&!o||a&&n&&i||!u&&i||!s)return-1}return 0}function vi(t,e,n,i){for(var o=-1,u=t.length,a=n.length,s=-1,c=e.length,f=un(u-a,0),l=r(c+f),h=!i;++s<c;)l[s]=e[s];for(;++o<a;)(h||o<u)&&(l[n[o]]=t[o]);for(;f--;)l[s++]=t[o++];return l}function gi(t,e,n,i){for(var o=-1,u=t.length,a=-1,s=n.length,c=-1,f=e.length,l=un(u-s,0),h=r(l+f),p=!i;++o<l;)h[o]=t[o];for(var d=o;++c<f;)h[d+c]=e[c];for(;++a<s;)(p||o<u)&&(h[d+n[a]]=t[o++]);return h}function mi(t,e){var n=-1,i=t.length;for(e||(e=r(i));++n<i;)e[n]=t[n];return e}function yi(t,e,n,r){var i=!n;n||(n={});for(var o=-1,u=e.length;++o<u;){var a=e[o],s=r?r(n[a],t[a],a,n,t):void 0;void 0===s&&(s=t[a]),i?Hn(n,a,s):Yn(n,a,s)}return n}function wi(t,e){return function(n,r){var i=ju(n)?ue:qn,o=e?e():{};return i(n,t,Xi(r,2),o)}}function _i(t){return Ir((function(e,n){var r=-1,i=n.length,o=i>1?n[i-1]:void 0,u=i>2?n[2]:void 0;for(o=t.length>3&&"function"==typeof o?(i--,o):void 0,u&&ao(n[0],n[1],u)&&(o=i<3?void 0:o,i=1),e=vt(e);++r<i;){var a=n[r];a&&t(e,a,r,o)}return e}))}function bi(t,e){return function(n,r){if(null==n)return n;if(!Uu(n))return t(n,r);for(var i=n.length,o=e?i:-1,u=vt(n);(e?o--:++o<i)&&!1!==r(u[o],o,u););return n}}function xi(t){return function(e,n,r){for(var i=-1,o=vt(e),u=r(e),a=u.length;a--;){var s=u[t?a:++i];if(!1===n(o[s],s,o))break}return e}}function Ai(t){return function(e){var n=Ne(e=aa(e))?$e(e):void 0,r=n?n[0]:e.charAt(0),i=n?ci(n,1).join(""):e.slice(1);return r[t]()+i}}function Ci(t){return function(e){return ve(za(Pa(e).replace(Pt,"")),t,"")}}function Si(t){return function(){var e=arguments;switch(e.length){case 0:return new t;case 1:return new t(e[0]);case 2:return new t(e[0],e[1]);case 3:return new t(e[0],e[1],e[2]);case 4:return new t(e[0],e[1],e[2],e[3]);case 5:return new t(e[0],e[1],e[2],e[3],e[4]);case 6:return new t(e[0],e[1],e[2],e[3],e[4],e[5]);case 7:return new t(e[0],e[1],e[2],e[3],e[4],e[5],e[6])}var n=En(t.prototype),r=t.apply(n,e);return Yu(r)?r:n}}function ki(t){return function(e,n,r){var i=vt(e);if(!Uu(e)){var o=Xi(n,3);e=_a(e),n=function(t){return o(i[t],t,i)}}var u=t(e,n,r);return u>-1?i[o?e[u]:u]:void 0}}function Oi(t){return Gi((function(e){var n=e.length,r=n,i=Rn.prototype.thru;for(t&&e.reverse();r--;){var u=e[r];if("function"!=typeof u)throw new yt(o);if(i&&!a&&"wrapper"==Vi(u))var a=new Rn([],!0)}for(r=a?r:n;++r<n;){var s=Vi(u=e[r]),c="wrapper"==s?Hi(u):void 0;a=c&&co(c[0])&&424==c[1]&&!c[4].length&&1==c[9]?a[Vi(c[0])].apply(a,c[3]):1==u.length&&co(u)?a[s]():a.thru(u)}return function(){var t=arguments,r=t[0];if(a&&1==t.length&&ju(r))return a.plant(r).value();for(var i=0,o=n?e[i].apply(this,t):r;++i<n;)o=e[i].call(this,o);return o}}))}function Mi(t,e,n,i,o,u,a,s,c,f){var l=128&e,h=1&e,p=2&e,d=24&e,v=512&e,g=p?void 0:Si(t);return function m(){for(var y=arguments.length,w=r(y),_=y;_--;)w[_]=arguments[_];if(d)var b=Ji(m),x=Ue(w,b);if(i&&(w=vi(w,i,o,d)),u&&(w=gi(w,u,a,d)),y-=x,d&&y<f){var A=Fe(w,b);return Ui(t,e,Mi,m.placeholder,n,w,A,s,c,f-y)}var C=h?n:this,S=p?C[t]:t;return y=w.length,s?w=mo(w,s):v&&y>1&&w.reverse(),l&&c<y&&(w.length=c),this&&this!==Ht&&this instanceof m&&(S=g||Si(S)),S.apply(C,w)}}function Ei(t,e){return function(n,r){return function(t,e,n,r){return sr(t,(function(t,i,o){e(r,n(t),i,o)})),r}(n,t,e(r),{})}}function Ti(t,e){return function(n,r){var i;if(void 0===n&&void 0===r)return e;if(void 0!==n&&(i=n),void 0!==r){if(void 0===i)return r;"string"==typeof n||"string"==typeof r?(n=Qr(n),r=Qr(r)):(n=Xr(n),r=Xr(r)),i=t(n,r)}return i}}function Ri(t){return Gi((function(e){return e=pe(e,Te(Xi())),Ir((function(n){var r=this;return t(e,(function(t){return oe(t,r,n)}))}))}))}function Pi(t,e){var n=(e=void 0===e?" ":Qr(e)).length;if(n<2)return n?Dr(e,t):e;var r=Dr(e,Ze(t/qe(e)));return Ne(e)?ci($e(r),0,t).join(""):r.slice(0,t)}function ji(t){return function(e,n,i){return i&&"number"!=typeof i&&ao(e,n,i)&&(n=i=void 0),e=na(e),void 0===n?(n=e,e=0):n=na(n),function(t,e,n,i){for(var o=-1,u=un(Ze((e-t)/(n||1)),0),a=r(u);u--;)a[i?u:++o]=t,t+=n;return a}(e,n,i=void 0===i?e<n?1:-1:na(i),t)}}function Li(t){return function(e,n){return"string"==typeof e&&"string"==typeof n||(e=oa(e),n=oa(n)),t(e,n)}}function Ui(t,e,n,r,i,o,u,a,s,c){var f=8&e;e|=f?32:64,4&(e&=~(f?64:32))||(e&=-4);var l=[t,e,i,f?o:void 0,f?u:void 0,f?void 0:o,f?void 0:u,a,s,c],h=n.apply(void 0,l);return co(t)&&wo(h,l),h.placeholder=r,xo(h,t,e)}function Bi(t){var e=dt[t];return function(t,n){if(t=oa(t),(n=null==n?0:an(ra(n),292))&&nn(t)){var r=(aa(t)+"e").split("e");return+((r=(aa(e(r[0]+"e"+(+r[1]+n)))+"e").split("e"))[0]+"e"+(+r[1]-n))}return e(t)}}var Di=vn&&1/Ye(new vn([,-0]))[1]==1/0?function(t){return new vn(t)}:Qa;function Ii(t){return function(e){var n=no(e);return n==v?ze(e):n==w?Ge(e):function(t,e){return pe(e,(function(e){return[e,t[e]]}))}(e,t(e))}}function Ni(t,e,n,i,a,s,c,f){var l=2&e;if(!l&&"function"!=typeof t)throw new yt(o);var h=i?i.length:0;if(h||(e&=-97,i=a=void 0),c=void 0===c?c:un(ra(c),0),f=void 0===f?f:ra(f),h-=a?a.length:0,64&e){var p=i,d=a;i=a=void 0}var v=l?void 0:Hi(t),g=[t,e,n,i,a,p,d,s,c,f];if(v&&function(t,e){var n=t[1],r=e[1],i=n|r,o=i<131,a=128==r&&8==n||128==r&&256==n&&t[7].length<=e[8]||384==r&&e[7].length<=e[8]&&8==n;if(!o&&!a)return t;1&r&&(t[2]=e[2],i|=1&n?0:4);var s=e[3];if(s){var c=t[3];t[3]=c?vi(c,s,e[4]):s,t[4]=c?Fe(t[3],u):e[4]}(s=e[5])&&(c=t[5],t[5]=c?gi(c,s,e[6]):s,t[6]=c?Fe(t[5],u):e[6]);(s=e[7])&&(t[7]=s);128&r&&(t[8]=null==t[8]?e[8]:an(t[8],e[8]));null==t[9]&&(t[9]=e[9]);t[0]=e[0],t[1]=i}(g,v),t=g[0],e=g[1],n=g[2],i=g[3],a=g[4],!(f=g[9]=void 0===g[9]?l?0:t.length:un(g[9]-h,0))&&24&e&&(e&=-25),e&&1!=e)m=8==e||16==e?function(t,e,n){var i=Si(t);return function o(){for(var u=arguments.length,a=r(u),s=u,c=Ji(o);s--;)a[s]=arguments[s];var f=u<3&&a[0]!==c&&a[u-1]!==c?[]:Fe(a,c);if((u-=f.length)<n)return Ui(t,e,Mi,o.placeholder,void 0,a,f,void 0,void 0,n-u);var l=this&&this!==Ht&&this instanceof o?i:t;return oe(l,this,a)}}(t,e,f):32!=e&&33!=e||a.length?Mi.apply(void 0,g):function(t,e,n,i){var o=1&e,u=Si(t);return function e(){for(var a=-1,s=arguments.length,c=-1,f=i.length,l=r(f+s),h=this&&this!==Ht&&this instanceof e?u:t;++c<f;)l[c]=i[c];for(;s--;)l[c++]=arguments[++a];return oe(h,o?n:this,l)}}(t,e,n,i);else var m=function(t,e,n){var r=1&e,i=Si(t);return function e(){var o=this&&this!==Ht&&this instanceof e?i:t;return o.apply(r?n:this,arguments)}}(t,e,n);return xo((v?Fr:wo)(m,g),t,e)}function zi(t,e,n,r){return void 0===t||Eu(t,bt[n])&&!Ct.call(r,n)?e:t}function Wi(t,e,n,r,i,o){return Yu(t)&&Yu(e)&&(o.set(e,t),Tr(t,e,void 0,Wi,o),o.delete(e)),t}function Fi(t){return Hu(t)?void 0:t}function Yi(t,e,n,r,i,o){var u=1&n,a=t.length,s=e.length;if(a!=s&&!(u&&s>a))return!1;var c=o.get(t),f=o.get(e);if(c&&f)return c==e&&f==t;var l=-1,h=!0,p=2&n?new Bn:void 0;for(o.set(t,e),o.set(e,t);++l<a;){var d=t[l],v=e[l];if(r)var g=u?r(v,d,l,e,t,o):r(d,v,l,t,e,o);if(void 0!==g){if(g)continue;h=!1;break}if(p){if(!me(e,(function(t,e){if(!Pe(p,e)&&(d===t||i(d,t,n,r,o)))return p.push(e)}))){h=!1;break}}else if(d!==v&&!i(d,v,n,r,o)){h=!1;break}}return o.delete(t),o.delete(e),h}function Gi(t){return bo(vo(t,void 0,Lo),t+"")}function qi(t){return hr(t,_a,to)}function $i(t){return hr(t,ba,eo)}var Hi=yn?function(t){return yn.get(t)}:Qa;function Vi(t){for(var e=t.name+"",n=wn[e],r=Ct.call(wn,e)?n.length:0;r--;){var i=n[r],o=i.func;if(null==o||o==t)return i.name}return e}function Ji(t){return(Ct.call(Mn,"placeholder")?Mn:t).placeholder}function Xi(){var t=Mn.iteratee||Ha;return t=t===Ha?Ar:t,arguments.length?t(arguments[0],arguments[1]):t}function Qi(t,e){var n,r,i=t.__data__;return("string"==(r=typeof(n=e))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?i["string"==typeof e?"string":"hash"]:i.map}function Zi(t){for(var e=_a(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,ho(i)]}return e}function Ki(t,e){var n=function(t,e){return null==t?void 0:t[e]}(t,e);return xr(n)?n:void 0}var to=tn?function(t){return null==t?[]:(t=vt(t),fe(tn(t),(function(e){return Vt.call(t,e)})))}:is,eo=tn?function(t){for(var e=[];t;)de(e,to(t)),t=qt(t);return e}:is,no=pr;function ro(t,e,n){for(var r=-1,i=(e=ai(e,t)).length,o=!1;++r<i;){var u=ko(e[r]);if(!(o=null!=t&&n(t,u)))break;t=t[u]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&Fu(i)&&uo(u,i)&&(ju(t)||Pu(t))}function io(t){return"function"!=typeof t.constructor||lo(t)?{}:En(qt(t))}function oo(t){return ju(t)||Pu(t)||!!(Qt&&t&&t[Qt])}function uo(t,e){var n=typeof t;return!!(e=null==e?9007199254740991:e)&&("number"==n||"symbol"!=n&&st.test(t))&&t>-1&&t%1==0&&t<e}function ao(t,e,n){if(!Yu(n))return!1;var r=typeof e;return!!("number"==r?Uu(n)&&uo(e,n.length):"string"==r&&e in n)&&Eu(n[e],t)}function so(t,e){if(ju(t))return!1;var n=typeof t;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!Qu(t))||(G.test(t)||!Y.test(t)||null!=e&&t in vt(e))}function co(t){var e=Vi(t),n=Mn[e];if("function"!=typeof n||!(e in Pn.prototype))return!1;if(t===n)return!0;var r=Hi(n);return!!r&&t===r[0]}(hn&&no(new hn(new ArrayBuffer(1)))!=C||pn&&no(new pn)!=v||dn&&"[object Promise]"!=no(dn.resolve())||vn&&no(new vn)!=w||gn&&no(new gn)!=x)&&(no=function(t){var e=pr(t),n=e==m?t.constructor:void 0,r=n?Oo(n):"";if(r)switch(r){case _n:return C;case bn:return v;case xn:return"[object Promise]";case An:return w;case Cn:return x}return e});var fo=xt?zu:os;function lo(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||bt)}function ho(t){return t==t&&!Yu(t)}function po(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in vt(n)))}}function vo(t,e,n){return e=un(void 0===e?t.length-1:e,0),function(){for(var i=arguments,o=-1,u=un(i.length-e,0),a=r(u);++o<u;)a[o]=i[e+o];o=-1;for(var s=r(e+1);++o<e;)s[o]=i[o];return s[e]=n(a),oe(t,this,s)}}function go(t,e){return e.length<2?t:lr(t,qr(e,0,-1))}function mo(t,e){for(var n=t.length,r=an(e.length,n),i=mi(t);r--;){var o=e[r];t[r]=uo(o,n)?i[o]:void 0}return t}function yo(t,e){if(("constructor"!==e||"function"!=typeof t[e])&&"__proto__"!=e)return t[e]}var wo=Ao(Fr),_o=Qe||function(t,e){return Ht.setTimeout(t,e)},bo=Ao(Yr);function xo(t,e,n){var r=e+"";return bo(t,function(t,e){var n=e.length;if(!n)return t;var r=n-1;return e[r]=(n>1?"& ":"")+e[r],e=e.join(n>2?", ":" "),t.replace(Q,"{\n/* [wrapped with "+e+"] */\n")}(r,function(t,e){return ae(a,(function(n){var r="_."+n[0];e&n[1]&&!le(t,r)&&t.push(r)})),t.sort()}(function(t){var e=t.match(Z);return e?e[1].split(K):[]}(r),n)))}function Ao(t){var e=0,n=0;return function(){var r=sn(),i=16-(r-n);if(n=r,i>0){if(++e>=800)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}function Co(t,e){var n=-1,r=t.length,i=r-1;for(e=void 0===e?r:e;++n<e;){var o=Br(n,i),u=t[o];t[o]=t[n],t[n]=u}return t.length=e,t}var So=function(t){var e=Au(t,(function(t){return 500===n.size&&n.clear(),t})),n=e.cache;return e}((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(q,(function(t,n,r,i){e.push(r?i.replace(et,"$1"):n||t)})),e}));function ko(t){if("string"==typeof t||Qu(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}function Oo(t){if(null!=t){try{return At.call(t)}catch(t){}try{return t+""}catch(t){}}return""}function Mo(t){if(t instanceof Pn)return t.clone();var e=new Rn(t.__wrapped__,t.__chain__);return e.__actions__=mi(t.__actions__),e.__index__=t.__index__,e.__values__=t.__values__,e}var Eo=Ir((function(t,e){return Bu(t)?Kn(t,or(e,1,Bu,!0)):[]})),To=Ir((function(t,e){var n=No(e);return Bu(n)&&(n=void 0),Bu(t)?Kn(t,or(e,1,Bu,!0),Xi(n,2)):[]})),Ro=Ir((function(t,e){var n=No(e);return Bu(n)&&(n=void 0),Bu(t)?Kn(t,or(e,1,Bu,!0),void 0,n):[]}));function Po(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:ra(n);return i<0&&(i=un(r+i,0)),_e(t,Xi(e,3),i)}function jo(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r-1;return void 0!==n&&(i=ra(n),i=n<0?un(r+i,0):an(i,r-1)),_e(t,Xi(e,3),i,!0)}function Lo(t){return(null==t?0:t.length)?or(t,1):[]}function Uo(t){return t&&t.length?t[0]:void 0}var Bo=Ir((function(t){var e=pe(t,oi);return e.length&&e[0]===t[0]?mr(e):[]})),Do=Ir((function(t){var e=No(t),n=pe(t,oi);return e===No(n)?e=void 0:n.pop(),n.length&&n[0]===t[0]?mr(n,Xi(e,2)):[]})),Io=Ir((function(t){var e=No(t),n=pe(t,oi);return(e="function"==typeof e?e:void 0)&&n.pop(),n.length&&n[0]===t[0]?mr(n,void 0,e):[]}));function No(t){var e=null==t?0:t.length;return e?t[e-1]:void 0}var zo=Ir(Wo);function Wo(t,e){return t&&t.length&&e&&e.length?Lr(t,e):t}var Fo=Gi((function(t,e){var n=null==t?0:t.length,r=Vn(t,e);return Ur(t,pe(e,(function(t){return uo(t,n)?+t:t})).sort(di)),r}));function Yo(t){return null==t?t:ln.call(t)}var Go=Ir((function(t){return Zr(or(t,1,Bu,!0))})),qo=Ir((function(t){var e=No(t);return Bu(e)&&(e=void 0),Zr(or(t,1,Bu,!0),Xi(e,2))})),$o=Ir((function(t){var e=No(t);return e="function"==typeof e?e:void 0,Zr(or(t,1,Bu,!0),void 0,e)}));function Ho(t){if(!t||!t.length)return[];var e=0;return t=fe(t,(function(t){if(Bu(t))return e=un(t.length,e),!0})),Ee(e,(function(e){return pe(t,Se(e))}))}function Vo(t,e){if(!t||!t.length)return[];var n=Ho(t);return null==e?n:pe(n,(function(t){return oe(e,void 0,t)}))}var Jo=Ir((function(t,e){return Bu(t)?Kn(t,e):[]})),Xo=Ir((function(t){return ri(fe(t,Bu))})),Qo=Ir((function(t){var e=No(t);return Bu(e)&&(e=void 0),ri(fe(t,Bu),Xi(e,2))})),Zo=Ir((function(t){var e=No(t);return e="function"==typeof e?e:void 0,ri(fe(t,Bu),void 0,e)})),Ko=Ir(Ho);var tu=Ir((function(t){var e=t.length,n=e>1?t[e-1]:void 0;return n="function"==typeof n?(t.pop(),n):void 0,Vo(t,n)}));function eu(t){var e=Mn(t);return e.__chain__=!0,e}function nu(t,e){return e(t)}var ru=Gi((function(t){var e=t.length,n=e?t[0]:0,r=this.__wrapped__,i=function(e){return Vn(e,t)};return!(e>1||this.__actions__.length)&&r instanceof Pn&&uo(n)?((r=r.slice(n,+n+(e?1:0))).__actions__.push({func:nu,args:[i],thisArg:void 0}),new Rn(r,this.__chain__).thru((function(t){return e&&!t.length&&t.push(void 0),t}))):this.thru(i)}));var iu=wi((function(t,e,n){Ct.call(t,n)?++t[n]:Hn(t,n,1)}));var ou=ki(Po),uu=ki(jo);function au(t,e){return(ju(t)?ae:tr)(t,Xi(e,3))}function su(t,e){return(ju(t)?se:er)(t,Xi(e,3))}var cu=wi((function(t,e,n){Ct.call(t,n)?t[n].push(e):Hn(t,n,[e])}));var fu=Ir((function(t,e,n){var i=-1,o="function"==typeof e,u=Uu(t)?r(t.length):[];return tr(t,(function(t){u[++i]=o?oe(e,t,n):yr(t,e,n)})),u})),lu=wi((function(t,e,n){Hn(t,n,e)}));function hu(t,e){return(ju(t)?pe:Or)(t,Xi(e,3))}var pu=wi((function(t,e,n){t[n?0:1].push(e)}),(function(){return[[],[]]}));var du=Ir((function(t,e){if(null==t)return[];var n=e.length;return n>1&&ao(t,e[0],e[1])?e=[]:n>2&&ao(e[0],e[1],e[2])&&(e=[e[0]]),Pr(t,or(e,1),[])})),vu=Xe||function(){return Ht.Date.now()};function gu(t,e,n){return e=n?void 0:e,Ni(t,128,void 0,void 0,void 0,void 0,e=t&&null==e?t.length:e)}function mu(t,e){var n;if("function"!=typeof e)throw new yt(o);return t=ra(t),function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=void 0),n}}var yu=Ir((function(t,e,n){var r=1;if(n.length){var i=Fe(n,Ji(yu));r|=32}return Ni(t,r,e,n,i)})),wu=Ir((function(t,e,n){var r=3;if(n.length){var i=Fe(n,Ji(wu));r|=32}return Ni(e,r,t,n,i)}));function _u(t,e,n){var r,i,u,a,s,c,f=0,l=!1,h=!1,p=!0;if("function"!=typeof t)throw new yt(o);function d(e){var n=r,o=i;return r=i=void 0,f=e,a=t.apply(o,n)}function v(t){return f=t,s=_o(m,e),l?d(t):a}function g(t){var n=t-c;return void 0===c||n>=e||n<0||h&&t-f>=u}function m(){var t=vu();if(g(t))return y(t);s=_o(m,function(t){var n=e-(t-c);return h?an(n,u-(t-f)):n}(t))}function y(t){return s=void 0,p&&r?d(t):(r=i=void 0,a)}function w(){var t=vu(),n=g(t);if(r=arguments,i=this,c=t,n){if(void 0===s)return v(c);if(h)return fi(s),s=_o(m,e),d(c)}return void 0===s&&(s=_o(m,e)),a}return e=oa(e)||0,Yu(n)&&(l=!!n.leading,u=(h="maxWait"in n)?un(oa(n.maxWait)||0,e):u,p="trailing"in n?!!n.trailing:p),w.cancel=function(){void 0!==s&&fi(s),f=0,r=c=i=s=void 0},w.flush=function(){return void 0===s?a:y(vu())},w}var bu=Ir((function(t,e){return Zn(t,1,e)})),xu=Ir((function(t,e,n){return Zn(t,oa(e)||0,n)}));function Au(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new yt(o);var n=function(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var u=t.apply(this,r);return n.cache=o.set(i,u)||o,u};return n.cache=new(Au.Cache||Un),n}function Cu(t){if("function"!=typeof t)throw new yt(o);return function(){var e=arguments;switch(e.length){case 0:return!t.call(this);case 1:return!t.call(this,e[0]);case 2:return!t.call(this,e[0],e[1]);case 3:return!t.call(this,e[0],e[1],e[2])}return!t.apply(this,e)}}Au.Cache=Un;var Su=si((function(t,e){var n=(e=1==e.length&&ju(e[0])?pe(e[0],Te(Xi())):pe(or(e,1),Te(Xi()))).length;return Ir((function(r){for(var i=-1,o=an(r.length,n);++i<o;)r[i]=e[i].call(this,r[i]);return oe(t,this,r)}))})),ku=Ir((function(t,e){return Ni(t,32,void 0,e,Fe(e,Ji(ku)))})),Ou=Ir((function(t,e){return Ni(t,64,void 0,e,Fe(e,Ji(Ou)))})),Mu=Gi((function(t,e){return Ni(t,256,void 0,void 0,void 0,e)}));function Eu(t,e){return t===e||t!=t&&e!=e}var Tu=Li(dr),Ru=Li((function(t,e){return t>=e})),Pu=wr(function(){return arguments}())?wr:function(t){return Gu(t)&&Ct.call(t,"callee")&&!Vt.call(t,"callee")},ju=r.isArray,Lu=Kt?Te(Kt):function(t){return Gu(t)&&pr(t)==A};function Uu(t){return null!=t&&Fu(t.length)&&!zu(t)}function Bu(t){return Gu(t)&&Uu(t)}var Du=en||os,Iu=te?Te(te):function(t){return Gu(t)&&pr(t)==l};function Nu(t){if(!Gu(t))return!1;var e=pr(t);return e==h||"[object DOMException]"==e||"string"==typeof t.message&&"string"==typeof t.name&&!Hu(t)}function zu(t){if(!Yu(t))return!1;var e=pr(t);return e==p||e==d||"[object AsyncFunction]"==e||"[object Proxy]"==e}function Wu(t){return"number"==typeof t&&t==ra(t)}function Fu(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=9007199254740991}function Yu(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}function Gu(t){return null!=t&&"object"==typeof t}var qu=ee?Te(ee):function(t){return Gu(t)&&no(t)==v};function $u(t){return"number"==typeof t||Gu(t)&&pr(t)==g}function Hu(t){if(!Gu(t)||pr(t)!=m)return!1;var e=qt(t);if(null===e)return!0;var n=Ct.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&At.call(n)==Mt}var Vu=ne?Te(ne):function(t){return Gu(t)&&pr(t)==y};var Ju=re?Te(re):function(t){return Gu(t)&&no(t)==w};function Xu(t){return"string"==typeof t||!ju(t)&&Gu(t)&&pr(t)==_}function Qu(t){return"symbol"==typeof t||Gu(t)&&pr(t)==b}var Zu=ie?Te(ie):function(t){return Gu(t)&&Fu(t.length)&&!!zt[pr(t)]};var Ku=Li(kr),ta=Li((function(t,e){return t<=e}));function ea(t){if(!t)return[];if(Uu(t))return Xu(t)?$e(t):mi(t);if(Zt&&t[Zt])return function(t){for(var e,n=[];!(e=t.next()).done;)n.push(e.value);return n}(t[Zt]());var e=no(t);return(e==v?ze:e==w?Ye:Ea)(t)}function na(t){return t?(t=oa(t))===1/0||t===-1/0?17976931348623157e292*(t<0?-1:1):t==t?t:0:0===t?t:0}function ra(t){var e=na(t),n=e%1;return e==e?n?e-n:e:0}function ia(t){return t?Jn(ra(t),0,4294967295):0}function oa(t){if("number"==typeof t)return t;if(Qu(t))return NaN;if(Yu(t)){var e="function"==typeof t.valueOf?t.valueOf():t;t=Yu(e)?e+"":e}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(V,"");var n=ot.test(t);return n||at.test(t)?Gt(t.slice(2),n?2:8):it.test(t)?NaN:+t}function ua(t){return yi(t,ba(t))}function aa(t){return null==t?"":Qr(t)}var sa=_i((function(t,e){if(lo(e)||Uu(e))yi(e,_a(e),t);else for(var n in e)Ct.call(e,n)&&Yn(t,n,e[n])})),ca=_i((function(t,e){yi(e,ba(e),t)})),fa=_i((function(t,e,n,r){yi(e,ba(e),t,r)})),la=_i((function(t,e,n,r){yi(e,_a(e),t,r)})),ha=Gi(Vn);var pa=Ir((function(t,e){t=vt(t);var n=-1,r=e.length,i=r>2?e[2]:void 0;for(i&&ao(e[0],e[1],i)&&(r=1);++n<r;)for(var o=e[n],u=ba(o),a=-1,s=u.length;++a<s;){var c=u[a],f=t[c];(void 0===f||Eu(f,bt[c])&&!Ct.call(t,c))&&(t[c]=o[c])}return t})),da=Ir((function(t){return t.push(void 0,Wi),oe(Aa,void 0,t)}));function va(t,e,n){var r=null==t?void 0:lr(t,e);return void 0===r?n:r}function ga(t,e){return null!=t&&ro(t,e,gr)}var ma=Ei((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Ot.call(e)),t[e]=n}),Ya($a)),ya=Ei((function(t,e,n){null!=e&&"function"!=typeof e.toString&&(e=Ot.call(e)),Ct.call(t,e)?t[e].push(n):t[e]=[n]}),Xi),wa=Ir(yr);function _a(t){return Uu(t)?In(t):Cr(t)}function ba(t){return Uu(t)?In(t,!0):Sr(t)}var xa=_i((function(t,e,n){Tr(t,e,n)})),Aa=_i((function(t,e,n,r){Tr(t,e,n,r)})),Ca=Gi((function(t,e){var n={};if(null==t)return n;var r=!1;e=pe(e,(function(e){return e=ai(e,t),r||(r=e.length>1),e})),yi(t,$i(t),n),r&&(n=Xn(n,7,Fi));for(var i=e.length;i--;)Kr(n,e[i]);return n}));var Sa=Gi((function(t,e){return null==t?{}:function(t,e){return jr(t,e,(function(e,n){return ga(t,n)}))}(t,e)}));function ka(t,e){if(null==t)return{};var n=pe($i(t),(function(t){return[t]}));return e=Xi(e),jr(t,n,(function(t,n){return e(t,n[0])}))}var Oa=Ii(_a),Ma=Ii(ba);function Ea(t){return null==t?[]:Re(t,_a(t))}var Ta=Ci((function(t,e,n){return e=e.toLowerCase(),t+(n?Ra(e):e)}));function Ra(t){return Na(aa(t).toLowerCase())}function Pa(t){return(t=aa(t))&&t.replace(ct,Be).replace(jt,"")}var ja=Ci((function(t,e,n){return t+(n?"-":"")+e.toLowerCase()})),La=Ci((function(t,e,n){return t+(n?" ":"")+e.toLowerCase()})),Ua=Ai("toLowerCase");var Ba=Ci((function(t,e,n){return t+(n?"_":"")+e.toLowerCase()}));var Da=Ci((function(t,e,n){return t+(n?" ":"")+Na(e)}));var Ia=Ci((function(t,e,n){return t+(n?" ":"")+e.toUpperCase()})),Na=Ai("toUpperCase");function za(t,e,n){return t=aa(t),void 0===(e=n?void 0:e)?function(t){return Dt.test(t)}(t)?function(t){return t.match(Ut)||[]}(t):function(t){return t.match(tt)||[]}(t):t.match(e)||[]}var Wa=Ir((function(t,e){try{return oe(t,void 0,e)}catch(t){return Nu(t)?t:new ht(t)}})),Fa=Gi((function(t,e){return ae(e,(function(e){e=ko(e),Hn(t,e,yu(t[e],t))})),t}));function Ya(t){return function(){return t}}var Ga=Oi(),qa=Oi(!0);function $a(t){return t}function Ha(t){return Ar("function"==typeof t?t:Xn(t,1))}var Va=Ir((function(t,e){return function(n){return yr(n,t,e)}})),Ja=Ir((function(t,e){return function(n){return yr(t,n,e)}}));function Xa(t,e,n){var r=_a(e),i=fr(e,r);null!=n||Yu(e)&&(i.length||!r.length)||(n=e,e=t,t=this,i=fr(e,_a(e)));var o=!(Yu(n)&&"chain"in n&&!n.chain),u=zu(t);return ae(i,(function(n){var r=e[n];t[n]=r,u&&(t.prototype[n]=function(){var e=this.__chain__;if(o||e){var n=t(this.__wrapped__),i=n.__actions__=mi(this.__actions__);return i.push({func:r,args:arguments,thisArg:t}),n.__chain__=e,n}return r.apply(t,de([this.value()],arguments))})})),t}function Qa(){}var Za=Ri(pe),Ka=Ri(ce),ts=Ri(me);function es(t){return so(t)?Se(ko(t)):function(t){return function(e){return lr(e,t)}}(t)}var ns=ji(),rs=ji(!0);function is(){return[]}function os(){return!1}var us=Ti((function(t,e){return t+e}),0),as=Bi("ceil"),ss=Ti((function(t,e){return t/e}),1),cs=Bi("floor");var fs,ls=Ti((function(t,e){return t*e}),1),hs=Bi("round"),ps=Ti((function(t,e){return t-e}),0);return Mn.after=function(t,e){if("function"!=typeof e)throw new yt(o);return t=ra(t),function(){if(--t<1)return e.apply(this,arguments)}},Mn.ary=gu,Mn.assign=sa,Mn.assignIn=ca,Mn.assignInWith=fa,Mn.assignWith=la,Mn.at=ha,Mn.before=mu,Mn.bind=yu,Mn.bindAll=Fa,Mn.bindKey=wu,Mn.castArray=function(){if(!arguments.length)return[];var t=arguments[0];return ju(t)?t:[t]},Mn.chain=eu,Mn.chunk=function(t,e,n){e=(n?ao(t,e,n):void 0===e)?1:un(ra(e),0);var i=null==t?0:t.length;if(!i||e<1)return[];for(var o=0,u=0,a=r(Ze(i/e));o<i;)a[u++]=qr(t,o,o+=e);return a},Mn.compact=function(t){for(var e=-1,n=null==t?0:t.length,r=0,i=[];++e<n;){var o=t[e];o&&(i[r++]=o)}return i},Mn.concat=function(){var t=arguments.length;if(!t)return[];for(var e=r(t-1),n=arguments[0],i=t;i--;)e[i-1]=arguments[i];return de(ju(n)?mi(n):[n],or(e,1))},Mn.cond=function(t){var e=null==t?0:t.length,n=Xi();return t=e?pe(t,(function(t){if("function"!=typeof t[1])throw new yt(o);return[n(t[0]),t[1]]})):[],Ir((function(n){for(var r=-1;++r<e;){var i=t[r];if(oe(i[0],this,n))return oe(i[1],this,n)}}))},Mn.conforms=function(t){return function(t){var e=_a(t);return function(n){return Qn(n,t,e)}}(Xn(t,1))},Mn.constant=Ya,Mn.countBy=iu,Mn.create=function(t,e){var n=En(t);return null==e?n:$n(n,e)},Mn.curry=function t(e,n,r){var i=Ni(e,8,void 0,void 0,void 0,void 0,void 0,n=r?void 0:n);return i.placeholder=t.placeholder,i},Mn.curryRight=function t(e,n,r){var i=Ni(e,16,void 0,void 0,void 0,void 0,void 0,n=r?void 0:n);return i.placeholder=t.placeholder,i},Mn.debounce=_u,Mn.defaults=pa,Mn.defaultsDeep=da,Mn.defer=bu,Mn.delay=xu,Mn.difference=Eo,Mn.differenceBy=To,Mn.differenceWith=Ro,Mn.drop=function(t,e,n){var r=null==t?0:t.length;return r?qr(t,(e=n||void 0===e?1:ra(e))<0?0:e,r):[]},Mn.dropRight=function(t,e,n){var r=null==t?0:t.length;return r?qr(t,0,(e=r-(e=n||void 0===e?1:ra(e)))<0?0:e):[]},Mn.dropRightWhile=function(t,e){return t&&t.length?ei(t,Xi(e,3),!0,!0):[]},Mn.dropWhile=function(t,e){return t&&t.length?ei(t,Xi(e,3),!0):[]},Mn.fill=function(t,e,n,r){var i=null==t?0:t.length;return i?(n&&"number"!=typeof n&&ao(t,e,n)&&(n=0,r=i),function(t,e,n,r){var i=t.length;for((n=ra(n))<0&&(n=-n>i?0:i+n),(r=void 0===r||r>i?i:ra(r))<0&&(r+=i),r=n>r?0:ia(r);n<r;)t[n++]=e;return t}(t,e,n,r)):[]},Mn.filter=function(t,e){return(ju(t)?fe:ir)(t,Xi(e,3))},Mn.flatMap=function(t,e){return or(hu(t,e),1)},Mn.flatMapDeep=function(t,e){return or(hu(t,e),1/0)},Mn.flatMapDepth=function(t,e,n){return n=void 0===n?1:ra(n),or(hu(t,e),n)},Mn.flatten=Lo,Mn.flattenDeep=function(t){return(null==t?0:t.length)?or(t,1/0):[]},Mn.flattenDepth=function(t,e){return(null==t?0:t.length)?or(t,e=void 0===e?1:ra(e)):[]},Mn.flip=function(t){return Ni(t,512)},Mn.flow=Ga,Mn.flowRight=qa,Mn.fromPairs=function(t){for(var e=-1,n=null==t?0:t.length,r={};++e<n;){var i=t[e];r[i[0]]=i[1]}return r},Mn.functions=function(t){return null==t?[]:fr(t,_a(t))},Mn.functionsIn=function(t){return null==t?[]:fr(t,ba(t))},Mn.groupBy=cu,Mn.initial=function(t){return(null==t?0:t.length)?qr(t,0,-1):[]},Mn.intersection=Bo,Mn.intersectionBy=Do,Mn.intersectionWith=Io,Mn.invert=ma,Mn.invertBy=ya,Mn.invokeMap=fu,Mn.iteratee=Ha,Mn.keyBy=lu,Mn.keys=_a,Mn.keysIn=ba,Mn.map=hu,Mn.mapKeys=function(t,e){var n={};return e=Xi(e,3),sr(t,(function(t,r,i){Hn(n,e(t,r,i),t)})),n},Mn.mapValues=function(t,e){var n={};return e=Xi(e,3),sr(t,(function(t,r,i){Hn(n,r,e(t,r,i))})),n},Mn.matches=function(t){return Mr(Xn(t,1))},Mn.matchesProperty=function(t,e){return Er(t,Xn(e,1))},Mn.memoize=Au,Mn.merge=xa,Mn.mergeWith=Aa,Mn.method=Va,Mn.methodOf=Ja,Mn.mixin=Xa,Mn.negate=Cu,Mn.nthArg=function(t){return t=ra(t),Ir((function(e){return Rr(e,t)}))},Mn.omit=Ca,Mn.omitBy=function(t,e){return ka(t,Cu(Xi(e)))},Mn.once=function(t){return mu(2,t)},Mn.orderBy=function(t,e,n,r){return null==t?[]:(ju(e)||(e=null==e?[]:[e]),ju(n=r?void 0:n)||(n=null==n?[]:[n]),Pr(t,e,n))},Mn.over=Za,Mn.overArgs=Su,Mn.overEvery=Ka,Mn.overSome=ts,Mn.partial=ku,Mn.partialRight=Ou,Mn.partition=pu,Mn.pick=Sa,Mn.pickBy=ka,Mn.property=es,Mn.propertyOf=function(t){return function(e){return null==t?void 0:lr(t,e)}},Mn.pull=zo,Mn.pullAll=Wo,Mn.pullAllBy=function(t,e,n){return t&&t.length&&e&&e.length?Lr(t,e,Xi(n,2)):t},Mn.pullAllWith=function(t,e,n){return t&&t.length&&e&&e.length?Lr(t,e,void 0,n):t},Mn.pullAt=Fo,Mn.range=ns,Mn.rangeRight=rs,Mn.rearg=Mu,Mn.reject=function(t,e){return(ju(t)?fe:ir)(t,Cu(Xi(e,3)))},Mn.remove=function(t,e){var n=[];if(!t||!t.length)return n;var r=-1,i=[],o=t.length;for(e=Xi(e,3);++r<o;){var u=t[r];e(u,r,t)&&(n.push(u),i.push(r))}return Ur(t,i),n},Mn.rest=function(t,e){if("function"!=typeof t)throw new yt(o);return Ir(t,e=void 0===e?e:ra(e))},Mn.reverse=Yo,Mn.sampleSize=function(t,e,n){return e=(n?ao(t,e,n):void 0===e)?1:ra(e),(ju(t)?zn:zr)(t,e)},Mn.set=function(t,e,n){return null==t?t:Wr(t,e,n)},Mn.setWith=function(t,e,n,r){return r="function"==typeof r?r:void 0,null==t?t:Wr(t,e,n,r)},Mn.shuffle=function(t){return(ju(t)?Wn:Gr)(t)},Mn.slice=function(t,e,n){var r=null==t?0:t.length;return r?(n&&"number"!=typeof n&&ao(t,e,n)?(e=0,n=r):(e=null==e?0:ra(e),n=void 0===n?r:ra(n)),qr(t,e,n)):[]},Mn.sortBy=du,Mn.sortedUniq=function(t){return t&&t.length?Jr(t):[]},Mn.sortedUniqBy=function(t,e){return t&&t.length?Jr(t,Xi(e,2)):[]},Mn.split=function(t,e,n){return n&&"number"!=typeof n&&ao(t,e,n)&&(e=n=void 0),(n=void 0===n?4294967295:n>>>0)?(t=aa(t))&&("string"==typeof e||null!=e&&!Vu(e))&&!(e=Qr(e))&&Ne(t)?ci($e(t),0,n):t.split(e,n):[]},Mn.spread=function(t,e){if("function"!=typeof t)throw new yt(o);return e=null==e?0:un(ra(e),0),Ir((function(n){var r=n[e],i=ci(n,0,e);return r&&de(i,r),oe(t,this,i)}))},Mn.tail=function(t){var e=null==t?0:t.length;return e?qr(t,1,e):[]},Mn.take=function(t,e,n){return t&&t.length?qr(t,0,(e=n||void 0===e?1:ra(e))<0?0:e):[]},Mn.takeRight=function(t,e,n){var r=null==t?0:t.length;return r?qr(t,(e=r-(e=n||void 0===e?1:ra(e)))<0?0:e,r):[]},Mn.takeRightWhile=function(t,e){return t&&t.length?ei(t,Xi(e,3),!1,!0):[]},Mn.takeWhile=function(t,e){return t&&t.length?ei(t,Xi(e,3)):[]},Mn.tap=function(t,e){return e(t),t},Mn.throttle=function(t,e,n){var r=!0,i=!0;if("function"!=typeof t)throw new yt(o);return Yu(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),_u(t,e,{leading:r,maxWait:e,trailing:i})},Mn.thru=nu,Mn.toArray=ea,Mn.toPairs=Oa,Mn.toPairsIn=Ma,Mn.toPath=function(t){return ju(t)?pe(t,ko):Qu(t)?[t]:mi(So(aa(t)))},Mn.toPlainObject=ua,Mn.transform=function(t,e,n){var r=ju(t),i=r||Du(t)||Zu(t);if(e=Xi(e,4),null==n){var o=t&&t.constructor;n=i?r?new o:[]:Yu(t)&&zu(o)?En(qt(t)):{}}return(i?ae:sr)(t,(function(t,r,i){return e(n,t,r,i)})),n},Mn.unary=function(t){return gu(t,1)},Mn.union=Go,Mn.unionBy=qo,Mn.unionWith=$o,Mn.uniq=function(t){return t&&t.length?Zr(t):[]},Mn.uniqBy=function(t,e){return t&&t.length?Zr(t,Xi(e,2)):[]},Mn.uniqWith=function(t,e){return e="function"==typeof e?e:void 0,t&&t.length?Zr(t,void 0,e):[]},Mn.unset=function(t,e){return null==t||Kr(t,e)},Mn.unzip=Ho,Mn.unzipWith=Vo,Mn.update=function(t,e,n){return null==t?t:ti(t,e,ui(n))},Mn.updateWith=function(t,e,n,r){return r="function"==typeof r?r:void 0,null==t?t:ti(t,e,ui(n),r)},Mn.values=Ea,Mn.valuesIn=function(t){return null==t?[]:Re(t,ba(t))},Mn.without=Jo,Mn.words=za,Mn.wrap=function(t,e){return ku(ui(e),t)},Mn.xor=Xo,Mn.xorBy=Qo,Mn.xorWith=Zo,Mn.zip=Ko,Mn.zipObject=function(t,e){return ii(t||[],e||[],Yn)},Mn.zipObjectDeep=function(t,e){return ii(t||[],e||[],Wr)},Mn.zipWith=tu,Mn.entries=Oa,Mn.entriesIn=Ma,Mn.extend=ca,Mn.extendWith=fa,Xa(Mn,Mn),Mn.add=us,Mn.attempt=Wa,Mn.camelCase=Ta,Mn.capitalize=Ra,Mn.ceil=as,Mn.clamp=function(t,e,n){return void 0===n&&(n=e,e=void 0),void 0!==n&&(n=(n=oa(n))==n?n:0),void 0!==e&&(e=(e=oa(e))==e?e:0),Jn(oa(t),e,n)},Mn.clone=function(t){return Xn(t,4)},Mn.cloneDeep=function(t){return Xn(t,5)},Mn.cloneDeepWith=function(t,e){return Xn(t,5,e="function"==typeof e?e:void 0)},Mn.cloneWith=function(t,e){return Xn(t,4,e="function"==typeof e?e:void 0)},Mn.conformsTo=function(t,e){return null==e||Qn(t,e,_a(e))},Mn.deburr=Pa,Mn.defaultTo=function(t,e){return null==t||t!=t?e:t},Mn.divide=ss,Mn.endsWith=function(t,e,n){t=aa(t),e=Qr(e);var r=t.length,i=n=void 0===n?r:Jn(ra(n),0,r);return(n-=e.length)>=0&&t.slice(n,i)==e},Mn.eq=Eu,Mn.escape=function(t){return(t=aa(t))&&N.test(t)?t.replace(D,De):t},Mn.escapeRegExp=function(t){return(t=aa(t))&&H.test(t)?t.replace($,"\\$&"):t},Mn.every=function(t,e,n){var r=ju(t)?ce:nr;return n&&ao(t,e,n)&&(e=void 0),r(t,Xi(e,3))},Mn.find=ou,Mn.findIndex=Po,Mn.findKey=function(t,e){return we(t,Xi(e,3),sr)},Mn.findLast=uu,Mn.findLastIndex=jo,Mn.findLastKey=function(t,e){return we(t,Xi(e,3),cr)},Mn.floor=cs,Mn.forEach=au,Mn.forEachRight=su,Mn.forIn=function(t,e){return null==t?t:ur(t,Xi(e,3),ba)},Mn.forInRight=function(t,e){return null==t?t:ar(t,Xi(e,3),ba)},Mn.forOwn=function(t,e){return t&&sr(t,Xi(e,3))},Mn.forOwnRight=function(t,e){return t&&cr(t,Xi(e,3))},Mn.get=va,Mn.gt=Tu,Mn.gte=Ru,Mn.has=function(t,e){return null!=t&&ro(t,e,vr)},Mn.hasIn=ga,Mn.head=Uo,Mn.identity=$a,Mn.includes=function(t,e,n,r){t=Uu(t)?t:Ea(t),n=n&&!r?ra(n):0;var i=t.length;return n<0&&(n=un(i+n,0)),Xu(t)?n<=i&&t.indexOf(e,n)>-1:!!i&&be(t,e,n)>-1},Mn.indexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=null==n?0:ra(n);return i<0&&(i=un(r+i,0)),be(t,e,i)},Mn.inRange=function(t,e,n){return e=na(e),void 0===n?(n=e,e=0):n=na(n),function(t,e,n){return t>=an(e,n)&&t<un(e,n)}(t=oa(t),e,n)},Mn.invoke=wa,Mn.isArguments=Pu,Mn.isArray=ju,Mn.isArrayBuffer=Lu,Mn.isArrayLike=Uu,Mn.isArrayLikeObject=Bu,Mn.isBoolean=function(t){return!0===t||!1===t||Gu(t)&&pr(t)==f},Mn.isBuffer=Du,Mn.isDate=Iu,Mn.isElement=function(t){return Gu(t)&&1===t.nodeType&&!Hu(t)},Mn.isEmpty=function(t){if(null==t)return!0;if(Uu(t)&&(ju(t)||"string"==typeof t||"function"==typeof t.splice||Du(t)||Zu(t)||Pu(t)))return!t.length;var e=no(t);if(e==v||e==w)return!t.size;if(lo(t))return!Cr(t).length;for(var n in t)if(Ct.call(t,n))return!1;return!0},Mn.isEqual=function(t,e){return _r(t,e)},Mn.isEqualWith=function(t,e,n){var r=(n="function"==typeof n?n:void 0)?n(t,e):void 0;return void 0===r?_r(t,e,void 0,n):!!r},Mn.isError=Nu,Mn.isFinite=function(t){return"number"==typeof t&&nn(t)},Mn.isFunction=zu,Mn.isInteger=Wu,Mn.isLength=Fu,Mn.isMap=qu,Mn.isMatch=function(t,e){return t===e||br(t,e,Zi(e))},Mn.isMatchWith=function(t,e,n){return n="function"==typeof n?n:void 0,br(t,e,Zi(e),n)},Mn.isNaN=function(t){return $u(t)&&t!=+t},Mn.isNative=function(t){if(fo(t))throw new ht("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");return xr(t)},Mn.isNil=function(t){return null==t},Mn.isNull=function(t){return null===t},Mn.isNumber=$u,Mn.isObject=Yu,Mn.isObjectLike=Gu,Mn.isPlainObject=Hu,Mn.isRegExp=Vu,Mn.isSafeInteger=function(t){return Wu(t)&&t>=-9007199254740991&&t<=9007199254740991},Mn.isSet=Ju,Mn.isString=Xu,Mn.isSymbol=Qu,Mn.isTypedArray=Zu,Mn.isUndefined=function(t){return void 0===t},Mn.isWeakMap=function(t){return Gu(t)&&no(t)==x},Mn.isWeakSet=function(t){return Gu(t)&&"[object WeakSet]"==pr(t)},Mn.join=function(t,e){return null==t?"":rn.call(t,e)},Mn.kebabCase=ja,Mn.last=No,Mn.lastIndexOf=function(t,e,n){var r=null==t?0:t.length;if(!r)return-1;var i=r;return void 0!==n&&(i=(i=ra(n))<0?un(r+i,0):an(i,r-1)),e==e?function(t,e,n){for(var r=n+1;r--;)if(t[r]===e)return r;return r}(t,e,i):_e(t,Ae,i,!0)},Mn.lowerCase=La,Mn.lowerFirst=Ua,Mn.lt=Ku,Mn.lte=ta,Mn.max=function(t){return t&&t.length?rr(t,$a,dr):void 0},Mn.maxBy=function(t,e){return t&&t.length?rr(t,Xi(e,2),dr):void 0},Mn.mean=function(t){return Ce(t,$a)},Mn.meanBy=function(t,e){return Ce(t,Xi(e,2))},Mn.min=function(t){return t&&t.length?rr(t,$a,kr):void 0},Mn.minBy=function(t,e){return t&&t.length?rr(t,Xi(e,2),kr):void 0},Mn.stubArray=is,Mn.stubFalse=os,Mn.stubObject=function(){return{}},Mn.stubString=function(){return""},Mn.stubTrue=function(){return!0},Mn.multiply=ls,Mn.nth=function(t,e){return t&&t.length?Rr(t,ra(e)):void 0},Mn.noConflict=function(){return Ht._===this&&(Ht._=Et),this},Mn.noop=Qa,Mn.now=vu,Mn.pad=function(t,e,n){t=aa(t);var r=(e=ra(e))?qe(t):0;if(!e||r>=e)return t;var i=(e-r)/2;return Pi(Ke(i),n)+t+Pi(Ze(i),n)},Mn.padEnd=function(t,e,n){t=aa(t);var r=(e=ra(e))?qe(t):0;return e&&r<e?t+Pi(e-r,n):t},Mn.padStart=function(t,e,n){t=aa(t);var r=(e=ra(e))?qe(t):0;return e&&r<e?Pi(e-r,n)+t:t},Mn.parseInt=function(t,e,n){return n||null==e?e=0:e&&(e=+e),cn(aa(t).replace(J,""),e||0)},Mn.random=function(t,e,n){if(n&&"boolean"!=typeof n&&ao(t,e,n)&&(e=n=void 0),void 0===n&&("boolean"==typeof e?(n=e,e=void 0):"boolean"==typeof t&&(n=t,t=void 0)),void 0===t&&void 0===e?(t=0,e=1):(t=na(t),void 0===e?(e=t,t=0):e=na(e)),t>e){var r=t;t=e,e=r}if(n||t%1||e%1){var i=fn();return an(t+i*(e-t+Yt("1e-"+((i+"").length-1))),e)}return Br(t,e)},Mn.reduce=function(t,e,n){var r=ju(t)?ve:Oe,i=arguments.length<3;return r(t,Xi(e,4),n,i,tr)},Mn.reduceRight=function(t,e,n){var r=ju(t)?ge:Oe,i=arguments.length<3;return r(t,Xi(e,4),n,i,er)},Mn.repeat=function(t,e,n){return e=(n?ao(t,e,n):void 0===e)?1:ra(e),Dr(aa(t),e)},Mn.replace=function(){var t=arguments,e=aa(t[0]);return t.length<3?e:e.replace(t[1],t[2])},Mn.result=function(t,e,n){var r=-1,i=(e=ai(e,t)).length;for(i||(i=1,t=void 0);++r<i;){var o=null==t?void 0:t[ko(e[r])];void 0===o&&(r=i,o=n),t=zu(o)?o.call(t):o}return t},Mn.round=hs,Mn.runInContext=t,Mn.sample=function(t){return(ju(t)?Nn:Nr)(t)},Mn.size=function(t){if(null==t)return 0;if(Uu(t))return Xu(t)?qe(t):t.length;var e=no(t);return e==v||e==w?t.size:Cr(t).length},Mn.snakeCase=Ba,Mn.some=function(t,e,n){var r=ju(t)?me:$r;return n&&ao(t,e,n)&&(e=void 0),r(t,Xi(e,3))},Mn.sortedIndex=function(t,e){return Hr(t,e)},Mn.sortedIndexBy=function(t,e,n){return Vr(t,e,Xi(n,2))},Mn.sortedIndexOf=function(t,e){var n=null==t?0:t.length;if(n){var r=Hr(t,e);if(r<n&&Eu(t[r],e))return r}return-1},Mn.sortedLastIndex=function(t,e){return Hr(t,e,!0)},Mn.sortedLastIndexBy=function(t,e,n){return Vr(t,e,Xi(n,2),!0)},Mn.sortedLastIndexOf=function(t,e){if(null==t?0:t.length){var n=Hr(t,e,!0)-1;if(Eu(t[n],e))return n}return-1},Mn.startCase=Da,Mn.startsWith=function(t,e,n){return t=aa(t),n=null==n?0:Jn(ra(n),0,t.length),e=Qr(e),t.slice(n,n+e.length)==e},Mn.subtract=ps,Mn.sum=function(t){return t&&t.length?Me(t,$a):0},Mn.sumBy=function(t,e){return t&&t.length?Me(t,Xi(e,2)):0},Mn.template=function(t,e,n){var r=Mn.templateSettings;n&&ao(t,e,n)&&(e=void 0),t=aa(t),e=fa({},e,r,zi);var i,o,u=fa({},e.imports,r.imports,zi),a=_a(u),s=Re(u,a),c=0,f=e.interpolate||ft,l="__p += '",h=gt((e.escape||ft).source+"|"+f.source+"|"+(f===F?nt:ft).source+"|"+(e.evaluate||ft).source+"|$","g"),p="//# sourceURL="+(Ct.call(e,"sourceURL")?(e.sourceURL+"").replace(/\s/g," "):"lodash.templateSources["+ ++Nt+"]")+"\n";t.replace(h,(function(e,n,r,u,a,s){return r||(r=u),l+=t.slice(c,s).replace(lt,Ie),n&&(i=!0,l+="' +\n__e("+n+") +\n'"),a&&(o=!0,l+="';\n"+a+";\n__p += '"),r&&(l+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=s+e.length,e})),l+="';\n";var d=Ct.call(e,"variable")&&e.variable;d||(l="with (obj) {\n"+l+"\n}\n"),l=(o?l.replace(j,""):l).replace(L,"$1").replace(U,"$1;"),l="function("+(d||"obj")+") {\n"+(d?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var v=Wa((function(){return pt(a,p+"return "+l).apply(void 0,s)}));if(v.source=l,Nu(v))throw v;return v},Mn.times=function(t,e){if((t=ra(t))<1||t>9007199254740991)return[];var n=4294967295,r=an(t,4294967295);t-=4294967295;for(var i=Ee(r,e=Xi(e));++n<t;)e(n);return i},Mn.toFinite=na,Mn.toInteger=ra,Mn.toLength=ia,Mn.toLower=function(t){return aa(t).toLowerCase()},Mn.toNumber=oa,Mn.toSafeInteger=function(t){return t?Jn(ra(t),-9007199254740991,9007199254740991):0===t?t:0},Mn.toString=aa,Mn.toUpper=function(t){return aa(t).toUpperCase()},Mn.trim=function(t,e,n){if((t=aa(t))&&(n||void 0===e))return t.replace(V,"");if(!t||!(e=Qr(e)))return t;var r=$e(t),i=$e(e);return ci(r,je(r,i),Le(r,i)+1).join("")},Mn.trimEnd=function(t,e,n){if((t=aa(t))&&(n||void 0===e))return t.replace(X,"");if(!t||!(e=Qr(e)))return t;var r=$e(t);return ci(r,0,Le(r,$e(e))+1).join("")},Mn.trimStart=function(t,e,n){if((t=aa(t))&&(n||void 0===e))return t.replace(J,"");if(!t||!(e=Qr(e)))return t;var r=$e(t);return ci(r,je(r,$e(e))).join("")},Mn.truncate=function(t,e){var n=30,r="...";if(Yu(e)){var i="separator"in e?e.separator:i;n="length"in e?ra(e.length):n,r="omission"in e?Qr(e.omission):r}var o=(t=aa(t)).length;if(Ne(t)){var u=$e(t);o=u.length}if(n>=o)return t;var a=n-qe(r);if(a<1)return r;var s=u?ci(u,0,a).join(""):t.slice(0,a);if(void 0===i)return s+r;if(u&&(a+=s.length-a),Vu(i)){if(t.slice(a).search(i)){var c,f=s;for(i.global||(i=gt(i.source,aa(rt.exec(i))+"g")),i.lastIndex=0;c=i.exec(f);)var l=c.index;s=s.slice(0,void 0===l?a:l)}}else if(t.indexOf(Qr(i),a)!=a){var h=s.lastIndexOf(i);h>-1&&(s=s.slice(0,h))}return s+r},Mn.unescape=function(t){return(t=aa(t))&&I.test(t)?t.replace(B,He):t},Mn.uniqueId=function(t){var e=++St;return aa(t)+e},Mn.upperCase=Ia,Mn.upperFirst=Na,Mn.each=au,Mn.eachRight=su,Mn.first=Uo,Xa(Mn,(fs={},sr(Mn,(function(t,e){Ct.call(Mn.prototype,e)||(fs[e]=t)})),fs),{chain:!1}),Mn.VERSION="4.17.19",ae(["bind","bindKey","curry","curryRight","partial","partialRight"],(function(t){Mn[t].placeholder=Mn})),ae(["drop","take"],(function(t,e){Pn.prototype[t]=function(n){n=void 0===n?1:un(ra(n),0);var r=this.__filtered__&&!e?new Pn(this):this.clone();return r.__filtered__?r.__takeCount__=an(n,r.__takeCount__):r.__views__.push({size:an(n,4294967295),type:t+(r.__dir__<0?"Right":"")}),r},Pn.prototype[t+"Right"]=function(e){return this.reverse()[t](e).reverse()}})),ae(["filter","map","takeWhile"],(function(t,e){var n=e+1,r=1==n||3==n;Pn.prototype[t]=function(t){var e=this.clone();return e.__iteratees__.push({iteratee:Xi(t,3),type:n}),e.__filtered__=e.__filtered__||r,e}})),ae(["head","last"],(function(t,e){var n="take"+(e?"Right":"");Pn.prototype[t]=function(){return this[n](1).value()[0]}})),ae(["initial","tail"],(function(t,e){var n="drop"+(e?"":"Right");Pn.prototype[t]=function(){return this.__filtered__?new Pn(this):this[n](1)}})),Pn.prototype.compact=function(){return this.filter($a)},Pn.prototype.find=function(t){return this.filter(t).head()},Pn.prototype.findLast=function(t){return this.reverse().find(t)},Pn.prototype.invokeMap=Ir((function(t,e){return"function"==typeof t?new Pn(this):this.map((function(n){return yr(n,t,e)}))})),Pn.prototype.reject=function(t){return this.filter(Cu(Xi(t)))},Pn.prototype.slice=function(t,e){t=ra(t);var n=this;return n.__filtered__&&(t>0||e<0)?new Pn(n):(t<0?n=n.takeRight(-t):t&&(n=n.drop(t)),void 0!==e&&(n=(e=ra(e))<0?n.dropRight(-e):n.take(e-t)),n)},Pn.prototype.takeRightWhile=function(t){return this.reverse().takeWhile(t).reverse()},Pn.prototype.toArray=function(){return this.take(4294967295)},sr(Pn.prototype,(function(t,e){var n=/^(?:filter|find|map|reject)|While$/.test(e),r=/^(?:head|last)$/.test(e),i=Mn[r?"take"+("last"==e?"Right":""):e],o=r||/^find/.test(e);i&&(Mn.prototype[e]=function(){var e=this.__wrapped__,u=r?[1]:arguments,a=e instanceof Pn,s=u[0],c=a||ju(e),f=function(t){var e=i.apply(Mn,de([t],u));return r&&l?e[0]:e};c&&n&&"function"==typeof s&&1!=s.length&&(a=c=!1);var l=this.__chain__,h=!!this.__actions__.length,p=o&&!l,d=a&&!h;if(!o&&c){e=d?e:new Pn(this);var v=t.apply(e,u);return v.__actions__.push({func:nu,args:[f],thisArg:void 0}),new Rn(v,l)}return p&&d?t.apply(this,u):(v=this.thru(f),p?r?v.value()[0]:v.value():v)})})),ae(["pop","push","shift","sort","splice","unshift"],(function(t){var e=wt[t],n=/^(?:push|sort|unshift)$/.test(t)?"tap":"thru",r=/^(?:pop|shift)$/.test(t);Mn.prototype[t]=function(){var t=arguments;if(r&&!this.__chain__){var i=this.value();return e.apply(ju(i)?i:[],t)}return this[n]((function(n){return e.apply(ju(n)?n:[],t)}))}})),sr(Pn.prototype,(function(t,e){var n=Mn[e];if(n){var r=n.name+"";Ct.call(wn,r)||(wn[r]=[]),wn[r].push({name:e,func:n})}})),wn[Mi(void 0,2).name]=[{name:"wrapper",func:void 0}],Pn.prototype.clone=function(){var t=new Pn(this.__wrapped__);return t.__actions__=mi(this.__actions__),t.__dir__=this.__dir__,t.__filtered__=this.__filtered__,t.__iteratees__=mi(this.__iteratees__),t.__takeCount__=this.__takeCount__,t.__views__=mi(this.__views__),t},Pn.prototype.reverse=function(){if(this.__filtered__){var t=new Pn(this);t.__dir__=-1,t.__filtered__=!0}else(t=this.clone()).__dir__*=-1;return t},Pn.prototype.value=function(){var t=this.__wrapped__.value(),e=this.__dir__,n=ju(t),r=e<0,i=n?t.length:0,o=function(t,e,n){var r=-1,i=n.length;for(;++r<i;){var o=n[r],u=o.size;switch(o.type){case"drop":t+=u;break;case"dropRight":e-=u;break;case"take":e=an(e,t+u);break;case"takeRight":t=un(t,e-u)}}return{start:t,end:e}}(0,i,this.__views__),u=o.start,a=o.end,s=a-u,c=r?a:u-1,f=this.__iteratees__,l=f.length,h=0,p=an(s,this.__takeCount__);if(!n||!r&&i==s&&p==s)return ni(t,this.__actions__);var d=[];t:for(;s--&&h<p;){for(var v=-1,g=t[c+=e];++v<l;){var m=f[v],y=m.iteratee,w=m.type,_=y(g);if(2==w)g=_;else if(!_){if(1==w)continue t;break t}}d[h++]=g}return d},Mn.prototype.at=ru,Mn.prototype.chain=function(){return eu(this)},Mn.prototype.commit=function(){return new Rn(this.value(),this.__chain__)},Mn.prototype.next=function(){void 0===this.__values__&&(this.__values__=ea(this.value()));var t=this.__index__>=this.__values__.length;return{done:t,value:t?void 0:this.__values__[this.__index__++]}},Mn.prototype.plant=function(t){for(var e,n=this;n instanceof Tn;){var r=Mo(n);r.__index__=0,r.__values__=void 0,e?i.__wrapped__=r:e=r;var i=r;n=n.__wrapped__}return i.__wrapped__=t,e},Mn.prototype.reverse=function(){var t=this.__wrapped__;if(t instanceof Pn){var e=t;return this.__actions__.length&&(e=new Pn(this)),(e=e.reverse()).__actions__.push({func:nu,args:[Yo],thisArg:void 0}),new Rn(e,this.__chain__)}return this.thru(Yo)},Mn.prototype.toJSON=Mn.prototype.valueOf=Mn.prototype.value=function(){return ni(this.__wrapped__,this.__actions__)},Mn.prototype.first=Mn.prototype.head,Zt&&(Mn.prototype[Zt]=function(){return this}),Mn}();Ht._=Ve,void 0===(i=function(){return Ve}.call(e,n,e,r))||(r.exports=i)}).call(this)}).call(this,n(39),n(122)(t))},,,,,,,,,,function(t,e){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9wb3N0Y3NzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9jc3MvZmlsdGVyLnRzIiwid2VicGFjazovLy8uL2Nzcy9kZWNsYXJhdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9jc3MvaW1wb3J0LnRzIiwid2VicGFjazovLy8uL2Nzcy9pbmplY3Qtc3R5bGUudHMiLCJ3ZWJwYWNrOi8vLy4vY3NzL3NlbGVjdG9yLnRzIiwid2VicGFjazovLy8uL2Nzcy93ZWJmb250LnRzIiwid2VicGFjazovLy8uL2Nzcy9ydWxlLnRzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVmFsaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi90b0ludGVnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3N1Yk1pbGxpc2Vjb25kcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvc3RhcnRPZlVUQ1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vZm9ybWF0L2luZGV4LmpzIiwid2VicGFjazovLy8uL3V0aWxzL2luZGV4LnRzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvdXRpbC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9kZWNsYXJhdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL25vZGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wYXRoLWJyb3dzZXJpZnkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9wYXJzZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2NvbW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9hdC1ydWxlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvY29udGFpbmVyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcnVsZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2Nzcy1zeW50YXgtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9zdHJpbmdpZmllci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3Byb2Nlc3Nvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL2xhenktcmVzdWx0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9zb3VyY2UtbWFwLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvc291cmNlLW1hcC1nZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9iYXNlNjQtdmxxLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvYXJyYXktc2V0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdExvbmcvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZE1hdGNoUGF0dGVybkZuL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zeW5jL2dvb2dsZS1kcml2ZS9zeW5jLW1ldGFkYXRhLnRzIiwid2VicGFjazovLy8uL3N5bmMvZ29vZ2xlLWRyaXZlL21lcmdlLXN0eWxlcy50cyIsIndlYnBhY2s6Ly8vLi9zeW5jL2dvb2dsZS1kcml2ZS9nZXQtYWNjZXNzLXRva2VuLnRzIiwid2VicGFjazovLy8uL3N5bmMvZ29vZ2xlLWRyaXZlL3N5bmMtZmlsZS50cyIsIndlYnBhY2s6Ly8vLi9iYWNrZ3JvdW5kL3V0aWxzLnRzIiwid2VicGFjazovLy8uL2JhY2tncm91bmQvc3R5bGVzLnRzIiwid2VicGFjazovLy8uL3N5bmMvZ29vZ2xlLWRyaXZlL3N5bmMudHMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vY29tcGFyZUFzYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL21hcC1nZW5lcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9iYXNlNjQtanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL2Jhc2U2NC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL21hcHBpbmctbGlzdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1tYXAtY29uc3VtZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9zb3VyY2UtbWFwL2xpYi9iaW5hcnktc2VhcmNoLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvc291cmNlLW1hcC9saWIvcXVpY2stc29ydC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3NvdXJjZS1tYXAvbGliL3NvdXJjZS1ub2RlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvd2Fybi1vbmNlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvcmVzdWx0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvd2FybmluZy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3BhcnNlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MvbGliL3Rva2VuaXplLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy9saWIvaW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi9wcmV2aW91cy1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzL2xpYi92ZW5kb3IuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbG9kYXNoLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvd2VicGFjay9idWlsZGluL21vZHVsZS5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsImRlZmF1bHQiLCJfZGVjbGFyYXRpb24iLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3Byb2Nlc3NvciIsIl9zdHJpbmdpZnkiLCJfY29tbWVudCIsIl9hdFJ1bGUiLCJfdmVuZG9yIiwiX3BhcnNlIiwiX2xpc3QiLCJfcnVsZSIsIl9yb290Iiwib2JqIiwicG9zdGNzcyIsIl9sZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwbHVnaW5zIiwiQXJyYXkiLCJfa2V5IiwiaXNBcnJheSIsInBsdWdpbiIsImluaXRpYWxpemVyIiwiY3JlYXRvciIsInRyYW5zZm9ybWVyIiwiYXBwbHkiLCJwb3N0Y3NzUGx1Z2luIiwicG9zdGNzc1ZlcnNpb24iLCJ2ZXJzaW9uIiwiY2FjaGUiLCJwcm9jZXNzIiwiY3NzIiwicHJvY2Vzc09wdHMiLCJwbHVnaW5PcHRzIiwic3RyaW5naWZ5IiwicGFyc2UiLCJ2ZW5kb3IiLCJsaXN0IiwiY29tbWVudCIsImRlZmF1bHRzIiwiYXRSdWxlIiwiZGVjbCIsInJ1bGUiLCJyb290IiwiX2RlZmF1bHQiLCJyZXF1aXJlZEFyZ3MiLCJyZXF1aXJlZCIsImFyZ3MiLCJUeXBlRXJyb3IiLCJ0b0RhdGUiLCJhcmd1bWVudCIsImFyZ1N0ciIsInRvU3RyaW5nIiwiRGF0ZSIsImdldFRpbWUiLCJjb25zb2xlIiwid2FybiIsIkVycm9yIiwic3RhY2siLCJOYU4iLCJnZXRFZmZlY3RSZWdleCIsIlJlZ0V4cCIsImdldFNlbGVjdG9yc1RvQXR0YWNoRmlsdGVyRm9yUGFnZSIsImVsIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwic2xpY2UiLCJjaGlsZE5vZGVzIiwiZmlsdGVyIiwibm9kZSIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsImlkIiwibWFwIiwiZ2V0Q2xhc3NCYXNlZFNlbGVjdG9yIiwiZ2V0SWRCYXNlZFNlbGVjdG9yIiwiZ2V0RmlsdGVyRWZmZWN0VmFsdWVGb3JQYWdlIiwiZWZmZWN0TmFtZSIsInJlZ2V4Iiwic2VsZWN0b3JzIiwiZm9yRWFjaCIsInNlbGVjdG9yIiwic29tZSIsInR5cGUiLCJ3YWxrUnVsZXMiLCJ3YWxrRGVjbHMiLCJtYXRjaGVzIiwibWF0Y2giLCJwYXJzZUludCIsImdldENzc0FmdGVyQXBwbHlpbmdGaWx0ZXJFZmZlY3RUb1BhZ2UiLCJwZXJjZW50IiwiZWZmZWN0VmFsdWUiLCJnZXRFZmZlY3REZWNsYXJhdGlvblZhbHVlIiwicHJvcCIsInJlcGxhY2UiLCJ0cmltIiwicmVtb3ZlIiwiYWRkRGVjbGFyYXRpb24iLCJydWxlcyIsInB1c2giLCJydWxlQ3NzIiwiYXBwZW5kIiwiYXBwZW5kSW1wb3J0YW50VG9EZWNsYXJhdGlvbnMiLCJpc0FuY2VzdG9yQW5BdFJ1bGUiLCJwYXJlbnQiLCJpbXBvcnRhbnQiLCJnZXRDc3NXaXRoRXhwYW5kZWRJbXBvcnRzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ1cmxzIiwid2Fsa0F0UnVsZXMiLCJwYXJhbXMiLCJwcm9taXNlcyIsInVybCIsInVybFJlc29sdmUiLCJtZXNzYWdlIiwiY2hyb21lIiwicnVudGltZSIsInNlbmRNZXNzYWdlIiwicmVzcG9uc2UiLCJvdXRwdXQiLCJhbGwiLCJ0aGVuIiwidmFsdWVzIiwibWVyZ2VkIiwiam9pbiIsIl9fYXdhaXRlciIsInRoaXNBcmciLCJfYXJndW1lbnRzIiwiUCIsImdlbmVyYXRvciIsInJlamVjdCIsImZ1bGZpbGxlZCIsInN0ZXAiLCJuZXh0IiwiZSIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsIml0ZXJhdG9yIiwidGhpcyIsInYiLCJvcCIsInBvcCIsImdldFN0eWxlc2hlZXRJZCIsImluamVjdENTU0ludG9Eb2N1bWVudCIsImNzc1dpdGhFeHBhbmRlZEltcG9ydHMiLCJzdHlsZXNoZWV0SWQiLCJzdHlsZSIsIl9hIiwiZ2V0RWxlbWVudEJ5SWQiLCJpbm5lckhUTUwiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwiYXBwZW5kQ2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsImRvY3VtZW50RWxlbWVudCIsImluamVjdFJvb3RJbnRvRG9jdW1lbnQiLCJjbGFzc05hbWUiLCJnZXRBdHRyaWJ1dGUiLCJjbGFzc2VzIiwic3BsaXQiLCJsZW4iLCJnZXRUYWdOYW1lQmFzZWRTZWxlY3RvciIsImRvbUhlaXJhcmNoeUxldmVsIiwicGFyZW50RWxlbWVudCIsImdldFNlbGVjdG9yIiwidmFsaWRhdGVTZWxlY3RvciIsImdldEdvb2dsZUZvbnRVcmxBbmRQYXJhbXMiLCJhZGRHb29nbGVXZWJGb250IiwiX2IiLCJmZXRjaCIsInN0YXR1cyIsImltcG9ydEV4aXN0cyIsInByZXBlbmQiLCJmaXJzdCIsInJhd3MiLCJiZWZvcmUiLCJjYXRjaCIsImVyciIsImVycm9yIiwiY2xlYW5Hb29nbGVXZWJGb250cyIsImZvbnRzIiwidHJpbW1lZFZhbHVlIiwiaW5kZXhPZiIsImZvbnRQYXJhbXMiLCJmb250IiwiZ2V0UnVsZSIsIm1hdGNoaW5nUnVsZXMiLCJhZGRFbXB0eVJ1bGUiLCJyZW1vdmVFbXB0eVJ1bGVzIiwiaXNWYWxpZCIsImRpcnR5RGF0ZSIsImRhdGUiLCJpc05hTiIsInRvSW50ZWdlciIsImRpcnR5TnVtYmVyIiwibnVtYmVyIiwiTnVtYmVyIiwiTWF0aCIsImNlaWwiLCJmbG9vciIsImFkZE1pbGxpc2Vjb25kcyIsImRpcnR5QW1vdW50IiwidGltZXN0YW1wIiwiYW1vdW50Iiwic3ViTWlsbGlzZWNvbmRzIiwiYWRkTGVhZGluZ1plcm9zIiwidGFyZ2V0TGVuZ3RoIiwic2lnbiIsImFicyIsInRva2VuIiwic2lnbmVkWWVhciIsImdldFVUQ0Z1bGxZZWFyIiwieWVhciIsIk0iLCJtb250aCIsImdldFVUQ01vbnRoIiwiU3RyaW5nIiwiZ2V0VVRDRGF0ZSIsImEiLCJkYXlQZXJpb2RFbnVtVmFsdWUiLCJnZXRVVENIb3VycyIsInRvVXBwZXJDYXNlIiwiaCIsIkgiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIlMiLCJudW1iZXJPZkRpZ2l0cyIsIm1pbGxpc2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsInBvdyIsInN0YXJ0T2ZVVENJU09XZWVrIiwid2Vla1N0YXJ0c09uIiwiZGF5IiwiZ2V0VVRDRGF5IiwiZGlmZiIsInNldFVUQ0RhdGUiLCJzZXRVVENIb3VycyIsImdldFVUQ0lTT1dlZWtZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhciIsInNldFVUQ0Z1bGxZZWFyIiwic3RhcnRPZk5leHRZZWFyIiwiZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhciIsInN0YXJ0T2ZUaGlzWWVhciIsInN0YXJ0T2ZVVENJU09XZWVrWWVhciIsImZvdXJ0aE9mSmFudWFyeSIsInN0YXJ0T2ZVVENXZWVrIiwiZGlydHlPcHRpb25zIiwib3B0aW9ucyIsImxvY2FsZSIsImxvY2FsZVdlZWtTdGFydHNPbiIsImRlZmF1bHRXZWVrU3RhcnRzT24iLCJSYW5nZUVycm9yIiwiZ2V0VVRDV2Vla1llYXIiLCJsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUiLCJmaXJzdFdlZWtDb250YWluc0RhdGUiLCJkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIiwiZmlyc3RXZWVrT2ZOZXh0WWVhciIsImZpcnN0V2Vla09mVGhpc1llYXIiLCJzdGFydE9mVVRDV2Vla1llYXIiLCJmaXJzdFdlZWsiLCJkYXlQZXJpb2RFbnVtIiwiZm9ybWF0VGltZXpvbmVTaG9ydCIsIm9mZnNldCIsImRpcnR5RGVsaW1pdGVyIiwiYWJzT2Zmc2V0IiwiaG91cnMiLCJtaW51dGVzIiwiZGVsaW1pdGVyIiwiZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzIiwiZm9ybWF0VGltZXpvbmUiLCJHIiwibG9jYWxpemUiLCJlcmEiLCJ3aWR0aCIsIm9yZGluYWxOdW1iZXIiLCJ1bml0IiwibGlnaHRGb3JtYXR0ZXJzIiwiWSIsInNpZ25lZFdlZWtZZWFyIiwid2Vla1llYXIiLCJSIiwidSIsIlEiLCJxdWFydGVyIiwiY29udGV4dCIsInEiLCJMIiwidyIsIndlZWsiLCJyb3VuZCIsImdldFVUQ1dlZWsiLCJJIiwiaXNvV2VlayIsImdldFVUQ0lTT1dlZWsiLCJEIiwiZGF5T2ZZZWFyIiwic2V0VVRDTW9udGgiLCJzdGFydE9mWWVhclRpbWVzdGFtcCIsImRpZmZlcmVuY2UiLCJnZXRVVENEYXlPZlllYXIiLCJFIiwiZGF5T2ZXZWVrIiwibG9jYWxEYXlPZldlZWsiLCJpc29EYXlPZldlZWsiLCJkYXlQZXJpb2QiLCJiIiwiQiIsIksiLCJrIiwiWCIsIl9sb2NhbGl6ZSIsInRpbWV6b25lT2Zmc2V0IiwiX29yaWdpbmFsRGF0ZSIsImdldFRpbWV6b25lT2Zmc2V0IiwieCIsIk8iLCJ6Iiwib3JpZ2luYWxEYXRlIiwiVCIsImRhdGVMb25nRm9ybWF0dGVyIiwicGF0dGVybiIsImZvcm1hdExvbmciLCJ0aW1lTG9uZ0Zvcm1hdHRlciIsInRpbWUiLCJkYXRlVGltZUZvcm1hdCIsIm1hdGNoUmVzdWx0IiwiZGF0ZVBhdHRlcm4iLCJ0aW1lUGF0dGVybiIsImRhdGVUaW1lIiwicHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zIiwicHJvdGVjdGVkV2Vla1llYXJUb2tlbnMiLCJpc1Byb3RlY3RlZERheU9mWWVhclRva2VuIiwiaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuIiwidGhyb3dQcm90ZWN0ZWRFcnJvciIsImZvcm1hdCIsImlucHV0IiwiY29uY2F0IiwiZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwiZXNjYXBlZFN0cmluZ1JlZ0V4cCIsImRvdWJsZVF1b3RlUmVnRXhwIiwidW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAiLCJjbGVhbkVzY2FwZWRTdHJpbmciLCJnZXRDdXJyZW50VGltZXN0YW1wIiwiZGlydHlGb3JtYXRTdHIiLCJmb3JtYXRTdHIiLCJnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIiwidXRjRGF0ZSIsImZvcm1hdHRlck9wdGlvbnMiLCJzdWJzdHJpbmciLCJmaXJzdENoYXJhY3RlciIsImxvbmdGb3JtYXR0ZXIiLCJmb3JtYXR0ZXIiLCJ1c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMiLCJ1c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zIiwiZ2V0Tm90aWZpY2F0aW9uS2V5IiwiZ2V0Tm90aWZpY2F0aW9uIiwic3RvcmFnZSIsImxvY2FsIiwiaXRlbXMiLCJzZXROb3RpZmljYXRpb24iLCJzZXQiLCJnZXRBcmciLCJhQXJncyIsImFOYW1lIiwiYURlZmF1bHRWYWx1ZSIsInVybFJlZ2V4cCIsImRhdGFVcmxSZWdleHAiLCJ1cmxQYXJzZSIsImFVcmwiLCJzY2hlbWUiLCJhdXRoIiwiaG9zdCIsInBvcnQiLCJwYXRoIiwidXJsR2VuZXJhdGUiLCJhUGFyc2VkVXJsIiwibm9ybWFsaXplIiwiYVBhdGgiLCJwYXJ0IiwiaXNBYnNvbHV0ZSIsInBhcnRzIiwidXAiLCJzcGxpY2UiLCJhUm9vdCIsImFQYXRoVXJsIiwiYVJvb3RVcmwiLCJqb2luZWQiLCJjaGFyQXQiLCJ0ZXN0IiwicmVsYXRpdmUiLCJsZXZlbCIsImluZGV4IiwibGFzdEluZGV4T2YiLCJzdWJzdHIiLCJzdXBwb3J0c051bGxQcm90byIsImlkZW50aXR5IiwiaXNQcm90b1N0cmluZyIsImNoYXJDb2RlQXQiLCJzdHJjbXAiLCJhU3RyMSIsImFTdHIyIiwidG9TZXRTdHJpbmciLCJhU3RyIiwiZnJvbVNldFN0cmluZyIsImNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zIiwibWFwcGluZ0EiLCJtYXBwaW5nQiIsIm9ubHlDb21wYXJlT3JpZ2luYWwiLCJjbXAiLCJzb3VyY2UiLCJvcmlnaW5hbExpbmUiLCJvcmlnaW5hbENvbHVtbiIsImdlbmVyYXRlZENvbHVtbiIsImdlbmVyYXRlZExpbmUiLCJjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCIsIm9ubHlDb21wYXJlR2VuZXJhdGVkIiwiY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQiLCJwYXJzZVNvdXJjZU1hcElucHV0Iiwic3RyIiwiSlNPTiIsImNvbXB1dGVTb3VyY2VVUkwiLCJzb3VyY2VSb290Iiwic291cmNlVVJMIiwic291cmNlTWFwVVJMIiwicGFyc2VkIiwiRnVuY3Rpb24iLCJ3aW5kb3ciLCJfTm9kZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsIkRlY2xhcmF0aW9uIiwiX3RoaXMiLCJjb25zdHJ1Y3RvciIsIl9fcHJvdG9fXyIsIl9jc3NTeW50YXhFcnJvciIsIl9zdHJpbmdpZmllciIsIk5vZGUiLCJfcHJvdG8iLCJvcHRzIiwicG9zIiwicG9zaXRpb25CeSIsImxpbmUiLCJjb2x1bW4iLCJ0ZXh0IiwiZGF0YSIsInJlbW92ZUNoaWxkIiwidW5kZWZpbmVkIiwic3RyaW5naWZpZXIiLCJjbG9uZSIsIm92ZXJyaWRlcyIsImNsb25lZCIsImNsb25lTm9kZSIsImoiLCJjbG9uZUJlZm9yZSIsImluc2VydEJlZm9yZSIsImNsb25lQWZ0ZXIiLCJpbnNlcnRBZnRlciIsInJlcGxhY2VXaXRoIiwibm9kZXMiLCJfaSIsIl9ub2RlcyIsInByZXYiLCJhZGQiLCJhZnRlciIsInRvSlNPTiIsImZpeGVkIiwicmF3IiwiZGVmYXVsdFR5cGUiLCJjbGVhblJhd3MiLCJrZWVwQmV0d2VlbiIsImJldHdlZW4iLCJwb3NpdGlvbkluc2lkZSIsInN0cmluZyIsInN0YXJ0Iiwid29yZCIsImJ1aWxkZXIiLCJub3JtYWxpemVBcnJheSIsImFsbG93QWJvdmVSb290IiwibGFzdCIsInVuc2hpZnQiLCJ4cyIsInJlcyIsInJlc29sdmVkUGF0aCIsInJlc29sdmVkQWJzb2x1dGUiLCJjd2QiLCJ0cmFpbGluZ1NsYXNoIiwicGF0aHMiLCJmcm9tIiwidG8iLCJhcnIiLCJlbmQiLCJmcm9tUGFydHMiLCJ0b1BhcnRzIiwibWluIiwic2FtZVBhcnRzTGVuZ3RoIiwib3V0cHV0UGFydHMiLCJzZXAiLCJkaXJuYW1lIiwiY29kZSIsImhhc1Jvb3QiLCJtYXRjaGVkU2xhc2giLCJiYXNlbmFtZSIsImV4dCIsImV4dG5hbWUiLCJzdGFydERvdCIsInN0YXJ0UGFydCIsInByZURvdFN0YXRlIiwiX3BhcnNlciIsIl9pbnB1dCIsInBhcnNlciIsIkNvbW1lbnQiLCJfQ29udGFpbmVyIiwiQXRSdWxlIiwiX0NvbnRhaW5lciRwcm90b3R5cGUkIiwiY2hpbGRyZW4iLCJfQ29udGFpbmVyJHByb3RvdHlwZSQyIiwiX2xlbjIiLCJfa2V5MiIsIl9kZWZpbmVQcm9wZXJ0aWVzIiwidGFyZ2V0IiwicHJvcHMiLCJkZXNjcmlwdG9yIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJDb250YWluZXIiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImNoaWxkIiwiZWFjaCIsImNhbGxiYWNrIiwibGFzdEVhY2giLCJpbmRleGVzIiwid2FsayIsInBvc3Rjc3NOb2RlIiwid2Fsa0NvbW1lbnRzIiwiX2NoaWxkcmVuIiwiX2l0ZXJhdG9yIiwiX2lzQXJyYXkiLCJfaTIiLCJfcmVmIiwiX2l0ZXJhdG9yMiIsInJldmVyc2UiLCJfaXNBcnJheTIiLCJfaTMiLCJfcmVmMiIsIl9pdGVyYXRvcjMiLCJfaXNBcnJheTMiLCJfaTQiLCJfcmVmMyIsIl9pdGVyYXRvcjQiLCJfaXNBcnJheTQiLCJfaTUiLCJfcmVmNCIsImV4aXN0IiwiX2l0ZXJhdG9yNSIsIl9pc0FycmF5NSIsIl9pNiIsIl9yZWY1IiwiX2l0ZXJhdG9yNiIsIl9pc0FycmF5NiIsIl9pNyIsIl9yZWY2IiwicmVtb3ZlQWxsIiwiX2l0ZXJhdG9yNyIsIl9pc0FycmF5NyIsIl9pOCIsIl9yZWY3IiwicmVwbGFjZVZhbHVlcyIsImZhc3QiLCJldmVyeSIsImNvbmRpdGlvbiIsInNhbXBsZSIsImNsZWFuU291cmNlIiwiX2l0ZXJhdG9yOCIsIl9pc0FycmF5OCIsIl9pOSIsIl9yZWY4IiwiX2l0ZXJhdG9yOSIsIl9pc0FycmF5OSIsIl9pMTAiLCJfcmVmOSIsIl9pMTEiLCJfY29udGFpbmVyIiwiUnVsZSIsImNvbW1hIiwiY2FjaGVkU2V0VGltZW91dCIsImNhY2hlZENsZWFyVGltZW91dCIsImRlZmF1bHRTZXRUaW1vdXQiLCJkZWZhdWx0Q2xlYXJUaW1lb3V0IiwicnVuVGltZW91dCIsImZ1biIsInNldFRpbWVvdXQiLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJ0aW1lb3V0IiwicnVuIiwibWFya2VyIiwicnVuQ2xlYXJUaW1lb3V0IiwiSXRlbSIsImFycmF5Iiwibm9vcCIsIm5leHRUaWNrIiwidGl0bGUiLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb25zIiwib24iLCJhZGRMaXN0ZW5lciIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImVtaXQiLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwibGlzdGVuZXJzIiwiYmluZGluZyIsImNoZGlyIiwiZGlyIiwidW1hc2siLCJfc3VwcG9ydHNDb2xvciIsIl9jaGFsayIsIl90ZXJtaW5hbEhpZ2hsaWdodCIsIl93cmFwTmF0aXZlU3VwZXIiLCJDbGFzcyIsIl9jYWNoZSIsIk1hcCIsImZuIiwiaGFzIiwiV3JhcHBlciIsIl9jb25zdHJ1Y3QiLCJfZ2V0UHJvdG90eXBlT2YiLCJfc2V0UHJvdG90eXBlT2YiLCJpc05hdGl2ZVJlZmxlY3RDb25zdHJ1Y3QiLCJSZWZsZWN0IiwiY29uc3RydWN0Iiwic2hhbSIsIlByb3h5IiwiUGFyZW50IiwiaW5zdGFuY2UiLCJzZXRQcm90b3R5cGVPZiIsImdldFByb3RvdHlwZU9mIiwiX0Vycm9yIiwiQ3NzU3ludGF4RXJyb3IiLCJmaWxlIiwicmVhc29uIiwic2V0TWVzc2FnZSIsImNhcHR1cmVTdGFja1RyYWNlIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiX2Fzc2VydFRoaXNJbml0aWFsaXplZCIsInNob3dTb3VyY2VDb2RlIiwiY29sb3IiLCJfdGhpczIiLCJzdGRvdXQiLCJsaW5lcyIsIm1heCIsIm1heFdpZHRoIiwibWFyayIsInJlZCIsImJvbGQiLCJhc2lkZSIsImdyYXkiLCJndXR0ZXIiLCJzcGFjaW5nIiwiREVGQVVMVF9SQVciLCJjb2xvbiIsImluZGVudCIsImJlZm9yZURlY2wiLCJiZWZvcmVSdWxlIiwiYmVmb3JlT3BlbiIsImJlZm9yZUNsb3NlIiwiYmVmb3JlQ29tbWVudCIsImVtcHR5Qm9keSIsImNvbW1lbnRMZWZ0IiwiY29tbWVudFJpZ2h0Iiwic2VtaWNvbG9uIiwiU3RyaW5naWZpZXIiLCJsZWZ0IiwicmlnaHQiLCJyYXdWYWx1ZSIsImJsb2NrIiwib3duU2VtaWNvbG9uIiwiYXRydWxlIiwiYWZ0ZXJOYW1lIiwib3duIiwiZGV0ZWN0IiwicmF3Q2FjaGUiLCJiZWZvcmVBZnRlciIsIm1ldGhvZCIsInJhd1NlbWljb2xvbiIsInJhd0VtcHR5Qm9keSIsInJhd0luZGVudCIsInJhd0JlZm9yZUNvbW1lbnQiLCJyYXdCZWZvcmVEZWNsIiwicmF3QmVmb3JlUnVsZSIsInJhd0JlZm9yZUNsb3NlIiwicmF3QmVmb3JlT3BlbiIsInJhd0NvbG9uIiwiYnVmIiwiZGVwdGgiLCJfbGF6eVJlc3VsdCIsIlByb2Nlc3NvciIsInVzZSIsIl9wcm9jZXNzIiwiX3giLCJub3JtYWxpemVkIiwiX21hcEdlbmVyYXRvciIsIl9zdHJpbmdpZnkyIiwiX3Jlc3VsdCIsImlzUHJvbWlzZSIsIkxhenlSZXN1bHQiLCJwcm9jZXNzb3IiLCJzdHJpbmdpZmllZCIsInByb2Nlc3NlZCIsImlubGluZSIsInN5bnRheCIsIndhcm5pbmdzIiwic3luYyIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsImFzeW5jIiwiZmluYWxseSIsIm9uRmluYWxseSIsImhhbmRsZUVycm9yIiwiYXN5bmNUaWNrIiwicHJvbWlzZSIsInByb2Nlc3NpbmciLCJsYXN0UGx1Z2luIiwiZ2VuZXJhdGUiLCJjb250ZW50IiwibWVzc2FnZXMiLCJiYXNlNjQiLCJpZWVlNzU0Iiwia01heExlbmd0aCIsIkJ1ZmZlciIsIlRZUEVEX0FSUkFZX1NVUFBPUlQiLCJjcmVhdGVCdWZmZXIiLCJ0aGF0IiwiVWludDhBcnJheSIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJhbGxvY1Vuc2FmZSIsIkFycmF5QnVmZmVyIiwiYnl0ZU9mZnNldCIsImJ5dGVMZW5ndGgiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5QnVmZmVyIiwiZW5jb2RpbmciLCJpc0VuY29kaW5nIiwiYWN0dWFsIiwid3JpdGUiLCJmcm9tU3RyaW5nIiwiaXNCdWZmZXIiLCJjaGVja2VkIiwiY29weSIsImJ1ZmZlciIsInZhbCIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwic2l6ZSIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic2xvd1RvU3RyaW5nIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImFycmF5SW5kZXhPZiIsImluZGV4U2l6ZSIsImFyckxlbmd0aCIsInZhbExlbmd0aCIsInJlYWQiLCJyZWFkVUludDE2QkUiLCJmb3VuZEluZGV4IiwiZm91bmQiLCJoZXhXcml0ZSIsInJlbWFpbmluZyIsInN0ckxlbiIsInV0ZjhXcml0ZSIsImJsaXRCdWZmZXIiLCJhc2NpaVdyaXRlIiwiYnl0ZUFycmF5IiwiYXNjaWlUb0J5dGVzIiwibGF0aW4xV3JpdGUiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInVuaXRzIiwiaGkiLCJsbyIsInV0ZjE2bGVUb0J5dGVzIiwiZnJvbUJ5dGVBcnJheSIsInNlY29uZEJ5dGUiLCJ0aGlyZEJ5dGUiLCJmb3VydGhCeXRlIiwidGVtcENvZGVQb2ludCIsImZpcnN0Qnl0ZSIsImNvZGVQb2ludCIsImJ5dGVzUGVyU2VxdWVuY2UiLCJjb2RlUG9pbnRzIiwiZnJvbUNoYXJDb2RlIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwiU2xvd0J1ZmZlciIsImFsbG9jIiwiSU5TUEVDVF9NQVhfQllURVMiLCJnbG9iYWwiLCJmb28iLCJzdWJhcnJheSIsInR5cGVkQXJyYXlTdXBwb3J0IiwicG9vbFNpemUiLCJfYXVnbWVudCIsInNwZWNpZXMiLCJmaWxsIiwiYWxsb2NVbnNhZmVTbG93IiwiX2lzQnVmZmVyIiwiY29tcGFyZSIsInN3YXAxNiIsInN3YXAzMiIsInN3YXA2NCIsImVxdWFscyIsImluc3BlY3QiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsIl9hcnIiLCJyZXQiLCJvdXQiLCJ0b0hleCIsImJ5dGVzIiwiY2hlY2tPZmZzZXQiLCJjaGVja0ludCIsIm9iamVjdFdyaXRlVUludDE2IiwibGl0dGxlRW5kaWFuIiwib2JqZWN0V3JpdGVVSW50MzIiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0Iiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJyZWFkRmxvYXRCRSIsInJlYWREb3VibGVMRSIsInJlYWREb3VibGVCRSIsIndyaXRlVUludExFIiwid3JpdGVVSW50QkUiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVSW50MTZMRSIsIndyaXRlVUludDE2QkUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVSW50MzJCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJJbmZpbml0eSIsImxlYWRTdXJyb2dhdGUiLCJ0b0J5dGVBcnJheSIsInN0cmluZ3RyaW0iLCJiYXNlNjRjbGVhbiIsInNyYyIsImRzdCIsIlNvdXJjZU1hcEdlbmVyYXRvciIsIlNvdXJjZU1hcENvbnN1bWVyIiwiU291cmNlTm9kZSIsImJhc2U2NFZMUSIsInV0aWwiLCJBcnJheVNldCIsIk1hcHBpbmdMaXN0IiwiX2ZpbGUiLCJfc291cmNlUm9vdCIsIl9za2lwVmFsaWRhdGlvbiIsIl9zb3VyY2VzIiwiX25hbWVzIiwiX21hcHBpbmdzIiwiX3NvdXJjZXNDb250ZW50cyIsIl92ZXJzaW9uIiwiZnJvbVNvdXJjZU1hcCIsImFTb3VyY2VNYXBDb25zdW1lciIsImVhY2hNYXBwaW5nIiwibWFwcGluZyIsIm5ld01hcHBpbmciLCJnZW5lcmF0ZWQiLCJvcmlnaW5hbCIsImFkZE1hcHBpbmciLCJzb3VyY2VzIiwic291cmNlRmlsZSIsInNvdXJjZVJlbGF0aXZlIiwic291cmNlQ29udGVudEZvciIsInNldFNvdXJjZUNvbnRlbnQiLCJfdmFsaWRhdGVNYXBwaW5nIiwiYVNvdXJjZUZpbGUiLCJhU291cmNlQ29udGVudCIsImtleXMiLCJhcHBseVNvdXJjZU1hcCIsImFTb3VyY2VNYXBQYXRoIiwibmV3U291cmNlcyIsIm5ld05hbWVzIiwidW5zb3J0ZWRGb3JFYWNoIiwib3JpZ2luYWxQb3NpdGlvbkZvciIsImFHZW5lcmF0ZWQiLCJhT3JpZ2luYWwiLCJhU291cmNlIiwiX3NlcmlhbGl6ZU1hcHBpbmdzIiwibmFtZUlkeCIsInNvdXJjZUlkeCIsInByZXZpb3VzR2VuZXJhdGVkQ29sdW1uIiwicHJldmlvdXNHZW5lcmF0ZWRMaW5lIiwicHJldmlvdXNPcmlnaW5hbENvbHVtbiIsInByZXZpb3VzT3JpZ2luYWxMaW5lIiwicHJldmlvdXNOYW1lIiwicHJldmlvdXNTb3VyY2UiLCJtYXBwaW5ncyIsInRvQXJyYXkiLCJlbmNvZGUiLCJfZ2VuZXJhdGVTb3VyY2VzQ29udGVudCIsImFTb3VyY2VzIiwiYVNvdXJjZVJvb3QiLCJuYW1lcyIsInNvdXJjZXNDb250ZW50IiwiYVZhbHVlIiwiZGlnaXQiLCJlbmNvZGVkIiwidmxxIiwidG9WTFFTaWduZWQiLCJWTFFfQkFTRSIsImRlY29kZSIsImFJbmRleCIsImFPdXRQYXJhbSIsImNvbnRpbnVhdGlvbiIsInNoaWZ0ZWQiLCJzaGlmdCIsInJlc3QiLCJoYXNOYXRpdmVNYXAiLCJfYXJyYXkiLCJfc2V0IiwiZnJvbUFycmF5IiwiYUFycmF5IiwiYUFsbG93RHVwbGljYXRlcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJzU3RyIiwiaXNEdXBsaWNhdGUiLCJpZHgiLCJhdCIsImFJZHgiLCJzZXBhcmF0b3JzIiwiY3VycmVudCIsImZ1bmMiLCJxdW90ZSIsImVzY2FwZSIsImxldHRlciIsInNwYWNlIiwiUm9vdCIsImlnbm9yZSIsInRvUmVzdWx0IiwiZ2V0RGF0ZU1pbGxpc2Vjb25kc1BhcnQiLCJiYXNlVGltZXpvbmVPZmZzZXQiLCJzZXRTZWNvbmRzIiwiZm9ybWF0RGlzdGFuY2VMb2NhbGUiLCJsZXNzVGhhblhTZWNvbmRzIiwib25lIiwib3RoZXIiLCJ4U2Vjb25kcyIsImhhbGZBTWludXRlIiwibGVzc1RoYW5YTWludXRlcyIsInhNaW51dGVzIiwiYWJvdXRYSG91cnMiLCJ4SG91cnMiLCJ4RGF5cyIsImFib3V0WFdlZWtzIiwieFdlZWtzIiwiYWJvdXRYTW9udGhzIiwieE1vbnRocyIsImFib3V0WFllYXJzIiwieFllYXJzIiwib3ZlclhZZWFycyIsImFsbW9zdFhZZWFycyIsImJ1aWxkRm9ybWF0TG9uZ0ZuIiwiZGVmYXVsdFdpZHRoIiwiZm9ybWF0cyIsImZ1bGwiLCJsb25nIiwibWVkaXVtIiwic2hvcnQiLCJmb3JtYXRSZWxhdGl2ZUxvY2FsZSIsImxhc3RXZWVrIiwieWVzdGVyZGF5IiwidG9kYXkiLCJ0b21vcnJvdyIsIm5leHRXZWVrIiwiYnVpbGRMb2NhbGl6ZUZuIiwiZGlydHlJbmRleCIsInZhbHVlc0FycmF5IiwiZm9ybWF0dGluZ1ZhbHVlcyIsImRlZmF1bHRGb3JtYXR0aW5nV2lkdGgiLCJfZGVmYXVsdFdpZHRoIiwiX3dpZHRoIiwiYXJndW1lbnRDYWxsYmFjayIsImJ1aWxkTWF0Y2hGbiIsImRpcnR5U3RyaW5nIiwibWF0Y2hQYXR0ZXJuIiwibWF0Y2hQYXR0ZXJucyIsImRlZmF1bHRNYXRjaFdpZHRoIiwibWF0Y2hlZFN0cmluZyIsInBhcnNlUGF0dGVybnMiLCJkZWZhdWx0UGFyc2VXaWR0aCIsInByZWRpY2F0ZSIsImZpbmRJbmRleCIsImZpbmRLZXkiLCJ2YWx1ZUNhbGxiYWNrIiwiZm9ybWF0RGlzdGFuY2UiLCJjb3VudCIsImFkZFN1ZmZpeCIsImNvbXBhcmlzb24iLCJmb3JtYXRSZWxhdGl2ZSIsIl9kYXRlIiwiX2Jhc2VEYXRlIiwiX29wdGlvbnMiLCJfZGlydHlPcHRpb25zIiwicmVtMTAwIiwibmFycm93IiwiYWJicmV2aWF0ZWQiLCJ3aWRlIiwiYW0iLCJwbSIsIm1pZG5pZ2h0Iiwibm9vbiIsIm1vcm5pbmciLCJhZnRlcm5vb24iLCJldmVuaW5nIiwibmlnaHQiLCJwYXJzZVBhdHRlcm4iLCJwYXJzZVJlc3VsdCIsImFueSIsImdldEdvb2dsZURyaXZlU3luY01ldGFkYXRhIiwic2V0R29vZ2xlRHJpdmVTeW5jTWV0YWRhdGEiLCJnb29nbGVEcml2ZVN5bmNNZXRhZGF0YSIsInNldEdvb2dsZURyaXZlU3luY0VuYWJsZWQiLCJlbmFibGVkIiwiZ2V0R29vZ2xlRHJpdmVTeW5jRW5hYmxlZCIsIl9fcmVhZCIsImFyIiwiX19zcHJlYWQiLCJzdHlsZXMiLCJ0MSIsInQyIiwicmVtb3RlIiwibW9kaWZpZWRUaW1lIiwiY29tcGFyZUFzYyIsIkNMSUVOVF9JRCIsInZhbGlkYXRlIiwicmVkaXJlY3RVUkwiLCJhY2Nlc3NUb2tlbiIsInZhbGlkYXRpb25SZXF1ZXN0IiwiY2hlY2tSZXNwb25zZSIsIlVSTFNlYXJjaFBhcmFtcyIsIlJlcXVlc3QiLCJ2YWxpZGF0aW9uQmFzZVVSTCIsImpzb24iLCJhdWQiLCJHT09HTEVfRFJJVkVfRklMRV9GSUVMRFMiLCJnZXRBdXRob3JpemF0aW9uSGVhZGVycyIsIkhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwiZ2V0RmlsZU1ldGFkYXRhIiwiR09PR0xFX0RSSVZFX0ZJTEVfR0VUX0FQSSIsImhlYWRlcnMiLCJjcmVhdGVCYWNrdXBGb2xkZXIiLCJmb3JtIiwibWV0YWRhdGEiLCJGb3JtRGF0YSIsIm1pbWVUeXBlIiwiQmxvYiIsIkdPT0dMRV9EUklWRV9GSUxFX1VQTE9BRF9BUEkiLCJjcmVhdGVCYWNrdXAiLCJibG9iIiwiZm9sZGVySWQiLCJtZXRhZGF0YUJsb2IiLCJwYXJlbnRzIiwicGF0Y2hCYWNrdXAiLCJnZXRTeW5jRmlsZU1ldGFkYXRhIiwiZmlsZXMiLCJzeW5jTWV0YWRhdGEiLCJlbmNvZGVVUklDb21wb25lbnQiLCJkb3dubG9hZFN5bmNGaWxlIiwid3JpdGVTeW5jRmlsZSIsImZpbGVJZCIsIkJhY2tncm91bmRQYWdlVXRpbHMiLCJpc1dpbGRjYXJkIiwiaXNSZWdleCIsImlzVmFsaWRIVE1MIiwiZXh0ZW5zaW9uIiwibWF0Y2hlc1VybCIsInBhZ2VVcmxTdHJpbmciLCJwcm90b2NvbCIsInBhZ2VVcmxfMSIsIlVSTCIsIm1hdGNoZXJVcmxfMSIsImhhc1BhdGhuYW1lIiwicGF0aG5hbWUiLCJob3N0bmFtZSIsImVuZHNXaXRoIiwic2VhcmNoUGFyYW1zIiwibWF0Y2hlc1VybENvbGxlY3Rpb24iLCJwYWdlVXJsIiwidXJsQ29sbGVjdGlvbiIsIm1hdGNoZXNXaWxkY2FyZCIsImhhc0NvbW1hIiwibG9nIiwibWF0Y2hlc1JlZ2V4IiwiaXNWYWxpZFVybCIsInVybEJsYWNrbGlzdCIsImdldEFsbCIsInNldEFsbCIsIl9fYXNzaWduIiwiYXNzaWduIiwiZ2V0U3R5bGVzQmxvYiIsIndyaXRlVG9SZW1vdGUiLCJ1cGRhdGVkU3luY01ldGFkYXRhIiwid3JpdGVUb0xvY2FsIiwibWVyZ2UiLCJsb2NhbFN0eWxlcyIsInJlbW90ZVN0eWxlcyIsIm1lcmdlZFN0eWxlcyIsInJ1bkdvb2dsZURyaXZlU3luYyIsInJlbW90ZVN5bmNNZXRhZGF0YSIsInJlbW90ZVN5bmNNZXRhZGF0YV8xIiwibG9jYWxTeW5jTWV0YWRhdGEiLCJsb2NhbFN0eWxlc01ldGFkYXRhIiwibG9jYWxTeW5jVGltZSIsInJlbW90ZVN5bmNUaW1lIiwibG9jYWxTdHlsZXNNb2RpZmllZFRpbWUiLCJkZWJ1ZyIsImdldFJlZGlyZWN0VVJMIiwiYXV0aFVSTCIsImxhdW5jaFdlYkF1dGhGbG93IiwiaW50ZXJhY3RpdmUiLCJyZXNwb25zZVVSTCIsImRpcnR5RGF0ZUxlZnQiLCJkaXJ0eURhdGVSaWdodCIsImRhdGVMZWZ0IiwiZGF0ZVJpZ2h0IiwiX3NvdXJjZU1hcCIsIl9wYXRoIiwiTWFwR2VuZXJhdG9yIiwibWFwT3B0cyIsImlzTWFwIiwicHJldmlvdXMiLCJwcmV2aW91c01hcHMiLCJpc0lubGluZSIsImFubm90YXRpb24iLCJpc1NvdXJjZXNDb250ZW50Iiwid2l0aENvbnRlbnQiLCJjbGVhckFubm90YXRpb24iLCJzZXRTb3VyY2VzQ29udGVudCIsImFscmVhZHkiLCJhcHBseVByZXZNYXBzIiwiY29uc3VtZXIiLCJpc0Fubm90YXRpb24iLCJ0b0Jhc2U2NCIsImJ0b2EiLCJ1bmVzY2FwZSIsImFkZEFubm90YXRpb24iLCJvdXRwdXRGaWxlIiwiZW9sIiwiZ2VuZXJhdGVNYXAiLCJnZW5lcmF0ZVN0cmluZyIsInNvdXJjZVBhdGgiLCJfdGhpczMiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG1wIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwicmV2TG9va3VwIiwidWludDgiLCJleHRyYUJ5dGVzIiwibGVuMiIsImVuY29kZUNodW5rIiwibG9va3VwIiwibnVtIiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJydCIsIkxOMiIsImludFRvQ2hhck1hcCIsImNoYXJDb2RlIiwiX3NvcnRlZCIsIl9sYXN0IiwiYUNhbGxiYWNrIiwiYVRoaXNBcmciLCJhTWFwcGluZyIsImxpbmVBIiwibGluZUIiLCJjb2x1bW5BIiwiY29sdW1uQiIsInNvcnQiLCJiaW5hcnlTZWFyY2giLCJxdWlja1NvcnQiLCJhU291cmNlTWFwIiwiYVNvdXJjZU1hcFVSTCIsInNvdXJjZU1hcCIsInNlY3Rpb25zIiwiSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyIiwiQmFzaWNTb3VyY2VNYXBDb25zdW1lciIsIl9hYnNvbHV0ZVNvdXJjZXMiLCJfc291cmNlTWFwVVJMIiwiTWFwcGluZyIsImxhc3RPZmZzZXQiLCJfc2VjdGlvbnMiLCJvZmZzZXRMaW5lIiwib2Zmc2V0Q29sdW1uIiwiZ2VuZXJhdGVkT2Zmc2V0IiwiX19nZW5lcmF0ZWRNYXBwaW5ncyIsIl9wYXJzZU1hcHBpbmdzIiwiX19vcmlnaW5hbE1hcHBpbmdzIiwiX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IiLCJHRU5FUkFURURfT1JERVIiLCJPUklHSU5BTF9PUkRFUiIsIkdSRUFURVNUX0xPV0VSX0JPVU5EIiwiTEVBU1RfVVBQRVJfQk9VTkQiLCJhQ29udGV4dCIsImFPcmRlciIsIl9nZW5lcmF0ZWRNYXBwaW5ncyIsIl9vcmlnaW5hbE1hcHBpbmdzIiwiYWxsR2VuZXJhdGVkUG9zaXRpb25zRm9yIiwibmVlZGxlIiwiX2ZpbmRTb3VyY2VJbmRleCIsIl9maW5kTWFwcGluZyIsImxhc3RDb2x1bW4iLCJyZWxhdGl2ZVNvdXJjZSIsInNtYyIsImdlbmVyYXRlZE1hcHBpbmdzIiwiZGVzdEdlbmVyYXRlZE1hcHBpbmdzIiwiZGVzdE9yaWdpbmFsTWFwcGluZ3MiLCJzcmNNYXBwaW5nIiwiZGVzdE1hcHBpbmciLCJzZWdtZW50IiwiY2FjaGVkU2VnbWVudHMiLCJ0ZW1wIiwib3JpZ2luYWxNYXBwaW5ncyIsImFOZWVkbGUiLCJhTWFwcGluZ3MiLCJhTGluZU5hbWUiLCJhQ29sdW1uTmFtZSIsImFDb21wYXJhdG9yIiwiYUJpYXMiLCJzZWFyY2giLCJjb21wdXRlQ29sdW1uU3BhbnMiLCJuZXh0TWFwcGluZyIsImxhc3RHZW5lcmF0ZWRDb2x1bW4iLCJoYXNDb250ZW50c09mQWxsU291cmNlcyIsInNjIiwibnVsbE9uTWlzc2luZyIsImZpbGVVcmlBYnNQYXRoIiwiZ2VuZXJhdGVkUG9zaXRpb25Gb3IiLCJzZWN0aW9uSW5kZXgiLCJzZWN0aW9uIiwiYmlhcyIsImdlbmVyYXRlZFBvc2l0aW9uIiwic2VjdGlvbk1hcHBpbmdzIiwiYWRqdXN0ZWRNYXBwaW5nIiwiYUhheXN0YWNrIiwiYUNvbXBhcmUiLCJyZWN1cnNpdmVTZWFyY2giLCJhTG93IiwiYUhpZ2giLCJtaWQiLCJhcnkiLCJkb1F1aWNrU29ydCIsImNvbXBhcmF0b3IiLCJsb3ciLCJoaWdoIiwicmFuZG9tIiwicGl2b3QiLCJSRUdFWF9ORVdMSU5FIiwiaXNTb3VyY2VOb2RlIiwiYUxpbmUiLCJhQ29sdW1uIiwiYUNodW5rcyIsInNvdXJjZUNvbnRlbnRzIiwiZnJvbVN0cmluZ1dpdGhTb3VyY2VNYXAiLCJhR2VuZXJhdGVkQ29kZSIsImFSZWxhdGl2ZVBhdGgiLCJyZW1haW5pbmdMaW5lcyIsInJlbWFpbmluZ0xpbmVzSW5kZXgiLCJzaGlmdE5leHRMaW5lIiwiZ2V0TmV4dExpbmUiLCJsYXN0R2VuZXJhdGVkTGluZSIsImxhc3RNYXBwaW5nIiwibmV4dExpbmUiLCJhZGRNYXBwaW5nV2l0aENvZGUiLCJhQ2h1bmsiLCJjaHVuayIsImFGbiIsImFTZXAiLCJuZXdDaGlsZHJlbiIsInJlcGxhY2VSaWdodCIsImFQYXR0ZXJuIiwiYVJlcGxhY2VtZW50IiwibGFzdENoaWxkIiwid2Fsa1NvdXJjZUNvbnRlbnRzIiwidG9TdHJpbmdXaXRoU291cmNlTWFwIiwic291cmNlTWFwcGluZ0FjdGl2ZSIsImxhc3RPcmlnaW5hbFNvdXJjZSIsImxhc3RPcmlnaW5hbExpbmUiLCJsYXN0T3JpZ2luYWxDb2x1bW4iLCJsYXN0T3JpZ2luYWxOYW1lIiwic291cmNlQ29udGVudCIsInByaW50ZWQiLCJfd2FybmluZyIsIlJlc3VsdCIsIndhcm5pbmciLCJXYXJuaW5nIiwib3B0IiwiX3Rva2VuaXplIiwiUGFyc2VyIiwic3BhY2VzIiwiY3JlYXRlVG9rZW5pemVyIiwidG9rZW5pemVyIiwiZW5kT2ZGaWxlIiwibmV4dFRva2VuIiwiZnJlZVNlbWljb2xvbiIsImVtcHR5UnVsZSIsImVuZEZpbGUiLCJpbml0IiwiYnJhY2tldCIsImJyYWNrZXRzIiwidG9rZW5zIiwiYmFjayIsInVuY2xvc2VkQnJhY2tldCIsInVua25vd25Xb3JkIiwic3BhY2VzQW5kQ29tbWVudHNGcm9tRW5kIiwic3BhY2VzQW5kQ29tbWVudHNGcm9tU3RhcnQiLCJwcmVjaGVja01pc3NlZFNlbWljb2xvbiIsInN0cmluZ0Zyb20iLCJzcGFjZXNGcm9tRW5kIiwiX3R5cGUiLCJjaGVja01pc3NlZFNlbWljb2xvbiIsInVubmFtZWRBdHJ1bGUiLCJvcGVuIiwidW5leHBlY3RlZENsb3NlIiwidW5jbG9zZWRCbG9jayIsImNsZWFuIiwicmVkdWNlIiwibGFzdFRva2VuVHlwZSIsImRvdWJsZUNvbG9uIiwiZm91bmRlZCIsIm5leHRPZmZzZXQiLCJlc2NhcGVkIiwiZXNjYXBlUG9zIiwiY3VycmVudFRva2VuIiwidmFsdWVPZiIsImlnbm9yZUVycm9ycyIsInJldHVybmVkIiwidW5jbG9zZWQiLCJ3aGF0IiwiaWdub3JlVW5jbG9zZWQiLCJORVdMSU5FIiwiRkVFRCIsIkNSIiwiU1BBQ0UiLCJUQUIiLCJPUEVOX1NRVUFSRSIsIkNMT1NFX1NRVUFSRSIsIk9QRU5fQ1VSTFkiLCJDTE9TRV9DVVJMWSIsIkNPTE9OIiwiU0VNSUNPTE9OIiwiQ0xPU0VfUEFSRU5USEVTRVMiLCJjb250cm9sQ2hhciIsIk9QRU5fUEFSRU5USEVTRVMiLCJTSU5HTEVfUVVPVEUiLCJET1VCTEVfUVVPVEUiLCJCQUNLU0xBU0giLCJSRV9CQURfQlJBQ0tFVCIsIkFUIiwiUkVfQVRfRU5EIiwibGFzdEluZGV4IiwiU0xBU0giLCJSRV9IRVhfRVNDQVBFIiwiQVNURVJJU0siLCJSRV9XT1JEX0VORCIsInBvc2l0aW9uIiwiX3ByZXZpb3VzTWFwIiwic2VxdWVuY2UiLCJJbnB1dCIsImhhc0JPTSIsIm1hcFJlc29sdmUiLCJvcmlnaW4iLCJfZnMiLCJQcmV2aW91c01hcCIsImxvYWRBbm5vdGF0aW9uIiwic3RhcnRXaXRoIiwibG9hZE1hcCIsImNvbnN1bWVyQ2FjaGUiLCJnZXRBbm5vdGF0aW9uVVJMIiwic291cmNlTWFwU3RyaW5nIiwiYW5ub3RhdGlvbnMiLCJsYXN0QW5ub3RhdGlvbiIsImRlY29kZUlubGluZSIsInVyaSIsImRlY29kZVVSSUNvbXBvbmVudCIsImxhc3RNYXRjaCIsImF0b2IiLCJwcmV2UGF0aCIsImV4aXN0c1N5bmMiLCJyZWFkRmlsZVN5bmMiLCJwcmVmaXgiLCJ1bnByZWZpeGVkIiwiRlVOQ19FUlJPUl9URVhUIiwiUExBQ0VIT0xERVIiLCJ3cmFwRmxhZ3MiLCJhcmdzVGFnIiwiYXJyYXlUYWciLCJib29sVGFnIiwiZGF0ZVRhZyIsImVycm9yVGFnIiwiZnVuY1RhZyIsImdlblRhZyIsIm1hcFRhZyIsIm51bWJlclRhZyIsIm9iamVjdFRhZyIsInJlZ2V4cFRhZyIsInNldFRhZyIsInN0cmluZ1RhZyIsInN5bWJvbFRhZyIsIndlYWtNYXBUYWciLCJhcnJheUJ1ZmZlclRhZyIsImRhdGFWaWV3VGFnIiwiZmxvYXQzMlRhZyIsImZsb2F0NjRUYWciLCJpbnQ4VGFnIiwiaW50MTZUYWciLCJpbnQzMlRhZyIsInVpbnQ4VGFnIiwidWludDE2VGFnIiwidWludDMyVGFnIiwicmVFbXB0eVN0cmluZ0xlYWRpbmciLCJyZUVtcHR5U3RyaW5nTWlkZGxlIiwicmVFbXB0eVN0cmluZ1RyYWlsaW5nIiwicmVFc2NhcGVkSHRtbCIsInJlVW5lc2NhcGVkSHRtbCIsInJlSGFzRXNjYXBlZEh0bWwiLCJyZUhhc1VuZXNjYXBlZEh0bWwiLCJyZUVzY2FwZSIsInJlRXZhbHVhdGUiLCJyZUludGVycG9sYXRlIiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsInJlUHJvcE5hbWUiLCJyZVJlZ0V4cENoYXIiLCJyZUhhc1JlZ0V4cENoYXIiLCJyZVRyaW0iLCJyZVRyaW1TdGFydCIsInJlVHJpbUVuZCIsInJlV3JhcENvbW1lbnQiLCJyZVdyYXBEZXRhaWxzIiwicmVTcGxpdERldGFpbHMiLCJyZUFzY2lpV29yZCIsInJlRXNjYXBlQ2hhciIsInJlRXNUZW1wbGF0ZSIsInJlRmxhZ3MiLCJyZUlzQmFkSGV4IiwicmVJc0JpbmFyeSIsInJlSXNIb3N0Q3RvciIsInJlSXNPY3RhbCIsInJlSXNVaW50IiwicmVMYXRpbiIsInJlTm9NYXRjaCIsInJlVW5lc2NhcGVkU3RyaW5nIiwicnNDb21ib1JhbmdlIiwicnNDb21ib01hcmtzUmFuZ2UiLCJyc0JyZWFrUmFuZ2UiLCJyc01hdGhPcFJhbmdlIiwicnNBc3RyYWwiLCJyc0JyZWFrIiwicnNDb21ibyIsInJzRGlnaXRzIiwicnNEaW5nYmF0IiwicnNMb3dlciIsInJzTWlzYyIsInJzRml0eiIsInJzTm9uQXN0cmFsIiwicnNSZWdpb25hbCIsInJzU3VyclBhaXIiLCJyc1VwcGVyIiwicnNNaXNjTG93ZXIiLCJyc01pc2NVcHBlciIsInJlT3B0TW9kIiwicnNTZXEiLCJyc0Vtb2ppIiwicnNTeW1ib2wiLCJyZUFwb3MiLCJyZUNvbWJvTWFyayIsInJlVW5pY29kZSIsInJlVW5pY29kZVdvcmQiLCJyZUhhc1VuaWNvZGUiLCJyZUhhc1VuaWNvZGVXb3JkIiwiY29udGV4dFByb3BzIiwidGVtcGxhdGVDb3VudGVyIiwidHlwZWRBcnJheVRhZ3MiLCJjbG9uZWFibGVUYWdzIiwic3RyaW5nRXNjYXBlcyIsImZyZWVQYXJzZUZsb2F0IiwicGFyc2VGbG9hdCIsImZyZWVQYXJzZUludCIsImZyZWVHbG9iYWwiLCJmcmVlU2VsZiIsImZyZWVFeHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwibW9kdWxlRXhwb3J0cyIsImZyZWVQcm9jZXNzIiwibm9kZVV0aWwiLCJ0eXBlcyIsInJlcXVpcmUiLCJub2RlSXNBcnJheUJ1ZmZlciIsImlzQXJyYXlCdWZmZXIiLCJub2RlSXNEYXRlIiwiaXNEYXRlIiwibm9kZUlzTWFwIiwibm9kZUlzUmVnRXhwIiwiaXNSZWdFeHAiLCJub2RlSXNTZXQiLCJpc1NldCIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJhcnJheUFnZ3JlZ2F0b3IiLCJzZXR0ZXIiLCJpdGVyYXRlZSIsImFjY3VtdWxhdG9yIiwiYXJyYXlFYWNoIiwiYXJyYXlFYWNoUmlnaHQiLCJhcnJheUV2ZXJ5IiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsImFycmF5SW5jbHVkZXMiLCJiYXNlSW5kZXhPZiIsImFycmF5SW5jbHVkZXNXaXRoIiwiYXJyYXlNYXAiLCJhcnJheVB1c2giLCJhcnJheVJlZHVjZSIsImluaXRBY2N1bSIsImFycmF5UmVkdWNlUmlnaHQiLCJhcnJheVNvbWUiLCJhc2NpaVNpemUiLCJiYXNlUHJvcGVydHkiLCJiYXNlRmluZEtleSIsImNvbGxlY3Rpb24iLCJlYWNoRnVuYyIsImJhc2VGaW5kSW5kZXgiLCJmcm9tSW5kZXgiLCJmcm9tUmlnaHQiLCJzdHJpY3RJbmRleE9mIiwiYmFzZUlzTmFOIiwiYmFzZUluZGV4T2ZXaXRoIiwiYmFzZU1lYW4iLCJiYXNlU3VtIiwiYmFzZVByb3BlcnR5T2YiLCJiYXNlUmVkdWNlIiwiYmFzZVRpbWVzIiwiYmFzZVVuYXJ5IiwiYmFzZVZhbHVlcyIsImNhY2hlSGFzIiwiY2hhcnNTdGFydEluZGV4Iiwic3RyU3ltYm9scyIsImNoclN5bWJvbHMiLCJjaGFyc0VuZEluZGV4IiwiY291bnRIb2xkZXJzIiwicGxhY2Vob2xkZXIiLCJkZWJ1cnJMZXR0ZXIiLCJlc2NhcGVIdG1sQ2hhciIsImVzY2FwZVN0cmluZ0NoYXIiLCJjaHIiLCJoYXNVbmljb2RlIiwibWFwVG9BcnJheSIsIm92ZXJBcmciLCJ0cmFuc2Zvcm0iLCJyZXBsYWNlSG9sZGVycyIsInNldFRvQXJyYXkiLCJzZXRUb1BhaXJzIiwic3RyaW5nU2l6ZSIsInVuaWNvZGVTaXplIiwic3RyaW5nVG9BcnJheSIsInVuaWNvZGVUb0FycmF5IiwiYXNjaWlUb0FycmF5IiwidW5lc2NhcGVIdG1sQ2hhciIsInJ1bkluQ29udGV4dCIsInVpZCIsInBpY2siLCJhcnJheVByb3RvIiwiZnVuY1Byb3RvIiwib2JqZWN0UHJvdG8iLCJjb3JlSnNEYXRhIiwiZnVuY1RvU3RyaW5nIiwiaWRDb3VudGVyIiwibWFza1NyY0tleSIsImV4ZWMiLCJJRV9QUk9UTyIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsIm9sZERhc2giLCJyZUlzTmF0aXZlIiwiZ2V0UHJvdG90eXBlIiwib2JqZWN0Q3JlYXRlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzcHJlYWRhYmxlU3ltYm9sIiwiaXNDb25jYXRTcHJlYWRhYmxlIiwic3ltSXRlcmF0b3IiLCJzeW1Ub1N0cmluZ1RhZyIsImdldE5hdGl2ZSIsImN0eENsZWFyVGltZW91dCIsImN0eE5vdyIsIm5vdyIsImN0eFNldFRpbWVvdXQiLCJuYXRpdmVDZWlsIiwibmF0aXZlRmxvb3IiLCJuYXRpdmVHZXRTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwibmF0aXZlSXNCdWZmZXIiLCJuYXRpdmVJc0Zpbml0ZSIsIm5hdGl2ZUpvaW4iLCJuYXRpdmVLZXlzIiwibmF0aXZlTWF4IiwibmF0aXZlTWluIiwibmF0aXZlTm93IiwibmF0aXZlUGFyc2VJbnQiLCJuYXRpdmVSYW5kb20iLCJuYXRpdmVSZXZlcnNlIiwiRGF0YVZpZXciLCJTZXQiLCJXZWFrTWFwIiwibmF0aXZlQ3JlYXRlIiwibWV0YU1hcCIsInJlYWxOYW1lcyIsImRhdGFWaWV3Q3RvclN0cmluZyIsInRvU291cmNlIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwic3ltYm9sVG9TdHJpbmciLCJsb2Rhc2giLCJpc09iamVjdExpa2UiLCJMYXp5V3JhcHBlciIsIkxvZGFzaFdyYXBwZXIiLCJ3cmFwcGVyQ2xvbmUiLCJiYXNlQ3JlYXRlIiwicHJvdG8iLCJpc09iamVjdCIsImJhc2VMb2Rhc2giLCJjaGFpbkFsbCIsIl9fd3JhcHBlZF9fIiwiX19hY3Rpb25zX18iLCJfX2NoYWluX18iLCJfX2luZGV4X18iLCJfX3ZhbHVlc19fIiwiX19kaXJfXyIsIl9fZmlsdGVyZWRfXyIsIl9faXRlcmF0ZWVzX18iLCJfX3Rha2VDb3VudF9fIiwiX192aWV3c19fIiwiSGFzaCIsImVudHJpZXMiLCJjbGVhciIsImVudHJ5IiwiTGlzdENhY2hlIiwiTWFwQ2FjaGUiLCJTZXRDYWNoZSIsIl9fZGF0YV9fIiwiU3RhY2siLCJhcnJheUxpa2VLZXlzIiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQXJndW1lbnRzIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJpc0luZGV4IiwiYXJyYXlTYW1wbGUiLCJiYXNlUmFuZG9tIiwiYXJyYXlTYW1wbGVTaXplIiwic2h1ZmZsZVNlbGYiLCJjb3B5QXJyYXkiLCJiYXNlQ2xhbXAiLCJhcnJheVNodWZmbGUiLCJhc3NpZ25NZXJnZVZhbHVlIiwiZXEiLCJiYXNlQXNzaWduVmFsdWUiLCJhc3NpZ25WYWx1ZSIsIm9ialZhbHVlIiwiYXNzb2NJbmRleE9mIiwiYmFzZUFnZ3JlZ2F0b3IiLCJiYXNlRWFjaCIsImJhc2VBc3NpZ24iLCJjb3B5T2JqZWN0IiwiYmFzZUF0Iiwic2tpcCIsImxvd2VyIiwidXBwZXIiLCJiYXNlQ2xvbmUiLCJiaXRtYXNrIiwiY3VzdG9taXplciIsImlzRGVlcCIsImlzRmxhdCIsImlzRnVsbCIsImluaXRDbG9uZUFycmF5IiwidGFnIiwiZ2V0VGFnIiwiaXNGdW5jIiwiY2xvbmVCdWZmZXIiLCJpbml0Q2xvbmVPYmplY3QiLCJnZXRTeW1ib2xzSW4iLCJjb3B5U3ltYm9sc0luIiwia2V5c0luIiwiYmFzZUFzc2lnbkluIiwiZ2V0U3ltYm9scyIsImNvcHlTeW1ib2xzIiwiQ3RvciIsImNsb25lQXJyYXlCdWZmZXIiLCJkYXRhVmlldyIsImNsb25lRGF0YVZpZXciLCJjbG9uZVR5cGVkQXJyYXkiLCJyZWdleHAiLCJjbG9uZVJlZ0V4cCIsInN5bWJvbCIsImluaXRDbG9uZUJ5VGFnIiwic3RhY2tlZCIsInN1YlZhbHVlIiwiZ2V0QWxsS2V5c0luIiwiZ2V0QWxsS2V5cyIsImJhc2VDb25mb3Jtc1RvIiwiYmFzZURlbGF5Iiwid2FpdCIsImJhc2VEaWZmZXJlbmNlIiwiaXNDb21tb24iLCJ2YWx1ZXNMZW5ndGgiLCJvdXRlciIsImNvbXB1dGVkIiwidmFsdWVzSW5kZXgiLCJ0ZW1wbGF0ZVNldHRpbmdzIiwiZ2V0TWFwRGF0YSIsInBhaXJzIiwiTEFSR0VfQVJSQVlfU0laRSIsImNyZWF0ZUJhc2VFYWNoIiwiYmFzZUZvck93biIsImJhc2VFYWNoUmlnaHQiLCJiYXNlRm9yT3duUmlnaHQiLCJiYXNlRXZlcnkiLCJiYXNlRXh0cmVtdW0iLCJpc1N5bWJvbCIsImJhc2VGaWx0ZXIiLCJiYXNlRmxhdHRlbiIsImlzU3RyaWN0IiwiaXNGbGF0dGVuYWJsZSIsImJhc2VGb3IiLCJjcmVhdGVCYXNlRm9yIiwiYmFzZUZvclJpZ2h0IiwiYmFzZUZ1bmN0aW9ucyIsImlzRnVuY3Rpb24iLCJiYXNlR2V0IiwiY2FzdFBhdGgiLCJ0b0tleSIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImJhc2VHZXRUYWciLCJpc093biIsInVubWFza2VkIiwiZ2V0UmF3VGFnIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlR3QiLCJiYXNlSGFzIiwiYmFzZUhhc0luIiwiYmFzZUludGVyc2VjdGlvbiIsImFycmF5cyIsIm90aExlbmd0aCIsIm90aEluZGV4IiwiY2FjaGVzIiwibWF4TGVuZ3RoIiwic2VlbiIsImJhc2VJbnZva2UiLCJiYXNlSXNBcmd1bWVudHMiLCJiYXNlSXNFcXVhbCIsImVxdWFsRnVuYyIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwiZXF1YWxBcnJheXMiLCJjb252ZXJ0IiwiaXNQYXJ0aWFsIiwiZXF1YWxCeVRhZyIsIm9iaklzV3JhcHBlZCIsIm90aElzV3JhcHBlZCIsIm9ialVud3JhcHBlZCIsIm90aFVud3JhcHBlZCIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwib2JqU3RhY2tlZCIsIm90aFN0YWNrZWQiLCJza2lwQ3RvciIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvYmpDdG9yIiwib3RoQ3RvciIsImVxdWFsT2JqZWN0cyIsImJhc2VJc0VxdWFsRGVlcCIsImJhc2VJc01hdGNoIiwibWF0Y2hEYXRhIiwibm9DdXN0b21pemVyIiwic3JjVmFsdWUiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsImJhc2VJc05hdGl2ZSIsImJhc2VJdGVyYXRlZSIsImJhc2VNYXRjaGVzUHJvcGVydHkiLCJiYXNlTWF0Y2hlcyIsImJhc2VLZXlzIiwiaXNQcm90b3R5cGUiLCJiYXNlS2V5c0luIiwibmF0aXZlS2V5c0luIiwiaXNQcm90byIsImJhc2VMdCIsImJhc2VNYXAiLCJpc0FycmF5TGlrZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiaXNLZXkiLCJpc1N0cmljdENvbXBhcmFibGUiLCJoYXNJbiIsImJhc2VNZXJnZSIsInNyY0luZGV4IiwibWVyZ2VGdW5jIiwic2FmZUdldCIsIm5ld1ZhbHVlIiwiaXNUeXBlZCIsImlzQXJyYXlMaWtlT2JqZWN0IiwiaXNQbGFpbk9iamVjdCIsInRvUGxhaW5PYmplY3QiLCJiYXNlTWVyZ2VEZWVwIiwiYmFzZU50aCIsImJhc2VPcmRlckJ5IiwiaXRlcmF0ZWVzIiwib3JkZXJzIiwiZ2V0SXRlcmF0ZWUiLCJjb21wYXJlciIsImJhc2VTb3J0QnkiLCJvYmpDcml0ZXJpYSIsImNyaXRlcmlhIiwib3RoQ3JpdGVyaWEiLCJvcmRlcnNMZW5ndGgiLCJjb21wYXJlQXNjZW5kaW5nIiwib3JkZXIiLCJjb21wYXJlTXVsdGlwbGUiLCJiYXNlUGlja0J5IiwiYmFzZVNldCIsImJhc2VQdWxsQWxsIiwiYmFzZVB1bGxBdCIsImJhc2VVbnNldCIsImJhc2VSZXBlYXQiLCJiYXNlUmVzdCIsInNldFRvU3RyaW5nIiwib3ZlclJlc3QiLCJiYXNlU2FtcGxlIiwiYmFzZVNhbXBsZVNpemUiLCJuZXN0ZWQiLCJiYXNlU2V0RGF0YSIsImJhc2VTZXRUb1N0cmluZyIsImNvbnN0YW50IiwiYmFzZVNodWZmbGUiLCJiYXNlU2xpY2UiLCJiYXNlU29tZSIsImJhc2VTb3J0ZWRJbmRleCIsInJldEhpZ2hlc3QiLCJNQVhfQVJSQVlfTEVOR1RIIiwiYmFzZVNvcnRlZEluZGV4QnkiLCJ2YWxJc05hTiIsInZhbElzTnVsbCIsInZhbElzU3ltYm9sIiwidmFsSXNVbmRlZmluZWQiLCJvdGhJc0RlZmluZWQiLCJvdGhJc051bGwiLCJvdGhJc1JlZmxleGl2ZSIsIm90aElzU3ltYm9sIiwic2V0TG93IiwiYmFzZVNvcnRlZFVuaXEiLCJiYXNlVG9OdW1iZXIiLCJiYXNlVG9TdHJpbmciLCJiYXNlVW5pcSIsImNyZWF0ZVNldCIsInNlZW5JbmRleCIsImJhc2VVcGRhdGUiLCJ1cGRhdGVyIiwiYmFzZVdoaWxlIiwiaXNEcm9wIiwiYmFzZVdyYXBwZXJWYWx1ZSIsImFjdGlvbnMiLCJhY3Rpb24iLCJiYXNlWG9yIiwiYmFzZVppcE9iamVjdCIsImFzc2lnbkZ1bmMiLCJ2YWxzTGVuZ3RoIiwiY2FzdEFycmF5TGlrZU9iamVjdCIsImNhc3RGdW5jdGlvbiIsInN0cmluZ1RvUGF0aCIsImNhc3RSZXN0IiwiY2FzdFNsaWNlIiwiYXJyYXlCdWZmZXIiLCJ0eXBlZEFycmF5IiwidmFsSXNEZWZpbmVkIiwidmFsSXNSZWZsZXhpdmUiLCJjb21wb3NlQXJncyIsInBhcnRpYWxzIiwiaG9sZGVycyIsImlzQ3VycmllZCIsImFyZ3NJbmRleCIsImFyZ3NMZW5ndGgiLCJob2xkZXJzTGVuZ3RoIiwibGVmdEluZGV4IiwibGVmdExlbmd0aCIsInJhbmdlTGVuZ3RoIiwiaXNVbmN1cnJpZWQiLCJjb21wb3NlQXJnc1JpZ2h0IiwiaG9sZGVyc0luZGV4IiwicmlnaHRJbmRleCIsInJpZ2h0TGVuZ3RoIiwiaXNOZXciLCJjcmVhdGVBZ2dyZWdhdG9yIiwiY3JlYXRlQXNzaWduZXIiLCJhc3NpZ25lciIsImd1YXJkIiwiaXNJdGVyYXRlZUNhbGwiLCJpdGVyYWJsZSIsImNyZWF0ZUNhc2VGaXJzdCIsIm1ldGhvZE5hbWUiLCJ0cmFpbGluZyIsImNyZWF0ZUNvbXBvdW5kZXIiLCJ3b3JkcyIsImRlYnVyciIsImNyZWF0ZUN0b3IiLCJ0aGlzQmluZGluZyIsImNyZWF0ZUZpbmQiLCJmaW5kSW5kZXhGdW5jIiwiY3JlYXRlRmxvdyIsImZsYXRSZXN0IiwiZnVuY3MiLCJwcmVyZXEiLCJ0aHJ1Iiwid3JhcHBlciIsImdldEZ1bmNOYW1lIiwiZnVuY05hbWUiLCJnZXREYXRhIiwiaXNMYXppYWJsZSIsInBsYW50IiwiY3JlYXRlSHlicmlkIiwicGFydGlhbHNSaWdodCIsImhvbGRlcnNSaWdodCIsImFyZ1BvcyIsImFyaXR5IiwiaXNBcnkiLCJpc0JpbmQiLCJpc0JpbmRLZXkiLCJpc0ZsaXAiLCJnZXRIb2xkZXIiLCJob2xkZXJzQ291bnQiLCJuZXdIb2xkZXJzIiwiY3JlYXRlUmVjdXJyeSIsInJlb3JkZXIiLCJjcmVhdGVJbnZlcnRlciIsInRvSXRlcmF0ZWUiLCJiYXNlSW52ZXJ0ZXIiLCJjcmVhdGVNYXRoT3BlcmF0aW9uIiwib3BlcmF0b3IiLCJkZWZhdWx0VmFsdWUiLCJjcmVhdGVPdmVyIiwiYXJyYXlGdW5jIiwiY3JlYXRlUGFkZGluZyIsImNoYXJzIiwiY2hhcnNMZW5ndGgiLCJjcmVhdGVSYW5nZSIsInRvRmluaXRlIiwiYmFzZVJhbmdlIiwiY3JlYXRlUmVsYXRpb25hbE9wZXJhdGlvbiIsInRvTnVtYmVyIiwid3JhcEZ1bmMiLCJpc0N1cnJ5IiwibmV3RGF0YSIsInNldERhdGEiLCJzZXRXcmFwVG9TdHJpbmciLCJjcmVhdGVSb3VuZCIsInByZWNpc2lvbiIsInBhaXIiLCJjcmVhdGVUb1BhaXJzIiwiYmFzZVRvUGFpcnMiLCJjcmVhdGVXcmFwIiwic3JjQml0bWFzayIsIm5ld0JpdG1hc2siLCJpc0NvbWJvIiwibWVyZ2VEYXRhIiwiY3JlYXRlQ3VycnkiLCJjcmVhdGVQYXJ0aWFsIiwiY3JlYXRlQmluZCIsImN1c3RvbURlZmF1bHRzQXNzaWduSW4iLCJjdXN0b21EZWZhdWx0c01lcmdlIiwiY3VzdG9tT21pdENsb25lIiwiYXJyU3RhY2tlZCIsImFyclZhbHVlIiwiZmxhdHRlbiIsIm90aGVyRnVuYyIsImdldFZhbHVlIiwic3R1YkFycmF5IiwiaGFzUGF0aCIsImhhc0Z1bmMiLCJpc0xlbmd0aCIsImN0b3JTdHJpbmciLCJpc01hc2thYmxlIiwic3R1YkZhbHNlIiwib3RoZXJBcmdzIiwib2xkQXJyYXkiLCJzaG9ydE91dCIsInJlZmVyZW5jZSIsImRldGFpbHMiLCJpbnNlcnRXcmFwRGV0YWlscyIsInVwZGF0ZVdyYXBEZXRhaWxzIiwiZ2V0V3JhcERldGFpbHMiLCJsYXN0Q2FsbGVkIiwic3RhbXAiLCJyYW5kIiwibWVtb2l6ZSIsIm1lbW9pemVDYXBwZWQiLCJzdWJTdHJpbmciLCJkaWZmZXJlbmNlQnkiLCJkaWZmZXJlbmNlV2l0aCIsImZpbmRMYXN0SW5kZXgiLCJoZWFkIiwiaW50ZXJzZWN0aW9uIiwibWFwcGVkIiwiaW50ZXJzZWN0aW9uQnkiLCJpbnRlcnNlY3Rpb25XaXRoIiwicHVsbCIsInB1bGxBbGwiLCJwdWxsQXQiLCJ1bmlvbiIsInVuaW9uQnkiLCJ1bmlvbldpdGgiLCJ1bnppcCIsImdyb3VwIiwidW56aXBXaXRoIiwid2l0aG91dCIsInhvciIsInhvckJ5IiwieG9yV2l0aCIsInppcCIsInppcFdpdGgiLCJjaGFpbiIsImludGVyY2VwdG9yIiwid3JhcHBlckF0IiwiY291bnRCeSIsImZpbmQiLCJmaW5kTGFzdCIsImZvckVhY2hSaWdodCIsImdyb3VwQnkiLCJpbnZva2VNYXAiLCJrZXlCeSIsInBhcnRpdGlvbiIsInNvcnRCeSIsImJpbmRLZXkiLCJXUkFQX0JJTkRfRkxBRyIsImRlYm91bmNlIiwibGFzdEFyZ3MiLCJsYXN0VGhpcyIsIm1heFdhaXQiLCJ0aW1lcklkIiwibGFzdENhbGxUaW1lIiwibGFzdEludm9rZVRpbWUiLCJsZWFkaW5nIiwibWF4aW5nIiwiaW52b2tlRnVuYyIsImxlYWRpbmdFZGdlIiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJ0aW1lV2FpdGluZyIsInJlbWFpbmluZ1dhaXQiLCJkZWJvdW5jZWQiLCJpc0ludm9raW5nIiwiY2FuY2VsIiwiZmx1c2giLCJkZWZlciIsImRlbGF5IiwicmVzb2x2ZXIiLCJtZW1vaXplZCIsIkNhY2hlIiwibmVnYXRlIiwib3ZlckFyZ3MiLCJ0cmFuc2Zvcm1zIiwiZnVuY3NMZW5ndGgiLCJwYXJ0aWFsIiwicGFydGlhbFJpZ2h0IiwicmVhcmciLCJndCIsImd0ZSIsImlzRXJyb3IiLCJpc0ludGVnZXIiLCJpc051bWJlciIsImlzU3RyaW5nIiwibHQiLCJsdGUiLCJpdGVyYXRvclRvQXJyYXkiLCJyZW1haW5kZXIiLCJ0b0xlbmd0aCIsImlzQmluYXJ5IiwiYXNzaWduSW4iLCJhc3NpZ25JbldpdGgiLCJhc3NpZ25XaXRoIiwicHJvcHNJbmRleCIsInByb3BzTGVuZ3RoIiwiZGVmYXVsdHNEZWVwIiwibWVyZ2VXaXRoIiwiaW52ZXJ0IiwiaW52ZXJ0QnkiLCJpbnZva2UiLCJvbWl0IiwiQ0xPTkVfREVFUF9GTEFHIiwiYmFzZVBpY2siLCJwaWNrQnkiLCJ0b1BhaXJzIiwidG9QYWlyc0luIiwiY2FtZWxDYXNlIiwiY2FwaXRhbGl6ZSIsInVwcGVyRmlyc3QiLCJrZWJhYkNhc2UiLCJsb3dlckNhc2UiLCJsb3dlckZpcnN0Iiwic25ha2VDYXNlIiwic3RhcnRDYXNlIiwidXBwZXJDYXNlIiwiaGFzVW5pY29kZVdvcmQiLCJ1bmljb2RlV29yZHMiLCJhc2NpaVdvcmRzIiwiYXR0ZW1wdCIsImJpbmRBbGwiLCJtZXRob2ROYW1lcyIsImZsb3ciLCJmbG93UmlnaHQiLCJtZXRob2RPZiIsIm1peGluIiwib3ZlciIsIm92ZXJFdmVyeSIsIm92ZXJTb21lIiwiYmFzZVByb3BlcnR5RGVlcCIsInJhbmdlIiwicmFuZ2VSaWdodCIsImF1Z2VuZCIsImFkZGVuZCIsImRpdmlkZSIsImRpdmlkZW5kIiwiZGl2aXNvciIsIm11bHRpcGx5IiwibXVsdGlwbGllciIsIm11bHRpcGxpY2FuZCIsInN1YnRyYWN0IiwibWludWVuZCIsInN1YnRyYWhlbmQiLCJjYXN0QXJyYXkiLCJjb21wYWN0IiwiY29uZCIsImNvbmZvcm1zIiwiYmFzZUNvbmZvcm1zIiwicHJvcGVydGllcyIsImN1cnJ5IiwiY3VycnlSaWdodCIsImRyb3AiLCJkcm9wUmlnaHQiLCJkcm9wUmlnaHRXaGlsZSIsImRyb3BXaGlsZSIsImJhc2VGaWxsIiwiZmxhdE1hcCIsImZsYXRNYXBEZWVwIiwiZmxhdE1hcERlcHRoIiwiZmxhdHRlbkRlZXAiLCJmbGF0dGVuRGVwdGgiLCJmbGlwIiwiZnJvbVBhaXJzIiwiZnVuY3Rpb25zIiwiZnVuY3Rpb25zSW4iLCJpbml0aWFsIiwibWFwS2V5cyIsIm1hcFZhbHVlcyIsIm1hdGNoZXNQcm9wZXJ0eSIsIm50aEFyZyIsIm9taXRCeSIsIm9yZGVyQnkiLCJwcm9wZXJ0eU9mIiwicHVsbEFsbEJ5IiwicHVsbEFsbFdpdGgiLCJzYW1wbGVTaXplIiwic2V0V2l0aCIsInNodWZmbGUiLCJzb3J0ZWRVbmlxIiwic29ydGVkVW5pcUJ5Iiwic2VwYXJhdG9yIiwic3ByZWFkIiwidGFpbCIsInRha2UiLCJ0YWtlUmlnaHQiLCJ0YWtlUmlnaHRXaGlsZSIsInRha2VXaGlsZSIsInRhcCIsInRocm90dGxlIiwidG9QYXRoIiwiaXNBcnJMaWtlIiwidW5hcnkiLCJ1bmlxIiwidW5pcUJ5IiwidW5pcVdpdGgiLCJ1bnNldCIsInVwZGF0ZSIsInVwZGF0ZVdpdGgiLCJ2YWx1ZXNJbiIsIndyYXAiLCJ6aXBPYmplY3QiLCJ6aXBPYmplY3REZWVwIiwiZW50cmllc0luIiwiZXh0ZW5kIiwiZXh0ZW5kV2l0aCIsImNsYW1wIiwiY2xvbmVEZWVwIiwiY2xvbmVEZWVwV2l0aCIsImNsb25lV2l0aCIsImNvbmZvcm1zVG8iLCJkZWZhdWx0VG8iLCJlc2NhcGVSZWdFeHAiLCJmaW5kTGFzdEtleSIsImZvckluIiwiZm9ySW5SaWdodCIsImZvck93biIsImZvck93blJpZ2h0IiwiaW5SYW5nZSIsImJhc2VJblJhbmdlIiwiaXNCb29sZWFuIiwiaXNFbGVtZW50IiwiaXNFbXB0eSIsImlzRXF1YWwiLCJpc0VxdWFsV2l0aCIsImlzTWF0Y2giLCJpc01hdGNoV2l0aCIsImlzTmF0aXZlIiwiaXNOaWwiLCJpc051bGwiLCJpc1NhZmVJbnRlZ2VyIiwiaXNVbmRlZmluZWQiLCJpc1dlYWtNYXAiLCJpc1dlYWtTZXQiLCJzdHJpY3RMYXN0SW5kZXhPZiIsIm1heEJ5IiwibWVhbiIsIm1lYW5CeSIsIm1pbkJ5Iiwic3R1Yk9iamVjdCIsInN0dWJTdHJpbmciLCJzdHViVHJ1ZSIsIm50aCIsIm5vQ29uZmxpY3QiLCJwYWQiLCJzdHJMZW5ndGgiLCJwYWRFbmQiLCJwYWRTdGFydCIsInJhZGl4IiwiZmxvYXRpbmciLCJyZWR1Y2VSaWdodCIsInJlcGVhdCIsInNvcnRlZEluZGV4Iiwic29ydGVkSW5kZXhCeSIsInNvcnRlZEluZGV4T2YiLCJzb3J0ZWRMYXN0SW5kZXgiLCJzb3J0ZWRMYXN0SW5kZXhCeSIsInNvcnRlZExhc3RJbmRleE9mIiwic3RhcnRzV2l0aCIsInN1bSIsInN1bUJ5IiwidGVtcGxhdGUiLCJzZXR0aW5ncyIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJpbXBvcnRzIiwiaW1wb3J0c0tleXMiLCJpbXBvcnRzVmFsdWVzIiwiaW50ZXJwb2xhdGUiLCJyZURlbGltaXRlcnMiLCJldmFsdWF0ZSIsImVzY2FwZVZhbHVlIiwiaW50ZXJwb2xhdGVWYWx1ZSIsImVzVGVtcGxhdGVWYWx1ZSIsImV2YWx1YXRlVmFsdWUiLCJ2YXJpYWJsZSIsInRpbWVzIiwidG9Mb3dlciIsInRvU2FmZUludGVnZXIiLCJ0b1VwcGVyIiwidHJpbUVuZCIsInRyaW1TdGFydCIsInRydW5jYXRlIiwib21pc3Npb24iLCJuZXdFbmQiLCJ1bmlxdWVJZCIsImVhY2hSaWdodCIsIlZFUlNJT04iLCJpc0ZpbHRlciIsInRha2VOYW1lIiwiZHJvcE5hbWUiLCJjaGVja0l0ZXJhdGVlIiwiaXNUYWtlciIsImxvZGFzaEZ1bmMiLCJyZXRVbndyYXBwZWQiLCJpc0xhenkiLCJ1c2VMYXp5IiwiaXNIeWJyaWQiLCJpc1Vud3JhcHBlZCIsIm9ubHlMYXp5IiwiY2hhaW5OYW1lIiwiaXNSaWdodCIsInZpZXciLCJnZXRWaWV3IiwiaXRlckxlbmd0aCIsInRha2VDb3VudCIsIml0ZXJJbmRleCIsImNvbW1pdCIsIndyYXBwZWQiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiXSwibWFwcGluZ3MiOiI7YUFD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QUFRLElBQUssT0FBUSxJQUFLLE9BQVEsSUFBSyxPQUFRLElBQzFFLE9BQVEsSUFBTSxPQUFRLElBQ3RCLE9BQVEsSUFBTSxPQUFRLElBQ3RCLE9BQVEsSUFBTSxPQUFRLElBQUssT0FBUSxJQUFLLE9BQVEsSUFDaEQsT0FBUSxJQUFNLE9BQVEsSUFBSyxPQUFRLElBQUssT0FBUSxJQUNoRCxPQUFRLElBQU0sT0FBUSxJQUFLLE9BQVEsSUFBSyxPQUFRLElBQ2hELE9BQVEsSUFBTSxPQUFRLElBQUssT0FBUSxJQUFLLE9BQVEsSUFDaEQsT0FBUSxJQUFNLE9BQVEsSUFDdEIsT0FBUSxJQUFNLE9BQVEsSUFBSyxPQUFRLElBQUssT0FBUSxJQUFLLE9BQVEsSUFBSyxPQUFRLElBQzFFLE9BQVEsSUFBTSxPQUFRLElBQUssT0FBUSxJQUFLLE9BQVEsSUFBSyxPQUFRLElBQUssT0FBUSxJQUMxRSxPQUFRLElBQU0sT0FBUSxJQUFLLE9BQVEsSUFBSyxPQUFRLElBQ2hELE9BQVEsSUFBTSxPQUFRLElBQUssT0FBUSxJQUFLLE9BQVEsSUFDaEQsT0FBUSxJQUFNLE9BQVEsSUFBSyxPQUFRLElBQ25DLE9BQVEsS0FBTSxPQUFRLEtBQ3RCLE9BQVEsS0FBTSxPQUFRLEtBQ3RCLE9BQVEsS0FFUixPQUFVLElBQU0sT0FBVSxJQUFLLE9BQVUsSUFDekMsT0FBVSxJQUFNLE9BQVUsSUFBSyxPQUFVLElBQ3pDLE9BQVUsSUFBTSxPQUFVLElBQUssT0FBVSxJQUFLLE9BQVUsSUFDeEQsT0FBVSxJQUFNLE9BQVUsSUFBSyxPQUFVLElBQUssT0FBVSxJQUN4RCxPQUFVLElBQU0sT0FBVSxJQUFLLE9BQVUsSUFBSyxPQUFVLElBQ3hELE9BQVUsSUFBTSxPQUFVLElBQUssT0FBVSxJQUFLLE9BQVUsSUFBSyxPQUFVLElBQ3ZFLE9BQVUsSUFBTSxPQUFVLElBQUssT0FBVSxJQUFLLE9BQVUsSUFBSyxPQUFVLElBQ3ZFLE9BQVUsSUFBTSxPQUFVLElBQUssT0FBVSxJQUFLLE9BQVUsSUFDeEQsT0FBVSxJQUFNLE9BQVUsSUFBSyxPQUFVLElBQUssT0FBVSxJQUN4RCxPQUFVLElBQU0sT0FBVSxJQUFLLE9BQVUsSUFBSyxPQUFVLElBQ3hELE9BQVUsSUFBTSxPQUFVLElBQUssT0FBVSxJQUFLLE9BQVUsSUFBSyxPQUFVLElBQ3ZFLE9BQVUsSUFBTSxPQUFVLElBQUssT0FBVSxJQUFLLE9BQVUsSUFBSyxPQUFVLElBQ3ZFLE9BQVUsSUFBTSxPQUFVLElBQzFCLE9BQVUsSUFBTSxPQUFVLElBQUssT0FBVSxJQUN6QyxPQUFVLElBQU0sT0FBVSxJQUFLLE9BQVUsSUFBSyxPQUFVLElBQUssT0FBVSxJQUN2RSxPQUFVLElBQU0sT0FBVSxJQUFLLE9BQVUsSUFBSyxPQUFVLElBQUssT0FBVSxJQUN2RSxPQUFVLElBQU0sT0FBVSxJQUFLLE9BQVUsSUFBSyxPQUFVLElBQ3hELE9BQVUsSUFBTSxPQUFVLElBQUssT0FBVSxJQUFLLE9BQVUsSUFDeEQsT0FBVSxJQUFNLE9BQVUsSUFBSyxPQUFVLElBQ3pDLE9BQVUsSUFBTSxPQUFVLElBQUssT0FBVSxJQUN6QyxPQUFVLElBQU0sT0FBVSxJQUFLLE9BQVUsSUFDekMsT0FBVSxJQUFNLE9BQVUsSUFBSyxPQUFVLElBQ3pDLE9BQVUsSUFBTSxPQUFVLElBQUssT0FBVSxJQUFLLE9BQVUsSUFDeEQsT0FBVSxJQUFNLE9BQVUsSUFBSyxPQUFVLElBQUssT0FBVSxJQUN4RCxPQUFVLElBQU0sT0FBVSxJQUFLLE9BQVUsSUFDekMsT0FBVSxJQUFNLE9BQVUsSUFBSyxPQUFVLElBQ3pDLE9BQVUsSUFBTSxPQUFVLElBQUssT0FBVSxJQUFLLE9BQVUsSUFBSyxPQUFVLElBQUssT0FBVSxJQUN0RixPQUFVLElBQU0sT0FBVSxJQUFLLE9BQVUsSUFBSyxPQUFVLElBQUssT0FBVSxJQUFLLE9BQVUsSUFDdEYsT0FBVSxJQUFNLE9BQVUsSUFDMUIsT0FBVSxJQUFNLE9BQVUsSUFBSyxPQUFVLElBQ3pDLE9BQVUsSUFBTSxPQUFVLElBQUssT0FBVSxJQUN6QyxPQUFVLElBQU0sT0FBVSxJQUFLLE9BQVUs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aUQsWUFBYWppRCxLQUFLa2lELGNBbTNQakRYLEdBQU9sckQsVUFBVThMLE1BQVFvL0MsR0FBT2xyRCxVQUFVOGpFLEtBRXRDaGIsS0FDRm9DLEdBQU9sckQsVUFBVThvRCxJQTM5UG5CLFdBQ0UsT0FBT24vQyxPQTQ5UEZ1aEQsR0FNRHpELEdBUU4xa0QsR0FBS3FHLEVBQUlBLFFBMXVoQlA2VCxLQTh1aEJGLGFBQ0UsT0FBTzdULElBQ1IsZ0NBYUg3SyxLQUFLb0wsUSxtREN4d2hCUHhMLEVBQU9ELFFBQVUsU0FBU0MsR0FvQnpCLE9BbkJLQSxFQUFPbTRFLGtCQUNYbjRFLEVBQU9vNEUsVUFBWSxhQUNuQnA0RSxFQUFPc2hCLE1BQVEsR0FFVnRoQixFQUFPa2pCLFdBQVVsakIsRUFBT2tqQixTQUFXLElBQ3hDdmlCLE9BQU9DLGVBQWVaLEVBQVEsU0FBVSxDQUN2Q2EsWUFBWSxFQUNaQyxJQUFLLFdBQ0osT0FBT2QsRUFBT0UsS0FHaEJTLE9BQU9DLGVBQWVaLEVBQVEsS0FBTSxDQUNuQ2EsWUFBWSxFQUNaQyxJQUFLLFdBQ0osT0FBT2QsRUFBT0MsS0FHaEJELEVBQU9tNEUsZ0JBQWtCLEdBRW5CbjRFIiwiZmlsZSI6InN5bmMvaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9cIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDg3KTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2RlY2xhcmF0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9kZWNsYXJhdGlvblwiKSk7XG5cbnZhciBfcHJvY2Vzc29yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9wcm9jZXNzb3JcIikpO1xuXG52YXIgX3N0cmluZ2lmeSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3RyaW5naWZ5XCIpKTtcblxudmFyIF9jb21tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb21tZW50XCIpKTtcblxudmFyIF9hdFJ1bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2F0LXJ1bGVcIikpO1xuXG52YXIgX3ZlbmRvciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vdmVuZG9yXCIpKTtcblxudmFyIF9wYXJzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcGFyc2VcIikpO1xuXG52YXIgX2xpc3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2xpc3RcIikpO1xuXG52YXIgX3J1bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3J1bGVcIikpO1xuXG52YXIgX3Jvb3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Jvb3RcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIENyZWF0ZSBhIG5ldyB7QGxpbmsgUHJvY2Vzc29yfSBpbnN0YW5jZSB0aGF0IHdpbGwgYXBwbHkgYHBsdWdpbnNgXG4gKiBhcyBDU1MgcHJvY2Vzc29ycy5cbiAqXG4gKiBAcGFyYW0ge0FycmF5LjxQbHVnaW58cGx1Z2luRnVuY3Rpb24+fFByb2Nlc3Nvcn0gcGx1Z2lucyBQb3N0Q1NTIHBsdWdpbnMuXG4gKiAgICAgICAgU2VlIHtAbGluayBQcm9jZXNzb3IjdXNlfSBmb3IgcGx1Z2luIGZvcm1hdC5cbiAqXG4gKiBAcmV0dXJuIHtQcm9jZXNzb3J9IFByb2Nlc3NvciB0byBwcm9jZXNzIG11bHRpcGxlIENTUy5cbiAqXG4gKiBAZXhhbXBsZVxuICogaW1wb3J0IHBvc3Rjc3MgZnJvbSAncG9zdGNzcydcbiAqXG4gKiBwb3N0Y3NzKHBsdWdpbnMpLnByb2Nlc3MoY3NzLCB7IGZyb20sIHRvIH0pLnRoZW4ocmVzdWx0ID0+IHtcbiAqICAgY29uc29sZS5sb2cocmVzdWx0LmNzcylcbiAqIH0pXG4gKlxuICogQG5hbWVzcGFjZSBwb3N0Y3NzXG4gKi9cbmZ1bmN0aW9uIHBvc3Rjc3MoKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBwbHVnaW5zID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHBsdWdpbnNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICBpZiAocGx1Z2lucy5sZW5ndGggPT09IDEgJiYgQXJyYXkuaXNBcnJheShwbHVnaW5zWzBdKSkge1xuICAgIHBsdWdpbnMgPSBwbHVnaW5zWzBdO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBfcHJvY2Vzc29yLmRlZmF1bHQocGx1Z2lucyk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBQb3N0Q1NTIHBsdWdpbiB3aXRoIGEgc3RhbmRhcmQgQVBJLlxuICpcbiAqIFRoZSBuZXdseS13cmFwcGVkIGZ1bmN0aW9uIHdpbGwgcHJvdmlkZSBib3RoIHRoZSBuYW1lIGFuZCBQb3N0Q1NTXG4gKiB2ZXJzaW9uIG9mIHRoZSBwbHVnaW4uXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHByb2Nlc3NvciA9IHBvc3Rjc3MoW3JlcGxhY2VdKVxuICogcHJvY2Vzc29yLnBsdWdpbnNbMF0ucG9zdGNzc1BsdWdpbiAgLy89PiAncG9zdGNzcy1yZXBsYWNlJ1xuICogcHJvY2Vzc29yLnBsdWdpbnNbMF0ucG9zdGNzc1ZlcnNpb24gLy89PiAnNi4wLjAnXG4gKiBgYGBcbiAqXG4gKiBUaGUgcGx1Z2luIGZ1bmN0aW9uIHJlY2VpdmVzIDIgYXJndW1lbnRzOiB7QGxpbmsgUm9vdH1cbiAqIGFuZCB7QGxpbmsgUmVzdWx0fSBpbnN0YW5jZS4gVGhlIGZ1bmN0aW9uIHNob3VsZCBtdXRhdGUgdGhlIHByb3ZpZGVkXG4gKiBgUm9vdGAgbm9kZS4gQWx0ZXJuYXRpdmVseSwgeW91IGNhbiBjcmVhdGUgYSBuZXcgYFJvb3RgIG5vZGVcbiAqIGFuZCBvdmVycmlkZSB0aGUgYHJlc3VsdC5yb290YCBwcm9wZXJ0eS5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgY2xlYW5lciA9IHBvc3Rjc3MucGx1Z2luKCdwb3N0Y3NzLWNsZWFuZXInLCAoKSA9PiB7XG4gKiAgIHJldHVybiAocm9vdCwgcmVzdWx0KSA9PiB7XG4gKiAgICAgcmVzdWx0LnJvb3QgPSBwb3N0Y3NzLnJvb3QoKVxuICogICB9XG4gKiB9KVxuICogYGBgXG4gKlxuICogQXMgYSBjb252ZW5pZW5jZSwgcGx1Z2lucyBhbHNvIGV4cG9zZSBhIGBwcm9jZXNzYCBtZXRob2Qgc28gdGhhdCB5b3UgY2FuIHVzZVxuICogdGhlbSBhcyBzdGFuZGFsb25lIHRvb2xzLlxuICpcbiAqIGBgYGpzXG4gKiBjbGVhbmVyLnByb2Nlc3MoY3NzLCBwcm9jZXNzT3B0cywgcGx1Z2luT3B0cylcbiAqIC8vIFRoaXMgaXMgZXF1aXZhbGVudCB0bzpcbiAqIHBvc3Rjc3MoWyBjbGVhbmVyKHBsdWdpbk9wdHMpIF0pLnByb2Nlc3MoY3NzLCBwcm9jZXNzT3B0cylcbiAqIGBgYFxuICpcbiAqIEFzeW5jaHJvbm91cyBwbHVnaW5zIHNob3VsZCByZXR1cm4gYSBgUHJvbWlzZWAgaW5zdGFuY2UuXG4gKlxuICogYGBganNcbiAqIHBvc3Rjc3MucGx1Z2luKCdwb3N0Y3NzLWltcG9ydCcsICgpID0+IHtcbiAqICAgcmV0dXJuIChyb290LCByZXN1bHQpID0+IHtcbiAqICAgICByZXR1cm4gbmV3IFByb21pc2UoIChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAqICAgICAgIGZzLnJlYWRGaWxlKCdiYXNlLmNzcycsIChiYXNlKSA9PiB7XG4gKiAgICAgICAgIHJvb3QucHJlcGVuZChiYXNlKVxuICogICAgICAgICByZXNvbHZlKClcbiAqICAgICAgIH0pXG4gKiAgICAgfSlcbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICpcbiAqIEFkZCB3YXJuaW5ncyB1c2luZyB0aGUge0BsaW5rIE5vZGUjd2Fybn0gbWV0aG9kLlxuICogU2VuZCBkYXRhIHRvIG90aGVyIHBsdWdpbnMgdXNpbmcgdGhlIHtAbGluayBSZXN1bHQjbWVzc2FnZXN9IGFycmF5LlxuICpcbiAqIGBgYGpzXG4gKiBwb3N0Y3NzLnBsdWdpbigncG9zdGNzcy1jYW5pdXNlLXRlc3QnLCAoKSA9PiB7XG4gKiAgIHJldHVybiAocm9vdCwgcmVzdWx0KSA9PiB7XG4gKiAgICAgcm9vdC53YWxrRGVjbHMoZGVjbCA9PiB7XG4gKiAgICAgICBpZiAoIWNhbml1c2Uuc3VwcG9ydChkZWNsLnByb3ApKSB7XG4gKiAgICAgICAgIGRlY2wud2FybihyZXN1bHQsICdTb21lIGJyb3dzZXJzIGRvIG5vdCBzdXBwb3J0ICcgKyBkZWNsLnByb3ApXG4gKiAgICAgICB9XG4gKiAgICAgfSlcbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lICAgICAgICAgIFBvc3RDU1MgcGx1Z2luIG5hbWUuIFNhbWUgYXMgaW4gYG5hbWVgXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0eSBpbiBgcGFja2FnZS5qc29uYC4gSXQgd2lsbCBiZSBzYXZlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW4gYHBsdWdpbi5wb3N0Y3NzUGx1Z2luYCBwcm9wZXJ0eS5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGluaXRpYWxpemVyIFdpbGwgcmVjZWl2ZSBwbHVnaW4gb3B0aW9uc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5kIHNob3VsZCByZXR1cm4ge0BsaW5rIHBsdWdpbkZ1bmN0aW9ufVxuICpcbiAqIEByZXR1cm4ge1BsdWdpbn0gUG9zdENTUyBwbHVnaW4uXG4gKi9cblxuXG5wb3N0Y3NzLnBsdWdpbiA9IGZ1bmN0aW9uIHBsdWdpbihuYW1lLCBpbml0aWFsaXplcikge1xuICBmdW5jdGlvbiBjcmVhdG9yKCkge1xuICAgIHZhciB0cmFuc2Zvcm1lciA9IGluaXRpYWxpemVyLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICB0cmFuc2Zvcm1lci5wb3N0Y3NzUGx1Z2luID0gbmFtZTtcbiAgICB0cmFuc2Zvcm1lci5wb3N0Y3NzVmVyc2lvbiA9IG5ldyBfcHJvY2Vzc29yLmRlZmF1bHQoKS52ZXJzaW9uO1xuICAgIHJldHVybiB0cmFuc2Zvcm1lcjtcbiAgfVxuXG4gIHZhciBjYWNoZTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNyZWF0b3IsICdwb3N0Y3NzJywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKCFjYWNoZSkgY2FjaGUgPSBjcmVhdG9yKCk7XG4gICAgICByZXR1cm4gY2FjaGU7XG4gICAgfVxuICB9KTtcblxuICBjcmVhdG9yLnByb2Nlc3MgPSBmdW5jdGlvbiAoY3NzLCBwcm9jZXNzT3B0cywgcGx1Z2luT3B0cykge1xuICAgIHJldHVybiBwb3N0Y3NzKFtjcmVhdG9yKHBsdWdpbk9wdHMpXSkucHJvY2Vzcyhjc3MsIHByb2Nlc3NPcHRzKTtcbiAgfTtcblxuICByZXR1cm4gY3JlYXRvcjtcbn07XG4vKipcbiAqIERlZmF1bHQgZnVuY3Rpb24gdG8gY29udmVydCBhIG5vZGUgdHJlZSBpbnRvIGEgQ1NTIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0ge05vZGV9IG5vZGUgICAgICAgU3RhcnQgbm9kZSBmb3Igc3RyaW5naWZpbmcuIFVzdWFsbHkge0BsaW5rIFJvb3R9LlxuICogQHBhcmFtIHtidWlsZGVyfSBidWlsZGVyIEZ1bmN0aW9uIHRvIGNvbmNhdGVuYXRlIENTUyBmcm9tIG5vZGXigJlzIHBhcnRzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgb3IgZ2VuZXJhdGUgc3RyaW5nIGFuZCBzb3VyY2UgbWFwLlxuICpcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKlxuICogQGZ1bmN0aW9uXG4gKi9cblxuXG5wb3N0Y3NzLnN0cmluZ2lmeSA9IF9zdHJpbmdpZnkuZGVmYXVsdDtcbi8qKlxuICogUGFyc2VzIHNvdXJjZSBjc3MgYW5kIHJldHVybnMgYSBuZXcge0BsaW5rIFJvb3R9IG5vZGUsXG4gKiB3aGljaCBjb250YWlucyB0aGUgc291cmNlIENTUyBub2Rlcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3x0b1N0cmluZ30gY3NzICAgU3RyaW5nIHdpdGggaW5wdXQgQ1NTIG9yIGFueSBvYmplY3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHRvU3RyaW5nKCkgbWV0aG9kLCBsaWtlIGEgQnVmZmVyXG4gKiBAcGFyYW0ge3Byb2Nlc3NPcHRpb25zfSBbb3B0c10gT3B0aW9ucyB3aXRoIG9ubHkgYGZyb21gIGFuZCBgbWFwYCBrZXlzLlxuICpcbiAqIEByZXR1cm4ge1Jvb3R9IFBvc3RDU1MgQVNULlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTaW1wbGUgQ1NTIGNvbmNhdGVuYXRpb24gd2l0aCBzb3VyY2UgbWFwIHN1cHBvcnRcbiAqIGNvbnN0IHJvb3QxID0gcG9zdGNzcy5wYXJzZShjc3MxLCB7IGZyb206IGZpbGUxIH0pXG4gKiBjb25zdCByb290MiA9IHBvc3Rjc3MucGFyc2UoY3NzMiwgeyBmcm9tOiBmaWxlMiB9KVxuICogcm9vdDEuYXBwZW5kKHJvb3QyKS50b1Jlc3VsdCgpLmNzc1xuICpcbiAqIEBmdW5jdGlvblxuICovXG5cbnBvc3Rjc3MucGFyc2UgPSBfcGFyc2UuZGVmYXVsdDtcbi8qKlxuICogQ29udGFpbnMgdGhlIHtAbGluayB2ZW5kb3J9IG1vZHVsZS5cbiAqXG4gKiBAdHlwZSB7dmVuZG9yfVxuICpcbiAqIEBleGFtcGxlXG4gKiBwb3N0Y3NzLnZlbmRvci51bnByZWZpeGVkKCctbW96LXRhYicpIC8vPT4gWyd0YWInXVxuICovXG5cbnBvc3Rjc3MudmVuZG9yID0gX3ZlbmRvci5kZWZhdWx0O1xuLyoqXG4gKiBDb250YWlucyB0aGUge0BsaW5rIGxpc3R9IG1vZHVsZS5cbiAqXG4gKiBAbWVtYmVyIHtsaXN0fVxuICpcbiAqIEBleGFtcGxlXG4gKiBwb3N0Y3NzLmxpc3Quc3BhY2UoJzVweCBjYWxjKDEwJSArIDVweCknKSAvLz0+IFsnNXB4JywgJ2NhbGMoMTAlICsgNXB4KSddXG4gKi9cblxucG9zdGNzcy5saXN0ID0gX2xpc3QuZGVmYXVsdDtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB7QGxpbmsgQ29tbWVudH0gbm9kZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gW2RlZmF1bHRzXSBQcm9wZXJ0aWVzIGZvciB0aGUgbmV3IG5vZGUuXG4gKlxuICogQHJldHVybiB7Q29tbWVudH0gTmV3IGNvbW1lbnQgbm9kZVxuICpcbiAqIEBleGFtcGxlXG4gKiBwb3N0Y3NzLmNvbW1lbnQoeyB0ZXh0OiAndGVzdCcgfSlcbiAqL1xuXG5wb3N0Y3NzLmNvbW1lbnQgPSBmdW5jdGlvbiAoZGVmYXVsdHMpIHtcbiAgcmV0dXJuIG5ldyBfY29tbWVudC5kZWZhdWx0KGRlZmF1bHRzKTtcbn07XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcge0BsaW5rIEF0UnVsZX0gbm9kZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gW2RlZmF1bHRzXSBQcm9wZXJ0aWVzIGZvciB0aGUgbmV3IG5vZGUuXG4gKlxuICogQHJldHVybiB7QXRSdWxlfSBuZXcgYXQtcnVsZSBub2RlXG4gKlxuICogQGV4YW1wbGVcbiAqIHBvc3Rjc3MuYXRSdWxlKHsgbmFtZTogJ2NoYXJzZXQnIH0pLnRvU3RyaW5nKCkgLy89PiBcIkBjaGFyc2V0XCJcbiAqL1xuXG5cbnBvc3Rjc3MuYXRSdWxlID0gZnVuY3Rpb24gKGRlZmF1bHRzKSB7XG4gIHJldHVybiBuZXcgX2F0UnVsZS5kZWZhdWx0KGRlZmF1bHRzKTtcbn07XG4vKipcbiAqIENyZWF0ZXMgYSBuZXcge0BsaW5rIERlY2xhcmF0aW9ufSBub2RlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBbZGVmYXVsdHNdIFByb3BlcnRpZXMgZm9yIHRoZSBuZXcgbm9kZS5cbiAqXG4gKiBAcmV0dXJuIHtEZWNsYXJhdGlvbn0gbmV3IGRlY2xhcmF0aW9uIG5vZGVcbiAqXG4gKiBAZXhhbXBsZVxuICogcG9zdGNzcy5kZWNsKHsgcHJvcDogJ2NvbG9yJywgdmFsdWU6ICdyZWQnIH0pLnRvU3RyaW5nKCkgLy89PiBcImNvbG9yOiByZWRcIlxuICovXG5cblxucG9zdGNzcy5kZWNsID0gZnVuY3Rpb24gKGRlZmF1bHRzKSB7XG4gIHJldHVybiBuZXcgX2RlY2xhcmF0aW9uLmRlZmF1bHQoZGVmYXVsdHMpO1xufTtcbi8qKlxuICogQ3JlYXRlcyBhIG5ldyB7QGxpbmsgUnVsZX0gbm9kZS5cbiAqXG4gKiBAcGFyYW0ge29iamVjdH0gW2RlZmF1bHRzXSBQcm9wZXJ0aWVzIGZvciB0aGUgbmV3IG5vZGUuXG4gKlxuICogQHJldHVybiB7UnVsZX0gbmV3IHJ1bGUgbm9kZVxuICpcbiAqIEBleGFtcGxlXG4gKiBwb3N0Y3NzLnJ1bGUoeyBzZWxlY3RvcjogJ2EnIH0pLnRvU3RyaW5nKCkgLy89PiBcImEge1xcbn1cIlxuICovXG5cblxucG9zdGNzcy5ydWxlID0gZnVuY3Rpb24gKGRlZmF1bHRzKSB7XG4gIHJldHVybiBuZXcgX3J1bGUuZGVmYXVsdChkZWZhdWx0cyk7XG59O1xuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IHtAbGluayBSb290fSBub2RlLlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBbZGVmYXVsdHNdIFByb3BlcnRpZXMgZm9yIHRoZSBuZXcgbm9kZS5cbiAqXG4gKiBAcmV0dXJuIHtSb290fSBuZXcgcm9vdCBub2RlLlxuICpcbiAqIEBleGFtcGxlXG4gKiBwb3N0Y3NzLnJvb3QoeyBhZnRlcjogJ1xcbicgfSkudG9TdHJpbmcoKSAvLz0+IFwiXFxuXCJcbiAqL1xuXG5cbnBvc3Rjc3Mucm9vdCA9IGZ1bmN0aW9uIChkZWZhdWx0cykge1xuICByZXR1cm4gbmV3IF9yb290LmRlZmF1bHQoZGVmYXVsdHMpO1xufTtcblxudmFyIF9kZWZhdWx0ID0gcG9zdGNzcztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluQnZjM1JqYzNNdVpYTTJJbDBzSW01aGJXVnpJanBiSW5CdmMzUmpjM01pTENKd2JIVm5hVzV6SWl3aWJHVnVaM1JvSWl3aVFYSnlZWGtpTENKcGMwRnljbUY1SWl3aVVISnZZMlZ6YzI5eUlpd2ljR3gxWjJsdUlpd2libUZ0WlNJc0ltbHVhWFJwWVd4cGVtVnlJaXdpWTNKbFlYUnZjaUlzSW5SeVlXNXpabTl5YldWeUlpd2ljRzl6ZEdOemMxQnNkV2RwYmlJc0luQnZjM1JqYzNOV1pYSnphVzl1SWl3aWRtVnljMmx2YmlJc0ltTmhZMmhsSWl3aVQySnFaV04wSWl3aVpHVm1hVzVsVUhKdmNHVnlkSGtpTENKblpYUWlMQ0p3Y205alpYTnpJaXdpWTNOeklpd2ljSEp2WTJWemMwOXdkSE1pTENKd2JIVm5hVzVQY0hSeklpd2ljM1J5YVc1bmFXWjVJaXdpY0dGeWMyVWlMQ0oyWlc1a2IzSWlMQ0pzYVhOMElpd2lZMjl0YldWdWRDSXNJbVJsWm1GMWJIUnpJaXdpUTI5dGJXVnVkQ0lzSW1GMFVuVnNaU0lzSWtGMFVuVnNaU0lzSW1SbFkyd2lMQ0pFWldOc1lYSmhkR2x2YmlJc0luSjFiR1VpTENKU2RXeGxJaXdpY205dmRDSXNJbEp2YjNRaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN08wRkJRVUU3TzBGQlEwRTdPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN08wRkJRMEU3TzBGQlEwRTdPMEZCUTBFN08wRkJRMEU3T3pzN1FVRkZRVHM3T3pzN096czdPenM3T3pzN096czdPMEZCYTBKQkxGTkJRVk5CTEU5QlFWUXNSMEZCT0VJN1FVRkJRU3h2UTBGQlZFTXNUMEZCVXp0QlFVRlVRU3hKUVVGQlFTeFBRVUZUTzBGQlFVRTdPMEZCUXpWQ0xFMUJRVWxCTEU5QlFVOHNRMEZCUTBNc1RVRkJVaXhMUVVGdFFpeERRVUZ1UWl4SlFVRjNRa01zUzBGQlN5eERRVUZEUXl4UFFVRk9MRU5CUVdOSUxFOUJRVThzUTBGQlF5eERRVUZFTEVOQlFYSkNMRU5CUVRWQ0xFVkJRWFZFTzBGQlEzSkVRU3hKUVVGQlFTeFBRVUZQTEVkQlFVZEJMRTlCUVU4c1EwRkJReXhEUVVGRUxFTkJRV3BDTzBGQlEwUTdPMEZCUTBRc1UwRkJUeXhKUVVGSlNTeHJRa0ZCU2l4RFFVRmpTaXhQUVVGa0xFTkJRVkE3UVVGRFJEdEJRVVZFT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFYZEZRVVFzVDBGQlR5eERRVUZEVFN4TlFVRlNMRWRCUVdsQ0xGTkJRVk5CTEUxQlFWUXNRMEZCYVVKRExFbEJRV3BDTEVWQlFYVkNReXhYUVVGMlFpeEZRVUZ2UXp0QlFVTnVSQ3hYUVVGVFF5eFBRVUZVTEVkQlFUSkNPMEZCUTNwQ0xGRkJRVWxETEZkQlFWY3NSMEZCUjBZc1YwRkJWeXhOUVVGWUxHMUNRVUZzUWp0QlFVTkJSU3hKUVVGQlFTeFhRVUZYTEVOQlFVTkRMR0ZCUVZvc1IwRkJORUpLTEVsQlFUVkNPMEZCUTBGSExFbEJRVUZCTEZkQlFWY3NRMEZCUTBVc1kwRkJXaXhIUVVFNFFpeEpRVUZKVUN4clFrRkJTaXhGUVVGRUxFTkJRV3RDVVN4UFFVRXZRenRCUVVOQkxGZEJRVTlJTEZkQlFWQTdRVUZEUkRzN1FVRkZSQ3hOUVVGSlNTeExRVUZLTzBGQlEwRkRMRVZCUVVGQkxFMUJRVTBzUTBGQlEwTXNZMEZCVUN4RFFVRnpRbEFzVDBGQmRFSXNSVUZCSzBJc1UwRkJMMElzUlVGQk1FTTdRVUZEZUVOUkxFbEJRVUZCTEVkQlJIZERMR2xDUVVOcVF6dEJRVU5NTEZWQlFVa3NRMEZCUTBnc1MwRkJUQ3hGUVVGWlFTeExRVUZMTEVkQlFVZE1MRTlCUVU4c1JVRkJaanRCUVVOYUxHRkJRVTlMTEV0QlFWQTdRVUZEUkR0QlFVcDFReXhIUVVFeFF6czdRVUZQUVV3c1JVRkJRVUVzVDBGQlR5eERRVUZEVXl4UFFVRlNMRWRCUVd0Q0xGVkJRVlZETEVkQlFWWXNSVUZCWlVNc1YwRkJaaXhGUVVFMFFrTXNWVUZCTlVJc1JVRkJkME03UVVGRGVFUXNWMEZCVDNKQ0xFOUJRVThzUTBGQlF5eERRVUZEVXl4UFFVRlBMRU5CUVVOWkxGVkJRVVFzUTBGQlVpeERRVUZFTEVOQlFWQXNRMEZCSzBKSUxFOUJRUzlDTEVOQlFYVkRReXhIUVVGMlF5eEZRVUUwUTBNc1YwRkJOVU1zUTBGQlVEdEJRVU5FTEVkQlJrUTdPMEZCU1VFc1UwRkJUMWdzVDBGQlVEdEJRVU5FTEVOQmNrSkVPMEZCZFVKQk96czdPenM3T3pzN096czdPMEZCVjBGVUxFOUJRVThzUTBGQlEzTkNMRk5CUVZJc1IwRkJiMEpCTEd0Q1FVRndRanRCUVVWQk96czdPenM3T3pzN096czdPenM3T3pzN08wRkJhMEpCZEVJc1QwRkJUeXhEUVVGRGRVSXNTMEZCVWl4SFFVRm5Ra0VzWTBGQmFFSTdRVUZGUVRzN096czdPenM3TzBGQlVVRjJRaXhQUVVGUExFTkJRVU4zUWl4TlFVRlNMRWRCUVdsQ1FTeGxRVUZxUWp0QlFVVkJPenM3T3pzN096czdRVUZSUVhoQ0xFOUJRVThzUTBGQlEzbENMRWxCUVZJc1IwRkJaVUVzWVVGQlpqdEJRVVZCT3pzN096czdPenM3T3p0QlFWVkJla0lzVDBGQlR5eERRVUZETUVJc1QwRkJVaXhIUVVGclFpeFZRVUZCUXl4UlFVRlJPMEZCUVVFc1UwRkJTU3hKUVVGSlF5eG5Ra0ZCU2l4RFFVRlpSQ3hSUVVGYUxFTkJRVW83UVVGQlFTeERRVUV4UWp0QlFVVkJPenM3T3pzN096czdPenM3UVVGVlFUTkNMRTlCUVU4c1EwRkJRelpDTEUxQlFWSXNSMEZCYVVJc1ZVRkJRVVlzVVVGQlVUdEJRVUZCTEZOQlFVa3NTVUZCU1Vjc1pVRkJTaXhEUVVGWFNDeFJRVUZZTEVOQlFVbzdRVUZCUVN4RFFVRjZRanRCUVVWQk96czdPenM3T3pzN096czdRVUZWUVROQ0xFOUJRVThzUTBGQlF5dENMRWxCUVZJc1IwRkJaU3hWUVVGQlNpeFJRVUZSTzBGQlFVRXNVMEZCU1N4SlFVRkpTeXh2UWtGQlNpeERRVUZuUWt3c1VVRkJhRUlzUTBGQlNqdEJRVUZCTEVOQlFYWkNPMEZCUlVFN096czdPenM3T3pzN096dEJRVlZCTTBJc1QwRkJUeXhEUVVGRGFVTXNTVUZCVWl4SFFVRmxMRlZCUVVGT0xGRkJRVkU3UVVGQlFTeFRRVUZKTEVsQlFVbFBMR0ZCUVVvc1EwRkJVMUFzVVVGQlZDeERRVUZLTzBGQlFVRXNRMEZCZGtJN1FVRkZRVHM3T3pzN096czdPenM3TzBGQlZVRXpRaXhQUVVGUExFTkJRVU50UXl4SlFVRlNMRWRCUVdVc1ZVRkJRVklzVVVGQlVUdEJRVUZCTEZOQlFVa3NTVUZCU1ZNc1lVRkJTaXhEUVVGVFZDeFJRVUZVTEVOQlFVbzdRVUZCUVN4RFFVRjJRanM3WlVGRlpUTkNMRThpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnUkdWamJHRnlZWFJwYjI0Z1puSnZiU0FuTGk5a1pXTnNZWEpoZEdsdmJpZGNibWx0Y0c5eWRDQlFjbTlqWlhOemIzSWdabkp2YlNBbkxpOXdjbTlqWlhOemIzSW5YRzVwYlhCdmNuUWdjM1J5YVc1bmFXWjVJR1p5YjIwZ0p5NHZjM1J5YVc1bmFXWjVKMXh1YVcxd2IzSjBJRU52YlcxbGJuUWdabkp2YlNBbkxpOWpiMjF0Wlc1MEoxeHVhVzF3YjNKMElFRjBVblZzWlNCbWNtOXRJQ2N1TDJGMExYSjFiR1VuWEc1cGJYQnZjblFnZG1WdVpHOXlJR1p5YjIwZ0p5NHZkbVZ1Wkc5eUoxeHVhVzF3YjNKMElIQmhjbk5sSUdaeWIyMGdKeTR2Y0dGeWMyVW5YRzVwYlhCdmNuUWdiR2x6ZENCbWNtOXRJQ2N1TDJ4cGMzUW5YRzVwYlhCdmNuUWdVblZzWlNCbWNtOXRJQ2N1TDNKMWJHVW5YRzVwYlhCdmNuUWdVbTl2ZENCbWNtOXRJQ2N1TDNKdmIzUW5YRzVjYmk4cUtseHVJQ29nUTNKbFlYUmxJR0VnYm1WM0lIdEFiR2x1YXlCUWNtOWpaWE56YjNKOUlHbHVjM1JoYm1ObElIUm9ZWFFnZDJsc2JDQmhjSEJzZVNCZ2NHeDFaMmx1YzJCY2JpQXFJR0Z6SUVOVFV5QndjbTlqWlhOemIzSnpMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdRWEp5WVhrdVBGQnNkV2RwYm54d2JIVm5hVzVHZFc1amRHbHZiajU4VUhKdlkyVnpjMjl5ZlNCd2JIVm5hVzV6SUZCdmMzUkRVMU1nY0d4MVoybHVjeTVjYmlBcUlDQWdJQ0FnSUNCVFpXVWdlMEJzYVc1cklGQnliMk5sYzNOdmNpTjFjMlY5SUdadmNpQndiSFZuYVc0Z1ptOXliV0YwTGx4dUlDcGNiaUFxSUVCeVpYUjFjbTRnZTFCeWIyTmxjM052Y24wZ1VISnZZMlZ6YzI5eUlIUnZJSEJ5YjJObGMzTWdiWFZzZEdsd2JHVWdRMU5UTGx4dUlDcGNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tpQnBiWEJ2Y25RZ2NHOXpkR056Y3lCbWNtOXRJQ2R3YjNOMFkzTnpKMXh1SUNwY2JpQXFJSEJ2YzNSamMzTW9jR3gxWjJsdWN5a3VjSEp2WTJWemN5aGpjM01zSUhzZ1puSnZiU3dnZEc4Z2ZTa3VkR2hsYmloeVpYTjFiSFFnUFQ0Z2UxeHVJQ29nSUNCamIyNXpiMnhsTG14dlp5aHlaWE4xYkhRdVkzTnpLVnh1SUNvZ2ZTbGNiaUFxWEc0Z0tpQkFibUZ0WlhOd1lXTmxJSEJ2YzNSamMzTmNiaUFxTDF4dVpuVnVZM1JwYjI0Z2NHOXpkR056Y3lBb0xpNHVjR3gxWjJsdWN5a2dlMXh1SUNCcFppQW9jR3gxWjJsdWN5NXNaVzVuZEdnZ1BUMDlJREVnSmlZZ1FYSnlZWGt1YVhOQmNuSmhlU2h3YkhWbmFXNXpXekJkS1NrZ2UxeHVJQ0FnSUhCc2RXZHBibk1nUFNCd2JIVm5hVzV6V3pCZFhHNGdJSDFjYmlBZ2NtVjBkWEp1SUc1bGR5QlFjbTlqWlhOemIzSW9jR3gxWjJsdWN5bGNibjFjYmx4dUx5b3FYRzRnS2lCRGNtVmhkR1Z6SUdFZ1VHOXpkRU5UVXlCd2JIVm5hVzRnZDJsMGFDQmhJSE4wWVc1a1lYSmtJRUZRU1M1Y2JpQXFYRzRnS2lCVWFHVWdibVYzYkhrdGQzSmhjSEJsWkNCbWRXNWpkR2x2YmlCM2FXeHNJSEJ5YjNacFpHVWdZbTkwYUNCMGFHVWdibUZ0WlNCaGJtUWdVRzl6ZEVOVFUxeHVJQ29nZG1WeWMybHZiaUJ2WmlCMGFHVWdjR3gxWjJsdUxseHVJQ3BjYmlBcUlHQmdZR3B6WEc0Z0tpQmpiMjV6ZENCd2NtOWpaWE56YjNJZ1BTQndiM04wWTNOektGdHlaWEJzWVdObFhTbGNiaUFxSUhCeWIyTmxjM052Y2k1d2JIVm5hVzV6V3pCZExuQnZjM1JqYzNOUWJIVm5hVzRnSUM4dlBUNGdKM0J2YzNSamMzTXRjbVZ3YkdGalpTZGNiaUFxSUhCeWIyTmxjM052Y2k1d2JIVm5hVzV6V3pCZExuQnZjM1JqYzNOV1pYSnphVzl1SUM4dlBUNGdKell1TUM0d0oxeHVJQ29nWUdCZ1hHNGdLbHh1SUNvZ1ZHaGxJSEJzZFdkcGJpQm1kVzVqZEdsdmJpQnlaV05sYVhabGN5QXlJR0Z5WjNWdFpXNTBjem9nZTBCc2FXNXJJRkp2YjNSOVhHNGdLaUJoYm1RZ2UwQnNhVzVySUZKbGMzVnNkSDBnYVc1emRHRnVZMlV1SUZSb1pTQm1kVzVqZEdsdmJpQnphRzkxYkdRZ2JYVjBZWFJsSUhSb1pTQndjbTkyYVdSbFpGeHVJQ29nWUZKdmIzUmdJRzV2WkdVdUlFRnNkR1Z5Ym1GMGFYWmxiSGtzSUhsdmRTQmpZVzRnWTNKbFlYUmxJR0VnYm1WM0lHQlNiMjkwWUNCdWIyUmxYRzRnS2lCaGJtUWdiM1psY25KcFpHVWdkR2hsSUdCeVpYTjFiSFF1Y205dmRHQWdjSEp2Y0dWeWRIa3VYRzRnS2x4dUlDb2dZR0JnYW5OY2JpQXFJR052Ym5OMElHTnNaV0Z1WlhJZ1BTQndiM04wWTNOekxuQnNkV2RwYmlnbmNHOXpkR056Y3kxamJHVmhibVZ5Snl3Z0tDa2dQVDRnZTF4dUlDb2dJQ0J5WlhSMWNtNGdLSEp2YjNRc0lISmxjM1ZzZENrZ1BUNGdlMXh1SUNvZ0lDQWdJSEpsYzNWc2RDNXliMjkwSUQwZ2NHOXpkR056Y3k1eWIyOTBLQ2xjYmlBcUlDQWdmVnh1SUNvZ2ZTbGNiaUFxSUdCZ1lGeHVJQ3BjYmlBcUlFRnpJR0VnWTI5dWRtVnVhV1Z1WTJVc0lIQnNkV2RwYm5NZ1lXeHpieUJsZUhCdmMyVWdZU0JnY0hKdlkyVnpjMkFnYldWMGFHOWtJSE52SUhSb1lYUWdlVzkxSUdOaGJpQjFjMlZjYmlBcUlIUm9aVzBnWVhNZ2MzUmhibVJoYkc5dVpTQjBiMjlzY3k1Y2JpQXFYRzRnS2lCZ1lHQnFjMXh1SUNvZ1kyeGxZVzVsY2k1d2NtOWpaWE56S0dOemN5d2djSEp2WTJWemMwOXdkSE1zSUhCc2RXZHBiazl3ZEhNcFhHNGdLaUF2THlCVWFHbHpJR2x6SUdWeGRXbDJZV3hsYm5RZ2RHODZYRzRnS2lCd2IzTjBZM056S0ZzZ1kyeGxZVzVsY2lod2JIVm5hVzVQY0hSektTQmRLUzV3Y205alpYTnpLR056Y3l3Z2NISnZZMlZ6YzA5d2RITXBYRzRnS2lCZ1lHQmNiaUFxWEc0Z0tpQkJjM2x1WTJoeWIyNXZkWE1nY0d4MVoybHVjeUJ6YUc5MWJHUWdjbVYwZFhKdUlHRWdZRkJ5YjIxcGMyVmdJR2x1YzNSaGJtTmxMbHh1SUNwY2JpQXFJR0JnWUdwelhHNGdLaUJ3YjNOMFkzTnpMbkJzZFdkcGJpZ25jRzl6ZEdOemN5MXBiWEJ2Y25RbkxDQW9LU0E5UGlCN1hHNGdLaUFnSUhKbGRIVnliaUFvY205dmRDd2djbVZ6ZFd4MEtTQTlQaUI3WEc0Z0tpQWdJQ0FnY21WMGRYSnVJRzVsZHlCUWNtOXRhWE5sS0NBb2NtVnpiMngyWlN3Z2NtVnFaV04wS1NBOVBpQjdYRzRnS2lBZ0lDQWdJQ0JtY3k1eVpXRmtSbWxzWlNnblltRnpaUzVqYzNNbkxDQW9ZbUZ6WlNrZ1BUNGdlMXh1SUNvZ0lDQWdJQ0FnSUNCeWIyOTBMbkJ5WlhCbGJtUW9ZbUZ6WlNsY2JpQXFJQ0FnSUNBZ0lDQWdjbVZ6YjJ4MlpTZ3BYRzRnS2lBZ0lDQWdJQ0I5S1Z4dUlDb2dJQ0FnSUgwcFhHNGdLaUFnSUgxY2JpQXFJSDBwWEc0Z0tpQmdZR0JjYmlBcVhHNGdLaUJCWkdRZ2QyRnlibWx1WjNNZ2RYTnBibWNnZEdobElIdEFiR2x1YXlCT2IyUmxJM2RoY201OUlHMWxkR2h2WkM1Y2JpQXFJRk5sYm1RZ1pHRjBZU0IwYnlCdmRHaGxjaUJ3YkhWbmFXNXpJSFZ6YVc1bklIUm9aU0I3UUd4cGJtc2dVbVZ6ZFd4MEkyMWxjM05oWjJWemZTQmhjbkpoZVM1Y2JpQXFYRzRnS2lCZ1lHQnFjMXh1SUNvZ2NHOXpkR056Y3k1d2JIVm5hVzRvSjNCdmMzUmpjM010WTJGdWFYVnpaUzEwWlhOMEp5d2dLQ2tnUFQ0Z2UxeHVJQ29nSUNCeVpYUjFjbTRnS0hKdmIzUXNJSEpsYzNWc2RDa2dQVDRnZTF4dUlDb2dJQ0FnSUhKdmIzUXVkMkZzYTBSbFkyeHpLR1JsWTJ3Z1BUNGdlMXh1SUNvZ0lDQWdJQ0FnYVdZZ0tDRmpZVzVwZFhObExuTjFjSEJ2Y25Rb1pHVmpiQzV3Y205d0tTa2dlMXh1SUNvZ0lDQWdJQ0FnSUNCa1pXTnNMbmRoY200b2NtVnpkV3gwTENBblUyOXRaU0JpY205M2MyVnljeUJrYnlCdWIzUWdjM1Z3Y0c5eWRDQW5JQ3NnWkdWamJDNXdjbTl3S1Z4dUlDb2dJQ0FnSUNBZ2ZWeHVJQ29nSUNBZ0lIMHBYRzRnS2lBZ0lIMWNiaUFxSUgwcFhHNGdLaUJnWUdCY2JpQXFYRzRnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYm1GdFpTQWdJQ0FnSUNBZ0lDQlFiM04wUTFOVElIQnNkV2RwYmlCdVlXMWxMaUJUWVcxbElHRnpJR2x1SUdCdVlXMWxZRnh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2Y0dWeWRIa2dhVzRnWUhCaFkydGhaMlV1YW5OdmJtQXVJRWwwSUhkcGJHd2dZbVVnYzJGMlpXUmNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbHVJR0J3YkhWbmFXNHVjRzl6ZEdOemMxQnNkV2RwYm1BZ2NISnZjR1Z5ZEhrdVhHNGdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmU0JwYm1sMGFXRnNhWHBsY2lCWGFXeHNJSEpsWTJWcGRtVWdjR3gxWjJsdUlHOXdkR2x2Ym5OY2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGdVpDQnphRzkxYkdRZ2NtVjBkWEp1SUh0QWJHbHVheUJ3YkhWbmFXNUdkVzVqZEdsdmJuMWNiaUFxWEc0Z0tpQkFjbVYwZFhKdUlIdFFiSFZuYVc1OUlGQnZjM1JEVTFNZ2NHeDFaMmx1TGx4dUlDb3ZYRzV3YjNOMFkzTnpMbkJzZFdkcGJpQTlJR1oxYm1OMGFXOXVJSEJzZFdkcGJpQW9ibUZ0WlN3Z2FXNXBkR2xoYkdsNlpYSXBJSHRjYmlBZ1puVnVZM1JwYjI0Z1kzSmxZWFJ2Y2lBb0xpNHVZWEpuY3lrZ2UxeHVJQ0FnSUd4bGRDQjBjbUZ1YzJadmNtMWxjaUE5SUdsdWFYUnBZV3hwZW1WeUtDNHVMbUZ5WjNNcFhHNGdJQ0FnZEhKaGJuTm1iM0p0WlhJdWNHOXpkR056YzFCc2RXZHBiaUE5SUc1aGJXVmNiaUFnSUNCMGNtRnVjMlp2Y20xbGNpNXdiM04wWTNOelZtVnljMmx2YmlBOUlDaHVaWGNnVUhKdlkyVnpjMjl5S0NrcExuWmxjbk5wYjI1Y2JpQWdJQ0J5WlhSMWNtNGdkSEpoYm5ObWIzSnRaWEpjYmlBZ2ZWeHVYRzRnSUd4bGRDQmpZV05vWlZ4dUlDQlBZbXBsWTNRdVpHVm1hVzVsVUhKdmNHVnlkSGtvWTNKbFlYUnZjaXdnSjNCdmMzUmpjM01uTENCN1hHNGdJQ0FnWjJWMElDZ3BJSHRjYmlBZ0lDQWdJR2xtSUNnaFkyRmphR1VwSUdOaFkyaGxJRDBnWTNKbFlYUnZjaWdwWEc0Z0lDQWdJQ0J5WlhSMWNtNGdZMkZqYUdWY2JpQWdJQ0I5WEc0Z0lIMHBYRzVjYmlBZ1kzSmxZWFJ2Y2k1d2NtOWpaWE56SUQwZ1puVnVZM1JwYjI0Z0tHTnpjeXdnY0hKdlkyVnpjMDl3ZEhNc0lIQnNkV2RwYms5d2RITXBJSHRjYmlBZ0lDQnlaWFIxY200Z2NHOXpkR056Y3loYlkzSmxZWFJ2Y2lod2JIVm5hVzVQY0hSektWMHBMbkJ5YjJObGMzTW9ZM056TENCd2NtOWpaWE56VDNCMGN5bGNiaUFnZlZ4dVhHNGdJSEpsZEhWeWJpQmpjbVZoZEc5eVhHNTlYRzVjYmk4cUtseHVJQ29nUkdWbVlYVnNkQ0JtZFc1amRHbHZiaUIwYnlCamIyNTJaWEowSUdFZ2JtOWtaU0IwY21WbElHbHVkRzhnWVNCRFUxTWdjM1J5YVc1bkxseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1RtOWtaWDBnYm05a1pTQWdJQ0FnSUNCVGRHRnlkQ0J1YjJSbElHWnZjaUJ6ZEhKcGJtZHBabWx1Wnk0Z1ZYTjFZV3hzZVNCN1FHeHBibXNnVW05dmRIMHVYRzRnS2lCQWNHRnlZVzBnZTJKMWFXeGtaWEo5SUdKMWFXeGtaWElnUm5WdVkzUnBiMjRnZEc4Z1kyOXVZMkYwWlc1aGRHVWdRMU5USUdaeWIyMGdibTlrWmVLQW1YTWdjR0Z5ZEhOY2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjaUJuWlc1bGNtRjBaU0J6ZEhKcGJtY2dZVzVrSUhOdmRYSmpaU0J0WVhBdVhHNGdLbHh1SUNvZ1FISmxkSFZ5YmlCN2RtOXBaSDFjYmlBcVhHNGdLaUJBWm5WdVkzUnBiMjVjYmlBcUwxeHVjRzl6ZEdOemN5NXpkSEpwYm1kcFpua2dQU0J6ZEhKcGJtZHBabmxjYmx4dUx5b3FYRzRnS2lCUVlYSnpaWE1nYzI5MWNtTmxJR056Y3lCaGJtUWdjbVYwZFhKdWN5QmhJRzVsZHlCN1FHeHBibXNnVW05dmRIMGdibTlrWlN4Y2JpQXFJSGRvYVdOb0lHTnZiblJoYVc1eklIUm9aU0J6YjNWeVkyVWdRMU5USUc1dlpHVnpMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZIUnZVM1J5YVc1bmZTQmpjM01nSUNCVGRISnBibWNnZDJsMGFDQnBibkIxZENCRFUxTWdiM0lnWVc1NUlHOWlhbVZqZEZ4dUlDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhkcGRHZ2dkRzlUZEhKcGJtY29LU0J0WlhSb2IyUXNJR3hwYTJVZ1lTQkNkV1ptWlhKY2JpQXFJRUJ3WVhKaGJTQjdjSEp2WTJWemMwOXdkR2x2Ym5OOUlGdHZjSFJ6WFNCUGNIUnBiMjV6SUhkcGRHZ2diMjVzZVNCZ1puSnZiV0FnWVc1a0lHQnRZWEJnSUd0bGVYTXVYRzRnS2x4dUlDb2dRSEpsZEhWeWJpQjdVbTl2ZEgwZ1VHOXpkRU5UVXlCQlUxUXVYRzRnS2x4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxSUM4dklGTnBiWEJzWlNCRFUxTWdZMjl1WTJGMFpXNWhkR2x2YmlCM2FYUm9JSE52ZFhKalpTQnRZWEFnYzNWd2NHOXlkRnh1SUNvZ1kyOXVjM1FnY205dmRERWdQU0J3YjNOMFkzTnpMbkJoY25ObEtHTnpjekVzSUhzZ1puSnZiVG9nWm1sc1pURWdmU2xjYmlBcUlHTnZibk4wSUhKdmIzUXlJRDBnY0c5emRHTnpjeTV3WVhKelpTaGpjM015TENCN0lHWnliMjA2SUdacGJHVXlJSDBwWEc0Z0tpQnliMjkwTVM1aGNIQmxibVFvY205dmRESXBMblJ2VW1WemRXeDBLQ2t1WTNOelhHNGdLbHh1SUNvZ1FHWjFibU4wYVc5dVhHNGdLaTljYm5CdmMzUmpjM011Y0dGeWMyVWdQU0J3WVhKelpWeHVYRzR2S2lwY2JpQXFJRU52Ym5SaGFXNXpJSFJvWlNCN1FHeHBibXNnZG1WdVpHOXlmU0J0YjJSMWJHVXVYRzRnS2x4dUlDb2dRSFI1Y0dVZ2UzWmxibVJ2Y24xY2JpQXFYRzRnS2lCQVpYaGhiWEJzWlZ4dUlDb2djRzl6ZEdOemN5NTJaVzVrYjNJdWRXNXdjbVZtYVhobFpDZ25MVzF2ZWkxMFlXSW5LU0F2THowK0lGc25kR0ZpSjExY2JpQXFMMXh1Y0c5emRHTnpjeTUyWlc1a2IzSWdQU0IyWlc1a2IzSmNibHh1THlvcVhHNGdLaUJEYjI1MFlXbHVjeUIwYUdVZ2UwQnNhVzVySUd4cGMzUjlJRzF2WkhWc1pTNWNiaUFxWEc0Z0tpQkFiV1Z0WW1WeUlIdHNhWE4wZlZ4dUlDcGNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tpQndiM04wWTNOekxteHBjM1F1YzNCaFkyVW9KelZ3ZUNCallXeGpLREV3SlNBcklEVndlQ2tuS1NBdkx6MCtJRnNuTlhCNEp5d2dKMk5oYkdNb01UQWxJQ3NnTlhCNEtTZGRYRzRnS2k5Y2JuQnZjM1JqYzNNdWJHbHpkQ0E5SUd4cGMzUmNibHh1THlvcVhHNGdLaUJEY21WaGRHVnpJR0VnYm1WM0lIdEFiR2x1YXlCRGIyMXRaVzUwZlNCdWIyUmxMbHh1SUNwY2JpQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQmJaR1ZtWVhWc2RITmRJRkJ5YjNCbGNuUnBaWE1nWm05eUlIUm9aU0J1WlhjZ2JtOWtaUzVjYmlBcVhHNGdLaUJBY21WMGRYSnVJSHREYjIxdFpXNTBmU0JPWlhjZ1kyOXRiV1Z1ZENCdWIyUmxYRzRnS2x4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxSUhCdmMzUmpjM011WTI5dGJXVnVkQ2g3SUhSbGVIUTZJQ2QwWlhOMEp5QjlLVnh1SUNvdlhHNXdiM04wWTNOekxtTnZiVzFsYm5RZ1BTQmtaV1poZFd4MGN5QTlQaUJ1WlhjZ1EyOXRiV1Z1ZENoa1pXWmhkV3gwY3lsY2JseHVMeW9xWEc0Z0tpQkRjbVZoZEdWeklHRWdibVYzSUh0QWJHbHVheUJCZEZKMWJHVjlJRzV2WkdVdVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0dlltcGxZM1I5SUZ0a1pXWmhkV3gwYzEwZ1VISnZjR1Z5ZEdsbGN5Qm1iM0lnZEdobElHNWxkeUJ1YjJSbExseHVJQ3BjYmlBcUlFQnlaWFIxY200Z2UwRjBVblZzWlgwZ2JtVjNJR0YwTFhKMWJHVWdibTlrWlZ4dUlDcGNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tpQndiM04wWTNOekxtRjBVblZzWlNoN0lHNWhiV1U2SUNkamFHRnljMlYwSnlCOUtTNTBiMU4wY21sdVp5Z3BJQzh2UFQ0Z1hDSkFZMmhoY25ObGRGd2lYRzRnS2k5Y2JuQnZjM1JqYzNNdVlYUlNkV3hsSUQwZ1pHVm1ZWFZzZEhNZ1BUNGdibVYzSUVGMFVuVnNaU2hrWldaaGRXeDBjeWxjYmx4dUx5b3FYRzRnS2lCRGNtVmhkR1Z6SUdFZ2JtVjNJSHRBYkdsdWF5QkVaV05zWVhKaGRHbHZibjBnYm05a1pTNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ1cyUmxabUYxYkhSelhTQlFjbTl3WlhKMGFXVnpJR1p2Y2lCMGFHVWdibVYzSUc1dlpHVXVYRzRnS2x4dUlDb2dRSEpsZEhWeWJpQjdSR1ZqYkdGeVlYUnBiMjU5SUc1bGR5QmtaV05zWVhKaGRHbHZiaUJ1YjJSbFhHNGdLbHh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFJSEJ2YzNSamMzTXVaR1ZqYkNoN0lIQnliM0E2SUNkamIyeHZjaWNzSUhaaGJIVmxPaUFuY21Wa0p5QjlLUzUwYjFOMGNtbHVaeWdwSUM4dlBUNGdYQ0pqYjJ4dmNqb2djbVZrWENKY2JpQXFMMXh1Y0c5emRHTnpjeTVrWldOc0lEMGdaR1ZtWVhWc2RITWdQVDRnYm1WM0lFUmxZMnhoY21GMGFXOXVLR1JsWm1GMWJIUnpLVnh1WEc0dktpcGNiaUFxSUVOeVpXRjBaWE1nWVNCdVpYY2dlMEJzYVc1cklGSjFiR1Y5SUc1dlpHVXVYRzRnS2x4dUlDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlGdGtaV1poZFd4MGMxMGdVSEp2Y0dWeWRHbGxjeUJtYjNJZ2RHaGxJRzVsZHlCdWIyUmxMbHh1SUNwY2JpQXFJRUJ5WlhSMWNtNGdlMUoxYkdWOUlHNWxkeUJ5ZFd4bElHNXZaR1ZjYmlBcVhHNGdLaUJBWlhoaGJYQnNaVnh1SUNvZ2NHOXpkR056Y3k1eWRXeGxLSHNnYzJWc1pXTjBiM0k2SUNkaEp5QjlLUzUwYjFOMGNtbHVaeWdwSUM4dlBUNGdYQ0poSUh0Y1hHNTlYQ0pjYmlBcUwxeHVjRzl6ZEdOemN5NXlkV3hsSUQwZ1pHVm1ZWFZzZEhNZ1BUNGdibVYzSUZKMWJHVW9aR1ZtWVhWc2RITXBYRzVjYmk4cUtseHVJQ29nUTNKbFlYUmxjeUJoSUc1bGR5QjdRR3hwYm1zZ1VtOXZkSDBnYm05a1pTNWNiaUFxWEc0Z0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ1cyUmxabUYxYkhSelhTQlFjbTl3WlhKMGFXVnpJR1p2Y2lCMGFHVWdibVYzSUc1dlpHVXVYRzRnS2x4dUlDb2dRSEpsZEhWeWJpQjdVbTl2ZEgwZ2JtVjNJSEp2YjNRZ2JtOWtaUzVjYmlBcVhHNGdLaUJBWlhoaGJYQnNaVnh1SUNvZ2NHOXpkR056Y3k1eWIyOTBLSHNnWVdaMFpYSTZJQ2RjWEc0bklIMHBMblJ2VTNSeWFXNW5LQ2tnTHk4OVBpQmNJbHhjYmx3aVhHNGdLaTljYm5CdmMzUmpjM011Y205dmRDQTlJR1JsWm1GMWJIUnpJRDArSUc1bGR5QlNiMjkwS0dSbFptRjFiSFJ6S1Z4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCd2IzTjBZM056WEc0aVhTd2labWxzWlNJNkluQnZjM1JqYzNNdWFuTWlmUT09XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXF1aXJlZEFyZ3MocmVxdWlyZWQsIGFyZ3MpIHtcbiAgaWYgKGFyZ3MubGVuZ3RoIDwgcmVxdWlyZWQpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHJlcXVpcmVkICsgJyBhcmd1bWVudCcgKyAocmVxdWlyZWQgPiAxID8gJ3MnIDogJycpICsgJyByZXF1aXJlZCwgYnV0IG9ubHkgJyArIGFyZ3MubGVuZ3RoICsgJyBwcmVzZW50Jyk7XG4gIH1cbn0iLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgYXJndW1lbnQgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiU3RhcnRpbmcgd2l0aCB2Mi4wLjAtYmV0YS4xIGRhdGUtZm5zIGRvZXNuJ3QgYWNjZXB0IHN0cmluZ3MgYXMgZGF0ZSBhcmd1bWVudHMuIFBsZWFzZSB1c2UgYHBhcnNlSVNPYCB0byBwYXJzZSBzdHJpbmdzLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2ZqdWxlXCIpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59IiwiaW1wb3J0ICogYXMgcG9zdGNzcyBmcm9tICdwb3N0Y3NzJztcbmltcG9ydCB7IGFkZERlY2xhcmF0aW9uLCBnZXRDbGFzc0Jhc2VkU2VsZWN0b3IsIGdldElkQmFzZWRTZWxlY3RvciwgfSBmcm9tICdAc3R5bGVib3QvY3NzJztcbnZhciBnZXRFZmZlY3RSZWdleCA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBuZXcgUmVnRXhwKG5hbWUgKyBcIlxcXFwoKC4qKVxcXFwpJFwiKTsgfTtcbnZhciBnZXRFZmZlY3REZWNsYXJhdGlvblZhbHVlID0gZnVuY3Rpb24gKG5hbWUsIHBlcmNlbnQpIHtcbiAgICByZXR1cm4gbmFtZSArIFwiKFwiICsgcGVyY2VudCArIFwiJSlcIjtcbn07XG52YXIgZ2V0U2VsZWN0b3JzVG9BdHRhY2hGaWx0ZXJGb3JQYWdlID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcbiAgICB2YXIgbm9kZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChlbCA9PT0gbnVsbCB8fCBlbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZWwuY2hpbGROb2Rlcyk7XG4gICAgdmFyIGZpbHRlcmVkTm9kZXMgPSBub2Rlcy5maWx0ZXIoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgaWYgKCFub2RlLnRhZ05hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGFnTmFtZSA9IG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBpZiAodGFnTmFtZSA9PT0gJ3NjcmlwdCcgfHxcbiAgICAgICAgICAgIHRhZ05hbWUgPT09ICdzdHlsZScgfHxcbiAgICAgICAgICAgIHRhZ05hbWUgPT09ICdub3NjcmlwdCcgfHxcbiAgICAgICAgICAgIG5vZGUuaWQgPT09ICdzdHlsZWJvdCcpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KTtcbiAgICB2YXIgc2VsZWN0b3JzID0gZmlsdGVyZWROb2Rlcy5tYXAoZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIGdldENsYXNzQmFzZWRTZWxlY3Rvcihub2RlKSB8fCBnZXRJZEJhc2VkU2VsZWN0b3Iobm9kZSk7IH0pO1xuICAgIHJldHVybiBzZWxlY3RvcnMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzICE9PSBudWxsOyB9KTtcbn07XG5leHBvcnQgdmFyIGdldEZpbHRlckVmZmVjdFZhbHVlRm9yUGFnZSA9IGZ1bmN0aW9uIChlZmZlY3ROYW1lLCBjc3MpIHtcbiAgICB2YXIgcm9vdCA9IHBvc3Rjc3MucGFyc2UoY3NzKTtcbiAgICB2YXIgcmVnZXggPSBnZXRFZmZlY3RSZWdleChlZmZlY3ROYW1lKTtcbiAgICB2YXIgc2VsZWN0b3JzID0gZ2V0U2VsZWN0b3JzVG9BdHRhY2hGaWx0ZXJGb3JQYWdlKCk7XG4gICAgdmFyIHZhbHVlID0gMDtcbiAgICBzZWxlY3RvcnMuZm9yRWFjaChmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgICAgaWYgKHJvb3Quc29tZShmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gbm9kZS50eXBlID09PSAncnVsZScgJiYgbm9kZS5zZWxlY3RvciA9PT0gc2VsZWN0b3I7IH0pKSB7XG4gICAgICAgICAgICByb290LndhbGtSdWxlcyhzZWxlY3RvciwgZnVuY3Rpb24gKHJ1bGUpIHtcbiAgICAgICAgICAgICAgICBydWxlLndhbGtEZWNscygnZmlsdGVyJywgZnVuY3Rpb24gKGRlY2wpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBkZWNsLnZhbHVlLm1hdGNoKHJlZ2V4KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMgJiYgbWF0Y2hlc1sxXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludChtYXRjaGVzWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdmFsdWU7XG59O1xuZXhwb3J0IHZhciBnZXRDc3NBZnRlckFwcGx5aW5nRmlsdGVyRWZmZWN0VG9QYWdlID0gZnVuY3Rpb24gKGVmZmVjdE5hbWUsIGNzcywgcGVyY2VudCkge1xuICAgIHZhciByb290ID0gcG9zdGNzcy5wYXJzZShjc3MpO1xuICAgIHZhciByZWdleCA9IGdldEVmZmVjdFJlZ2V4KGVmZmVjdE5hbWUpO1xuICAgIHZhciBzZWxlY3RvcnMgPSBnZXRTZWxlY3RvcnNUb0F0dGFjaEZpbHRlckZvclBhZ2UoKTtcbiAgICB2YXIgZWZmZWN0VmFsdWUgPSBnZXRFZmZlY3REZWNsYXJhdGlvblZhbHVlKGVmZmVjdE5hbWUsIHBlcmNlbnQpO1xuICAgIHNlbGVjdG9ycy5mb3JFYWNoKGZ1bmN0aW9uIChzZWxlY3Rvcikge1xuICAgICAgICBpZiAocm9vdC5zb21lKGZ1bmN0aW9uIChub2RlKSB7IHJldHVybiBub2RlLnR5cGUgPT09ICdydWxlJyAmJiBub2RlLnNlbGVjdG9yID09PSBzZWxlY3RvcjsgfSkpIHtcbiAgICAgICAgICAgIHJvb3Qud2Fsa1J1bGVzKHNlbGVjdG9yLCBmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICAgICAgICAgIGlmIChydWxlLnNvbWUoZnVuY3Rpb24gKG5vZGUpIHsgcmV0dXJuIG5vZGUudHlwZSA9PT0gJ2RlY2wnICYmIG5vZGUucHJvcCA9PT0gJ2ZpbHRlcic7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHJ1bGUud2Fsa0RlY2xzKCdmaWx0ZXInLCBmdW5jdGlvbiAoZGVjbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gZGVjbC52YWx1ZS5yZXBsYWNlKHJlZ2V4LCAnJykudHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlcmNlbnQgIT09ICcwJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2wudmFsdWUgPSB2YWx1ZSA/IHZhbHVlICsgXCIgXCIgKyBlZmZlY3RWYWx1ZSA6IFwiXCIgKyBlZmZlY3RWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNsLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNsLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJ1bGUuc29tZShmdW5jdGlvbiAobm9kZSkgeyByZXR1cm4gbm9kZS50eXBlICE9PSAnZGVjbCc7IH0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBydWxlLnJlbW92ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGVyY2VudCAhPT0gJzAnKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHRvZG86IHVwZGF0ZSBtZXRob2QgaW50ZXJmYWNlcyB0byBhdm9pZCBkb2luZyB0aGlzIHJlZHVuZGFudCB3b3JrXG4gICAgICAgICAgICAgICAgICAgIHJvb3QgPSBwb3N0Y3NzLnBhcnNlKGFkZERlY2xhcmF0aW9uKCdmaWx0ZXInLCBlZmZlY3RWYWx1ZSwgc2VsZWN0b3IsIHJvb3QudG9TdHJpbmcoKSkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHBlcmNlbnQgIT09ICcwJykge1xuICAgICAgICAgICAgLy8gdG9kbzogdXBkYXRlIG1ldGhvZCBpbnRlcmZhY2VzIHRvIGF2b2lkIGRvaW5nIHRoaXMgcmVkdW5kYW50IHdvcmtcbiAgICAgICAgICAgIHJvb3QgPSBwb3N0Y3NzLnBhcnNlKGFkZERlY2xhcmF0aW9uKCdmaWx0ZXInLCBlZmZlY3RWYWx1ZSwgc2VsZWN0b3IsIHJvb3QudG9TdHJpbmcoKSkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJvb3QudG9TdHJpbmcoKTtcbn07XG4iLCJpbXBvcnQgKiBhcyBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuLyoqXG4gKiBBZGQgZGVjbGFyYXRpb24gZm9yIGdpdmVuIHNlbGVjdG9yIGFuZCBjc3NcbiAqL1xuZXhwb3J0IHZhciBhZGREZWNsYXJhdGlvbiA9IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdmFsdWUsIHNlbGVjdG9yLCBjc3MpIHtcbiAgICB2YXIgcm9vdCA9IHBvc3Rjc3MucGFyc2UoY3NzKTtcbiAgICB2YXIgcnVsZXMgPSBbXTtcbiAgICByb290LndhbGtSdWxlcyhzZWxlY3RvciwgZnVuY3Rpb24gKHJ1bGUpIHsgcmV0dXJuIHJ1bGVzLnB1c2gocnVsZSk7IH0pO1xuICAgIHZhciBydWxlID0gcnVsZXMubGVuZ3RoID4gMCA/IHJ1bGVzWzBdIDogbnVsbDtcbiAgICBpZiAoIXJ1bGUpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB2YXIgcnVsZUNzcyA9IHNlbGVjdG9yICsgXCIge1xcbiAgXCIgKyBwcm9wZXJ0eSArIFwiOiBcIiArIHZhbHVlICsgXCI7XFxufVwiO1xuICAgICAgICAgICAgaWYgKHJvb3Quc29tZShmdW5jdGlvbiAocnVsZSkgeyByZXR1cm4gISFydWxlOyB9KSkge1xuICAgICAgICAgICAgICAgIHJvb3QuYXBwZW5kKFwiXFxuXFxuXCIgKyBydWxlQ3NzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJvb3QuYXBwZW5kKHJ1bGVDc3MpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJvb3QudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY3NzO1xuICAgIH1cbiAgICB2YXIgZGVjbGFyYXRpb25FeGlzdHMgPSBydWxlLnNvbWUoZnVuY3Rpb24gKGRlY2wpIHsgcmV0dXJuIGRlY2wudHlwZSA9PT0gJ2RlY2wnICYmIGRlY2wucHJvcCA9PT0gcHJvcGVydHk7IH0pO1xuICAgIGlmIChkZWNsYXJhdGlvbkV4aXN0cykge1xuICAgICAgICBydWxlLndhbGtEZWNscyhwcm9wZXJ0eSwgZnVuY3Rpb24gKGRlY2wpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGRlY2wudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlY2wucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXJ1bGUuc29tZShmdW5jdGlvbiAoZGVjbCkgeyByZXR1cm4gISFkZWNsOyB9KSkge1xuICAgICAgICAgICAgcnVsZS5yZW1vdmUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcm9vdC50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcnVsZS5hcHBlbmQoXCJcXG4gIFwiICsgcHJvcGVydHkgKyBcIjogXCIgKyB2YWx1ZSArIFwiO1wiKTtcbiAgICAgICAgcmV0dXJuIHJvb3QudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgcmV0dXJuIGNzcztcbn07XG5leHBvcnQgdmFyIGFwcGVuZEltcG9ydGFudFRvRGVjbGFyYXRpb25zID0gZnVuY3Rpb24gKGNzcykge1xuICAgIHZhciByb290ID0gcG9zdGNzcy5wYXJzZShjc3MpO1xuICAgIHZhciBpc0FuY2VzdG9yQW5BdFJ1bGUgPSBmdW5jdGlvbiAobm9kZSkge1xuICAgICAgICBpZiAobm9kZS50eXBlID09PSAnYXRydWxlJykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobm9kZS50eXBlID09PSAnZGVjbCcgfHwgbm9kZS50eXBlID09PSAncnVsZScpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FuY2VzdG9yQW5BdFJ1bGUobm9kZS5wYXJlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByb290LndhbGtEZWNscyhmdW5jdGlvbiAoZGVjbCkge1xuICAgICAgICBpZiAoIWlzQW5jZXN0b3JBbkF0UnVsZShkZWNsKSkge1xuICAgICAgICAgICAgZGVjbC5pbXBvcnRhbnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJvb3QudG9TdHJpbmcoKTtcbn07XG4iLCJpbXBvcnQgKiBhcyBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuLy8gZmV0Y2ggYW5kIGV4cGFuZCBhbGwgaW1wb3J0cyBmb3IgZXh0ZXJuYWwgQ1NTIHRvIGdldCBhcm91bmQgQ09SU1xuZXhwb3J0IHZhciBnZXRDc3NXaXRoRXhwYW5kZWRJbXBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICB2YXIgcm9vdCA9IHBvc3Rjc3MucGFyc2UoY3NzKTtcbiAgICAgICAgdmFyIHVybHMgPSBbXTtcbiAgICAgICAgcm9vdC53YWxrQXRSdWxlcygnaW1wb3J0JywgZnVuY3Rpb24gKGF0UnVsZSkge1xuICAgICAgICAgICAgdmFyIHJlZ2V4ID0gL14odXJsXFwoKT8oW15cXCldKikoXFwpKT8kLztcbiAgICAgICAgICAgIHZhciBwYXJhbXNXaXRob3V0UXVvdGVzID0gYXRSdWxlLnBhcmFtc1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cIi9nLCAnJylcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFwnL2csICcnKTtcbiAgICAgICAgICAgIHZhciBtYXRjaGVzID0gcGFyYW1zV2l0aG91dFF1b3Rlcy5tYXRjaChyZWdleCk7XG4gICAgICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgICAgICAgIHVybHMucHVzaChtYXRjaGVzWzJdKTtcbiAgICAgICAgICAgICAgICBhdFJ1bGUucmVtb3ZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgcHJvbWlzZXMgPSB1cmxzLm1hcChmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHVybFJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0dldEltcG9ydENzcycsXG4gICAgICAgICAgICAgICAgICAgIHVybDogdXJsLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgY2hyb21lLnJ1bnRpbWUuc2VuZE1lc3NhZ2UobWVzc2FnZSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHVybFJlc29sdmUocmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICB2YXIgb3V0cHV0ID0gcm9vdC50b1N0cmluZygpO1xuICAgICAgICBQcm9taXNlLmFsbChwcm9taXNlcykudGhlbihmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICAgICAgICB2YXIgbWVyZ2VkID0gdmFsdWVzLmpvaW4oJ1xcblxcbicpO1xuICAgICAgICAgICAgaWYgKG1lcmdlZCkge1xuICAgICAgICAgICAgICAgIG91dHB1dCA9IG1lcmdlZCArIFwiXFxuXFxuXCIgKyBvdXRwdXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXNvbHZlKG91dHB1dCk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbiIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG5pbXBvcnQgeyBhcHBlbmRJbXBvcnRhbnRUb0RlY2xhcmF0aW9ucyB9IGZyb20gJy4vZGVjbGFyYXRpb24nO1xuaW1wb3J0IHsgZ2V0Q3NzV2l0aEV4cGFuZGVkSW1wb3J0cyB9IGZyb20gJy4vaW1wb3J0JztcbnZhciBnZXRTdHlsZXNoZWV0SWQgPSBmdW5jdGlvbiAoaWQpIHtcbiAgICByZXR1cm4gXCJzdHlsZWJvdC1jc3MtXCIgKyBpZDtcbn07XG5leHBvcnQgdmFyIGluamVjdENTU0ludG9Eb2N1bWVudCA9IGZ1bmN0aW9uIChjc3MsIGlkKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgY3NzV2l0aEV4cGFuZGVkSW1wb3J0cywgc3R5bGVzaGVldElkLCBlbCwgc3R5bGU7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGdldENzc1dpdGhFeHBhbmRlZEltcG9ydHMoY3NzKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgY3NzV2l0aEV4cGFuZGVkSW1wb3J0cyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBzdHlsZXNoZWV0SWQgPSBnZXRTdHlsZXNoZWV0SWQoaWQpO1xuICAgICAgICAgICAgICAgIGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoc3R5bGVzaGVldElkKTtcbiAgICAgICAgICAgICAgICBpZiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgZWwuaW5uZXJIVE1MID0gY3NzV2l0aEV4cGFuZGVkSW1wb3J0cztcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgICAgICAgICAgc3R5bGUudHlwZSA9ICd0ZXh0L2Nzcyc7XG4gICAgICAgICAgICAgICAgc3R5bGUuc2V0QXR0cmlidXRlKCdpZCcsIHN0eWxlc2hlZXRJZCk7XG4gICAgICAgICAgICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzV2l0aEV4cGFuZGVkSW1wb3J0cykpO1xuICAgICAgICAgICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChzdHlsZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfTtcbmV4cG9ydCB2YXIgaW5qZWN0Um9vdEludG9Eb2N1bWVudCA9IGZ1bmN0aW9uIChyb290LCBpZCkge1xuICAgIHZhciBjc3MgPSBhcHBlbmRJbXBvcnRhbnRUb0RlY2xhcmF0aW9ucyhyb290LnRvU3RyaW5nKCkpO1xuICAgIGluamVjdENTU0ludG9Eb2N1bWVudChjc3MsIGlkKTtcbn07XG5leHBvcnQgdmFyIHJlbW92ZUNTU0Zyb21Eb2N1bWVudCA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBzdHlsZXNoZWV0SWQgPSBnZXRTdHlsZXNoZWV0SWQoaWQpO1xuICAgIHZhciBlbCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHN0eWxlc2hlZXRJZCk7XG4gICAgaWYgKGVsKSB7XG4gICAgICAgIGVsLmlubmVySFRNTCA9ICcnO1xuICAgIH1cbn07XG4iLCJleHBvcnQgdmFyIGdldENsYXNzQmFzZWRTZWxlY3RvciA9IGZ1bmN0aW9uIChlbCkge1xuICAgIHZhciBfYTtcbiAgICB2YXIgY2xhc3NOYW1lID0gKF9hID0gZWxcbiAgICAgICAgLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnRyaW0oKS5yZXBsYWNlKC9cXHN7Mix9L2csICcgJyk7XG4gICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICB2YXIgY2xhc3NlcyA9IGNsYXNzTmFtZS5zcGxpdCgnICcpO1xuICAgICAgICB2YXIgbGVuID0gY2xhc3Nlcy5sZW5ndGg7XG4gICAgICAgIHZhciBzZWxlY3RvciA9IGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgICAgICAgLy8gdG9kbzogb3B0aW1pemUgY2xhc3Mgc2VsZWN0aW9uIHRvIGJlIG1vcmUgc3BlY2lmaWMgaGVyZVxuICAgICAgICAgICAgc2VsZWN0b3IgKz0gJy4nICsgY2xhc3Nlc1tpXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VsZWN0b3I7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcbmV4cG9ydCB2YXIgZ2V0SWRCYXNlZFNlbGVjdG9yID0gZnVuY3Rpb24gKGVsKSB7XG4gICAgdmFyIGlkID0gZWwuZ2V0QXR0cmlidXRlKCdpZCcpO1xuICAgIGlmIChpZCkge1xuICAgICAgICByZXR1cm4gXCIjXCIgKyBpZDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59O1xuZXhwb3J0IHZhciBnZXRUYWdOYW1lQmFzZWRTZWxlY3RvciA9IGZ1bmN0aW9uIChlbCwgZG9tSGVpcmFyY2h5TGV2ZWwpIHtcbiAgICBpZiAoZG9tSGVpcmFyY2h5TGV2ZWwgPT09IHZvaWQgMCkgeyBkb21IZWlyYXJjaHlMZXZlbCA9IDA7IH1cbiAgICB2YXIgdGFnTmFtZSA9IGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAvLyBkb24ndCBnbyBiZXlvbmQgMiBsZXZlbHMgdXAgdGhlIERPTVxuICAgIGlmIChkb21IZWlyYXJjaHlMZXZlbCA8IDIgJiYgZWwucGFyZW50RWxlbWVudCkge1xuICAgICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50RWxlbWVudDtcbiAgICAgICAgdmFyIHBhcmVudFNlbGVjdG9yID0gZ2V0VGFnTmFtZUJhc2VkU2VsZWN0b3IocGFyZW50LCBkb21IZWlyYXJjaHlMZXZlbCArIDEpO1xuICAgICAgICByZXR1cm4gcGFyZW50U2VsZWN0b3IgKyBcIiBcIiArIHRhZ05hbWU7XG4gICAgfVxuICAgIHJldHVybiB0YWdOYW1lO1xufTtcbmV4cG9ydCB2YXIgZ2V0U2VsZWN0b3IgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICB2YXIgc2VsZWN0b3IgPSBnZXRDbGFzc0Jhc2VkU2VsZWN0b3IoZWwpO1xuICAgIGlmICghc2VsZWN0b3IpIHtcbiAgICAgICAgc2VsZWN0b3IgPSBnZXRJZEJhc2VkU2VsZWN0b3IoZWwpO1xuICAgIH1cbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBnZXRUYWdOYW1lQmFzZWRTZWxlY3RvcihlbCk7XG4gICAgfVxuICAgIHJldHVybiBzZWxlY3Rvcjtcbn07XG5leHBvcnQgdmFyIHZhbGlkYXRlU2VsZWN0b3IgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICBpZiAoIXNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufTtcbiIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG5pbXBvcnQgeyBwYXJzZSB9IGZyb20gJ3Bvc3Rjc3MnO1xudmFyIGdldEdvb2dsZUZvbnRVcmxBbmRQYXJhbXMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB2YXIgYXJnID0gdmFsdWUucmVwbGFjZSgnICcsICcrJyk7XG4gICAgdmFyIHVybCA9IFwiaHR0cHM6Ly9mb250cy5nb29nbGVhcGlzLmNvbS9jc3MyP2ZhbWlseT1cIiArIGFyZyArIFwiOml0YWwsd2dodEAwLDEwMDswLDMwMDswLDQwMDswLDUwMDswLDcwMDswLDkwMDsxLDEwMDsxLDMwMDsxLDQwMDsxLDUwMDsxLDcwMDsxLDkwMCZkaXNwbGF5PXN3YXBcIjtcbiAgICB2YXIgcGFyYW1zID0gXCJ1cmwoXCIgKyB1cmwgKyBcIilcIjtcbiAgICByZXR1cm4geyB1cmw6IHVybCwgcGFyYW1zOiBwYXJhbXMgfTtcbn07XG4vKipcbiAqIElmIGZvbnQgZXhpc3RzIGluIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2ZvbnRzLCBhZGQgcmVsZXZhbnQgQGltcG9ydCB0byB0aGUgY3NzLlxuICogR3VhcmRzIGFnYWluc3QgZHVwbGljYXRlIEBpbXBvcnQgYW5kIGludmFsaWQgZm9udHMuXG4gKi9cbmV4cG9ydCB2YXIgYWRkR29vZ2xlV2ViRm9udCA9IGZ1bmN0aW9uICh2YWx1ZSwgY3NzKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcm9vdCwgX2EsIHVybCwgcGFyYW1zO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgcm9vdCA9IHBhcnNlKGNzcyk7XG4gICAgICAgIF9hID0gZ2V0R29vZ2xlRm9udFVybEFuZFBhcmFtcyh2YWx1ZSksIHVybCA9IF9hLnVybCwgcGFyYW1zID0gX2EucGFyYW1zO1xuICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgICAgICAgICBmZXRjaCh1cmwpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjc3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbXBvcnRFeGlzdHMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcm9vdC53YWxrQXRSdWxlcygnaW1wb3J0JywgZnVuY3Rpb24gKGF0UnVsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF0UnVsZS5wYXJhbXMgPT09IHBhcmFtcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydEV4aXN0cyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWltcG9ydEV4aXN0cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJ1bGUgPSBwYXJzZShcIkBpbXBvcnQgXCIgKyBwYXJhbXMgKyBcIjtcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICByb290LnByZXBlbmQocnVsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dCA9IChfYSA9IHJvb3QuZmlyc3QpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uZXh0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHQucmF3cy5iZWZvcmUgPSAnXFxuXFxuJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHJvb3QudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNzcyk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KV07XG4gICAgfSk7XG59KTsgfTtcbi8qKlxuICogUmVtb3ZlIHVudXNlZCBnb29nbGUgd2ViIGZvbnRzIGZyb20gZ2l2ZW4gY3NzLlxuICovXG5leHBvcnQgdmFyIGNsZWFuR29vZ2xlV2ViRm9udHMgPSBmdW5jdGlvbiAoY3NzKSB7XG4gICAgdmFyIHJvb3QgPSBwYXJzZShjc3MpO1xuICAgIHZhciBmb250cyA9IFtdO1xuICAgIHJvb3Qud2Fsa0RlY2xzKCdmb250LWZhbWlseScsIGZ1bmN0aW9uIChkZWNsKSB7XG4gICAgICAgIHZhciBkZWNsRm9udHMgPSBkZWNsLnZhbHVlLnNwbGl0KCcsJyk7XG4gICAgICAgIGRlY2xGb250cy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIHRyaW1tZWRWYWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICh0cmltbWVkVmFsdWUgJiYgZm9udHMuaW5kZXhPZih0cmltbWVkVmFsdWUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgIGZvbnRzLnB1c2godHJpbW1lZFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgdmFyIGZvbnRQYXJhbXMgPSBmb250cy5tYXAoZnVuY3Rpb24gKGZvbnQpIHsgcmV0dXJuIGdldEdvb2dsZUZvbnRVcmxBbmRQYXJhbXMoZm9udCkucGFyYW1zOyB9KTtcbiAgICByb290LndhbGtBdFJ1bGVzKCdpbXBvcnQnLCBmdW5jdGlvbiAoYXRSdWxlKSB7XG4gICAgICAgIGlmIChmb250UGFyYW1zLmluZGV4T2YoYXRSdWxlLnBhcmFtcykgPT09IC0xKSB7XG4gICAgICAgICAgICBhdFJ1bGUucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcm9vdC50b1N0cmluZygpO1xufTtcbiIsImltcG9ydCAqIGFzIHBvc3Rjc3MgZnJvbSAncG9zdGNzcyc7XG5leHBvcnQgdmFyIGdldFJ1bGUgPSBmdW5jdGlvbiAoY3NzLCBzZWxlY3Rvcikge1xuICAgIHZhciByb290ID0gcG9zdGNzcy5wYXJzZShjc3MpO1xuICAgIHZhciBtYXRjaGluZ1J1bGVzID0gW107XG4gICAgcm9vdC53YWxrUnVsZXMoc2VsZWN0b3IsIGZ1bmN0aW9uIChydWxlKSB7IHJldHVybiBtYXRjaGluZ1J1bGVzLnB1c2gocnVsZSk7IH0pO1xuICAgIHJldHVybiBtYXRjaGluZ1J1bGVzLmxlbmd0aCA+IDAgPyBtYXRjaGluZ1J1bGVzWzBdIDogbnVsbDtcbn07XG5leHBvcnQgdmFyIGFkZEVtcHR5UnVsZSA9IGZ1bmN0aW9uIChjc3MsIHNlbGVjdG9yKSB7XG4gICAgdmFyIHJ1bGVDc3MgPSBzZWxlY3RvciArIFwiIHtcXG4gIFxcbn1cIjtcbiAgICB2YXIgY3NzV2l0aE5ld0xpbmVzID0gY3NzLnJlcGxhY2UoLygoLiopXFx9KVxcbiokLywgJyQxXFxuXFxuJyk7XG4gICAgcmV0dXJuIFwiXCIgKyBjc3NXaXRoTmV3TGluZXMgKyBydWxlQ3NzO1xufTtcbmV4cG9ydCB2YXIgcmVtb3ZlRW1wdHlSdWxlcyA9IGZ1bmN0aW9uIChjc3MpIHtcbiAgICB2YXIgcm9vdCA9IHBvc3Rjc3MucGFyc2UoY3NzKTtcbiAgICByb290LndhbGtSdWxlcyhmdW5jdGlvbiAocnVsZSkge1xuICAgICAgICBpZiAoIXJ1bGUuZmlyc3QpIHtcbiAgICAgICAgICAgIHJ1bGUucmVtb3ZlKCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcm9vdC50b1N0cmluZygpO1xufTtcbiIsImltcG9ydCB0b0RhdGUgZnJvbSAnLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSBpc1ZhbGlkXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IElzIHRoZSBnaXZlbiBkYXRlIHZhbGlkP1xuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJucyBmYWxzZSBpZiBhcmd1bWVudCBpcyBJbnZhbGlkIERhdGUgYW5kIHRydWUgb3RoZXJ3aXNlLlxuICogQXJndW1lbnQgaXMgY29udmVydGVkIHRvIERhdGUgdXNpbmcgYHRvRGF0ZWAuIFNlZSBbdG9EYXRlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL3RvRGF0ZX1cbiAqIEludmFsaWQgRGF0ZSBpcyBhIERhdGUsIHdob3NlIHRpbWUgdmFsdWUgaXMgTmFOLlxuICpcbiAqIFRpbWUgdmFsdWUgb2YgRGF0ZTogaHR0cDovL2VzNS5naXRodWIuaW8vI3gxNS45LjEuMVxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogLSBOb3cgYGlzVmFsaWRgIGRvZXNuJ3QgdGhyb3cgYW4gZXhjZXB0aW9uXG4gKiAgIGlmIHRoZSBmaXJzdCBhcmd1bWVudCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgRGF0ZS5cbiAqICAgSW5zdGVhZCwgYXJndW1lbnQgaXMgY29udmVydGVkIGJlZm9yZWhhbmQgdXNpbmcgYHRvRGF0ZWAuXG4gKlxuICogICBFeGFtcGxlczpcbiAqXG4gKiAgIHwgYGlzVmFsaWRgIGFyZ3VtZW50ICAgICAgICB8IEJlZm9yZSB2Mi4wLjAgfCB2Mi4wLjAgb253YXJkIHxcbiAqICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfFxuICogICB8IGBuZXcgRGF0ZSgpYCAgICAgICAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKCcyMDE2LTAxLTAxJylgICB8IGB0cnVlYCAgICAgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoJycpYCAgICAgICAgICAgIHwgYGZhbHNlYCAgICAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgxNDg4MzcwODM1MDgxKWAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKE5hTilgICAgICAgICAgICB8IGBmYWxzZWAgICAgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgJzIwMTYtMDEtMDEnYCAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAnJ2AgICAgICAgICAgICAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYDE0ODgzNzA4MzUwODFgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgdHJ1ZWAgICAgICAgIHxcbiAqICAgfCBgTmFOYCAgICAgICAgICAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICpcbiAqICAgV2UgaW50cm9kdWNlIHRoaXMgY2hhbmdlIHRvIG1ha2UgKmRhdGUtZm5zKiBjb25zaXN0ZW50IHdpdGggRUNNQVNjcmlwdCBiZWhhdmlvclxuICogICB0aGF0IHRyeSB0byBjb2VyY2UgYXJndW1lbnRzIHRvIHRoZSBleHBlY3RlZCB0eXBlXG4gKiAgICh3aGljaCBpcyBhbHNvIHRoZSBjYXNlIHdpdGggb3RoZXIgKmRhdGUtZm5zKiBmdW5jdGlvbnMpLlxuICpcbiAqIEBwYXJhbSB7Kn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gdGhlIGRhdGUgaXMgdmFsaWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIHZhbGlkIGRhdGU6XG4gKiB2YXIgcmVzdWx0ID0gaXNWYWxpZChuZXcgRGF0ZSgyMDE0LCAxLCAzMSkpXG4gKiAvLz0+IHRydWVcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWx1ZSwgY29udmVydGFibGUgaW50byBhIGRhdGU6XG4gKiB2YXIgcmVzdWx0ID0gaXNWYWxpZCgxMzkzODA0ODAwMDAwKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgaW52YWxpZCBkYXRlOlxuICogdmFyIHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoJycpKVxuICogLy89PiBmYWxzZVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzVmFsaWQoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICByZXR1cm4gIWlzTmFOKGRhdGUpO1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tICcuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qcyc7XG5pbXBvcnQgdG9EYXRlIGZyb20gJy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNzUwIG1pbGxpc2Vjb25kcyB0byAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogdmFyIHJlc3VsdCA9IGFkZE1pbGxpc2Vjb25kcyhuZXcgRGF0ZSgyMDE0LCA2LCAxMCwgMTIsIDQ1LCAzMCwgMCksIDc1MClcbiAqIC8vPT4gVGh1IEp1bCAxMCAyMDE0IDEyOjQ1OjMwLjc1MFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZE1pbGxpc2Vjb25kcyhkaXJ0eURhdGUsIGRpcnR5QW1vdW50KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgdGltZXN0YW1wID0gdG9EYXRlKGRpcnR5RGF0ZSkuZ2V0VGltZSgpO1xuICB2YXIgYW1vdW50ID0gdG9JbnRlZ2VyKGRpcnR5QW1vdW50KTtcbiAgcmV0dXJuIG5ldyBEYXRlKHRpbWVzdGFtcCArIGFtb3VudCk7XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tICcuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qcyc7XG5pbXBvcnQgYWRkTWlsbGlzZWNvbmRzIGZyb20gJy4uL2FkZE1pbGxpc2Vjb25kcy9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbi8qKlxuICogQG5hbWUgc3ViTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgU3VidHJhY3QgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBiZSBjaGFuZ2VkXG4gKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IC0gdGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdG8gYmUgc3VidHJhY3RlZC4gUG9zaXRpdmUgZGVjaW1hbHMgd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmZsb29yYCwgZGVjaW1hbHMgbGVzcyB0aGFuIHplcm8gd2lsbCBiZSByb3VuZGVkIHVzaW5nIGBNYXRoLmNlaWxgLlxuICogQHJldHVybnMge0RhdGV9IHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBtaWxsaXNlY29uZHMgc3VidHJhY3RlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTdWJ0cmFjdCA3NTAgbWlsbGlzZWNvbmRzIGZyb20gMTAgSnVseSAyMDE0IDEyOjQ1OjMwLjAwMDpcbiAqIHZhciByZXN1bHQgPSBzdWJNaWxsaXNlY29uZHMobmV3IERhdGUoMjAxNCwgNiwgMTAsIDEyLCA0NSwgMzAsIDApLCA3NTApXG4gKiAvLz0+IFRodSBKdWwgMTAgMjAxNCAxMjo0NToyOS4yNTBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJNaWxsaXNlY29uZHMoZGlydHlEYXRlLCBkaXJ0eUFtb3VudCkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGFtb3VudCA9IHRvSW50ZWdlcihkaXJ0eUFtb3VudCk7XG4gIHJldHVybiBhZGRNaWxsaXNlY29uZHMoZGlydHlEYXRlLCAtYW1vdW50KTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGRMZWFkaW5nWmVyb3MobnVtYmVyLCB0YXJnZXRMZW5ndGgpIHtcbiAgdmFyIHNpZ24gPSBudW1iZXIgPCAwID8gJy0nIDogJyc7XG4gIHZhciBvdXRwdXQgPSBNYXRoLmFicyhudW1iZXIpLnRvU3RyaW5nKCk7XG5cbiAgd2hpbGUgKG91dHB1dC5sZW5ndGggPCB0YXJnZXRMZW5ndGgpIHtcbiAgICBvdXRwdXQgPSAnMCcgKyBvdXRwdXQ7XG4gIH1cblxuICByZXR1cm4gc2lnbiArIG91dHB1dDtcbn0iLCJpbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gJy4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qcyc7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcbiAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0b2tlbiA9PT0gJ3l5JyA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldFVUQ0hvdXJzKCkgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUudG9VcHBlckNhc2UoKTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlWzBdO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWUgPT09ICdhbScgPyAnYS5tLicgOiAncC5tLic7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyIHx8IDEyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBIb3VyIFswLTIzXVxuICBIOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDSG91cnMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gTWludXRlXG4gIG06IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENNaW51dGVzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFNlY29uZFxuICBzOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIG51bWJlck9mRGlnaXRzID0gdG9rZW4ubGVuZ3RoO1xuICAgIHZhciBtaWxsaXNlY29uZHMgPSBkYXRlLmdldFVUQ01pbGxpc2Vjb25kcygpO1xuICAgIHZhciBmcmFjdGlvbmFsU2Vjb25kcyA9IE1hdGguZmxvb3IobWlsbGlzZWNvbmRzICogTWF0aC5wb3coMTAsIG51bWJlck9mRGlnaXRzIC0gMykpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZnJhY3Rpb25hbFNlY29uZHMsIHRva2VuLmxlbmd0aCk7XG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImltcG9ydCB0b0RhdGUgZnJvbSAnLi4vLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzJzsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIHdlZWtTdGFydHNPbiA9IDE7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkYXkgPSBkYXRlLmdldFVUQ0RheSgpO1xuICB2YXIgZGlmZiA9IChkYXkgPCB3ZWVrU3RhcnRzT24gPyA3IDogMCkgKyBkYXkgLSB3ZWVrU3RhcnRzT247XG4gIGRhdGUuc2V0VVRDRGF0ZShkYXRlLmdldFVUQ0RhdGUoKSAtIGRpZmYpO1xuICBkYXRlLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gJy4uLy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSAnLi4vc3RhcnRPZlVUQ0lTT1dlZWsvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mTmV4dFllYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCA0KTtcbiAgZm91cnRoT2ZKYW51YXJ5T2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENJU09XZWVrKGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIpO1xuXG4gIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mTmV4dFllYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXIgKyAxO1xuICB9IGVsc2UgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZUaGlzWWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhcjtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geWVhciAtIDE7XG4gIH1cbn0iLCJpbXBvcnQgZ2V0VVRDSVNPV2Vla1llYXIgZnJvbSAnLi4vZ2V0VVRDSVNPV2Vla1llYXIvaW5kZXguanMnO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gJy4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzJzsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENJU09XZWVrWWVhcihkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKTtcbiAgdmFyIGZvdXJ0aE9mSmFudWFyeSA9IG5ldyBEYXRlKDApO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnkpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gJy4uL3RvSW50ZWdlci9pbmRleC5qcyc7XG5pbXBvcnQgdG9EYXRlIGZyb20gJy4uLy4uL3RvRGF0ZS9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2VlayhkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy53ZWVrU3RhcnRzT247XG4gIHZhciBkZWZhdWx0V2Vla1N0YXJ0c09uID0gbG9jYWxlV2Vla1N0YXJ0c09uID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6IHRvSW50ZWdlcihvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSAnLi4vdG9JbnRlZ2VyL2luZGV4LmpzJztcbmltcG9ydCB0b0RhdGUgZnJvbSAnLi4vLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tICcuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMSBhbmQgNyBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEoZmlyc3RXZWVrQ29udGFpbnNEYXRlID49IDEgJiYgZmlyc3RXZWVrQ29udGFpbnNEYXRlIDw9IDcpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2ZpcnN0V2Vla0NvbnRhaW5zRGF0ZSBtdXN0IGJlIGJldHdlZW4gMSBhbmQgNyBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGZpcnN0V2Vla09mTmV4dFllYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENGdWxsWWVhcih5ZWFyICsgMSwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZOZXh0WWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZOZXh0WWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mTmV4dFllYXIsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWtPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vla09mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIHN0YXJ0T2ZUaGlzWWVhciA9IHN0YXJ0T2ZVVENXZWVrKGZpcnN0V2Vla09mVGhpc1llYXIsIGRpcnR5T3B0aW9ucyk7XG5cbiAgaWYgKGRhdGUuZ2V0VGltZSgpID49IHN0YXJ0T2ZOZXh0WWVhci5nZXRUaW1lKCkpIHtcbiAgICByZXR1cm4geWVhciArIDE7XG4gIH0gZWxzZSBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZlRoaXNZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB5ZWFyIC0gMTtcbiAgfVxufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSAnLi4vdG9JbnRlZ2VyL2luZGV4LmpzJztcbmltcG9ydCBnZXRVVENXZWVrWWVhciBmcm9tICcuLi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyc7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSAnLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanMnO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tICcuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZlVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIHllYXIgPSBnZXRVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciBmaXJzdFdlZWsgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrLnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIGZpcnN0V2Vlay5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgdmFyIGRhdGUgPSBzdGFydE9mVVRDV2VlayhmaXJzdFdlZWssIGRpcnR5T3B0aW9ucyk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCBsaWdodEZvcm1hdHRlcnMgZnJvbSAnLi4vbGlnaHRGb3JtYXR0ZXJzL2luZGV4LmpzJztcbmltcG9ydCBnZXRVVENEYXlPZlllYXIgZnJvbSAnLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanMnO1xuaW1wb3J0IGdldFVUQ0lTT1dlZWsgZnJvbSAnLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzJztcbmltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tICcuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzJztcbmltcG9ydCBnZXRVVENXZWVrIGZyb20gJy4uLy4uLy4uL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qcyc7XG5pbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSAnLi4vLi4vLi4vX2xpYi9nZXRVVENXZWVrWWVhci9pbmRleC5qcyc7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gJy4uLy4uL2FkZExlYWRpbmdaZXJvcy9pbmRleC5qcyc7XG52YXIgZGF5UGVyaW9kRW51bSA9IHtcbiAgYW06ICdhbScsXG4gIHBtOiAncG0nLFxuICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgbm9vbjogJ25vb24nLFxuICBtb3JuaW5nOiAnbW9ybmluZycsXG4gIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgbmlnaHQ6ICduaWdodCdcbiAgLypcbiAgICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gICAqIHwgIGEgIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgIHwgIEEqIHwgTWlsbGlzZWNvbmRzIGluIGRheSAgICAgICAgICAgIHxcbiAgICogfCAgYiAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgfCAgQiAgfCBGbGV4aWJsZSBkYXkgcGVyaW9kICAgICAgICAgICAgfFxuICAgKiB8ICBjICB8IFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrICB8ICBDKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8XG4gICAqIHwgIGQgIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgIHwgIEQgIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgZSAgfCBMb2NhbCBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgfCAgRSAgfCBEYXkgb2Ygd2VlayAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICBmICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBGKiB8IERheSBvZiB3ZWVrIGluIG1vbnRoICAgICAgICAgICB8XG4gICAqIHwgIGcqIHwgTW9kaWZpZWQgSnVsaWFuIGRheSAgICAgICAgICAgIHwgIEcgIHwgRXJhICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICBpISB8IElTTyBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgICB8ICBJISB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICB8XG4gICAqIHwgIGoqIHwgTG9jYWxpemVkIGhvdXIgdy8gZGF5IHBlcmlvZCAgIHwgIEoqIHwgTG9jYWxpemVkIGhvdXIgdy9vIGRheSBwZXJpb2QgIHxcbiAgICogfCAgayAgfCBIb3VyIFsxLTI0XSAgICAgICAgICAgICAgICAgICAgfCAgSyAgfCBIb3VyIFswLTExXSAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICBsKiB8IChkZXByZWNhdGVkKSAgICAgICAgICAgICAgICAgICB8ICBMICB8IFN0YW5kLWFsb25lIG1vbnRoICAgICAgICAgICAgICB8XG4gICAqIHwgIG0gIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgIHwgIE0gIHwgTW9udGggICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICogfCAgbiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTiAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICBvISB8IE9yZGluYWwgbnVtYmVyIG1vZGlmaWVyICAgICAgICB8ICBPICB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICB8XG4gICAqIHwgIHAhIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgIHwgIFAhIHwgTG9uZyBsb2NhbGl6ZWQgZGF0ZSAgICAgICAgICAgIHxcbiAgICogfCAgcSAgfCBTdGFuZC1hbG9uZSBxdWFydGVyICAgICAgICAgICAgfCAgUSAgfCBRdWFydGVyICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICByKiB8IFJlbGF0ZWQgR3JlZ29yaWFuIHllYXIgICAgICAgICB8ICBSISB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICB8XG4gICAqIHwgIHMgIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgIHwgIFMgIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgIHxcbiAgICogfCAgdCEgfCBTZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICAgICAgfCAgVCEgfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgfFxuICAgKiB8ICB1ICB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICB8ICBVKiB8IEN5Y2xpYyB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gICAqIHwgIHYqIHwgVGltZXpvbmUgKGdlbmVyaWMgbm9uLWxvY2F0LikgIHwgIFYqIHwgVGltZXpvbmUgKGxvY2F0aW9uKSAgICAgICAgICAgIHxcbiAgICogfCAgdyAgfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgfCAgVyogfCBXZWVrIG9mIG1vbnRoICAgICAgICAgICAgICAgICAgfFxuICAgKiB8ICB4ICB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICB8ICBYICB8IFRpbWV6b25lIChJU08tODYwMSkgICAgICAgICAgICB8XG4gICAqIHwgIHkgIHwgWWVhciAoYWJzKSAgICAgICAgICAgICAgICAgICAgIHwgIFkgIHwgTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhciAgICAgIHxcbiAgICogfCAgeiAgfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgfCAgWiogfCBUaW1lem9uZSAoYWxpYXNlcykgICAgICAgICAgICAgfFxuICAgKlxuICAgKiBMZXR0ZXJzIG1hcmtlZCBieSAqIGFyZSBub3QgaW1wbGVtZW50ZWQgYnV0IHJlc2VydmVkIGJ5IFVuaWNvZGUgc3RhbmRhcmQuXG4gICAqXG4gICAqIExldHRlcnMgbWFya2VkIGJ5ICEgYXJlIG5vbi1zdGFuZGFyZCwgYnV0IGltcGxlbWVudGVkIGJ5IGRhdGUtZm5zOlxuICAgKiAtIGBvYCBtb2RpZmllcyB0aGUgcHJldmlvdXMgdG9rZW4gdG8gdHVybiBpdCBpbnRvIGFuIG9yZGluYWwgKHNlZSBgZm9ybWF0YCBkb2NzKVxuICAgKiAtIGBpYCBpcyBJU08gZGF5IG9mIHdlZWsuIEZvciBgaWAgYW5kIGBpaWAgaXMgcmV0dXJucyBudW1lcmljIElTTyB3ZWVrIGRheXMsXG4gICAqICAgaS5lLiA3IGZvciBTdW5kYXksIDEgZm9yIE1vbmRheSwgZXRjLlxuICAgKiAtIGBJYCBpcyBJU08gd2VlayBvZiB5ZWFyLCBhcyBvcHBvc2VkIHRvIGB3YCB3aGljaCBpcyBsb2NhbCB3ZWVrIG9mIHllYXIuXG4gICAqIC0gYFJgIGlzIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyLCBhcyBvcHBvc2VkIHRvIGBZYCB3aGljaCBpcyBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyLlxuICAgKiAgIGBSYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYElgIGFuZCBgaWBcbiAgICogICBmb3IgdW5pdmVyc2FsIElTTyB3ZWVrLW51bWJlcmluZyBkYXRlLCB3aGVyZWFzXG4gICAqICAgYFlgIGlzIHN1cHBvc2VkIHRvIGJlIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgd2AgYW5kIGBlYFxuICAgKiAgIGZvciB3ZWVrLW51bWJlcmluZyBkYXRlIHNwZWNpZmljIHRvIHRoZSBsb2NhbGUuXG4gICAqIC0gYFBgIGlzIGxvbmcgbG9jYWxpemVkIGRhdGUgZm9ybWF0XG4gICAqIC0gYHBgIGlzIGxvbmcgbG9jYWxpemVkIHRpbWUgZm9ybWF0XG4gICAqL1xuXG59O1xudmFyIGZvcm1hdHRlcnMgPSB7XG4gIC8vIEVyYVxuICBHOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGVyYSA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKSA+IDAgPyAxIDogMDtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEFELCBCQ1xuICAgICAgY2FzZSAnRyc6XG4gICAgICBjYXNlICdHRyc6XG4gICAgICBjYXNlICdHR0cnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQSwgQlxuXG4gICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnXG4gICAgICAgIH0pO1xuICAgICAgLy8gQW5ubyBEb21pbmksIEJlZm9yZSBDaHJpc3RcblxuICAgICAgY2FzZSAnR0dHRyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZXJhKGVyYSwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBZZWFyXG4gIHk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICAvLyBPcmRpbmFsIG51bWJlclxuICAgIGlmICh0b2tlbiA9PT0gJ3lvJykge1xuICAgICAgdmFyIHNpZ25lZFllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih5ZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy55KGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gTG9jYWwgd2Vlay1udW1iZXJpbmcgeWVhclxuICBZOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHNpZ25lZFdlZWtZZWFyID0gZ2V0VVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucyk7IC8vIFJldHVybnMgMSBmb3IgMSBCQyAod2hpY2ggaXMgeWVhciAwIGluIEphdmFTY3JpcHQpXG5cbiAgICB2YXIgd2Vla1llYXIgPSBzaWduZWRXZWVrWWVhciA+IDAgPyBzaWduZWRXZWVrWWVhciA6IDEgLSBzaWduZWRXZWVrWWVhcjsgLy8gVHdvIGRpZ2l0IHllYXJcblxuICAgIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgICAgdmFyIHR3b0RpZ2l0WWVhciA9IHdlZWtZZWFyICUgMTAwO1xuICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0d29EaWdpdFllYXIsIDIpO1xuICAgIH0gLy8gT3JkaW5hbCBudW1iZXJcblxuXG4gICAgaWYgKHRva2VuID09PSAnWW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrWWVhciwge1xuICAgICAgICB1bml0OiAneWVhcidcbiAgICAgIH0pO1xuICAgIH0gLy8gUGFkZGluZ1xuXG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICBSOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgaXNvV2Vla1llYXIgPSBnZXRVVENJU09XZWVrWWVhcihkYXRlKTsgLy8gUGFkZGluZ1xuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29XZWVrWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRXh0ZW5kZWQgeWVhci4gVGhpcyBpcyBhIHNpbmdsZSBudW1iZXIgZGVzaWduYXRpbmcgdGhlIHllYXIgb2YgdGhpcyBjYWxlbmRhciBzeXN0ZW0uXG4gIC8vIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBsb2NhbGl6ZXJzIGFyZSBCLkMuIHllYXJzOlxuICAvLyB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICAvLyB8LS0tLS0tfC0tLS0tfC0tLS0tfFxuICAvLyB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICAvLyB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICAvLyB8IEJDIDIgfCAgIDIgfCAgLTEgfFxuICAvLyBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gIC8vIHdoaWxlIGB1dWAgcGFkcyBzaW5nbGUgZGlnaXQgeWVhcnMgdG8gMiBjaGFyYWN0ZXJzIGFuZCByZXR1cm5zIG90aGVyIHllYXJzIHVuY2hhbmdlZC5cbiAgdTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBRdWFydGVyXG4gIFE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ1EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcblxuICAgICAgY2FzZSAnUVEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ1FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ1FRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAnUVFRUVEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ1FRUVEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgcXVhcnRlclxuICBxOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIHF1YXJ0ZXIgPSBNYXRoLmNlaWwoKGRhdGUuZ2V0VVRDTW9udGgoKSArIDEpIC8gMyk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyAxLCAyLCAzLCA0XG4gICAgICBjYXNlICdxJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhxdWFydGVyKTtcbiAgICAgIC8vIDAxLCAwMiwgMDMsIDA0XG5cbiAgICAgIGNhc2UgJ3FxJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhxdWFydGVyLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAzcmQsIDR0aFxuXG4gICAgICBjYXNlICdxbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB1bml0OiAncXVhcnRlcidcbiAgICAgICAgfSk7XG4gICAgICAvLyBRMSwgUTIsIFEzLCBRNFxuXG4gICAgICBjYXNlICdxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMSwgMiwgMywgNCAobmFycm93IHF1YXJ0ZXI7IGNvdWxkIGJlIG5vdCBudW1lcmljYWwpXG5cbiAgICAgIGNhc2UgJ3FxcXFxJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLlxuXG4gICAgICBjYXNlICdxcXFxJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIE1vbnRoXG4gIE06IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdNJzpcbiAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5NKGRhdGUsIHRva2VuKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgY2FzZSAnTW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgIGNhc2UgJ01NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICBjYXNlICdNTU1NTSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICBjYXNlICdNTU1NJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gU3RhbmQtYWxvbmUgbW9udGhcbiAgTDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIC4uLiwgMTJcbiAgICAgIGNhc2UgJ0wnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKG1vbnRoICsgMSk7XG4gICAgICAvLyAwMSwgMDIsIC4uLiwgMTJcblxuICAgICAgY2FzZSAnTEwnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKG1vbnRoICsgMSwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCAxMnRoXG5cbiAgICAgIGNhc2UgJ0xvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobW9udGggKyAxLCB7XG4gICAgICAgICAgdW5pdDogJ21vbnRoJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbiwgRmViLCAuLi4sIERlY1xuXG4gICAgICBjYXNlICdMTEwnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKLCBGLCAuLi4sIERcblxuICAgICAgY2FzZSAnTExMTEwnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXJcblxuICAgICAgY2FzZSAnTExMTCc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUubW9udGgobW9udGgsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIHdlZWsgb2YgeWVhclxuICB3OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIHdlZWsgPSBnZXRVVENXZWVrKGRhdGUsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHRva2VuID09PSAnd28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcih3ZWVrLCB7XG4gICAgICAgIHVuaXQ6ICd3ZWVrJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh3ZWVrLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBJU08gd2VlayBvZiB5ZWFyXG4gIEk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaXNvV2VlayA9IGdldFVUQ0lTT1dlZWsoZGF0ZSk7XG5cbiAgICBpZiAodG9rZW4gPT09ICdJbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGlzb1dlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIERheSBvZiB0aGUgbW9udGhcbiAgZDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ2RvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENEYXRlKCksIHtcbiAgICAgICAgdW5pdDogJ2RhdGUnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLmQoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBEYXkgb2YgeWVhclxuICBEOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mWWVhciA9IGdldFVUQ0RheU9mWWVhcihkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0RvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF5T2ZZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICdkYXlPZlllYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGRheU9mWWVhciwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHdlZWtcbiAgRTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gVHVlXG4gICAgICBjYXNlICdFJzpcbiAgICAgIGNhc2UgJ0VFJzpcbiAgICAgIGNhc2UgJ0VFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ0VFRUVFRSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdFRUVFJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBMb2NhbCBkYXkgb2Ygd2Vla1xuICBlOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKE50aCBkYXkgb2Ygd2VlayB3aXRoIGN1cnJlbnQgbG9jYWxlIG9yIHdlZWtTdGFydHNPbilcbiAgICAgIGNhc2UgJ2UnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGxvY2FsRGF5T2ZXZWVrKTtcbiAgICAgIC8vIFBhZGRlZCBudW1lcmljYWwgdmFsdWVcblxuICAgICAgY2FzZSAnZWUnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGxvY2FsRGF5T2ZXZWVrLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuXG4gICAgICBjYXNlICdlbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2VlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdlZWVlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2VlZWVlZSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdlZWVlJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBsb2NhbCBkYXkgb2Ygd2Vla1xuICBjOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gICAgdmFyIGxvY2FsRGF5T2ZXZWVrID0gKGRheU9mV2VlayAtIG9wdGlvbnMud2Vla1N0YXJ0c09uICsgOCkgJSA3IHx8IDc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBOdW1lcmljYWwgdmFsdWUgKHNhbWUgYXMgaW4gYGVgKVxuICAgICAgY2FzZSAnYyc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdjYyc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAxc3QsIDJuZCwgLi4uLCA3dGhcblxuICAgICAgY2FzZSAnY28nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihsb2NhbERheU9mV2Vlaywge1xuICAgICAgICAgIHVuaXQ6ICdkYXknXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdjY2NjY2MnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnY2NjYyc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gSVNPIGRheSBvZiB3ZWVrXG4gIGk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgaXNvRGF5T2ZXZWVrID0gZGF5T2ZXZWVrID09PSAwID8gNyA6IGRheU9mV2VlaztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDJcbiAgICAgIGNhc2UgJ2knOlxuICAgICAgICByZXR1cm4gU3RyaW5nKGlzb0RheU9mV2Vlayk7XG4gICAgICAvLyAwMlxuXG4gICAgICBjYXNlICdpaSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvRGF5T2ZXZWVrLCB0b2tlbi5sZW5ndGgpO1xuICAgICAgLy8gMm5kXG5cbiAgICAgIGNhc2UgJ2lvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVcblxuICAgICAgY2FzZSAnaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2lpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnaWlpaWlpJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2lpaWknOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnYSc6XG4gICAgICBjYXNlICdhYSc6XG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnYWFhYWEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5UGVyaW9kKGRheVBlcmlvZEVudW1WYWx1ZSwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIEFNLCBQTSwgbWlkbmlnaHQsIG5vb25cbiAgYjogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgaWYgKGhvdXJzID09PSAxMikge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPT09IDApIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubWlkbmlnaHQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGhvdXJzIC8gMTIgPj0gMSA/ICdwbScgOiAnYW0nO1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ2InOlxuICAgICAgY2FzZSAnYmInOlxuICAgICAgY2FzZSAnYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmJiJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBpbiB0aGUgbW9ybmluZywgaW4gdGhlIGFmdGVybm9vbiwgaW4gdGhlIGV2ZW5pbmcsIGF0IG5pZ2h0XG4gIEI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA+PSAxNykge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ldmVuaW5nO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uYWZ0ZXJub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gNCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5tb3JuaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5pZ2h0O1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ0InOlxuICAgICAgY2FzZSAnQkInOlxuICAgICAgY2FzZSAnQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnaG8nKSB7XG4gICAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcbiAgICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAxMjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5IKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0xMV1cbiAgSzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuXG4gICAgaWYgKHRva2VuID09PSAnS28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzEtMjRdXG4gIGs6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDI0O1xuXG4gICAgaWYgKHRva2VuID09PSAna28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnbW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ01pbnV0ZXMoKSwge1xuICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdzbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB7XG4gICAgICAgIHVuaXQ6ICdzZWNvbmQnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYCcrMDA6MDAnYCBvciBlcXVpdmFsZW50KVxuICB4OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcblxuICAgICAgY2FzZSAneHh4eCc6XG4gICAgICBjYXNlICd4eCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHh4YFxuXG4gICAgICBjYXNlICd4eHh4eCc6XG4gICAgICBjYXNlICd4eHgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKEdNVClcbiAgTzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICdPT09PJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdGlvbilcbiAgejogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICd6enp6JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3Iob3JpZ2luYWxEYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gIFQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBvcmlnaW5hbERhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVNob3J0KG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCk7XG4gIHZhciBtaW51dGVzID0gYWJzT2Zmc2V0ICUgNjA7XG5cbiAgaWYgKG1pbnV0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gc2lnbiArIFN0cmluZyhob3Vycyk7XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgaWYgKG9mZnNldCAlIDYwID09PSAwKSB7XG4gICAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICAgIHJldHVybiBzaWduICsgYWRkTGVhZGluZ1plcm9zKE1hdGguYWJzKG9mZnNldCkgLyA2MCwgMik7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCksIDIpO1xuICB2YXIgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImltcG9ydCB0b0RhdGUgZnJvbSAnLi4vLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tICcuLi9zdGFydE9mVVRDV2Vlay9pbmRleC5qcyc7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWtZZWFyIGZyb20gJy4uL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDV2VlayhkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSAnLi4vLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCBzdGFydE9mVVRDSVNPV2VlayBmcm9tICcuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qcyc7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWtZZWFyIGZyb20gJy4uL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qcyc7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gJy4uL3JlcXVpcmVkQXJncy9pbmRleC5qcyc7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENJU09XZWVrKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDSVNPV2VlayhkYXRlKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGF0ZSkuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSAnLi4vLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzJztcbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENEYXlPZlllYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mWWVhclRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICB2YXIgZGlmZmVyZW5jZSA9IHRpbWVzdGFtcCAtIHN0YXJ0T2ZZZWFyVGltZXN0YW1wO1xuICByZXR1cm4gTWF0aC5mbG9vcihkaWZmZXJlbmNlIC8gTUlMTElTRUNPTkRTX0lOX0RBWSkgKyAxO1xufSIsImZ1bmN0aW9uIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0aW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ3AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcHAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGF0ZVRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gcGF0dGVybi5tYXRjaCgvKFArKShwKyk/Lyk7XG4gIHZhciBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICB2YXIgdGltZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsyXTtcblxuICBpZiAoIXRpbWVQYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpO1xuICB9XG5cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuXG4gIHN3aXRjaCAoZGF0ZVBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBkYXRlVGltZUZvcm1hdC5yZXBsYWNlKCd7e2RhdGV9fScsIGRhdGVMb25nRm9ybWF0dGVyKGRhdGVQYXR0ZXJuLCBmb3JtYXRMb25nKSkucmVwbGFjZSgne3t0aW1lfX0nLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufVxuXG52YXIgbG9uZ0Zvcm1hdHRlcnMgPSB7XG4gIHA6IHRpbWVMb25nRm9ybWF0dGVyLFxuICBQOiBkYXRlVGltZUxvbmdGb3JtYXR0ZXJcbn07XG5leHBvcnQgZGVmYXVsdCBsb25nRm9ybWF0dGVyczsiLCJ2YXIgcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zID0gWydEJywgJ0REJ107XG52YXIgcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMgPSBbJ1lZJywgJ1lZWVknXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgaWYgKHRva2VuID09PSAnWVlZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdEJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnREQnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfVxufSIsImltcG9ydCBpc1ZhbGlkIGZyb20gJy4uL2lzVmFsaWQvaW5kZXguanMnO1xuaW1wb3J0IGRlZmF1bHRMb2NhbGUgZnJvbSAnLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzJztcbmltcG9ydCBzdWJNaWxsaXNlY29uZHMgZnJvbSAnLi4vc3ViTWlsbGlzZWNvbmRzL2luZGV4LmpzJztcbmltcG9ydCB0b0RhdGUgZnJvbSAnLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXR0ZXJzIGZyb20gJy4uL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanMnO1xuaW1wb3J0IGxvbmdGb3JtYXR0ZXJzIGZyb20gJy4uL19saWIvZm9ybWF0L2xvbmdGb3JtYXR0ZXJzL2luZGV4LmpzJztcbmltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gJy4uL19saWIvZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcy9pbmRleC5qcyc7XG5pbXBvcnQgeyBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuLCBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4sIHRocm93UHJvdGVjdGVkRXJyb3IgfSBmcm9tICcuLi9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qcyc7XG5pbXBvcnQgdG9JbnRlZ2VyIGZyb20gJy4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnOyAvLyBUaGlzIFJlZ0V4cCBjb25zaXN0cyBvZiB0aHJlZSBwYXJ0cyBzZXBhcmF0ZWQgYnkgYHxgOlxuLy8gLSBbeVlRcU1Md0lkRGVjaWhIS2ttc11vIG1hdGNoZXMgYW55IGF2YWlsYWJsZSBvcmRpbmFsIG51bWJlciB0b2tlblxuLy8gICAob25lIG9mIHRoZSBjZXJ0YWluIGxldHRlcnMgZm9sbG93ZWQgYnkgYG9gKVxuLy8gLSAoXFx3KVxcMSogbWF0Y2hlcyBhbnkgc2VxdWVuY2VzIG9mIHRoZSBzYW1lIGxldHRlclxuLy8gLSAnJyBtYXRjaGVzIHR3byBxdW90ZSBjaGFyYWN0ZXJzIGluIGEgcm93XG4vLyAtICcoJyd8W14nXSkrKCd8JCkgbWF0Y2hlcyBhbnl0aGluZyBzdXJyb3VuZGVkIGJ5IHR3byBxdW90ZSBjaGFyYWN0ZXJzICgnKSxcbi8vICAgZXhjZXB0IGEgc2luZ2xlIHF1b3RlIHN5bWJvbCwgd2hpY2ggZW5kcyB0aGUgc2VxdWVuY2UuXG4vLyAgIFR3byBxdW90ZSBjaGFyYWN0ZXJzIGRvIG5vdCBlbmQgdGhlIHNlcXVlbmNlLlxuLy8gICBJZiB0aGVyZSBpcyBubyBtYXRjaGluZyBzaW5nbGUgcXVvdGVcbi8vICAgdGhlbiB0aGUgc2VxdWVuY2Ugd2lsbCBjb250aW51ZSB1bnRpbCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcuXG4vLyAtIC4gbWF0Y2hlcyBhbnkgc2luZ2xlIGNoYXJhY3RlciB1bm1hdGNoZWQgYnkgcHJldmlvdXMgcGFydHMgb2YgdGhlIFJlZ0V4cHNcblxudmFyIGZvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvW3lZUXFNTHdJZERlY2loSEtrbXNdb3woXFx3KVxcMSp8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7IC8vIFRoaXMgUmVnRXhwIGNhdGNoZXMgc3ltYm9scyBlc2NhcGVkIGJ5IHF1b3RlcywgYW5kIGFsc29cbi8vIHNlcXVlbmNlcyBvZiBzeW1ib2xzIFAsIHAsIGFuZCB0aGUgY29tYmluYXRpb25zIGxpa2UgYFBQUFBQUFBwcHBwcGBcblxudmFyIGxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwID0gL1ArcCt8UCt8cCt8Jyd8JygnJ3xbXiddKSsoJ3wkKXwuL2c7XG52YXIgZXNjYXBlZFN0cmluZ1JlZ0V4cCA9IC9eJyhbXl0qPyknPyQvO1xudmFyIGRvdWJsZVF1b3RlUmVnRXhwID0gLycnL2c7XG52YXIgdW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAgPSAvW2EtekEtWl0vO1xuLyoqXG4gKiBAbmFtZSBmb3JtYXRcbiAqIEBjYXRlZ29yeSBDb21tb24gSGVscGVyc1xuICogQHN1bW1hcnkgRm9ybWF0IHRoZSBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogUmV0dXJuIHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmcgaW4gdGhlIGdpdmVuIGZvcm1hdC4gVGhlIHJlc3VsdCBtYXkgdmFyeSBieSBsb2NhbGUuXG4gKlxuICogPiDimqDvuI8gUGxlYXNlIG5vdGUgdGhhdCB0aGUgYGZvcm1hdGAgdG9rZW5zIGRpZmZlciBmcm9tIE1vbWVudC5qcyBhbmQgb3RoZXIgbGlicmFyaWVzLlxuICogPiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogVGhlIGNoYXJhY3RlcnMgd3JhcHBlZCBiZXR3ZWVuIHR3byBzaW5nbGUgcXVvdGVzIGNoYXJhY3RlcnMgKCcpIGFyZSBlc2NhcGVkLlxuICogVHdvIHNpbmdsZSBxdW90ZXMgaW4gYSByb3csIHdoZXRoZXIgaW5zaWRlIG9yIG91dHNpZGUgYSBxdW90ZWQgc2VxdWVuY2UsIHJlcHJlc2VudCBhICdyZWFsJyBzaW5nbGUgcXVvdGUuXG4gKiAoc2VlIHRoZSBsYXN0IGV4YW1wbGUpXG4gKlxuICogRm9ybWF0IG9mIHRoZSBzdHJpbmcgaXMgYmFzZWQgb24gVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZVxuICogd2l0aCBhIGZldyBhZGRpdGlvbnMgKHNlZSBub3RlIDcgYmVsb3cgdGhlIHRhYmxlKS5cbiAqXG4gKiBBY2NlcHRlZCBwYXR0ZXJuczpcbiAqIHwgVW5pdCAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBhdHRlcm4gfCBSZXN1bHQgZXhhbXBsZXMgICAgICAgICAgICAgICAgICAgfCBOb3RlcyB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tfFxuICogfCBFcmEgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRy4uR0dHICB8IEFELCBCQyAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0cgICAgfCBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdCAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHR0dHRyAgIHwgQSwgQiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBDYWxlbmRhciB5ZWFyICAgICAgICAgICAgICAgICAgIHwgeSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHlvICAgICAgfCA0NHRoLCAxc3QsIDB0aCwgMTd0aCAgICAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5ICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXl5eSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgIHwgWSAgICAgICB8IDQ0LCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlvICAgICAgfCA0NHRoLCAxc3QsIDE5MDB0aCwgMjAxN3RoICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWSAgICAgIHwgNDQsIDAxLCAwMCwgMTcgICAgICAgICAgICAgICAgICAgIHwgNSw4ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZICAgICB8IDA0NCwgMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVkgICAgfCAwMDQ0LCAwMDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVlZWSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBJU08gd2Vlay1udW1iZXJpbmcgeWVhciAgICAgICAgIHwgUiAgICAgICB8IC00MywgMCwgMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSICAgICAgfCAtNDMsIDAwLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlIgICAgIHwgLTA0MywgMDAwLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUiAgICB8IC0wMDQzLCAwMDAwLCAwMDAxLCAxOTAwLCAyMDE3ICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUlJSICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUsNyB8XG4gKiB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICAgfCB1ICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXUgICAgICB8IC00MywgMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dSAgICAgfCAtMDQzLCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1ICAgIHwgLTAwNDMsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1dXUgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSAgIHxcbiAqIHwgUXVhcnRlciAoZm9ybWF0dGluZykgICAgICAgICAgICB8IFEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRUVEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgUXVhcnRlciAoc3RhbmQtYWxvbmUpICAgICAgICAgICB8IHEgICAgICAgfCAxLCAyLCAzLCA0ICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxbyAgICAgIHwgMXN0LCAybmQsIDNyZCwgNHRoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXEgICAgICB8IDAxLCAwMiwgMDMsIDA0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcSAgICAgfCBRMSwgUTIsIFEzLCBRNCAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxICAgIHwgMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxcXEgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8IDQgICAgIHxcbiAqIHwgTW9udGggKGZvcm1hdHRpbmcpICAgICAgICAgICAgICB8IE0gICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU0gICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTSAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NTU0gICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTW9udGggKHN0YW5kLWFsb25lKSAgICAgICAgICAgICB8IEwgICAgICAgfCAxLCAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTJ0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTEwgICAgICB8IDAxLCAwMiwgLi4uLCAxMiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTCAgICAgfCBKYW4sIEZlYiwgLi4uLCBEZWMgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMICAgIHwgSmFudWFyeSwgRmVicnVhcnksIC4uLiwgRGVjZW1iZXIgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMTEwgICB8IEosIEYsIC4uLiwgRCAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTG9jYWwgd2VlayBvZiB5ZWFyICAgICAgICAgICAgICB8IHcgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3byAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgd3cgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIHdlZWsgb2YgeWVhciAgICAgICAgICAgICAgICB8IEkgICAgICAgfCAxLCAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgNTN0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSUkgICAgICB8IDAxLCAwMiwgLi4uLCA1MyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgRGF5IG9mIG1vbnRoICAgICAgICAgICAgICAgICAgICB8IGQgICAgICAgfCAxLCAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzFzdCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZGQgICAgICB8IDAxLCAwMiwgLi4uLCAzMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRGF5IG9mIHllYXIgICAgICAgICAgICAgICAgICAgICB8IEQgICAgICAgfCAxLCAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgICAgfCA5ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMzY1dGgsIDM2NnRoICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREQgICAgICB8IDAxLCAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERERCAgICAgfCAwMDEsIDAwMiwgLi4uLCAzNjUsIDM2NiAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBEREREICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBEYXkgb2Ygd2VlayAoZm9ybWF0dGluZykgICAgICAgIHwgRS4uRUVFICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUUgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRUVFICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU3UsIFNhICAgICAgICB8ICAgICAgIHxcbiAqIHwgSVNPIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICB8IGkgICAgICAgfCAxLCAyLCAzLCAuLi4sIDcgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgN3RoICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWkgICAgICB8IDAxLCAwMiwgLi4uLCAwNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWkgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWlpaSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFN1LCBTYSAgICAgICAgfCA3ICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgfCBlICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZW8gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWUgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlZWUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTdSwgU2EgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCBkYXkgb2Ygd2VlayAoc3RhbmQtYWxvbmUpIHwgYyAgICAgICB8IDIsIDMsIDQsIC4uLiwgMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNvICAgICAgfCAybmQsIDNyZCwgLi4uLCAxc3QgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjYyAgICAgIHwgMDIsIDAzLCAuLi4sIDAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2MgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjYyAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjY2NjICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU3UsIFNhICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNICAgICAgICAgICAgICAgICAgICAgICAgICB8IGEuLmFhYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiYiAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmJiICAgIHwgYS5tLiwgcC5tLiwgbm9vbiwgbWlkbmlnaHQgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYmIgICB8IGEsIHAsIG4sIG1pICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRmxleGlibGUgZGF5IHBlcmlvZCAgICAgICAgICAgICB8IEIuLkJCQiAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBCQkJCICAgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQkIgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0xMl0gICAgICAgICAgICAgICAgICAgICB8IGggICAgICAgfCAxLCAyLCAuLi4sIDExLCAxMiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBobyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMTJ0aCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaGggICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0yM10gICAgICAgICAgICAgICAgICAgICB8IEggICAgICAgfCAwLCAxLCAyLCAuLi4sIDIzICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBIbyAgICAgIHwgMHRoLCAxc3QsIDJuZCwgLi4uLCAyM3JkICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSEggICAgICB8IDAwLCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMC0xMV0gICAgICAgICAgICAgICAgICAgICB8IEsgICAgICAgfCAxLCAyLCAuLi4sIDExLCAwICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBLbyAgICAgIHwgMXN0LCAybmQsIC4uLiwgMTF0aCwgMHRoICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS0sgICAgICB8IDAxLCAwMiwgLi4uLCAxMSwgMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgSG91ciBbMS0yNF0gICAgICAgICAgICAgICAgICAgICB8IGsgICAgICAgfCAyNCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBrbyAgICAgIHwgMjR0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga2sgICAgICB8IDI0LCAwMSwgMDIsIC4uLiwgMjMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgTWludXRlICAgICAgICAgICAgICAgICAgICAgICAgICB8IG0gICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW0gICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgU2Vjb25kICAgICAgICAgICAgICAgICAgICAgICAgICB8IHMgICAgICAgfCAwLCAxLCAuLi4sIDU5ICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzbyAgICAgIHwgMHRoLCAxc3QsIC4uLiwgNTl0aCAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc3MgICAgICB8IDAwLCAwMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgRnJhY3Rpb24gb2Ygc2Vjb25kICAgICAgICAgICAgICB8IFMgICAgICAgfCAwLCAxLCAuLi4sIDkgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTUyAgICAgIHwgMDAsIDAxLCAuLi4sIDk5ICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1NTICAgICB8IDAwMCwgMDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTU1MgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3LyBaKSAgICAgICAgfCBYICAgICAgIHwgLTA4LCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFggICAgICB8IC0wODAwLCArMDUzMCwgWiAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWCAgICAgfCAtMDg6MDAsICswNTozMCwgWiAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFhYICAgIHwgLTA4MDAsICswNTMwLCBaLCArMTIzNDU2ICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWFggICB8IC0wODowMCwgKzA1OjMwLCBaLCArMTI6MzQ6NTYgICAgICB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKElTTy04NjAxIHcvbyBaKSAgICAgICB8IHggICAgICAgfCAtMDgsICswNTMwLCArMDAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eCAgICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4ICAgICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAgICAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eHggICAgfCAtMDgwMCwgKzA1MzAsICswMDAwLCArMTIzNDU2ICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4eCAgIHwgLTA4OjAwLCArMDU6MzAsICswMDowMCwgKzEyOjM0OjU2IHwgICAgICAgfFxuICogfCBUaW1lem9uZSAoR01UKSAgICAgICAgICAgICAgICAgIHwgTy4uLk9PTyB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE9PT08gICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyICAgICB8XG4gKiB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSAgfCB6Li4uenp6IHwgR01ULTgsIEdNVCs1OjMwLCBHTVQrMCAgICAgICAgICAgIHwgNiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgenp6eiAgICB8IEdNVC0wODowMCwgR01UKzA1OjMwLCBHTVQrMDA6MDAgICB8IDIsNiAgIHxcbiAqIHwgU2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICAgICAgICB8IHQgICAgICAgfCA1MTI5Njk1MjAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB0dCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBNaWxsaXNlY29uZHMgdGltZXN0YW1wICAgICAgICAgIHwgVCAgICAgICB8IDUxMjk2OTUyMDkwMCAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFRUICAgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDcgICB8XG4gKiB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICAgfCBQICAgICAgIHwgMDUvMjkvMTQ1MyAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFAgICAgICB8IE1heSAyOSwgMTQ1MyAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUCAgICAgfCBNYXkgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQICAgIHwgU3VuZGF5LCBNYXkgMjl0aCwgMTQ1MyAgICAgICAgICAgIHwgMiw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCB0aW1lICAgICAgICAgICAgIHwgcCAgICAgICB8IDEyOjAwIEFNICAgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwICAgICAgfCAxMjowMDowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcHAgICAgIHwgMTI6MDA6MDAgQU0gR01UKzIgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwcCAgICB8IDEyOjAwOjAwIEFNIEdNVCswMjowMCAgICAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgQ29tYmluYXRpb24gb2YgZGF0ZSBhbmQgdGltZSAgICB8IFBwICAgICAgfCAwNS8yOS8xNDUzLCAxMjowMCBBTSAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUHBwICAgIHwgTWF5IDI5LCAxNDUzLCAxMjowMDowMCBBTSAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQcHBwICB8IE1heSAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUFBwcHBwfCBTdW5kYXksIE1heSAyOXRoLCAxNDUzIGF0IC4uLiAgICAgfCAyLDcgICB8XG4gKiBOb3RlczpcbiAqIDEuIFwiRm9ybWF0dGluZ1wiIHVuaXRzIChlLmcuIGZvcm1hdHRpbmcgcXVhcnRlcikgaW4gdGhlIGRlZmF1bHQgZW4tVVMgbG9jYWxlXG4gKiAgICBhcmUgdGhlIHNhbWUgYXMgXCJzdGFuZC1hbG9uZVwiIHVuaXRzLCBidXQgYXJlIGRpZmZlcmVudCBpbiBzb21lIGxhbmd1YWdlcy5cbiAqICAgIFwiRm9ybWF0dGluZ1wiIHVuaXRzIGFyZSBkZWNsaW5lZCBhY2NvcmRpbmcgdG8gdGhlIHJ1bGVzIG9mIHRoZSBsYW5ndWFnZVxuICogICAgaW4gdGhlIGNvbnRleHQgb2YgYSBkYXRlLiBcIlN0YW5kLWFsb25lXCIgdW5pdHMgYXJlIGFsd2F5cyBub21pbmF0aXZlIHNpbmd1bGFyOlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTExMTCcsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWQnYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnZG8gTU1NTScsIHtsb2NhbGU6IGNzfSkgLy89PiAnNi4gbGlzdG9wYWR1J2BcbiAqXG4gKiAyLiBBbnkgc2VxdWVuY2Ugb2YgdGhlIGlkZW50aWNhbCBsZXR0ZXJzIGlzIGEgcGF0dGVybiwgdW5sZXNzIGl0IGlzIGVzY2FwZWQgYnlcbiAqICAgIHRoZSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVycyAoc2VlIGJlbG93KS5cbiAqICAgIElmIHRoZSBzZXF1ZW5jZSBpcyBsb25nZXIgdGhhbiBsaXN0ZWQgaW4gdGFibGUgKGUuZy4gYEVFRUVFRUVFRUVFYClcbiAqICAgIHRoZSBvdXRwdXQgd2lsbCBiZSB0aGUgc2FtZSBhcyBkZWZhdWx0IHBhdHRlcm4gZm9yIHRoaXMgdW5pdCwgdXN1YWxseVxuICogICAgdGhlIGxvbmdlc3Qgb25lIChpbiBjYXNlIG9mIElTTyB3ZWVrZGF5cywgYEVFRUVgKS4gRGVmYXVsdCBwYXR0ZXJucyBmb3IgdW5pdHNcbiAqICAgIGFyZSBtYXJrZWQgd2l0aCBcIjJcIiBpbiB0aGUgbGFzdCBjb2x1bW4gb2YgdGhlIHRhYmxlLlxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NJykgLy89PiAnTm92J2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NTScpIC8vPT4gJ04nYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAzLiBTb21lIHBhdHRlcm5zIGNvdWxkIGJlIHVubGltaXRlZCBsZW5ndGggKHN1Y2ggYXMgYHl5eXl5eXl5YCkuXG4gKiAgICBUaGUgb3V0cHV0IHdpbGwgYmUgcGFkZGVkIHdpdGggemVyb3MgdG8gbWF0Y2ggdGhlIGxlbmd0aCBvZiB0aGUgcGF0dGVybi5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ3l5eXl5eXl5JykgLy89PiAnMDAwMDIwMTcnYFxuICpcbiAqIDQuIGBRUVFRUWAgYW5kIGBxcXFxcWAgY291bGQgYmUgbm90IHN0cmljdGx5IG51bWVyaWNhbCBpbiBzb21lIGxvY2FsZXMuXG4gKiAgICBUaGVzZSB0b2tlbnMgcmVwcmVzZW50IHRoZSBzaG9ydGVzdCBmb3JtIG9mIHRoZSBxdWFydGVyLlxuICpcbiAqIDUuIFRoZSBtYWluIGRpZmZlcmVuY2UgYmV0d2VlbiBgeWAgYW5kIGB1YCBwYXR0ZXJucyBhcmUgQi5DLiB5ZWFyczpcbiAqXG4gKiAgICB8IFllYXIgfCBgeWAgfCBgdWAgfFxuICogICAgfC0tLS0tLXwtLS0tLXwtLS0tLXxcbiAqICAgIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gKiAgICB8IEJDIDEgfCAgIDEgfCAgIDAgfFxuICogICAgfCBCQyAyIHwgICAyIHwgIC0xIHxcbiAqXG4gKiAgICBBbHNvIGB5eWAgYWx3YXlzIHJldHVybnMgdGhlIGxhc3QgdHdvIGRpZ2l0cyBvZiBhIHllYXIsXG4gKiAgICB3aGlsZSBgdXVgIHBhZHMgc2luZ2xlIGRpZ2l0IHllYXJzIHRvIDIgY2hhcmFjdGVycyBhbmQgcmV0dXJucyBvdGhlciB5ZWFycyB1bmNoYW5nZWQ6XG4gKlxuICogICAgfCBZZWFyIHwgYHl5YCB8IGB1dWAgfFxuICogICAgfC0tLS0tLXwtLS0tLS18LS0tLS0tfFxuICogICAgfCAxICAgIHwgICAwMSB8ICAgMDEgfFxuICogICAgfCAxNCAgIHwgICAxNCB8ICAgMTQgfFxuICogICAgfCAzNzYgIHwgICA3NiB8ICAzNzYgfFxuICogICAgfCAxNDUzIHwgICA1MyB8IDE0NTMgfFxuICpcbiAqICAgIFRoZSBzYW1lIGRpZmZlcmVuY2UgaXMgdHJ1ZSBmb3IgbG9jYWwgYW5kIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFycyAoYFlgIGFuZCBgUmApLFxuICogICAgZXhjZXB0IGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXJzIGFyZSBkZXBlbmRlbnQgb24gYG9wdGlvbnMud2Vla1N0YXJ0c09uYFxuICogICAgYW5kIGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgKGNvbXBhcmUgW2dldElTT1dlZWtZZWFyXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL2dldElTT1dlZWtZZWFyfVxuICogICAgYW5kIFtnZXRXZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRXZWVrWWVhcn0pLlxuICpcbiAqIDYuIFNwZWNpZmljIG5vbi1sb2NhdGlvbiB0aW1lem9uZXMgYXJlIGN1cnJlbnRseSB1bmF2YWlsYWJsZSBpbiBgZGF0ZS1mbnNgLFxuICogICAgc28gcmlnaHQgbm93IHRoZXNlIHRva2VucyBmYWxsIGJhY2sgdG8gR01UIHRpbWV6b25lcy5cbiAqXG4gKiA3LiBUaGVzZSBwYXR0ZXJucyBhcmUgbm90IGluIHRoZSBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiAgICAtIGBpYDogSVNPIGRheSBvZiB3ZWVrXG4gKiAgICAtIGBJYDogSVNPIHdlZWsgb2YgeWVhclxuICogICAgLSBgUmA6IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gKiAgICAtIGB0YDogc2Vjb25kcyB0aW1lc3RhbXBcbiAqICAgIC0gYFRgOiBtaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBvYDogb3JkaW5hbCBudW1iZXIgbW9kaWZpZXJcbiAqICAgIC0gYFBgOiBsb25nIGxvY2FsaXplZCBkYXRlXG4gKiAgICAtIGBwYDogbG9uZyBsb2NhbGl6ZWQgdGltZVxuICpcbiAqIDguIGBZWWAgYW5kIGBZWVlZYCB0b2tlbnMgcmVwcmVzZW50IHdlZWstbnVtYmVyaW5nIHllYXJzIGJ1dCB0aGV5IGFyZSBvZnRlbiBjb25mdXNlZCB3aXRoIHllYXJzLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zYCB0byB1c2UgdGhlbS4gU2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICpcbiAqIDkuIGBEYCBhbmQgYEREYCB0b2tlbnMgcmVwcmVzZW50IGRheXMgb2YgdGhlIHllYXIgYnV0IHRoZXkgYXJlIG9mdGhlbiBjb25mdXNlZCB3aXRoIGRheXMgb2YgdGhlIG1vbnRoLlxuICogICAgWW91IHNob3VsZCBlbmFibGUgYG9wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gVGhlIHNlY29uZCBhcmd1bWVudCBpcyBub3cgcmVxdWlyZWQgZm9yIHRoZSBzYWtlIG9mIGV4cGxpY2l0bmVzcy5cbiAqXG4gKiAgIGBgYGphdmFzY3JpcHRcbiAqICAgLy8gQmVmb3JlIHYyLjAuMFxuICogICBmb3JtYXQobmV3IERhdGUoMjAxNiwgMCwgMSkpXG4gKlxuICogICAvLyB2Mi4wLjAgb253YXJkXG4gKiAgIGZvcm1hdChuZXcgRGF0ZSgyMDE2LCAwLCAxKSwgXCJ5eXl5LU1NLWRkJ1QnSEg6bW06c3MuU1NTeHh4XCIpXG4gKiAgIGBgYFxuICpcbiAqIC0gTmV3IGZvcm1hdCBzdHJpbmcgQVBJIGZvciBgZm9ybWF0YCBmdW5jdGlvblxuICogICB3aGljaCBpcyBiYXNlZCBvbiBbVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1XShodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlKS5cbiAqICAgU2VlIFt0aGlzIHBvc3RdKGh0dHBzOi8vYmxvZy5kYXRlLWZucy5vcmcvcG9zdC91bmljb2RlLXRva2Vucy1pbi1kYXRlLWZucy12Mi1zcmVhdHlraTkxamcpIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogLSBDaGFyYWN0ZXJzIGFyZSBub3cgZXNjYXBlZCB1c2luZyBzaW5nbGUgcXVvdGUgc3ltYm9scyAoYCdgKSBpbnN0ZWFkIG9mIHNxdWFyZSBicmFja2V0cy5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIG9yaWdpbmFsIGRhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBmb3JtYXQgLSB0aGUgc3RyaW5nIG9mIHRva2Vuc1xuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXSAtIGFuIG9iamVjdCB3aXRoIG9wdGlvbnMuXG4gKiBAcGFyYW0ge0xvY2FsZX0gW29wdGlvbnMubG9jYWxlPWRlZmF1bHRMb2NhbGVdIC0gdGhlIGxvY2FsZSBvYmplY3QuIFNlZSBbTG9jYWxlXXtAbGluayBodHRwczovL2RhdGUtZm5zLm9yZy9kb2NzL0xvY2FsZX1cbiAqIEBwYXJhbSB7MHwxfDJ8M3w0fDV8Nn0gW29wdGlvbnMud2Vla1N0YXJ0c09uPTBdIC0gdGhlIGluZGV4IG9mIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsgKDAgLSBTdW5kYXkpXG4gKiBAcGFyYW0ge051bWJlcn0gW29wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlPTFdIC0gdGhlIGRheSBvZiBKYW51YXJ5LCB3aGljaCBpc1xuICogQHBhcmFtIHtCb29sZWFufSBbb3B0aW9ucy51c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSB3ZWVrLW51bWJlcmluZyB5ZWFyIHRva2VucyBgWVlgIGFuZCBgWVlZWWA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbERheU9mWWVhclRva2Vucz1mYWxzZV0gLSBpZiB0cnVlLCBhbGxvd3MgdXNhZ2Ugb2YgdGhlIGRheSBvZiB5ZWFyIHRva2VucyBgRGAgYW5kIGBERGA7XG4gKiAgIHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHRoZSBmb3JtYXR0ZWQgZGF0ZSBzdHJpbmdcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBkYXRlYCBtdXN0IG5vdCBiZSBJbnZhbGlkIERhdGVcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBsb2NhbGl6ZWAgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmxvY2FsZWAgbXVzdCBjb250YWluIGBmb3JtYXRMb25nYCBwcm9wZXJ0eVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMud2Vla1N0YXJ0c09uYCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNlxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gYG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlYCBtdXN0IGJlIGJldHdlZW4gMSBhbmQgN1xuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eXl5YCBpbnN0ZWFkIG9mIGBZWVlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIGZvciBmb3JtYXR0aW5nIHllYXJzIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRgIGluc3RlYWQgb2YgYERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSB1c2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGZvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlclxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMTEgRmVicnVhcnkgMjAxNCBpbiBtaWRkbGUtZW5kaWFuIGZvcm1hdDpcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgMSwgMTEpLCAnTU0vZGQveXl5eScpXG4gKiAvLz0+ICcwMi8xMS8yMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSZXByZXNlbnQgMiBKdWx5IDIwMTQgaW4gRXNwZXJhbnRvOlxuICogaW1wb3J0IHsgZW9Mb2NhbGUgfSBmcm9tICdkYXRlLWZucy9sb2NhbGUvZW8nXG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDYsIDIpLCBcImRvICdkZScgTU1NTSB5eXl5XCIsIHtcbiAqICAgbG9jYWxlOiBlb0xvY2FsZVxuICogfSlcbiAqIC8vPT4gJzItYSBkZSBqdWxpbyAyMDE0J1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBFc2NhcGUgc3RyaW5nIGJ5IHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzOlxuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyLCAxNSksIFwiaCAnbycnY2xvY2snXCIpXG4gKiAvLz0+IFwiMyBvJ2Nsb2NrXCJcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXQoZGlydHlEYXRlLCBkaXJ0eUZvcm1hdFN0ciwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZm9ybWF0U3RyID0gU3RyaW5nKGRpcnR5Rm9ybWF0U3RyKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZSB8fCBkZWZhdWx0TG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlO1xuICB2YXIgZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gMSA6IHRvSW50ZWdlcihsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICB2YXIgZmlyc3RXZWVrQ29udGFpbnNEYXRlID0gb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgOiB0b0ludGVnZXIob3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGUpOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDEgYW5kIDcgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA+PSAxICYmIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA8PSA3KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdmaXJzdFdlZWtDb250YWluc0RhdGUgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDcgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIHZhciBsb2NhbGVXZWVrU3RhcnRzT24gPSBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy53ZWVrU3RhcnRzT247XG4gIHZhciBkZWZhdWx0V2Vla1N0YXJ0c09uID0gbG9jYWxlV2Vla1N0YXJ0c09uID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6IHRvSW50ZWdlcihvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUubG9jYWxpemUpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBsb2NhbGl6ZSBwcm9wZXJ0eScpO1xuICB9XG5cbiAgaWYgKCFsb2NhbGUuZm9ybWF0TG9uZykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdsb2NhbGUgbXVzdCBjb250YWluIGZvcm1hdExvbmcgcHJvcGVydHknKTtcbiAgfVxuXG4gIHZhciBvcmlnaW5hbERhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcblxuICBpZiAoIWlzVmFsaWQob3JpZ2luYWxEYXRlKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcbiAgfSAvLyBDb252ZXJ0IHRoZSBkYXRlIGluIHN5c3RlbSB0aW1lem9uZSB0byB0aGUgc2FtZSBkYXRlIGluIFVUQyswMDowMCB0aW1lem9uZS5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQgd2hlbiBVVEMgZnVuY3Rpb25zIHdpbGwgYmUgaW1wbGVtZW50ZWQsIGxvY2FsZXMgd2lsbCBiZSBjb21wYXRpYmxlIHdpdGggdGhlbS5cbiAgLy8gU2VlIGFuIGlzc3VlIGFib3V0IFVUQyBmdW5jdGlvbnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cblxuICB2YXIgdGltZXpvbmVPZmZzZXQgPSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSk7XG4gIHZhciB1dGNEYXRlID0gc3ViTWlsbGlzZWNvbmRzKG9yaWdpbmFsRGF0ZSwgdGltZXpvbmVPZmZzZXQpO1xuICB2YXIgZm9ybWF0dGVyT3B0aW9ucyA9IHtcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSxcbiAgICB3ZWVrU3RhcnRzT246IHdlZWtTdGFydHNPbixcbiAgICBsb2NhbGU6IGxvY2FsZSxcbiAgICBfb3JpZ2luYWxEYXRlOiBvcmlnaW5hbERhdGVcbiAgfTtcbiAgdmFyIHJlc3VsdCA9IGZvcm1hdFN0ci5tYXRjaChsb25nRm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCkubWFwKGZ1bmN0aW9uIChzdWJzdHJpbmcpIHtcbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09ICdwJyB8fCBmaXJzdENoYXJhY3RlciA9PT0gJ1AnKSB7XG4gICAgICB2YXIgbG9uZ0Zvcm1hdHRlciA9IGxvbmdGb3JtYXR0ZXJzW2ZpcnN0Q2hhcmFjdGVyXTtcbiAgICAgIHJldHVybiBsb25nRm9ybWF0dGVyKHN1YnN0cmluZywgbG9jYWxlLmZvcm1hdExvbmcsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzdWJzdHJpbmc7XG4gIH0pLmpvaW4oJycpLm1hdGNoKGZvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgLy8gUmVwbGFjZSB0d28gc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgd2l0aCBvbmUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlclxuICAgIGlmIChzdWJzdHJpbmcgPT09IFwiJydcIikge1xuICAgICAgcmV0dXJuIFwiJ1wiO1xuICAgIH1cblxuICAgIHZhciBmaXJzdENoYXJhY3RlciA9IHN1YnN0cmluZ1swXTtcblxuICAgIGlmIChmaXJzdENoYXJhY3RlciA9PT0gXCInXCIpIHtcbiAgICAgIHJldHVybiBjbGVhbkVzY2FwZWRTdHJpbmcoc3Vic3RyaW5nKTtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGVyID0gZm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG5cbiAgICBpZiAoZm9ybWF0dGVyKSB7XG4gICAgICBpZiAoIW9wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zICYmIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgZGlydHlEYXRlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnMgJiYgaXNQcm90ZWN0ZWREYXlPZlllYXJUb2tlbihzdWJzdHJpbmcpKSB7XG4gICAgICAgIHRocm93UHJvdGVjdGVkRXJyb3Ioc3Vic3RyaW5nLCBkaXJ0eUZvcm1hdFN0ciwgZGlydHlEYXRlKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZvcm1hdHRlcih1dGNEYXRlLCBzdWJzdHJpbmcsIGxvY2FsZS5sb2NhbGl6ZSwgZm9ybWF0dGVyT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyLm1hdGNoKHVuZXNjYXBlZExhdGluQ2hhcmFjdGVyUmVnRXhwKSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0Zvcm1hdCBzdHJpbmcgY29udGFpbnMgYW4gdW5lc2NhcGVkIGxhdGluIGFscGhhYmV0IGNoYXJhY3RlciBgJyArIGZpcnN0Q2hhcmFjdGVyICsgJ2AnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY2xlYW5Fc2NhcGVkU3RyaW5nKGlucHV0KSB7XG4gIHJldHVybiBpbnB1dC5tYXRjaChlc2NhcGVkU3RyaW5nUmVnRXhwKVsxXS5yZXBsYWNlKGRvdWJsZVF1b3RlUmVnRXhwLCBcIidcIik7XG59IiwiaW1wb3J0IHsgZm9ybWF0IH0gZnJvbSAnZGF0ZS1mbnMnO1xuZXhwb3J0IHZhciBnZXRDdXJyZW50VGltZXN0YW1wID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmb3JtYXQobmV3IERhdGUoKSwgXCJ5eXl5LU1NLWRkJ1QnSEg6bW06c3MuU1NTeHh4XCIpO1xufTtcbnZhciBnZXROb3RpZmljYXRpb25LZXkgPSBmdW5jdGlvbiAoaWQpIHsgcmV0dXJuIFwibm90aWZpY2F0aW9uflwiICsgaWQ7IH07XG5leHBvcnQgdmFyIGdldE5vdGlmaWNhdGlvbiA9IGZ1bmN0aW9uIChpZCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoZ2V0Tm90aWZpY2F0aW9uS2V5KGlkKSwgZnVuY3Rpb24gKGl0ZW1zKSB7XG4gICAgICAgICAgICByZXNvbHZlKGl0ZW1zW2dldE5vdGlmaWNhdGlvbktleShpZCldKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuZXhwb3J0IHZhciBzZXROb3RpZmljYXRpb24gPSBmdW5jdGlvbiAoaWQsIHZhbHVlKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KChfYSA9IHt9LCBfYVtnZXROb3RpZmljYXRpb25LZXkoaWQpXSA9IHZhbHVlLCBfYSksIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG4vKipcbiAqIFRoaXMgaXMgYSBoZWxwZXIgZnVuY3Rpb24gZm9yIGdldHRpbmcgdmFsdWVzIGZyb20gcGFyYW1ldGVyL29wdGlvbnNcbiAqIG9iamVjdHMuXG4gKlxuICogQHBhcmFtIGFyZ3MgVGhlIG9iamVjdCB3ZSBhcmUgZXh0cmFjdGluZyB2YWx1ZXMgZnJvbVxuICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHdlIGFyZSBnZXR0aW5nLlxuICogQHBhcmFtIGRlZmF1bHRWYWx1ZSBBbiBvcHRpb25hbCB2YWx1ZSB0byByZXR1cm4gaWYgdGhlIHByb3BlcnR5IGlzIG1pc3NpbmdcbiAqIGZyb20gdGhlIG9iamVjdC4gSWYgdGhpcyBpcyBub3Qgc3BlY2lmaWVkIGFuZCB0aGUgcHJvcGVydHkgaXMgbWlzc2luZywgYW5cbiAqIGVycm9yIHdpbGwgYmUgdGhyb3duLlxuICovXG5mdW5jdGlvbiBnZXRBcmcoYUFyZ3MsIGFOYW1lLCBhRGVmYXVsdFZhbHVlKSB7XG4gIGlmIChhTmFtZSBpbiBhQXJncykge1xuICAgIHJldHVybiBhQXJnc1thTmFtZV07XG4gIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMykge1xuICAgIHJldHVybiBhRGVmYXVsdFZhbHVlO1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignXCInICsgYU5hbWUgKyAnXCIgaXMgYSByZXF1aXJlZCBhcmd1bWVudC4nKTtcbiAgfVxufVxuZXhwb3J0cy5nZXRBcmcgPSBnZXRBcmc7XG5cbnZhciB1cmxSZWdleHAgPSAvXig/OihbXFx3K1xcLS5dKyk6KT9cXC9cXC8oPzooXFx3KzpcXHcrKUApPyhbXFx3Li1dKikoPzo6KFxcZCspKT8oLiopJC87XG52YXIgZGF0YVVybFJlZ2V4cCA9IC9eZGF0YTouK1xcLC4rJC87XG5cbmZ1bmN0aW9uIHVybFBhcnNlKGFVcmwpIHtcbiAgdmFyIG1hdGNoID0gYVVybC5tYXRjaCh1cmxSZWdleHApO1xuICBpZiAoIW1hdGNoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBzY2hlbWU6IG1hdGNoWzFdLFxuICAgIGF1dGg6IG1hdGNoWzJdLFxuICAgIGhvc3Q6IG1hdGNoWzNdLFxuICAgIHBvcnQ6IG1hdGNoWzRdLFxuICAgIHBhdGg6IG1hdGNoWzVdXG4gIH07XG59XG5leHBvcnRzLnVybFBhcnNlID0gdXJsUGFyc2U7XG5cbmZ1bmN0aW9uIHVybEdlbmVyYXRlKGFQYXJzZWRVcmwpIHtcbiAgdmFyIHVybCA9ICcnO1xuICBpZiAoYVBhcnNlZFVybC5zY2hlbWUpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5zY2hlbWUgKyAnOic7XG4gIH1cbiAgdXJsICs9ICcvLyc7XG4gIGlmIChhUGFyc2VkVXJsLmF1dGgpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5hdXRoICsgJ0AnO1xuICB9XG4gIGlmIChhUGFyc2VkVXJsLmhvc3QpIHtcbiAgICB1cmwgKz0gYVBhcnNlZFVybC5ob3N0O1xuICB9XG4gIGlmIChhUGFyc2VkVXJsLnBvcnQpIHtcbiAgICB1cmwgKz0gXCI6XCIgKyBhUGFyc2VkVXJsLnBvcnRcbiAgfVxuICBpZiAoYVBhcnNlZFVybC5wYXRoKSB7XG4gICAgdXJsICs9IGFQYXJzZWRVcmwucGF0aDtcbiAgfVxuICByZXR1cm4gdXJsO1xufVxuZXhwb3J0cy51cmxHZW5lcmF0ZSA9IHVybEdlbmVyYXRlO1xuXG4vKipcbiAqIE5vcm1hbGl6ZXMgYSBwYXRoLCBvciB0aGUgcGF0aCBwb3J0aW9uIG9mIGEgVVJMOlxuICpcbiAqIC0gUmVwbGFjZXMgY29uc2VjdXRpdmUgc2xhc2hlcyB3aXRoIG9uZSBzbGFzaC5cbiAqIC0gUmVtb3ZlcyB1bm5lY2Vzc2FyeSAnLicgcGFydHMuXG4gKiAtIFJlbW92ZXMgdW5uZWNlc3NhcnkgJzxkaXI+Ly4uJyBwYXJ0cy5cbiAqXG4gKiBCYXNlZCBvbiBjb2RlIGluIHRoZSBOb2RlLmpzICdwYXRoJyBjb3JlIG1vZHVsZS5cbiAqXG4gKiBAcGFyYW0gYVBhdGggVGhlIHBhdGggb3IgdXJsIHRvIG5vcm1hbGl6ZS5cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplKGFQYXRoKSB7XG4gIHZhciBwYXRoID0gYVBhdGg7XG4gIHZhciB1cmwgPSB1cmxQYXJzZShhUGF0aCk7XG4gIGlmICh1cmwpIHtcbiAgICBpZiAoIXVybC5wYXRoKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuICAgIHBhdGggPSB1cmwucGF0aDtcbiAgfVxuICB2YXIgaXNBYnNvbHV0ZSA9IGV4cG9ydHMuaXNBYnNvbHV0ZShwYXRoKTtcblxuICB2YXIgcGFydHMgPSBwYXRoLnNwbGl0KC9cXC8rLyk7XG4gIGZvciAodmFyIHBhcnQsIHVwID0gMCwgaSA9IHBhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgcGFydCA9IHBhcnRzW2ldO1xuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCA+IDApIHtcbiAgICAgIGlmIChwYXJ0ID09PSAnJykge1xuICAgICAgICAvLyBUaGUgZmlyc3QgcGFydCBpcyBibGFuayBpZiB0aGUgcGF0aCBpcyBhYnNvbHV0ZS4gVHJ5aW5nIHRvIGdvXG4gICAgICAgIC8vIGFib3ZlIHRoZSByb290IGlzIGEgbm8tb3AuIFRoZXJlZm9yZSB3ZSBjYW4gcmVtb3ZlIGFsbCAnLi4nIHBhcnRzXG4gICAgICAgIC8vIGRpcmVjdGx5IGFmdGVyIHRoZSByb290LlxuICAgICAgICBwYXJ0cy5zcGxpY2UoaSArIDEsIHVwKTtcbiAgICAgICAgdXAgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFydHMuc3BsaWNlKGksIDIpO1xuICAgICAgICB1cC0tO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBwYXRoID0gcGFydHMuam9pbignLycpO1xuXG4gIGlmIChwYXRoID09PSAnJykge1xuICAgIHBhdGggPSBpc0Fic29sdXRlID8gJy8nIDogJy4nO1xuICB9XG5cbiAgaWYgKHVybCkge1xuICAgIHVybC5wYXRoID0gcGF0aDtcbiAgICByZXR1cm4gdXJsR2VuZXJhdGUodXJsKTtcbiAgfVxuICByZXR1cm4gcGF0aDtcbn1cbmV4cG9ydHMubm9ybWFsaXplID0gbm9ybWFsaXplO1xuXG4vKipcbiAqIEpvaW5zIHR3byBwYXRocy9VUkxzLlxuICpcbiAqIEBwYXJhbSBhUm9vdCBUaGUgcm9vdCBwYXRoIG9yIFVSTC5cbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciBVUkwgdG8gYmUgam9pbmVkIHdpdGggdGhlIHJvb3QuXG4gKlxuICogLSBJZiBhUGF0aCBpcyBhIFVSTCBvciBhIGRhdGEgVVJJLCBhUGF0aCBpcyByZXR1cm5lZCwgdW5sZXNzIGFQYXRoIGlzIGFcbiAqICAgc2NoZW1lLXJlbGF0aXZlIFVSTDogVGhlbiB0aGUgc2NoZW1lIG9mIGFSb290LCBpZiBhbnksIGlzIHByZXBlbmRlZFxuICogICBmaXJzdC5cbiAqIC0gT3RoZXJ3aXNlIGFQYXRoIGlzIGEgcGF0aC4gSWYgYVJvb3QgaXMgYSBVUkwsIHRoZW4gaXRzIHBhdGggcG9ydGlvblxuICogICBpcyB1cGRhdGVkIHdpdGggdGhlIHJlc3VsdCBhbmQgYVJvb3QgaXMgcmV0dXJuZWQuIE90aGVyd2lzZSB0aGUgcmVzdWx0XG4gKiAgIGlzIHJldHVybmVkLlxuICogICAtIElmIGFQYXRoIGlzIGFic29sdXRlLCB0aGUgcmVzdWx0IGlzIGFQYXRoLlxuICogICAtIE90aGVyd2lzZSB0aGUgdHdvIHBhdGhzIGFyZSBqb2luZWQgd2l0aCBhIHNsYXNoLlxuICogLSBKb2luaW5nIGZvciBleGFtcGxlICdodHRwOi8vJyBhbmQgJ3d3dy5leGFtcGxlLmNvbScgaXMgYWxzbyBzdXBwb3J0ZWQuXG4gKi9cbmZ1bmN0aW9uIGpvaW4oYVJvb3QsIGFQYXRoKSB7XG4gIGlmIChhUm9vdCA9PT0gXCJcIikge1xuICAgIGFSb290ID0gXCIuXCI7XG4gIH1cbiAgaWYgKGFQYXRoID09PSBcIlwiKSB7XG4gICAgYVBhdGggPSBcIi5cIjtcbiAgfVxuICB2YXIgYVBhdGhVcmwgPSB1cmxQYXJzZShhUGF0aCk7XG4gIHZhciBhUm9vdFVybCA9IHVybFBhcnNlKGFSb290KTtcbiAgaWYgKGFSb290VXJsKSB7XG4gICAgYVJvb3QgPSBhUm9vdFVybC5wYXRoIHx8ICcvJztcbiAgfVxuXG4gIC8vIGBqb2luKGZvbywgJy8vd3d3LmV4YW1wbGUub3JnJylgXG4gIGlmIChhUGF0aFVybCAmJiAhYVBhdGhVcmwuc2NoZW1lKSB7XG4gICAgaWYgKGFSb290VXJsKSB7XG4gICAgICBhUGF0aFVybC5zY2hlbWUgPSBhUm9vdFVybC5zY2hlbWU7XG4gICAgfVxuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUGF0aFVybCk7XG4gIH1cblxuICBpZiAoYVBhdGhVcmwgfHwgYVBhdGgubWF0Y2goZGF0YVVybFJlZ2V4cCkpIHtcbiAgICByZXR1cm4gYVBhdGg7XG4gIH1cblxuICAvLyBgam9pbignaHR0cDovLycsICd3d3cuZXhhbXBsZS5jb20nKWBcbiAgaWYgKGFSb290VXJsICYmICFhUm9vdFVybC5ob3N0ICYmICFhUm9vdFVybC5wYXRoKSB7XG4gICAgYVJvb3RVcmwuaG9zdCA9IGFQYXRoO1xuICAgIHJldHVybiB1cmxHZW5lcmF0ZShhUm9vdFVybCk7XG4gIH1cblxuICB2YXIgam9pbmVkID0gYVBhdGguY2hhckF0KDApID09PSAnLydcbiAgICA/IGFQYXRoXG4gICAgOiBub3JtYWxpemUoYVJvb3QucmVwbGFjZSgvXFwvKyQvLCAnJykgKyAnLycgKyBhUGF0aCk7XG5cbiAgaWYgKGFSb290VXJsKSB7XG4gICAgYVJvb3RVcmwucGF0aCA9IGpvaW5lZDtcbiAgICByZXR1cm4gdXJsR2VuZXJhdGUoYVJvb3RVcmwpO1xuICB9XG4gIHJldHVybiBqb2luZWQ7XG59XG5leHBvcnRzLmpvaW4gPSBqb2luO1xuXG5leHBvcnRzLmlzQWJzb2x1dGUgPSBmdW5jdGlvbiAoYVBhdGgpIHtcbiAgcmV0dXJuIGFQYXRoLmNoYXJBdCgwKSA9PT0gJy8nIHx8IHVybFJlZ2V4cC50ZXN0KGFQYXRoKTtcbn07XG5cbi8qKlxuICogTWFrZSBhIHBhdGggcmVsYXRpdmUgdG8gYSBVUkwgb3IgYW5vdGhlciBwYXRoLlxuICpcbiAqIEBwYXJhbSBhUm9vdCBUaGUgcm9vdCBwYXRoIG9yIFVSTC5cbiAqIEBwYXJhbSBhUGF0aCBUaGUgcGF0aCBvciBVUkwgdG8gYmUgbWFkZSByZWxhdGl2ZSB0byBhUm9vdC5cbiAqL1xuZnVuY3Rpb24gcmVsYXRpdmUoYVJvb3QsIGFQYXRoKSB7XG4gIGlmIChhUm9vdCA9PT0gXCJcIikge1xuICAgIGFSb290ID0gXCIuXCI7XG4gIH1cblxuICBhUm9vdCA9IGFSb290LnJlcGxhY2UoL1xcLyQvLCAnJyk7XG5cbiAgLy8gSXQgaXMgcG9zc2libGUgZm9yIHRoZSBwYXRoIHRvIGJlIGFib3ZlIHRoZSByb290LiBJbiB0aGlzIGNhc2UsIHNpbXBseVxuICAvLyBjaGVja2luZyB3aGV0aGVyIHRoZSByb290IGlzIGEgcHJlZml4IG9mIHRoZSBwYXRoIHdvbid0IHdvcmsuIEluc3RlYWQsIHdlXG4gIC8vIG5lZWQgdG8gcmVtb3ZlIGNvbXBvbmVudHMgZnJvbSB0aGUgcm9vdCBvbmUgYnkgb25lLCB1bnRpbCBlaXRoZXIgd2UgZmluZFxuICAvLyBhIHByZWZpeCB0aGF0IGZpdHMsIG9yIHdlIHJ1biBvdXQgb2YgY29tcG9uZW50cyB0byByZW1vdmUuXG4gIHZhciBsZXZlbCA9IDA7XG4gIHdoaWxlIChhUGF0aC5pbmRleE9mKGFSb290ICsgJy8nKSAhPT0gMCkge1xuICAgIHZhciBpbmRleCA9IGFSb290Lmxhc3RJbmRleE9mKFwiL1wiKTtcbiAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICByZXR1cm4gYVBhdGg7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlIG9ubHkgcGFydCBvZiB0aGUgcm9vdCB0aGF0IGlzIGxlZnQgaXMgdGhlIHNjaGVtZSAoaS5lLiBodHRwOi8vLFxuICAgIC8vIGZpbGU6Ly8vLCBldGMuKSwgb25lIG9yIG1vcmUgc2xhc2hlcyAoLyksIG9yIHNpbXBseSBub3RoaW5nIGF0IGFsbCwgd2VcbiAgICAvLyBoYXZlIGV4aGF1c3RlZCBhbGwgY29tcG9uZW50cywgc28gdGhlIHBhdGggaXMgbm90IHJlbGF0aXZlIHRvIHRoZSByb290LlxuICAgIGFSb290ID0gYVJvb3Quc2xpY2UoMCwgaW5kZXgpO1xuICAgIGlmIChhUm9vdC5tYXRjaCgvXihbXlxcL10rOlxcLyk/XFwvKiQvKSkge1xuICAgICAgcmV0dXJuIGFQYXRoO1xuICAgIH1cblxuICAgICsrbGV2ZWw7XG4gIH1cblxuICAvLyBNYWtlIHN1cmUgd2UgYWRkIGEgXCIuLi9cIiBmb3IgZWFjaCBjb21wb25lbnQgd2UgcmVtb3ZlZCBmcm9tIHRoZSByb290LlxuICByZXR1cm4gQXJyYXkobGV2ZWwgKyAxKS5qb2luKFwiLi4vXCIpICsgYVBhdGguc3Vic3RyKGFSb290Lmxlbmd0aCArIDEpO1xufVxuZXhwb3J0cy5yZWxhdGl2ZSA9IHJlbGF0aXZlO1xuXG52YXIgc3VwcG9ydHNOdWxsUHJvdG8gPSAoZnVuY3Rpb24gKCkge1xuICB2YXIgb2JqID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuICEoJ19fcHJvdG9fXycgaW4gb2JqKTtcbn0oKSk7XG5cbmZ1bmN0aW9uIGlkZW50aXR5IChzKSB7XG4gIHJldHVybiBzO1xufVxuXG4vKipcbiAqIEJlY2F1c2UgYmVoYXZpb3IgZ29lcyB3YWNreSB3aGVuIHlvdSBzZXQgYF9fcHJvdG9fX2Agb24gb2JqZWN0cywgd2VcbiAqIGhhdmUgdG8gcHJlZml4IGFsbCB0aGUgc3RyaW5ncyBpbiBvdXIgc2V0IHdpdGggYW4gYXJiaXRyYXJ5IGNoYXJhY3Rlci5cbiAqXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9wdWxsLzMxIGFuZFxuICogaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvc291cmNlLW1hcC9pc3N1ZXMvMzBcbiAqXG4gKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAqL1xuZnVuY3Rpb24gdG9TZXRTdHJpbmcoYVN0cikge1xuICBpZiAoaXNQcm90b1N0cmluZyhhU3RyKSkge1xuICAgIHJldHVybiAnJCcgKyBhU3RyO1xuICB9XG5cbiAgcmV0dXJuIGFTdHI7XG59XG5leHBvcnRzLnRvU2V0U3RyaW5nID0gc3VwcG9ydHNOdWxsUHJvdG8gPyBpZGVudGl0eSA6IHRvU2V0U3RyaW5nO1xuXG5mdW5jdGlvbiBmcm9tU2V0U3RyaW5nKGFTdHIpIHtcbiAgaWYgKGlzUHJvdG9TdHJpbmcoYVN0cikpIHtcbiAgICByZXR1cm4gYVN0ci5zbGljZSgxKTtcbiAgfVxuXG4gIHJldHVybiBhU3RyO1xufVxuZXhwb3J0cy5mcm9tU2V0U3RyaW5nID0gc3VwcG9ydHNOdWxsUHJvdG8gPyBpZGVudGl0eSA6IGZyb21TZXRTdHJpbmc7XG5cbmZ1bmN0aW9uIGlzUHJvdG9TdHJpbmcocykge1xuICBpZiAoIXMpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgbGVuZ3RoID0gcy5sZW5ndGg7XG5cbiAgaWYgKGxlbmd0aCA8IDkgLyogXCJfX3Byb3RvX19cIi5sZW5ndGggKi8pIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAocy5jaGFyQ29kZUF0KGxlbmd0aCAtIDEpICE9PSA5NSAgLyogJ18nICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gMikgIT09IDk1ICAvKiAnXycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSAzKSAhPT0gMTExIC8qICdvJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDQpICE9PSAxMTYgLyogJ3QnICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gNSkgIT09IDExMSAvKiAnbycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA2KSAhPT0gMTE0IC8qICdyJyAqLyB8fFxuICAgICAgcy5jaGFyQ29kZUF0KGxlbmd0aCAtIDcpICE9PSAxMTIgLyogJ3AnICovIHx8XG4gICAgICBzLmNoYXJDb2RlQXQobGVuZ3RoIC0gOCkgIT09IDk1ICAvKiAnXycgKi8gfHxcbiAgICAgIHMuY2hhckNvZGVBdChsZW5ndGggLSA5KSAhPT0gOTUgIC8qICdfJyAqLykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSBsZW5ndGggLSAxMDsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAocy5jaGFyQ29kZUF0KGkpICE9PSAzNiAvKiAnJCcgKi8pIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiBDb21wYXJhdG9yIGJldHdlZW4gdHdvIG1hcHBpbmdzIHdoZXJlIHRoZSBvcmlnaW5hbCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICpcbiAqIE9wdGlvbmFsbHkgcGFzcyBpbiBgdHJ1ZWAgYXMgYG9ubHlDb21wYXJlR2VuZXJhdGVkYCB0byBjb25zaWRlciB0d29cbiAqIG1hcHBpbmdzIHdpdGggdGhlIHNhbWUgb3JpZ2luYWwgc291cmNlL2xpbmUvY29sdW1uLCBidXQgZGlmZmVyZW50IGdlbmVyYXRlZFxuICogbGluZSBhbmQgY29sdW1uIHRoZSBzYW1lLiBVc2VmdWwgd2hlbiBzZWFyY2hpbmcgZm9yIGEgbWFwcGluZyB3aXRoIGFcbiAqIHN0dWJiZWQgb3V0IG1hcHBpbmcuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKG1hcHBpbmdBLCBtYXBwaW5nQiwgb25seUNvbXBhcmVPcmlnaW5hbCkge1xuICB2YXIgY21wID0gc3RyY21wKG1hcHBpbmdBLnNvdXJjZSwgbWFwcGluZ0Iuc291cmNlKTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbExpbmUgLSBtYXBwaW5nQi5vcmlnaW5hbExpbmU7XG4gIGlmIChjbXAgIT09IDApIHtcbiAgICByZXR1cm4gY21wO1xuICB9XG5cbiAgY21wID0gbWFwcGluZ0Eub3JpZ2luYWxDb2x1bW4gLSBtYXBwaW5nQi5vcmlnaW5hbENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCB8fCBvbmx5Q29tcGFyZU9yaWdpbmFsKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbiAtIG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lIC0gbWFwcGluZ0IuZ2VuZXJhdGVkTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICByZXR1cm4gc3RyY21wKG1hcHBpbmdBLm5hbWUsIG1hcHBpbmdCLm5hbWUpO1xufVxuZXhwb3J0cy5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyA9IGNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zO1xuXG4vKipcbiAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2l0aCBkZWZsYXRlZCBzb3VyY2UgYW5kIG5hbWUgaW5kaWNlcyB3aGVyZVxuICogdGhlIGdlbmVyYXRlZCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICpcbiAqIE9wdGlvbmFsbHkgcGFzcyBpbiBgdHJ1ZWAgYXMgYG9ubHlDb21wYXJlR2VuZXJhdGVkYCB0byBjb25zaWRlciB0d29cbiAqIG1hcHBpbmdzIHdpdGggdGhlIHNhbWUgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiwgYnV0IGRpZmZlcmVudFxuICogc291cmNlL25hbWUvb3JpZ2luYWwgbGluZSBhbmQgY29sdW1uIHRoZSBzYW1lLiBVc2VmdWwgd2hlbiBzZWFyY2hpbmcgZm9yIGFcbiAqIG1hcHBpbmcgd2l0aCBhIHN0dWJiZWQgb3V0IG1hcHBpbmcuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkKG1hcHBpbmdBLCBtYXBwaW5nQiwgb25seUNvbXBhcmVHZW5lcmF0ZWQpIHtcbiAgdmFyIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbiAtIG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCB8fCBvbmx5Q29tcGFyZUdlbmVyYXRlZCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBzdHJjbXAobWFwcGluZ0EubmFtZSwgbWFwcGluZ0IubmFtZSk7XG59XG5leHBvcnRzLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0RlZmxhdGVkID0gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQ7XG5cbmZ1bmN0aW9uIHN0cmNtcChhU3RyMSwgYVN0cjIpIHtcbiAgaWYgKGFTdHIxID09PSBhU3RyMikge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgaWYgKGFTdHIxID09PSBudWxsKSB7XG4gICAgcmV0dXJuIDE7IC8vIGFTdHIyICE9PSBudWxsXG4gIH1cblxuICBpZiAoYVN0cjIgPT09IG51bGwpIHtcbiAgICByZXR1cm4gLTE7IC8vIGFTdHIxICE9PSBudWxsXG4gIH1cblxuICBpZiAoYVN0cjEgPiBhU3RyMikge1xuICAgIHJldHVybiAxO1xuICB9XG5cbiAgcmV0dXJuIC0xO1xufVxuXG4vKipcbiAqIENvbXBhcmF0b3IgYmV0d2VlbiB0d28gbWFwcGluZ3Mgd2l0aCBpbmZsYXRlZCBzb3VyY2UgYW5kIG5hbWUgc3RyaW5ncyB3aGVyZVxuICogdGhlIGdlbmVyYXRlZCBwb3NpdGlvbnMgYXJlIGNvbXBhcmVkLlxuICovXG5mdW5jdGlvbiBjb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IpIHtcbiAgdmFyIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZExpbmUgLSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbiAtIG1hcHBpbmdCLmdlbmVyYXRlZENvbHVtbjtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBzdHJjbXAobWFwcGluZ0Euc291cmNlLCBtYXBwaW5nQi5zb3VyY2UpO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIGNtcCA9IG1hcHBpbmdBLm9yaWdpbmFsTGluZSAtIG1hcHBpbmdCLm9yaWdpbmFsTGluZTtcbiAgaWYgKGNtcCAhPT0gMCkge1xuICAgIHJldHVybiBjbXA7XG4gIH1cblxuICBjbXAgPSBtYXBwaW5nQS5vcmlnaW5hbENvbHVtbiAtIG1hcHBpbmdCLm9yaWdpbmFsQ29sdW1uO1xuICBpZiAoY21wICE9PSAwKSB7XG4gICAgcmV0dXJuIGNtcDtcbiAgfVxuXG4gIHJldHVybiBzdHJjbXAobWFwcGluZ0EubmFtZSwgbWFwcGluZ0IubmFtZSk7XG59XG5leHBvcnRzLmNvbXBhcmVCeUdlbmVyYXRlZFBvc2l0aW9uc0luZmxhdGVkID0gY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQ7XG5cbi8qKlxuICogU3RyaXAgYW55IEpTT04gWFNTSSBhdm9pZGFuY2UgcHJlZml4IGZyb20gdGhlIHN0cmluZyAoYXMgZG9jdW1lbnRlZFxuICogaW4gdGhlIHNvdXJjZSBtYXBzIHNwZWNpZmljYXRpb24pLCBhbmQgdGhlbiBwYXJzZSB0aGUgc3RyaW5nIGFzXG4gKiBKU09OLlxuICovXG5mdW5jdGlvbiBwYXJzZVNvdXJjZU1hcElucHV0KHN0cikge1xuICByZXR1cm4gSlNPTi5wYXJzZShzdHIucmVwbGFjZSgvXlxcKV19J1teXFxuXSpcXG4vLCAnJykpO1xufVxuZXhwb3J0cy5wYXJzZVNvdXJjZU1hcElucHV0ID0gcGFyc2VTb3VyY2VNYXBJbnB1dDtcblxuLyoqXG4gKiBDb21wdXRlIHRoZSBVUkwgb2YgYSBzb3VyY2UgZ2l2ZW4gdGhlIHRoZSBzb3VyY2Ugcm9vdCwgdGhlIHNvdXJjZSdzXG4gKiBVUkwsIGFuZCB0aGUgc291cmNlIG1hcCdzIFVSTC5cbiAqL1xuZnVuY3Rpb24gY29tcHV0ZVNvdXJjZVVSTChzb3VyY2VSb290LCBzb3VyY2VVUkwsIHNvdXJjZU1hcFVSTCkge1xuICBzb3VyY2VVUkwgPSBzb3VyY2VVUkwgfHwgJyc7XG5cbiAgaWYgKHNvdXJjZVJvb3QpIHtcbiAgICAvLyBUaGlzIGZvbGxvd3Mgd2hhdCBDaHJvbWUgZG9lcy5cbiAgICBpZiAoc291cmNlUm9vdFtzb3VyY2VSb290Lmxlbmd0aCAtIDFdICE9PSAnLycgJiYgc291cmNlVVJMWzBdICE9PSAnLycpIHtcbiAgICAgIHNvdXJjZVJvb3QgKz0gJy8nO1xuICAgIH1cbiAgICAvLyBUaGUgc3BlYyBzYXlzOlxuICAgIC8vICAgTGluZSA0OiBBbiBvcHRpb25hbCBzb3VyY2Ugcm9vdCwgdXNlZnVsIGZvciByZWxvY2F0aW5nIHNvdXJjZVxuICAgIC8vICAgZmlsZXMgb24gYSBzZXJ2ZXIgb3IgcmVtb3ZpbmcgcmVwZWF0ZWQgdmFsdWVzIGluIHRoZVxuICAgIC8vICAg4oCcc291cmNlc+KAnSBlbnRyeS4gIFRoaXMgdmFsdWUgaXMgcHJlcGVuZGVkIHRvIHRoZSBpbmRpdmlkdWFsXG4gICAgLy8gICBlbnRyaWVzIGluIHRoZSDigJxzb3VyY2XigJ0gZmllbGQuXG4gICAgc291cmNlVVJMID0gc291cmNlUm9vdCArIHNvdXJjZVVSTDtcbiAgfVxuXG4gIC8vIEhpc3RvcmljYWxseSwgU291cmNlTWFwQ29uc3VtZXIgZGlkIG5vdCB0YWtlIHRoZSBzb3VyY2VNYXBVUkwgYXNcbiAgLy8gYSBwYXJhbWV0ZXIuICBUaGlzIG1vZGUgaXMgc3RpbGwgc29tZXdoYXQgc3VwcG9ydGVkLCB3aGljaCBpcyB3aHlcbiAgLy8gdGhpcyBjb2RlIGJsb2NrIGlzIGNvbmRpdGlvbmFsLiAgSG93ZXZlciwgaXQncyBwcmVmZXJhYmxlIHRvIHBhc3NcbiAgLy8gdGhlIHNvdXJjZSBtYXAgVVJMIHRvIFNvdXJjZU1hcENvbnN1bWVyLCBzbyB0aGF0IHRoaXMgZnVuY3Rpb25cbiAgLy8gY2FuIGltcGxlbWVudCB0aGUgc291cmNlIFVSTCByZXNvbHV0aW9uIGFsZ29yaXRobSBhcyBvdXRsaW5lZCBpblxuICAvLyB0aGUgc3BlYy4gIFRoaXMgYmxvY2sgaXMgYmFzaWNhbGx5IHRoZSBlcXVpdmFsZW50IG9mOlxuICAvLyAgICBuZXcgVVJMKHNvdXJjZVVSTCwgc291cmNlTWFwVVJMKS50b1N0cmluZygpXG4gIC8vIC4uLiBleGNlcHQgaXQgYXZvaWRzIHVzaW5nIFVSTCwgd2hpY2ggd2Fzbid0IGF2YWlsYWJsZSBpbiB0aGVcbiAgLy8gb2xkZXIgcmVsZWFzZXMgb2Ygbm9kZSBzdGlsbCBzdXBwb3J0ZWQgYnkgdGhpcyBsaWJyYXJ5LlxuICAvL1xuICAvLyBUaGUgc3BlYyBzYXlzOlxuICAvLyAgIElmIHRoZSBzb3VyY2VzIGFyZSBub3QgYWJzb2x1dGUgVVJMcyBhZnRlciBwcmVwZW5kaW5nIG9mIHRoZVxuICAvLyAgIOKAnHNvdXJjZVJvb3TigJ0sIHRoZSBzb3VyY2VzIGFyZSByZXNvbHZlZCByZWxhdGl2ZSB0byB0aGVcbiAgLy8gICBTb3VyY2VNYXAgKGxpa2UgcmVzb2x2aW5nIHNjcmlwdCBzcmMgaW4gYSBodG1sIGRvY3VtZW50KS5cbiAgaWYgKHNvdXJjZU1hcFVSTCkge1xuICAgIHZhciBwYXJzZWQgPSB1cmxQYXJzZShzb3VyY2VNYXBVUkwpO1xuICAgIGlmICghcGFyc2VkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzb3VyY2VNYXBVUkwgY291bGQgbm90IGJlIHBhcnNlZFwiKTtcbiAgICB9XG4gICAgaWYgKHBhcnNlZC5wYXRoKSB7XG4gICAgICAvLyBTdHJpcCB0aGUgbGFzdCBwYXRoIGNvbXBvbmVudCwgYnV0IGtlZXAgdGhlIFwiL1wiLlxuICAgICAgdmFyIGluZGV4ID0gcGFyc2VkLnBhdGgubGFzdEluZGV4T2YoJy8nKTtcbiAgICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICAgIHBhcnNlZC5wYXRoID0gcGFyc2VkLnBhdGguc3Vic3RyaW5nKDAsIGluZGV4ICsgMSk7XG4gICAgICB9XG4gICAgfVxuICAgIHNvdXJjZVVSTCA9IGpvaW4odXJsR2VuZXJhdGUocGFyc2VkKSwgc291cmNlVVJMKTtcbiAgfVxuXG4gIHJldHVybiBub3JtYWxpemUoc291cmNlVVJMKTtcbn1cbmV4cG9ydHMuY29tcHV0ZVNvdXJjZVVSTCA9IGNvbXB1dGVTb3VyY2VVUkw7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9ub2RlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9ub2RlXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIENTUyBkZWNsYXJhdGlvbi5cbiAqXG4gKiBAZXh0ZW5kcyBOb2RlXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHJvb3QgPSBwb3N0Y3NzLnBhcnNlKCdhIHsgY29sb3I6IGJsYWNrIH0nKVxuICogY29uc3QgZGVjbCA9IHJvb3QuZmlyc3QuZmlyc3RcbiAqIGRlY2wudHlwZSAgICAgICAvLz0+ICdkZWNsJ1xuICogZGVjbC50b1N0cmluZygpIC8vPT4gJyBjb2xvcjogYmxhY2snXG4gKi9cbnZhciBEZWNsYXJhdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX05vZGUpIHtcbiAgX2luaGVyaXRzTG9vc2UoRGVjbGFyYXRpb24sIF9Ob2RlKTtcblxuICBmdW5jdGlvbiBEZWNsYXJhdGlvbihkZWZhdWx0cykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX05vZGUuY2FsbCh0aGlzLCBkZWZhdWx0cykgfHwgdGhpcztcbiAgICBfdGhpcy50eXBlID0gJ2RlY2wnO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQG1lbWJlcm9mIERlY2xhcmF0aW9uI1xuICAgKiBAbWVtYmVyIHtzdHJpbmd9IHByb3AgVGhlIGRlY2xhcmF0aW9u4oCZcyBwcm9wZXJ0eSBuYW1lLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCByb290ID0gcG9zdGNzcy5wYXJzZSgnYSB7IGNvbG9yOiBibGFjayB9JylcbiAgICogY29uc3QgZGVjbCA9IHJvb3QuZmlyc3QuZmlyc3RcbiAgICogZGVjbC5wcm9wIC8vPT4gJ2NvbG9yJ1xuICAgKi9cblxuICAvKipcbiAgICogQG1lbWJlcm9mIERlY2xhcmF0aW9uI1xuICAgKiBAbWVtYmVyIHtzdHJpbmd9IHZhbHVlIFRoZSBkZWNsYXJhdGlvbuKAmXMgdmFsdWUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IHJvb3QgPSBwb3N0Y3NzLnBhcnNlKCdhIHsgY29sb3I6IGJsYWNrIH0nKVxuICAgKiBjb25zdCBkZWNsID0gcm9vdC5maXJzdC5maXJzdFxuICAgKiBkZWNsLnZhbHVlIC8vPT4gJ2JsYWNrJ1xuICAgKi9cblxuICAvKipcbiAgICogQG1lbWJlcm9mIERlY2xhcmF0aW9uI1xuICAgKiBAbWVtYmVyIHtib29sZWFufSBpbXBvcnRhbnQgYHRydWVgIGlmIHRoZSBkZWNsYXJhdGlvblxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzIGFuICFpbXBvcnRhbnQgYW5ub3RhdGlvbi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoJ2EgeyBjb2xvcjogYmxhY2sgIWltcG9ydGFudDsgY29sb3I6IHJlZCB9JylcbiAgICogcm9vdC5maXJzdC5maXJzdC5pbXBvcnRhbnQgLy89PiB0cnVlXG4gICAqIHJvb3QuZmlyc3QubGFzdC5pbXBvcnRhbnQgIC8vPT4gdW5kZWZpbmVkXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbWVtYmVyb2YgRGVjbGFyYXRpb24jXG4gICAqIEBtZW1iZXIge29iamVjdH0gcmF3cyBJbmZvcm1hdGlvbiB0byBnZW5lcmF0ZSBieXRlLXRvLWJ5dGUgZXF1YWxcbiAgICogICAgICAgICAgICAgICAgICAgICAgIG5vZGUgc3RyaW5nIGFzIGl0IHdhcyBpbiB0aGUgb3JpZ2luIGlucHV0LlxuICAgKlxuICAgKiBFdmVyeSBwYXJzZXIgc2F2ZXMgaXRzIG93biBwcm9wZXJ0aWVzLFxuICAgKiBidXQgdGhlIGRlZmF1bHQgQ1NTIHBhcnNlciB1c2VzOlxuICAgKlxuICAgKiAqIGBiZWZvcmVgOiB0aGUgc3BhY2Ugc3ltYm9scyBiZWZvcmUgdGhlIG5vZGUuIEl0IGFsc28gc3RvcmVzIGAqYFxuICAgKiAgIGFuZCBgX2Agc3ltYm9scyBiZWZvcmUgdGhlIGRlY2xhcmF0aW9uIChJRSBoYWNrKS5cbiAgICogKiBgYmV0d2VlbmA6IHRoZSBzeW1ib2xzIGJldHdlZW4gdGhlIHByb3BlcnR5IGFuZCB2YWx1ZVxuICAgKiAgIGZvciBkZWNsYXJhdGlvbnMuXG4gICAqICogYGltcG9ydGFudGA6IHRoZSBjb250ZW50IG9mIHRoZSBpbXBvcnRhbnQgc3RhdGVtZW50LFxuICAgKiAgIGlmIGl0IGlzIG5vdCBqdXN0IGAhaW1wb3J0YW50YC5cbiAgICpcbiAgICogUG9zdENTUyBjbGVhbnMgZGVjbGFyYXRpb24gZnJvbSBjb21tZW50cyBhbmQgZXh0cmEgc3BhY2VzLFxuICAgKiBidXQgaXQgc3RvcmVzIG9yaWdpbiBjb250ZW50IGluIHJhd3MgcHJvcGVydGllcy5cbiAgICogQXMgc3VjaCwgaWYgeW91IGRvbuKAmXQgY2hhbmdlIGEgZGVjbGFyYXRpb27igJlzIHZhbHVlLFxuICAgKiBQb3N0Q1NTIHdpbGwgdXNlIHRoZSByYXcgdmFsdWUgd2l0aCBjb21tZW50cy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoJ2Ege1xcbiAgY29sb3I6YmxhY2tcXG59JylcbiAgICogcm9vdC5maXJzdC5maXJzdC5yYXdzIC8vPT4geyBiZWZvcmU6ICdcXG4gICcsIGJldHdlZW46ICc6JyB9XG4gICAqL1xuXG5cbiAgcmV0dXJuIERlY2xhcmF0aW9uO1xufShfbm9kZS5kZWZhdWx0KTtcblxudmFyIF9kZWZhdWx0ID0gRGVjbGFyYXRpb247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbVJsWTJ4aGNtRjBhVzl1TG1Wek5pSmRMQ0p1WVcxbGN5STZXeUpFWldOc1lYSmhkR2x2YmlJc0ltUmxabUYxYkhSeklpd2lkSGx3WlNJc0lrNXZaR1VpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3TzBGQlFVRTdPenM3T3p0QlFVVkJPenM3T3pzN096czdPenRKUVZkTlFTeFhPenM3T3p0QlFVTktMSFZDUVVGaFF5eFJRVUZpTEVWQlFYVkNPMEZCUVVFN08wRkJRM0pDTERaQ1FVRk5RU3hSUVVGT08wRkJRMEVzVlVGQlMwTXNTVUZCVEN4SFFVRlpMRTFCUVZvN1FVRkdjVUk3UVVGSGRFSTdRVUZGUkRzN096czdPenM3T3p0QlFWVkJPenM3T3pzN096czdPMEZCVlVFN096czdPenM3T3pzN08wRkJWMEU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenRGUVhKRGQwSkRMR0U3TzJWQkswUllTQ3hYSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUU1dlpHVWdabkp2YlNBbkxpOXViMlJsSjF4dVhHNHZLaXBjYmlBcUlGSmxjSEpsYzJWdWRITWdZU0JEVTFNZ1pHVmpiR0Z5WVhScGIyNHVYRzRnS2x4dUlDb2dRR1Y0ZEdWdVpITWdUbTlrWlZ4dUlDcGNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tpQmpiMjV6ZENCeWIyOTBJRDBnY0c5emRHTnpjeTV3WVhKelpTZ25ZU0I3SUdOdmJHOXlPaUJpYkdGamF5QjlKeWxjYmlBcUlHTnZibk4wSUdSbFkyd2dQU0J5YjI5MExtWnBjbk4wTG1acGNuTjBYRzRnS2lCa1pXTnNMblI1Y0dVZ0lDQWdJQ0FnTHk4OVBpQW5aR1ZqYkNkY2JpQXFJR1JsWTJ3dWRHOVRkSEpwYm1jb0tTQXZMejArSUNjZ1kyOXNiM0k2SUdKc1lXTnJKMXh1SUNvdlhHNWpiR0Z6Y3lCRVpXTnNZWEpoZEdsdmJpQmxlSFJsYm1SeklFNXZaR1VnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaUFvWkdWbVlYVnNkSE1wSUh0Y2JpQWdJQ0J6ZFhCbGNpaGtaV1poZFd4MGN5bGNiaUFnSUNCMGFHbHpMblI1Y0dVZ1BTQW5aR1ZqYkNkY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFiV1Z0WW1WeWIyWWdSR1ZqYkdGeVlYUnBiMjRqWEc0Z0lDQXFJRUJ0WlcxaVpYSWdlM04wY21sdVozMGdjSEp2Y0NCVWFHVWdaR1ZqYkdGeVlYUnBiMjdpZ0pseklIQnliM0JsY25SNUlHNWhiV1V1WEc0Z0lDQXFYRzRnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FxSUdOdmJuTjBJSEp2YjNRZ1BTQndiM04wWTNOekxuQmhjbk5sS0NkaElIc2dZMjlzYjNJNklHSnNZV05ySUgwbktWeHVJQ0FnS2lCamIyNXpkQ0JrWldOc0lEMGdjbTl2ZEM1bWFYSnpkQzVtYVhKemRGeHVJQ0FnS2lCa1pXTnNMbkJ5YjNBZ0x5ODlQaUFuWTI5c2IzSW5YRzRnSUNBcUwxeHVYRzRnSUM4cUtseHVJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1JHVmpiR0Z5WVhScGIyNGpYRzRnSUNBcUlFQnRaVzFpWlhJZ2UzTjBjbWx1WjMwZ2RtRnNkV1VnVkdobElHUmxZMnhoY21GMGFXOXU0b0NaY3lCMllXeDFaUzVjYmlBZ0lDcGNiaUFnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ29nWTI5dWMzUWdjbTl2ZENBOUlIQnZjM1JqYzNNdWNHRnljMlVvSjJFZ2V5QmpiMnh2Y2pvZ1lteGhZMnNnZlNjcFhHNGdJQ0FxSUdOdmJuTjBJR1JsWTJ3Z1BTQnliMjkwTG1acGNuTjBMbVpwY25OMFhHNGdJQ0FxSUdSbFkyd3VkbUZzZFdVZ0x5ODlQaUFuWW14aFkyc25YRzRnSUNBcUwxeHVYRzRnSUM4cUtseHVJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1JHVmpiR0Z5WVhScGIyNGpYRzRnSUNBcUlFQnRaVzFpWlhJZ2UySnZiMnhsWVc1OUlHbHRjRzl5ZEdGdWRDQmdkSEoxWldBZ2FXWWdkR2hsSUdSbFkyeGhjbUYwYVc5dVhHNGdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lYTWdZVzRnSVdsdGNHOXlkR0Z1ZENCaGJtNXZkR0YwYVc5dUxseHVJQ0FnS2x4dUlDQWdLaUJBWlhoaGJYQnNaVnh1SUNBZ0tpQmpiMjV6ZENCeWIyOTBJRDBnY0c5emRHTnpjeTV3WVhKelpTZ25ZU0I3SUdOdmJHOXlPaUJpYkdGamF5QWhhVzF3YjNKMFlXNTBPeUJqYjJ4dmNqb2djbVZrSUgwbktWeHVJQ0FnS2lCeWIyOTBMbVpwY25OMExtWnBjbk4wTG1sdGNHOXlkR0Z1ZENBdkx6MCtJSFJ5ZFdWY2JpQWdJQ29nY205dmRDNW1hWEp6ZEM1c1lYTjBMbWx0Y0c5eWRHRnVkQ0FnTHk4OVBpQjFibVJsWm1sdVpXUmNiaUFnSUNvdlhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCdFpXMWlaWEp2WmlCRVpXTnNZWEpoZEdsdmJpTmNiaUFnSUNvZ1FHMWxiV0psY2lCN2IySnFaV04wZlNCeVlYZHpJRWx1Wm05eWJXRjBhVzl1SUhSdklHZGxibVZ5WVhSbElHSjVkR1V0ZEc4dFlubDBaU0JsY1hWaGJGeHVJQ0FnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibTlrWlNCemRISnBibWNnWVhNZ2FYUWdkMkZ6SUdsdUlIUm9aU0J2Y21sbmFXNGdhVzV3ZFhRdVhHNGdJQ0FxWEc0Z0lDQXFJRVYyWlhKNUlIQmhjbk5sY2lCellYWmxjeUJwZEhNZ2IzZHVJSEJ5YjNCbGNuUnBaWE1zWEc0Z0lDQXFJR0oxZENCMGFHVWdaR1ZtWVhWc2RDQkRVMU1nY0dGeWMyVnlJSFZ6WlhNNlhHNGdJQ0FxWEc0Z0lDQXFJQ29nWUdKbFptOXlaV0E2SUhSb1pTQnpjR0ZqWlNCemVXMWliMnh6SUdKbFptOXlaU0IwYUdVZ2JtOWtaUzRnU1hRZ1lXeHpieUJ6ZEc5eVpYTWdZQ3BnWEc0Z0lDQXFJQ0FnWVc1a0lHQmZZQ0J6ZVcxaWIyeHpJR0psWm05eVpTQjBhR1VnWkdWamJHRnlZWFJwYjI0Z0tFbEZJR2hoWTJzcExseHVJQ0FnS2lBcUlHQmlaWFIzWldWdVlEb2dkR2hsSUhONWJXSnZiSE1nWW1WMGQyVmxiaUIwYUdVZ2NISnZjR1Z5ZEhrZ1lXNWtJSFpoYkhWbFhHNGdJQ0FxSUNBZ1ptOXlJR1JsWTJ4aGNtRjBhVzl1Y3k1Y2JpQWdJQ29nS2lCZ2FXMXdiM0owWVc1MFlEb2dkR2hsSUdOdmJuUmxiblFnYjJZZ2RHaGxJR2x0Y0c5eWRHRnVkQ0J6ZEdGMFpXMWxiblFzWEc0Z0lDQXFJQ0FnYVdZZ2FYUWdhWE1nYm05MElHcDFjM1FnWUNGcGJYQnZjblJoYm5SZ0xseHVJQ0FnS2x4dUlDQWdLaUJRYjNOMFExTlRJR05zWldGdWN5QmtaV05zWVhKaGRHbHZiaUJtY205dElHTnZiVzFsYm5SeklHRnVaQ0JsZUhSeVlTQnpjR0ZqWlhNc1hHNGdJQ0FxSUdKMWRDQnBkQ0J6ZEc5eVpYTWdiM0pwWjJsdUlHTnZiblJsYm5RZ2FXNGdjbUYzY3lCd2NtOXdaWEowYVdWekxseHVJQ0FnS2lCQmN5QnpkV05vTENCcFppQjViM1VnWkc5dTRvQ1pkQ0JqYUdGdVoyVWdZU0JrWldOc1lYSmhkR2x2YnVLQW1YTWdkbUZzZFdVc1hHNGdJQ0FxSUZCdmMzUkRVMU1nZDJsc2JDQjFjMlVnZEdobElISmhkeUIyWVd4MVpTQjNhWFJvSUdOdmJXMWxiblJ6TGx4dUlDQWdLbHh1SUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnS2lCamIyNXpkQ0J5YjI5MElEMGdjRzl6ZEdOemN5NXdZWEp6WlNnbllTQjdYRnh1SUNCamIyeHZjanBpYkdGamExeGNibjBuS1Z4dUlDQWdLaUJ5YjI5MExtWnBjbk4wTG1acGNuTjBMbkpoZDNNZ0x5ODlQaUI3SUdKbFptOXlaVG9nSjF4Y2JpQWdKeXdnWW1WMGQyVmxiam9nSnpvbklIMWNiaUFnSUNvdlhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRVJsWTJ4aGNtRjBhVzl1WEc0aVhTd2labWxzWlNJNkltUmxZMnhoY21GMGFXOXVMbXB6SW4wPVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY3NzU3ludGF4RXJyb3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2Nzcy1zeW50YXgtZXJyb3JcIikpO1xuXG52YXIgX3N0cmluZ2lmaWVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zdHJpbmdpZmllclwiKSk7XG5cbnZhciBfc3RyaW5naWZ5ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zdHJpbmdpZnlcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBjbG9uZU5vZGUob2JqLCBwYXJlbnQpIHtcbiAgdmFyIGNsb25lZCA9IG5ldyBvYmouY29uc3RydWN0b3IoKTtcblxuICBmb3IgKHZhciBpIGluIG9iaikge1xuICAgIGlmICghb2JqLmhhc093blByb3BlcnR5KGkpKSBjb250aW51ZTtcbiAgICB2YXIgdmFsdWUgPSBvYmpbaV07XG4gICAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cbiAgICBpZiAoaSA9PT0gJ3BhcmVudCcgJiYgdHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChwYXJlbnQpIGNsb25lZFtpXSA9IHBhcmVudDtcbiAgICB9IGVsc2UgaWYgKGkgPT09ICdzb3VyY2UnKSB7XG4gICAgICBjbG9uZWRbaV0gPSB2YWx1ZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgIGNsb25lZFtpXSA9IHZhbHVlLm1hcChmdW5jdGlvbiAoaikge1xuICAgICAgICByZXR1cm4gY2xvbmVOb2RlKGosIGNsb25lZCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB2YWx1ZSA9IGNsb25lTm9kZSh2YWx1ZSk7XG4gICAgICBjbG9uZWRbaV0gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2xvbmVkO1xufVxuLyoqXG4gKiBBbGwgbm9kZSBjbGFzc2VzIGluaGVyaXQgdGhlIGZvbGxvd2luZyBjb21tb24gbWV0aG9kcy5cbiAqXG4gKiBAYWJzdHJhY3RcbiAqL1xuXG5cbnZhciBOb2RlID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbZGVmYXVsdHNdIFZhbHVlIGZvciBub2RlIHByb3BlcnRpZXMuXG4gICAqL1xuICBmdW5jdGlvbiBOb2RlKGRlZmF1bHRzKSB7XG4gICAgaWYgKGRlZmF1bHRzID09PSB2b2lkIDApIHtcbiAgICAgIGRlZmF1bHRzID0ge307XG4gICAgfVxuXG4gICAgdGhpcy5yYXdzID0ge307XG5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgaWYgKHR5cGVvZiBkZWZhdWx0cyAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIGRlZmF1bHRzICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Bvc3RDU1Mgbm9kZXMgY29uc3RydWN0b3IgYWNjZXB0cyBvYmplY3QsIG5vdCAnICsgSlNPTi5zdHJpbmdpZnkoZGVmYXVsdHMpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIGRlZmF1bHRzKSB7XG4gICAgICB0aGlzW25hbWVdID0gZGVmYXVsdHNbbmFtZV07XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYENzc1N5bnRheEVycm9yYCBpbnN0YW5jZSBjb250YWluaW5nIHRoZSBvcmlnaW5hbCBwb3NpdGlvblxuICAgKiBvZiB0aGUgbm9kZSBpbiB0aGUgc291cmNlLCBzaG93aW5nIGxpbmUgYW5kIGNvbHVtbiBudW1iZXJzIGFuZCBhbHNvXG4gICAqIGEgc21hbGwgZXhjZXJwdCB0byBmYWNpbGl0YXRlIGRlYnVnZ2luZy5cbiAgICpcbiAgICogSWYgcHJlc2VudCwgYW4gaW5wdXQgc291cmNlIG1hcCB3aWxsIGJlIHVzZWQgdG8gZ2V0IHRoZSBvcmlnaW5hbCBwb3NpdGlvblxuICAgKiBvZiB0aGUgc291cmNlLCBldmVuIGZyb20gYSBwcmV2aW91cyBjb21waWxhdGlvbiBzdGVwXG4gICAqIChlLmcuLCBmcm9tIFNhc3MgY29tcGlsYXRpb24pLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBwcm9kdWNlcyB2ZXJ5IHVzZWZ1bCBlcnJvciBtZXNzYWdlcy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgICAgIEVycm9yIGRlc2NyaXB0aW9uLlxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdHNdICAgICAgT3B0aW9ucy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMucGx1Z2luIFBsdWdpbiBuYW1lIHRoYXQgY3JlYXRlZCB0aGlzIGVycm9yLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUG9zdENTUyB3aWxsIHNldCBpdCBhdXRvbWF0aWNhbGx5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy53b3JkICAgQSB3b3JkIGluc2lkZSBhIG5vZGXigJlzIHN0cmluZyB0aGF0IHNob3VsZFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmUgaGlnaGxpZ2h0ZWQgYXMgdGhlIHNvdXJjZSBvZiB0aGUgZXJyb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRzLmluZGV4ICBBbiBpbmRleCBpbnNpZGUgYSBub2Rl4oCZcyBzdHJpbmcgdGhhdCBzaG91bGRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGhpZ2hsaWdodGVkIGFzIHRoZSBzb3VyY2Ugb2YgdGhlIGVycm9yLlxuICAgKlxuICAgKiBAcmV0dXJuIHtDc3NTeW50YXhFcnJvcn0gRXJyb3Igb2JqZWN0IHRvIHRocm93IGl0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBpZiAoIXZhcmlhYmxlc1tuYW1lXSkge1xuICAgKiAgIHRocm93IGRlY2wuZXJyb3IoJ1Vua25vd24gdmFyaWFibGUgJyArIG5hbWUsIHsgd29yZDogbmFtZSB9KVxuICAgKiAgIC8vIENzc1N5bnRheEVycm9yOiBwb3N0Y3NzLXZhcnM6YS5zYXNzOjQ6MzogVW5rbm93biB2YXJpYWJsZSAkYmxhY2tcbiAgICogICAvLyAgIGNvbG9yOiAkYmxhY2tcbiAgICogICAvLyBhXG4gICAqICAgLy8gICAgICAgICAgXlxuICAgKiAgIC8vICAgYmFja2dyb3VuZDogd2hpdGVcbiAgICogfVxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBOb2RlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZXJyb3IgPSBmdW5jdGlvbiBlcnJvcihtZXNzYWdlLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIGlmICh0aGlzLnNvdXJjZSkge1xuICAgICAgdmFyIHBvcyA9IHRoaXMucG9zaXRpb25CeShvcHRzKTtcbiAgICAgIHJldHVybiB0aGlzLnNvdXJjZS5pbnB1dC5lcnJvcihtZXNzYWdlLCBwb3MubGluZSwgcG9zLmNvbHVtbiwgb3B0cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG5ldyBfY3NzU3ludGF4RXJyb3IuZGVmYXVsdChtZXNzYWdlKTtcbiAgfVxuICAvKipcbiAgICogVGhpcyBtZXRob2QgaXMgcHJvdmlkZWQgYXMgYSBjb252ZW5pZW5jZSB3cmFwcGVyIGZvciB7QGxpbmsgUmVzdWx0I3dhcm59LlxuICAgKlxuICAgKiBAcGFyYW0ge1Jlc3VsdH0gcmVzdWx0ICAgICAgVGhlIHtAbGluayBSZXN1bHR9IGluc3RhbmNlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0IHdpbGwgcmVjZWl2ZSB0aGUgd2FybmluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgICAgICAgIFdhcm5pbmcgbWVzc2FnZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRzXSAgICAgIE9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMucGx1Z2luIFBsdWdpbiBuYW1lIHRoYXQgY3JlYXRlZCB0aGlzIHdhcm5pbmcuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQb3N0Q1NTIHdpbGwgc2V0IGl0IGF1dG9tYXRpY2FsbHkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLndvcmQgICBBIHdvcmQgaW5zaWRlIGEgbm9kZeKAmXMgc3RyaW5nIHRoYXQgc2hvdWxkXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBoaWdobGlnaHRlZCBhcyB0aGUgc291cmNlIG9mIHRoZSB3YXJuaW5nLlxuICAgKiBAcGFyYW0ge251bWJlcn0gb3B0cy5pbmRleCAgQW4gaW5kZXggaW5zaWRlIGEgbm9kZeKAmXMgc3RyaW5nIHRoYXQgc2hvdWxkXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZSBoaWdobGlnaHRlZCBhcyB0aGUgc291cmNlIG9mIHRoZSB3YXJuaW5nLlxuICAgKlxuICAgKiBAcmV0dXJuIHtXYXJuaW5nfSBDcmVhdGVkIHdhcm5pbmcgb2JqZWN0LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBwbHVnaW4gPSBwb3N0Y3NzLnBsdWdpbigncG9zdGNzcy1kZXByZWNhdGVkJywgKCkgPT4ge1xuICAgKiAgIHJldHVybiAocm9vdCwgcmVzdWx0KSA9PiB7XG4gICAqICAgICByb290LndhbGtEZWNscygnYmFkJywgZGVjbCA9PiB7XG4gICAqICAgICAgIGRlY2wud2FybihyZXN1bHQsICdEZXByZWNhdGVkIHByb3BlcnR5IGJhZCcpXG4gICAqICAgICB9KVxuICAgKiAgIH1cbiAgICogfSlcbiAgICovXG4gIDtcblxuICBfcHJvdG8ud2FybiA9IGZ1bmN0aW9uIHdhcm4ocmVzdWx0LCB0ZXh0LCBvcHRzKSB7XG4gICAgdmFyIGRhdGEgPSB7XG4gICAgICBub2RlOiB0aGlzXG4gICAgfTtcblxuICAgIGZvciAodmFyIGkgaW4gb3B0cykge1xuICAgICAgZGF0YVtpXSA9IG9wdHNbaV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdC53YXJuKHRleHQsIGRhdGEpO1xuICB9XG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBub2RlIGZyb20gaXRzIHBhcmVudCBhbmQgY2xlYW5zIHRoZSBwYXJlbnQgcHJvcGVydGllc1xuICAgKiBmcm9tIHRoZSBub2RlIGFuZCBpdHMgY2hpbGRyZW4uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGlmIChkZWNsLnByb3AubWF0Y2goL14td2Via2l0LS8pKSB7XG4gICAqICAgZGVjbC5yZW1vdmUoKVxuICAgKiB9XG4gICAqXG4gICAqIEByZXR1cm4ge05vZGV9IE5vZGUgdG8gbWFrZSBjYWxscyBjaGFpbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgIGlmICh0aGlzLnBhcmVudCkge1xuICAgICAgdGhpcy5wYXJlbnQucmVtb3ZlQ2hpbGQodGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBDU1Mgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbm9kZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmdpZmllcnxzeW50YXh9IFtzdHJpbmdpZmllcl0gQSBzeW50YXggdG8gdXNlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluIHN0cmluZyBnZW5lcmF0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IENTUyBzdHJpbmcgb2YgdGhpcyBub2RlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBwb3N0Y3NzLnJ1bGUoeyBzZWxlY3RvcjogJ2EnIH0pLnRvU3RyaW5nKCkgLy89PiBcImEge31cIlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKHN0cmluZ2lmaWVyKSB7XG4gICAgaWYgKHN0cmluZ2lmaWVyID09PSB2b2lkIDApIHtcbiAgICAgIHN0cmluZ2lmaWVyID0gX3N0cmluZ2lmeS5kZWZhdWx0O1xuICAgIH1cblxuICAgIGlmIChzdHJpbmdpZmllci5zdHJpbmdpZnkpIHN0cmluZ2lmaWVyID0gc3RyaW5naWZpZXIuc3RyaW5naWZ5O1xuICAgIHZhciByZXN1bHQgPSAnJztcbiAgICBzdHJpbmdpZmllcih0aGlzLCBmdW5jdGlvbiAoaSkge1xuICAgICAgcmVzdWx0ICs9IGk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhbiBleGFjdCBjbG9uZSBvZiB0aGUgbm9kZS5cbiAgICpcbiAgICogVGhlIHJlc3VsdGluZyBjbG9uZWQgbm9kZSBhbmQgaXRzIChjbG9uZWQpIGNoaWxkcmVuIHdpbGwgcmV0YWluXG4gICAqIGNvZGUgc3R5bGUgcHJvcGVydGllcy5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvdmVycmlkZXNdIE5ldyBwcm9wZXJ0aWVzIHRvIG92ZXJyaWRlIGluIHRoZSBjbG9uZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogZGVjbC5yYXdzLmJlZm9yZSAgICAvLz0+IFwiXFxuICBcIlxuICAgKiBjb25zdCBjbG9uZWQgPSBkZWNsLmNsb25lKHsgcHJvcDogJy1tb3otJyArIGRlY2wucHJvcCB9KVxuICAgKiBjbG9uZWQucmF3cy5iZWZvcmUgIC8vPT4gXCJcXG4gIFwiXG4gICAqIGNsb25lZC50b1N0cmluZygpICAgLy89PiAtbW96LXRyYW5zZm9ybTogc2NhbGUoMClcbiAgICpcbiAgICogQHJldHVybiB7Tm9kZX0gQ2xvbmUgb2YgdGhlIG5vZGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNsb25lID0gZnVuY3Rpb24gY2xvbmUob3ZlcnJpZGVzKSB7XG4gICAgaWYgKG92ZXJyaWRlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBvdmVycmlkZXMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgY2xvbmVkID0gY2xvbmVOb2RlKHRoaXMpO1xuXG4gICAgZm9yICh2YXIgbmFtZSBpbiBvdmVycmlkZXMpIHtcbiAgICAgIGNsb25lZFtuYW1lXSA9IG92ZXJyaWRlc1tuYW1lXTtcbiAgICB9XG5cbiAgICByZXR1cm4gY2xvbmVkO1xuICB9XG4gIC8qKlxuICAgKiBTaG9ydGN1dCB0byBjbG9uZSB0aGUgbm9kZSBhbmQgaW5zZXJ0IHRoZSByZXN1bHRpbmcgY2xvbmVkIG5vZGVcbiAgICogYmVmb3JlIHRoZSBjdXJyZW50IG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3ZlcnJpZGVzXSBNZXcgcHJvcGVydGllcyB0byBvdmVycmlkZSBpbiB0aGUgY2xvbmUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGRlY2wuY2xvbmVCZWZvcmUoeyBwcm9wOiAnLW1vei0nICsgZGVjbC5wcm9wIH0pXG4gICAqXG4gICAqIEByZXR1cm4ge05vZGV9IE5ldyBub2RlXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNsb25lQmVmb3JlID0gZnVuY3Rpb24gY2xvbmVCZWZvcmUob3ZlcnJpZGVzKSB7XG4gICAgaWYgKG92ZXJyaWRlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBvdmVycmlkZXMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgY2xvbmVkID0gdGhpcy5jbG9uZShvdmVycmlkZXMpO1xuICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLCBjbG9uZWQpO1xuICAgIHJldHVybiBjbG9uZWQ7XG4gIH1cbiAgLyoqXG4gICAqIFNob3J0Y3V0IHRvIGNsb25lIHRoZSBub2RlIGFuZCBpbnNlcnQgdGhlIHJlc3VsdGluZyBjbG9uZWQgbm9kZVxuICAgKiBhZnRlciB0aGUgY3VycmVudCBub2RlLlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gW292ZXJyaWRlc10gTmV3IHByb3BlcnRpZXMgdG8gb3ZlcnJpZGUgaW4gdGhlIGNsb25lLlxuICAgKlxuICAgKiBAcmV0dXJuIHtOb2RlfSBOZXcgbm9kZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8uY2xvbmVBZnRlciA9IGZ1bmN0aW9uIGNsb25lQWZ0ZXIob3ZlcnJpZGVzKSB7XG4gICAgaWYgKG92ZXJyaWRlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBvdmVycmlkZXMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgY2xvbmVkID0gdGhpcy5jbG9uZShvdmVycmlkZXMpO1xuICAgIHRoaXMucGFyZW50Lmluc2VydEFmdGVyKHRoaXMsIGNsb25lZCk7XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0cyBub2RlKHMpIGJlZm9yZSB0aGUgY3VycmVudCBub2RlIGFuZCByZW1vdmVzIHRoZSBjdXJyZW50IG5vZGUuXG4gICAqXG4gICAqIEBwYXJhbSB7Li4uTm9kZX0gbm9kZXMgTW9kZShzKSB0byByZXBsYWNlIGN1cnJlbnQgb25lLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBpZiAoYXRydWxlLm5hbWUgPT09ICdtaXhpbicpIHtcbiAgICogICBhdHJ1bGUucmVwbGFjZVdpdGgobWl4aW5SdWxlc1thdHJ1bGUucGFyYW1zXSlcbiAgICogfVxuICAgKlxuICAgKiBAcmV0dXJuIHtOb2RlfSBDdXJyZW50IG5vZGUgdG8gbWV0aG9kcyBjaGFpbi5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVwbGFjZVdpdGggPSBmdW5jdGlvbiByZXBsYWNlV2l0aCgpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBub2RlcyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgbm9kZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIF9pID0gMCwgX25vZGVzID0gbm9kZXM7IF9pIDwgX25vZGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgICB2YXIgbm9kZSA9IF9ub2Rlc1tfaV07XG4gICAgICAgIHRoaXMucGFyZW50Lmluc2VydEJlZm9yZSh0aGlzLCBub2RlKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbmV4dCBjaGlsZCBvZiB0aGUgbm9kZeKAmXMgcGFyZW50LlxuICAgKiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIHRoZSBjdXJyZW50IG5vZGUgaXMgdGhlIGxhc3QgY2hpbGQuXG4gICAqXG4gICAqIEByZXR1cm4ge05vZGV8dW5kZWZpbmVkfSBOZXh0IG5vZGUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGlmIChjb21tZW50LnRleHQgPT09ICdkZWxldGUgbmV4dCcpIHtcbiAgICogICBjb25zdCBuZXh0ID0gY29tbWVudC5uZXh0KClcbiAgICogICBpZiAobmV4dCkge1xuICAgKiAgICAgbmV4dC5yZW1vdmUoKVxuICAgKiAgIH1cbiAgICogfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5uZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICBpZiAoIXRoaXMucGFyZW50KSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IHRoaXMucGFyZW50LmluZGV4KHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnBhcmVudC5ub2Rlc1tpbmRleCArIDFdO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwcmV2aW91cyBjaGlsZCBvZiB0aGUgbm9kZeKAmXMgcGFyZW50LlxuICAgKiBSZXR1cm5zIGB1bmRlZmluZWRgIGlmIHRoZSBjdXJyZW50IG5vZGUgaXMgdGhlIGZpcnN0IGNoaWxkLlxuICAgKlxuICAgKiBAcmV0dXJuIHtOb2RlfHVuZGVmaW5lZH0gUHJldmlvdXMgbm9kZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgYW5ub3RhdGlvbiA9IGRlY2wucHJldigpXG4gICAqIGlmIChhbm5vdGF0aW9uLnR5cGUgPT09ICdjb21tZW50Jykge1xuICAgKiAgIHJlYWRBbm5vdGF0aW9uKGFubm90YXRpb24udGV4dClcbiAgICogfVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wcmV2ID0gZnVuY3Rpb24gcHJldigpIHtcbiAgICBpZiAoIXRoaXMucGFyZW50KSByZXR1cm4gdW5kZWZpbmVkO1xuICAgIHZhciBpbmRleCA9IHRoaXMucGFyZW50LmluZGV4KHRoaXMpO1xuICAgIHJldHVybiB0aGlzLnBhcmVudC5ub2Rlc1tpbmRleCAtIDFdO1xuICB9XG4gIC8qKlxuICAgKiBJbnNlcnQgbmV3IG5vZGUgYmVmb3JlIGN1cnJlbnQgbm9kZSB0byBjdXJyZW50IG5vZGXigJlzIHBhcmVudC5cbiAgICpcbiAgICogSnVzdCBhbGlhcyBmb3IgYG5vZGUucGFyZW50Lmluc2VydEJlZm9yZShub2RlLCBhZGQpYC5cbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfG9iamVjdHxzdHJpbmd8Tm9kZVtdfSBhZGQgTmV3IG5vZGUuXG4gICAqXG4gICAqIEByZXR1cm4ge05vZGV9IFRoaXMgbm9kZSBmb3IgbWV0aG9kcyBjaGFpbi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogZGVjbC5iZWZvcmUoJ2NvbnRlbnQ6IFwiXCInKVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5iZWZvcmUgPSBmdW5jdGlvbiBiZWZvcmUoYWRkKSB7XG4gICAgdGhpcy5wYXJlbnQuaW5zZXJ0QmVmb3JlKHRoaXMsIGFkZCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBuZXcgbm9kZSBhZnRlciBjdXJyZW50IG5vZGUgdG8gY3VycmVudCBub2Rl4oCZcyBwYXJlbnQuXG4gICAqXG4gICAqIEp1c3QgYWxpYXMgZm9yIGBub2RlLnBhcmVudC5pbnNlcnRBZnRlcihub2RlLCBhZGQpYC5cbiAgICpcbiAgICogQHBhcmFtIHtOb2RlfG9iamVjdHxzdHJpbmd8Tm9kZVtdfSBhZGQgTmV3IG5vZGUuXG4gICAqXG4gICAqIEByZXR1cm4ge05vZGV9IFRoaXMgbm9kZSBmb3IgbWV0aG9kcyBjaGFpbi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogZGVjbC5hZnRlcignY29sb3I6IGJsYWNrJylcbiAgICovXG4gIDtcblxuICBfcHJvdG8uYWZ0ZXIgPSBmdW5jdGlvbiBhZnRlcihhZGQpIHtcbiAgICB0aGlzLnBhcmVudC5pbnNlcnRBZnRlcih0aGlzLCBhZGQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIF9wcm90by50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgdmFyIGZpeGVkID0ge307XG5cbiAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShuYW1lKSkgY29udGludWU7XG4gICAgICBpZiAobmFtZSA9PT0gJ3BhcmVudCcpIGNvbnRpbnVlO1xuICAgICAgdmFyIHZhbHVlID0gdGhpc1tuYW1lXTtcblxuICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgZml4ZWRbbmFtZV0gPSB2YWx1ZS5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGkgPT09ICdvYmplY3QnICYmIGkudG9KU09OKSB7XG4gICAgICAgICAgICByZXR1cm4gaS50b0pTT04oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZS50b0pTT04pIHtcbiAgICAgICAgZml4ZWRbbmFtZV0gPSB2YWx1ZS50b0pTT04oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZpeGVkW25hbWVdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpeGVkO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEge0BsaW5rIE5vZGUjcmF3c30gdmFsdWUuIElmIHRoZSBub2RlIGlzIG1pc3NpbmdcbiAgICogdGhlIGNvZGUgc3R5bGUgcHJvcGVydHkgKGJlY2F1c2UgdGhlIG5vZGUgd2FzIG1hbnVhbGx5IGJ1aWx0IG9yIGNsb25lZCksXG4gICAqIFBvc3RDU1Mgd2lsbCB0cnkgdG8gYXV0b2RldGVjdCB0aGUgY29kZSBzdHlsZSBwcm9wZXJ0eSBieSBsb29raW5nXG4gICAqIGF0IG90aGVyIG5vZGVzIGluIHRoZSB0cmVlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gcHJvcCAgICAgICAgICBOYW1lIG9mIGNvZGUgc3R5bGUgcHJvcGVydHkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZGVmYXVsdFR5cGVdIE5hbWUgb2YgZGVmYXVsdCB2YWx1ZSwgaXQgY2FuIGJlIG1pc3NlZFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUgYXMgcHJvcC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoJ2EgeyBiYWNrZ3JvdW5kOiB3aGl0ZSB9JylcbiAgICogcm9vdC5ub2Rlc1swXS5hcHBlbmQoeyBwcm9wOiAnY29sb3InLCB2YWx1ZTogJ2JsYWNrJyB9KVxuICAgKiByb290Lm5vZGVzWzBdLm5vZGVzWzFdLnJhd3MuYmVmb3JlICAgLy89PiB1bmRlZmluZWRcbiAgICogcm9vdC5ub2Rlc1swXS5ub2Rlc1sxXS5yYXcoJ2JlZm9yZScpIC8vPT4gJyAnXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gQ29kZSBzdHlsZSB2YWx1ZS5cbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmF3ID0gZnVuY3Rpb24gcmF3KHByb3AsIGRlZmF1bHRUeXBlKSB7XG4gICAgdmFyIHN0ciA9IG5ldyBfc3RyaW5naWZpZXIuZGVmYXVsdCgpO1xuICAgIHJldHVybiBzdHIucmF3KHRoaXMsIHByb3AsIGRlZmF1bHRUeXBlKTtcbiAgfVxuICAvKipcbiAgICogRmluZHMgdGhlIFJvb3QgaW5zdGFuY2Ugb2YgdGhlIG5vZGXigJlzIHRyZWUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHJvb3Qubm9kZXNbMF0ubm9kZXNbMF0ucm9vdCgpID09PSByb290XG4gICAqXG4gICAqIEByZXR1cm4ge1Jvb3R9IFJvb3QgcGFyZW50LlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yb290ID0gZnVuY3Rpb24gcm9vdCgpIHtcbiAgICB2YXIgcmVzdWx0ID0gdGhpcztcblxuICAgIHdoaWxlIChyZXN1bHQucGFyZW50KSB7XG4gICAgICByZXN1bHQgPSByZXN1bHQucGFyZW50O1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIENsZWFyIHRoZSBjb2RlIHN0eWxlIHByb3BlcnRpZXMgZm9yIHRoZSBub2RlIGFuZCBpdHMgY2hpbGRyZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2tlZXBCZXR3ZWVuXSBLZWVwIHRoZSByYXdzLmJldHdlZW4gc3ltYm9scy5cbiAgICpcbiAgICogQHJldHVybiB7dW5kZWZpbmVkfVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBub2RlLnJhd3MuYmVmb3JlICAvLz0+ICcgJ1xuICAgKiBub2RlLmNsZWFuUmF3cygpXG4gICAqIG5vZGUucmF3cy5iZWZvcmUgIC8vPT4gdW5kZWZpbmVkXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmNsZWFuUmF3cyA9IGZ1bmN0aW9uIGNsZWFuUmF3cyhrZWVwQmV0d2Vlbikge1xuICAgIGRlbGV0ZSB0aGlzLnJhd3MuYmVmb3JlO1xuICAgIGRlbGV0ZSB0aGlzLnJhd3MuYWZ0ZXI7XG4gICAgaWYgKCFrZWVwQmV0d2VlbikgZGVsZXRlIHRoaXMucmF3cy5iZXR3ZWVuO1xuICB9O1xuXG4gIF9wcm90by5wb3NpdGlvbkluc2lkZSA9IGZ1bmN0aW9uIHBvc2l0aW9uSW5zaWRlKGluZGV4KSB7XG4gICAgdmFyIHN0cmluZyA9IHRoaXMudG9TdHJpbmcoKTtcbiAgICB2YXIgY29sdW1uID0gdGhpcy5zb3VyY2Uuc3RhcnQuY29sdW1uO1xuICAgIHZhciBsaW5lID0gdGhpcy5zb3VyY2Uuc3RhcnQubGluZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5kZXg7IGkrKykge1xuICAgICAgaWYgKHN0cmluZ1tpXSA9PT0gJ1xcbicpIHtcbiAgICAgICAgY29sdW1uID0gMTtcbiAgICAgICAgbGluZSArPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29sdW1uICs9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbmU6IGxpbmUsXG4gICAgICBjb2x1bW46IGNvbHVtblxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnBvc2l0aW9uQnkgPSBmdW5jdGlvbiBwb3NpdGlvbkJ5KG9wdHMpIHtcbiAgICB2YXIgcG9zID0gdGhpcy5zb3VyY2Uuc3RhcnQ7XG5cbiAgICBpZiAob3B0cy5pbmRleCkge1xuICAgICAgcG9zID0gdGhpcy5wb3NpdGlvbkluc2lkZShvcHRzLmluZGV4KTtcbiAgICB9IGVsc2UgaWYgKG9wdHMud29yZCkge1xuICAgICAgdmFyIGluZGV4ID0gdGhpcy50b1N0cmluZygpLmluZGV4T2Yob3B0cy53b3JkKTtcbiAgICAgIGlmIChpbmRleCAhPT0gLTEpIHBvcyA9IHRoaXMucG9zaXRpb25JbnNpZGUoaW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBwb3M7XG4gIH1cbiAgLyoqXG4gICAqIEBtZW1iZXJvZiBOb2RlI1xuICAgKiBAbWVtYmVyIHtzdHJpbmd9IHR5cGUgU3RyaW5nIHJlcHJlc2VudGluZyB0aGUgbm9kZeKAmXMgdHlwZS5cbiAgICogICAgICAgICAgICAgICAgICAgICAgIFBvc3NpYmxlIHZhbHVlcyBhcmUgYHJvb3RgLCBgYXRydWxlYCwgYHJ1bGVgLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgYGRlY2xgLCBvciBgY29tbWVudGAuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHBvc3Rjc3MuZGVjbCh7IHByb3A6ICdjb2xvcicsIHZhbHVlOiAnYmxhY2snIH0pLnR5cGUgLy89PiAnZGVjbCdcbiAgICovXG5cbiAgLyoqXG4gICAqIEBtZW1iZXJvZiBOb2RlI1xuICAgKiBAbWVtYmVyIHtDb250YWluZXJ9IHBhcmVudCBUaGUgbm9kZeKAmXMgcGFyZW50IG5vZGUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHJvb3Qubm9kZXNbMF0ucGFyZW50ID09PSByb290XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbWVtYmVyb2YgTm9kZSNcbiAgICogQG1lbWJlciB7c291cmNlfSBzb3VyY2UgVGhlIGlucHV0IHNvdXJjZSBvZiB0aGUgbm9kZS5cbiAgICpcbiAgICogVGhlIHByb3BlcnR5IGlzIHVzZWQgaW4gc291cmNlIG1hcCBnZW5lcmF0aW9uLlxuICAgKlxuICAgKiBJZiB5b3UgY3JlYXRlIGEgbm9kZSBtYW51YWxseSAoZS5nLiwgd2l0aCBgcG9zdGNzcy5kZWNsKClgKSxcbiAgICogdGhhdCBub2RlIHdpbGwgbm90IGhhdmUgYSBgc291cmNlYCBwcm9wZXJ0eSBhbmQgd2lsbCBiZSBhYnNlbnRcbiAgICogZnJvbSB0aGUgc291cmNlIG1hcC4gRm9yIHRoaXMgcmVhc29uLCB0aGUgcGx1Z2luIGRldmVsb3BlciBzaG91bGRcbiAgICogY29uc2lkZXIgY2xvbmluZyBub2RlcyB0byBjcmVhdGUgbmV3IG9uZXMgKGluIHdoaWNoIGNhc2UgdGhlIG5ldyBub2Rl4oCZc1xuICAgKiBzb3VyY2Ugd2lsbCByZWZlcmVuY2UgdGhlIG9yaWdpbmFsLCBjbG9uZWQgbm9kZSkgb3Igc2V0dGluZ1xuICAgKiB0aGUgYHNvdXJjZWAgcHJvcGVydHkgbWFudWFsbHkuXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIC8vIEJhZFxuICAgKiBjb25zdCBwcmVmaXhlZCA9IHBvc3Rjc3MuZGVjbCh7XG4gICAqICAgcHJvcDogJy1tb3otJyArIGRlY2wucHJvcCxcbiAgICogICB2YWx1ZTogZGVjbC52YWx1ZVxuICAgKiB9KVxuICAgKlxuICAgKiAvLyBHb29kXG4gICAqIGNvbnN0IHByZWZpeGVkID0gZGVjbC5jbG9uZSh7IHByb3A6ICctbW96LScgKyBkZWNsLnByb3AgfSlcbiAgICogYGBgXG4gICAqXG4gICAqIGBgYGpzXG4gICAqIGlmIChhdHJ1bGUubmFtZSA9PT0gJ2FkZC1saW5rJykge1xuICAgKiAgIGNvbnN0IHJ1bGUgPSBwb3N0Y3NzLnJ1bGUoeyBzZWxlY3RvcjogJ2EnLCBzb3VyY2U6IGF0cnVsZS5zb3VyY2UgfSlcbiAgICogICBhdHJ1bGUucGFyZW50Lmluc2VydEJlZm9yZShhdHJ1bGUsIHJ1bGUpXG4gICAqIH1cbiAgICogYGBgXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGRlY2wuc291cmNlLmlucHV0LmZyb20gLy89PiAnL2hvbWUvYWkvYS5zYXNzJ1xuICAgKiBkZWNsLnNvdXJjZS5zdGFydCAgICAgIC8vPT4geyBsaW5lOiAxMCwgY29sdW1uOiAyIH1cbiAgICogZGVjbC5zb3VyY2UuZW5kICAgICAgICAvLz0+IHsgbGluZTogMTAsIGNvbHVtbjogMTIgfVxuICAgKi9cblxuICAvKipcbiAgICogQG1lbWJlcm9mIE5vZGUjXG4gICAqIEBtZW1iZXIge29iamVjdH0gcmF3cyBJbmZvcm1hdGlvbiB0byBnZW5lcmF0ZSBieXRlLXRvLWJ5dGUgZXF1YWxcbiAgICogICAgICAgICAgICAgICAgICAgICAgIG5vZGUgc3RyaW5nIGFzIGl0IHdhcyBpbiB0aGUgb3JpZ2luIGlucHV0LlxuICAgKlxuICAgKiBFdmVyeSBwYXJzZXIgc2F2ZXMgaXRzIG93biBwcm9wZXJ0aWVzLFxuICAgKiBidXQgdGhlIGRlZmF1bHQgQ1NTIHBhcnNlciB1c2VzOlxuICAgKlxuICAgKiAqIGBiZWZvcmVgOiB0aGUgc3BhY2Ugc3ltYm9scyBiZWZvcmUgdGhlIG5vZGUuIEl0IGFsc28gc3RvcmVzIGAqYFxuICAgKiAgIGFuZCBgX2Agc3ltYm9scyBiZWZvcmUgdGhlIGRlY2xhcmF0aW9uIChJRSBoYWNrKS5cbiAgICogKiBgYWZ0ZXJgOiB0aGUgc3BhY2Ugc3ltYm9scyBhZnRlciB0aGUgbGFzdCBjaGlsZCBvZiB0aGUgbm9kZVxuICAgKiAgIHRvIHRoZSBlbmQgb2YgdGhlIG5vZGUuXG4gICAqICogYGJldHdlZW5gOiB0aGUgc3ltYm9scyBiZXR3ZWVuIHRoZSBwcm9wZXJ0eSBhbmQgdmFsdWVcbiAgICogICBmb3IgZGVjbGFyYXRpb25zLCBzZWxlY3RvciBhbmQgYHtgIGZvciBydWxlcywgb3IgbGFzdCBwYXJhbWV0ZXJcbiAgICogICBhbmQgYHtgIGZvciBhdC1ydWxlcy5cbiAgICogKiBgc2VtaWNvbG9uYDogY29udGFpbnMgdHJ1ZSBpZiB0aGUgbGFzdCBjaGlsZCBoYXNcbiAgICogICBhbiAob3B0aW9uYWwpIHNlbWljb2xvbi5cbiAgICogKiBgYWZ0ZXJOYW1lYDogdGhlIHNwYWNlIGJldHdlZW4gdGhlIGF0LXJ1bGUgbmFtZSBhbmQgaXRzIHBhcmFtZXRlcnMuXG4gICAqICogYGxlZnRgOiB0aGUgc3BhY2Ugc3ltYm9scyBiZXR3ZWVuIGAvKmAgYW5kIHRoZSBjb21tZW504oCZcyB0ZXh0LlxuICAgKiAqIGByaWdodGA6IHRoZSBzcGFjZSBzeW1ib2xzIGJldHdlZW4gdGhlIGNvbW1lbnTigJlzIHRleHRcbiAgICogICBhbmQgPGNvZGU+KiYjNDc7PC9jb2RlPi5cbiAgICogKiBgaW1wb3J0YW50YDogdGhlIGNvbnRlbnQgb2YgdGhlIGltcG9ydGFudCBzdGF0ZW1lbnQsXG4gICAqICAgaWYgaXQgaXMgbm90IGp1c3QgYCFpbXBvcnRhbnRgLlxuICAgKlxuICAgKiBQb3N0Q1NTIGNsZWFucyBzZWxlY3RvcnMsIGRlY2xhcmF0aW9uIHZhbHVlcyBhbmQgYXQtcnVsZSBwYXJhbWV0ZXJzXG4gICAqIGZyb20gY29tbWVudHMgYW5kIGV4dHJhIHNwYWNlcywgYnV0IGl0IHN0b3JlcyBvcmlnaW4gY29udGVudCBpbiByYXdzXG4gICAqIHByb3BlcnRpZXMuIEFzIHN1Y2gsIGlmIHlvdSBkb27igJl0IGNoYW5nZSBhIGRlY2xhcmF0aW9u4oCZcyB2YWx1ZSxcbiAgICogUG9zdENTUyB3aWxsIHVzZSB0aGUgcmF3IHZhbHVlIHdpdGggY29tbWVudHMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IHJvb3QgPSBwb3N0Y3NzLnBhcnNlKCdhIHtcXG4gIGNvbG9yOmJsYWNrXFxufScpXG4gICAqIHJvb3QuZmlyc3QuZmlyc3QucmF3cyAvLz0+IHsgYmVmb3JlOiAnXFxuICAnLCBiZXR3ZWVuOiAnOicgfVxuICAgKi9cbiAgO1xuXG4gIHJldHVybiBOb2RlO1xufSgpO1xuXG52YXIgX2RlZmF1bHQgPSBOb2RlO1xuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBwb3NpdGlvblxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxpbmUgICBTb3VyY2UgbGluZSBpbiBmaWxlLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGNvbHVtbiBTb3VyY2UgY29sdW1uIGluIGZpbGUuXG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBzb3VyY2VcbiAqIEBwcm9wZXJ0eSB7SW5wdXR9IGlucHV0ICAgIHtAbGluayBJbnB1dH0gd2l0aCBpbnB1dCBmaWxlXG4gKiBAcHJvcGVydHkge3Bvc2l0aW9ufSBzdGFydCBUaGUgc3RhcnRpbmcgcG9zaXRpb24gb2YgdGhlIG5vZGXigJlzIHNvdXJjZS5cbiAqIEBwcm9wZXJ0eSB7cG9zaXRpb259IGVuZCAgIFRoZSBlbmRpbmcgcG9zaXRpb24gb2YgdGhlIG5vZGXigJlzIHNvdXJjZS5cbiAqL1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbTV2WkdVdVpYTTJJbDBzSW01aGJXVnpJanBiSW1Oc2IyNWxUbTlrWlNJc0ltOWlhaUlzSW5CaGNtVnVkQ0lzSW1Oc2IyNWxaQ0lzSW1OdmJuTjBjblZqZEc5eUlpd2lhU0lzSW1oaGMwOTNibEJ5YjNCbGNuUjVJaXdpZG1Gc2RXVWlMQ0owZVhCbElpd2lRWEp5WVhraUxDSnRZWEFpTENKcUlpd2lUbTlrWlNJc0ltUmxabUYxYkhSeklpd2ljbUYzY3lJc0luQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0lrVnljbTl5SWl3aVNsTlBUaUlzSW5OMGNtbHVaMmxtZVNJc0ltNWhiV1VpTENKbGNuSnZjaUlzSW0xbGMzTmhaMlVpTENKdmNIUnpJaXdpYzI5MWNtTmxJaXdpY0c5eklpd2ljRzl6YVhScGIyNUNlU0lzSW1sdWNIVjBJaXdpYkdsdVpTSXNJbU52YkhWdGJpSXNJa056YzFONWJuUmhlRVZ5Y205eUlpd2lkMkZ5YmlJc0luSmxjM1ZzZENJc0luUmxlSFFpTENKa1lYUmhJaXdpYm05a1pTSXNJbkpsYlc5MlpTSXNJbkpsYlc5MlpVTm9hV3hrSWl3aWRXNWtaV1pwYm1Wa0lpd2lkRzlUZEhKcGJtY2lMQ0p6ZEhKcGJtZHBabWxsY2lJc0ltTnNiMjVsSWl3aWIzWmxjbkpwWkdWeklpd2lZMnh2Ym1WQ1pXWnZjbVVpTENKcGJuTmxjblJDWldadmNtVWlMQ0pqYkc5dVpVRm1kR1Z5SWl3aWFXNXpaWEowUVdaMFpYSWlMQ0p5WlhCc1lXTmxWMmwwYUNJc0ltNXZaR1Z6SWl3aWJtVjRkQ0lzSW1sdVpHVjRJaXdpY0hKbGRpSXNJbUpsWm05eVpTSXNJbUZrWkNJc0ltRm1kR1Z5SWl3aWRHOUtVMDlPSWl3aVptbDRaV1FpTENKeVlYY2lMQ0p3Y205d0lpd2laR1ZtWVhWc2RGUjVjR1VpTENKemRISWlMQ0pUZEhKcGJtZHBabWxsY2lJc0luSnZiM1FpTENKamJHVmhibEpoZDNNaUxDSnJaV1Z3UW1WMGQyVmxiaUlzSW1KbGRIZGxaVzRpTENKd2IzTnBkR2x2YmtsdWMybGtaU0lzSW5OMGNtbHVaeUlzSW5OMFlYSjBJaXdpZDI5eVpDSXNJbWx1WkdWNFQyWWlYU3dpYldGd2NHbHVaM01pT2lJN096czdPMEZCUVVFN08wRkJRMEU3TzBGQlEwRTdPenM3UVVGRlFTeFRRVUZUUVN4VFFVRlVMRU5CUVc5Q1F5eEhRVUZ3UWl4RlFVRjVRa01zVFVGQmVrSXNSVUZCYVVNN1FVRkRMMElzVFVGQlNVTXNUVUZCVFN4SFFVRkhMRWxCUVVsR0xFZEJRVWNzUTBGQlEwY3NWMEZCVWl4RlFVRmlPenRCUVVWQkxFOUJRVXNzU1VGQlNVTXNRMEZCVkN4SlFVRmpTaXhIUVVGa0xFVkJRVzFDTzBGQlEycENMRkZCUVVrc1EwRkJRMEVzUjBGQlJ5eERRVUZEU3l4alFVRktMRU5CUVcxQ1JDeERRVUZ1UWl4RFFVRk1MRVZCUVRSQ08wRkJRelZDTEZGQlFVbEZMRXRCUVVzc1IwRkJSMDRzUjBGQlJ5eERRVUZEU1N4RFFVRkVMRU5CUVdZN1FVRkRRU3hSUVVGSlJ5eEpRVUZKTEVkQlFVY3NUMEZCVDBRc1MwRkJiRUk3TzBGQlJVRXNVVUZCU1VZc1EwRkJReXhMUVVGTExGRkJRVTRzU1VGQmEwSkhMRWxCUVVrc1MwRkJTeXhSUVVFdlFpeEZRVUY1UXp0QlFVTjJReXhWUVVGSlRpeE5RVUZLTEVWQlFWbERMRTFCUVUwc1EwRkJRMFVzUTBGQlJDeERRVUZPTEVkQlFWbElMRTFCUVZvN1FVRkRZaXhMUVVaRUxFMUJSVThzU1VGQlNVY3NRMEZCUXl4TFFVRkxMRkZCUVZZc1JVRkJiMEk3UVVGRGVrSkdMRTFCUVVGQkxFMUJRVTBzUTBGQlEwVXNRMEZCUkN4RFFVRk9MRWRCUVZsRkxFdEJRVm83UVVGRFJDeExRVVpOTEUxQlJVRXNTVUZCU1VFc1MwRkJTeXhaUVVGWlJTeExRVUZ5UWl4RlFVRTBRanRCUVVOcVEwNHNUVUZCUVVFc1RVRkJUU3hEUVVGRFJTeERRVUZFTEVOQlFVNHNSMEZCV1VVc1MwRkJTeXhEUVVGRFJ5eEhRVUZPTEVOQlFWVXNWVUZCUVVNc1EwRkJRenRCUVVGQkxHVkJRVWxZTEZOQlFWTXNRMEZCUTFjc1EwRkJSQ3hGUVVGSlVpeE5RVUZLTEVOQlFXSTdRVUZCUVN4UFFVRllMRU5CUVZvN1FVRkRSQ3hMUVVaTkxFMUJSVUU3UVVGRFRDeFZRVUZKU3l4SlFVRkpMRXRCUVVzc1VVRkJWQ3hKUVVGeFFrUXNTMEZCU3l4TFFVRkxMRWxCUVc1RExFVkJRWGxEUVN4TFFVRkxMRWRCUVVkUUxGTkJRVk1zUTBGQlEwOHNTMEZCUkN4RFFVRnFRanRCUVVONlEwb3NUVUZCUVVFc1RVRkJUU3hEUVVGRFJTeERRVUZFTEVOQlFVNHNSMEZCV1VVc1MwRkJXanRCUVVORU8wRkJRMFk3TzBGQlJVUXNVMEZCVDBvc1RVRkJVRHRCUVVORU8wRkJSVVE3T3pzN096czdTVUZMVFZNc1NUczdPMEZCUTBvN096dEJRVWRCTEdkQ1FVRmhReXhSUVVGaUxFVkJRVFpDTzBGQlFVRXNVVUZCYUVKQkxGRkJRV2RDTzBGQlFXaENRU3hOUVVGQlFTeFJRVUZuUWl4SFFVRk1MRVZCUVVzN1FVRkJRVHM3UVVGRE0wSXNVMEZCUzBNc1NVRkJUQ3hIUVVGWkxFVkJRVm83TzBGQlEwRXNVVUZCU1VNc1QwRkJUeXhEUVVGRFF5eEhRVUZTTEVOQlFWbERMRkZCUVZvc1MwRkJlVUlzV1VGQk4wSXNSVUZCTWtNN1FVRkRla01zVlVGQlNTeFBRVUZQU2l4UlFVRlFMRXRCUVc5Q0xGRkJRWEJDTEVsQlFXZERMRTlCUVU5QkxGRkJRVkFzUzBGQmIwSXNWMEZCZUVRc1JVRkJjVVU3UVVGRGJrVXNZMEZCVFN4SlFVRkpTeXhMUVVGS0xFTkJRMG9zYlVSQlEwRkRMRWxCUVVrc1EwRkJRME1zVTBGQlRDeERRVUZsVUN4UlFVRm1MRU5CUmtrc1EwRkJUanRCUVVsRU8wRkJRMFk3TzBGQlEwUXNVMEZCU3l4SlFVRkpVU3hKUVVGVUxFbEJRV2xDVWl4UlFVRnFRaXhGUVVFeVFqdEJRVU42UWl4WFFVRkxVU3hKUVVGTUxFbEJRV0ZTTEZGQlFWRXNRMEZCUTFFc1NVRkJSQ3hEUVVGeVFqdEJRVU5FTzBGQlEwWTdRVUZGUkRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzFOQlowTkJReXhMTEVkQlFVRXNaVUZCVDBNc1QwRkJVQ3hGUVVGblFrTXNTVUZCYUVJc1JVRkJORUk3UVVGQlFTeFJRVUZhUVN4SlFVRlpPMEZCUVZwQkxFMUJRVUZCTEVsQlFWa3NSMEZCVEN4RlFVRkxPMEZCUVVFN08wRkJRekZDTEZGQlFVa3NTMEZCUzBNc1RVRkJWQ3hGUVVGcFFqdEJRVU5tTEZWQlFVbERMRWRCUVVjc1IwRkJSeXhMUVVGTFF5eFZRVUZNTEVOQlFXZENTQ3hKUVVGb1FpeERRVUZXTzBGQlEwRXNZVUZCVHl4TFFVRkxReXhOUVVGTUxFTkJRVmxITEV0QlFWb3NRMEZCYTBKT0xFdEJRV3hDTEVOQlFYZENReXhQUVVGNFFpeEZRVUZwUTBjc1IwRkJSeXhEUVVGRFJ5eEpRVUZ5UXl4RlFVRXlRMGdzUjBGQlJ5eERRVUZEU1N4TlFVRXZReXhGUVVGMVJFNHNTVUZCZGtRc1EwRkJVRHRCUVVORU96dEJRVU5FTEZkQlFVOHNTVUZCU1U4c2RVSkJRVW9zUTBGQmJVSlNMRTlCUVc1Q0xFTkJRVkE3UVVGRFJEdEJRVVZFT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3VTBGNVFrRlRMRWtzUjBGQlFTeGpRVUZOUXl4TlFVRk9MRVZCUVdORExFbEJRV1FzUlVGQmIwSldMRWxCUVhCQ0xFVkJRVEJDTzBGQlEzaENMRkZCUVVsWExFbEJRVWtzUjBGQlJ6dEJRVUZGUXl4TlFVRkJRU3hKUVVGSkxFVkJRVVU3UVVGQlVpeExRVUZZT3p0QlFVTkJMRk5CUVVzc1NVRkJTUzlDTEVOQlFWUXNTVUZCWTIxQ0xFbEJRV1E3UVVGQmIwSlhMRTFCUVVGQkxFbEJRVWtzUTBGQlF6bENMRU5CUVVRc1EwRkJTaXhIUVVGVmJVSXNTVUZCU1N4RFFVRkRia0lzUTBGQlJDeERRVUZrTzBGQlFYQkNPenRCUVVOQkxGZEJRVTgwUWl4TlFVRk5MRU5CUVVORUxFbEJRVkFzUTBGQldVVXNTVUZCV2l4RlFVRnJRa01zU1VGQmJFSXNRMEZCVUR0QlFVTkVPMEZCUlVRN096czdPenM3T3pzN096czdVMEZYUVVVc1RTeEhRVUZCTEd0Q1FVRlZPMEZCUTFJc1VVRkJTU3hMUVVGTGJrTXNUVUZCVkN4RlFVRnBRanRCUVVObUxGZEJRVXRCTEUxQlFVd3NRMEZCV1c5RExGZEJRVm9zUTBGQmQwSXNTVUZCZUVJN1FVRkRSRHM3UVVGRFJDeFRRVUZMY0VNc1RVRkJUQ3hIUVVGamNVTXNVMEZCWkR0QlFVTkJMRmRCUVU4c1NVRkJVRHRCUVVORU8wRkJSVVE3T3pzN096czdPenM3T3pzN1UwRlhRVU1zVVN4SFFVRkJMR3RDUVVGVlF5eFhRVUZXTEVWQlFXMURPMEZCUVVFc1VVRkJla0pCTEZkQlFYbENPMEZCUVhwQ1FTeE5RVUZCUVN4WFFVRjVRaXhIUVVGWWNrSXNhMEpCUVZjN1FVRkJRVHM3UVVGRGFrTXNVVUZCU1hGQ0xGZEJRVmNzUTBGQlEzSkNMRk5CUVdoQ0xFVkJRVEpDY1VJc1YwRkJWeXhIUVVGSFFTeFhRVUZYTEVOQlFVTnlRaXhUUVVFeFFqdEJRVU16UWl4UlFVRkpZU3hOUVVGTkxFZEJRVWNzUlVGQllqdEJRVU5CVVN4SlFVRkJRU3hYUVVGWExFTkJRVU1zU1VGQlJDeEZRVUZQTEZWQlFVRndReXhEUVVGRExFVkJRVWs3UVVGRGNrSTBRaXhOUVVGQlFTeE5RVUZOTEVsQlFVazFRaXhEUVVGV08wRkJRMFFzUzBGR1ZTeERRVUZZTzBGQlIwRXNWMEZCVHpSQ0xFMUJRVkE3UVVGRFJEdEJRVVZFT3pzN096czdPenM3T3pzN096czdPenM3VTBGblFrRlRMRXNzUjBGQlFTeGxRVUZQUXl4VFFVRlFMRVZCUVhkQ08wRkJRVUVzVVVGQmFrSkJMRk5CUVdsQ08wRkJRV3BDUVN4TlFVRkJRU3hUUVVGcFFpeEhRVUZNTEVWQlFVczdRVUZCUVRzN1FVRkRkRUlzVVVGQlNYaERMRTFCUVUwc1IwRkJSMGdzVTBGQlV5eERRVUZETEVsQlFVUXNRMEZCZEVJN08wRkJRMEVzVTBGQlN5eEpRVUZKY1VJc1NVRkJWQ3hKUVVGcFFuTkNMRk5CUVdwQ0xFVkJRVFJDTzBGQlF6RkNlRU1zVFVGQlFVRXNUVUZCVFN4RFFVRkRhMElzU1VGQlJDeERRVUZPTEVkQlFXVnpRaXhUUVVGVExFTkJRVU4wUWl4SlFVRkVMRU5CUVhoQ08wRkJRMFE3TzBGQlEwUXNWMEZCVDJ4Q0xFMUJRVkE3UVVGRFJEdEJRVVZFT3pzN096czdPenM3T3pzN08xTkJWMEY1UXl4WExFZEJRVUVzY1VKQlFXRkVMRk5CUVdJc1JVRkJPRUk3UVVGQlFTeFJRVUZxUWtFc1UwRkJhVUk3UVVGQmFrSkJMRTFCUVVGQkxGTkJRV2xDTEVkQlFVd3NSVUZCU3p0QlFVRkJPenRCUVVNMVFpeFJRVUZKZUVNc1RVRkJUU3hIUVVGSExFdEJRVXQxUXl4TFFVRk1MRU5CUVZkRExGTkJRVmdzUTBGQllqdEJRVU5CTEZOQlFVdDZReXhOUVVGTUxFTkJRVmt5UXl4WlFVRmFMRU5CUVhsQ0xFbEJRWHBDTEVWQlFTdENNVU1zVFVGQkwwSTdRVUZEUVN4WFFVRlBRU3hOUVVGUU8wRkJRMFE3UVVGRlJEczdPenM3T3pzN096dFRRVkZCTWtNc1ZTeEhRVUZCTEc5Q1FVRlpTQ3hUUVVGYUxFVkJRVFpDTzBGQlFVRXNVVUZCYWtKQkxGTkJRV2xDTzBGQlFXcENRU3hOUVVGQlFTeFRRVUZwUWl4SFFVRk1MRVZCUVVzN1FVRkJRVHM3UVVGRE0wSXNVVUZCU1hoRExFMUJRVTBzUjBGQlJ5eExRVUZMZFVNc1MwRkJUQ3hEUVVGWFF5eFRRVUZZTEVOQlFXSTdRVUZEUVN4VFFVRkxla01zVFVGQlRDeERRVUZaTmtNc1YwRkJXaXhEUVVGM1FpeEpRVUY0UWl4RlFVRTRRalZETEUxQlFUbENPMEZCUTBFc1YwRkJUMEVzVFVGQlVEdEJRVU5FTzBGQlJVUTdPenM3T3pzN096czdPenM3TzFOQldVRTJReXhYTEVkQlFVRXNkVUpCUVhWQ08wRkJRM0pDTEZGQlFVa3NTMEZCU3psRExFMUJRVlFzUlVGQmFVSTdRVUZCUVN4M1EwRkVTQ3RETEV0QlEwYzdRVUZFU0VFc1VVRkJRVUVzUzBGRFJ6dEJRVUZCT3p0QlFVTm1MR2REUVVGcFFrRXNTMEZCYWtJc05FSkJRWGRDTzBGQlFXNUNMRmxCUVVsaUxFbEJRVWtzWVVGQlVqdEJRVU5JTEdGQlFVdHNReXhOUVVGTUxFTkJRVmt5UXl4WlFVRmFMRU5CUVhsQ0xFbEJRWHBDTEVWQlFTdENWQ3hKUVVFdlFqdEJRVU5FT3p0QlFVVkVMRmRCUVV0RExFMUJRVXc3UVVGRFJEczdRVUZGUkN4WFFVRlBMRWxCUVZBN1FVRkRSRHRCUVVWRU96czdPenM3T3pzN096czdPenM3TzFOQlkwRmhMRWtzUjBGQlFTeG5Ra0ZCVVR0QlFVTk9MRkZCUVVrc1EwRkJReXhMUVVGTGFFUXNUVUZCVml4RlFVRnJRaXhQUVVGUGNVTXNVMEZCVUR0QlFVTnNRaXhSUVVGSldTeExRVUZMTEVkQlFVY3NTMEZCUzJwRUxFMUJRVXdzUTBGQldXbEVMRXRCUVZvc1EwRkJhMElzU1VGQmJFSXNRMEZCV2p0QlFVTkJMRmRCUVU4c1MwRkJTMnBFTEUxQlFVd3NRMEZCV1N0RExFdEJRVm9zUTBGQmEwSkZMRXRCUVVzc1IwRkJSeXhEUVVFeFFpeERRVUZRTzBGQlEwUTdRVUZGUkRzN096czdPenM3T3pzN096czdVMEZaUVVNc1NTeEhRVUZCTEdkQ1FVRlJPMEZCUTA0c1VVRkJTU3hEUVVGRExFdEJRVXRzUkN4TlFVRldMRVZCUVd0Q0xFOUJRVTl4UXl4VFFVRlFPMEZCUTJ4Q0xGRkJRVWxaTEV0QlFVc3NSMEZCUnl4TFFVRkxha1FzVFVGQlRDeERRVUZaYVVRc1MwRkJXaXhEUVVGclFpeEpRVUZzUWl4RFFVRmFPMEZCUTBFc1YwRkJUeXhMUVVGTGFrUXNUVUZCVEN4RFFVRlpLME1zUzBGQldpeERRVUZyUWtVc1MwRkJTeXhIUVVGSExFTkJRVEZDTEVOQlFWQTdRVUZEUkR0QlFVVkVPenM3T3pzN096czdPenM3T3p0VFFWbEJSU3hOTEVkQlFVRXNaMEpCUVZGRExFZEJRVklzUlVGQllUdEJRVU5ZTEZOQlFVdHdSQ3hOUVVGTUxFTkJRVmt5UXl4WlFVRmFMRU5CUVhsQ0xFbEJRWHBDTEVWQlFTdENVeXhIUVVFdlFqdEJRVU5CTEZkQlFVOHNTVUZCVUR0QlFVTkVPMEZCUlVRN096czdPenM3T3pzN096czdPMU5CV1VGRExFc3NSMEZCUVN4bFFVRlBSQ3hIUVVGUUxFVkJRVms3UVVGRFZpeFRRVUZMY0VRc1RVRkJUQ3hEUVVGWk5rTXNWMEZCV2l4RFFVRjNRaXhKUVVGNFFpeEZRVUU0UWs4c1IwRkJPVUk3UVVGRFFTeFhRVUZQTEVsQlFWQTdRVUZEUkN4SE96dFRRVVZFUlN4TkxFZEJRVUVzYTBKQlFWVTdRVUZEVWl4UlFVRkpReXhMUVVGTExFZEJRVWNzUlVGQldqczdRVUZGUVN4VFFVRkxMRWxCUVVsd1F5eEpRVUZVTEVsQlFXbENMRWxCUVdwQ0xFVkJRWFZDTzBGQlEzSkNMRlZCUVVrc1EwRkJReXhMUVVGTFppeGpRVUZNTEVOQlFXOUNaU3hKUVVGd1FpeERRVUZNTEVWQlFXZERPMEZCUTJoRExGVkJRVWxCTEVsQlFVa3NTMEZCU3l4UlFVRmlMRVZCUVhWQ08wRkJRM1pDTEZWQlFVbGtMRXRCUVVzc1IwRkJSeXhMUVVGTFl5eEpRVUZNTEVOQlFWbzdPMEZCUlVFc1ZVRkJTV1FzUzBGQlN5eFpRVUZaUlN4TFFVRnlRaXhGUVVFMFFqdEJRVU14UW1kRUxGRkJRVUZCTEV0QlFVc3NRMEZCUTNCRExFbEJRVVFzUTBGQlRDeEhRVUZqWkN4TFFVRkxMRU5CUVVOSExFZEJRVTRzUTBGQlZTeFZRVUZCVEN4RFFVRkRMRVZCUVVrN1FVRkRNMElzWTBGQlNTeFBRVUZQUVN4RFFVRlFMRXRCUVdFc1VVRkJZaXhKUVVGNVFrRXNRMEZCUXl4RFFVRkRiVVFzVFVGQkwwSXNSVUZCZFVNN1FVRkRja01zYlVKQlFVOXVSQ3hEUVVGRExFTkJRVU50UkN4TlFVRkdMRVZCUVZBN1FVRkRSQ3hYUVVaRUxFMUJSVTg3UVVGRFRDeHRRa0ZCVDI1RUxFTkJRVkE3UVVGRFJEdEJRVU5HTEZOQlRtRXNRMEZCWkR0QlFVOUVMRTlCVWtRc1RVRlJUeXhKUVVGSkxFOUJRVTlGTEV0QlFWQXNTMEZCYVVJc1VVRkJha0lzU1VGQk5rSkJMRXRCUVVzc1EwRkJRMmxFTEUxQlFYWkRMRVZCUVN0RE8wRkJRM0JFUXl4UlFVRkJRU3hMUVVGTExFTkJRVU53UXl4SlFVRkVMRU5CUVV3c1IwRkJZMlFzUzBGQlN5eERRVUZEYVVRc1RVRkJUaXhGUVVGa08wRkJRMFFzVDBGR1RTeE5RVVZCTzBGQlEweERMRkZCUVVGQkxFdEJRVXNzUTBGQlEzQkRMRWxCUVVRc1EwRkJUQ3hIUVVGalpDeExRVUZrTzBGQlEwUTdRVUZEUmpzN1FVRkZSQ3hYUVVGUGEwUXNTMEZCVUR0QlFVTkVPMEZCUlVRN096czdPenM3T3pzN096czdPenM3T3pzN08xTkJhMEpCUXl4SExFZEJRVUVzWVVGQlMwTXNTVUZCVEN4RlFVRlhReXhYUVVGWUxFVkJRWGRDTzBGQlEzUkNMRkZCUVVsRExFZEJRVWNzUjBGQlJ5eEpRVUZKUXl4dlFrRkJTaXhGUVVGV08wRkJRMEVzVjBGQlQwUXNSMEZCUnl4RFFVRkRTQ3hIUVVGS0xFTkJRVkVzU1VGQlVpeEZRVUZqUXl4SlFVRmtMRVZCUVc5Q1F5eFhRVUZ3UWl4RFFVRlFPMEZCUTBRN1FVRkZSRHM3T3pzN096czdPenRUUVZGQlJ5eEpMRWRCUVVFc1owSkJRVkU3UVVGRFRpeFJRVUZKT1VJc1RVRkJUU3hIUVVGSExFbEJRV0k3TzBGQlEwRXNWMEZCVDBFc1RVRkJUU3hEUVVGREwwSXNUVUZCWkR0QlFVRnpRaXRDTEUxQlFVRkJMRTFCUVUwc1IwRkJSMEVzVFVGQlRTeERRVUZETDBJc1RVRkJhRUk3UVVGQmRFSTdPMEZCUTBFc1YwRkJUeXRDTEUxQlFWQTdRVUZEUkR0QlFVVkVPenM3T3pzN096czdPenM3T3p0VFFWbEJLMElzVXl4SFFVRkJMRzFDUVVGWFF5eFhRVUZZTEVWQlFYZENPMEZCUTNSQ0xGZEJRVThzUzBGQlMyNUVMRWxCUVV3c1EwRkJWWFZETEUxQlFXcENPMEZCUTBFc1YwRkJUeXhMUVVGTGRrTXNTVUZCVEN4RFFVRlZlVU1zUzBGQmFrSTdRVUZEUVN4UlFVRkpMRU5CUVVOVkxGZEJRVXdzUlVGQmEwSXNUMEZCVHl4TFFVRkxia1FzU1VGQlRDeERRVUZWYjBRc1QwRkJha0k3UVVGRGJrSXNSenM3VTBGRlJFTXNZeXhIUVVGQkxIZENRVUZuUW1oQ0xFdEJRV2hDTEVWQlFYVkNPMEZCUTNKQ0xGRkJRVWxwUWl4TlFVRk5MRWRCUVVjc1MwRkJTelZDTEZGQlFVd3NSVUZCWWp0QlFVTkJMRkZCUVVsV0xFMUJRVTBzUjBGQlJ5eExRVUZMVEN4TlFVRk1MRU5CUVZrMFF5eExRVUZhTEVOQlFXdENka01zVFVGQkwwSTdRVUZEUVN4UlFVRkpSQ3hKUVVGSkxFZEJRVWNzUzBGQlMwb3NUVUZCVEN4RFFVRlpORU1zUzBGQldpeERRVUZyUW5oRExFbEJRVGRDT3p0QlFVVkJMRk5CUVVzc1NVRkJTWGhDTEVOQlFVTXNSMEZCUnl4RFFVRmlMRVZCUVdkQ1FTeERRVUZETEVkQlFVYzRReXhMUVVGd1FpeEZRVUV5UWpsRExFTkJRVU1zUlVGQk5VSXNSVUZCWjBNN1FVRkRPVUlzVlVGQlNTdEVMRTFCUVUwc1EwRkJReTlFTEVOQlFVUXNRMEZCVGl4TFFVRmpMRWxCUVd4Q0xFVkJRWGRDTzBGQlEzUkNlVUlzVVVGQlFVRXNUVUZCVFN4SFFVRkhMRU5CUVZRN1FVRkRRVVFzVVVGQlFVRXNTVUZCU1N4SlFVRkpMRU5CUVZJN1FVRkRSQ3hQUVVoRUxFMUJSMDg3UVVGRFRFTXNVVUZCUVVFc1RVRkJUU3hKUVVGSkxFTkJRVlk3UVVGRFJEdEJRVU5HT3p0QlFVVkVMRmRCUVU4N1FVRkJSVVFzVFVGQlFVRXNTVUZCU1N4RlFVRktRU3hKUVVGR08wRkJRVkZETEUxQlFVRkJMRTFCUVUwc1JVRkJUa0U3UVVGQlVpeExRVUZRTzBGQlEwUXNSenM3VTBGRlJFZ3NWU3hIUVVGQkxHOUNRVUZaU0N4SlFVRmFMRVZCUVd0Q08wRkJRMmhDTEZGQlFVbEZMRWRCUVVjc1IwRkJSeXhMUVVGTFJDeE5RVUZNTEVOQlFWazBReXhMUVVGMFFqczdRVUZEUVN4UlFVRkpOME1zU1VGQlNTeERRVUZETWtJc1MwRkJWQ3hGUVVGblFqdEJRVU5rZWtJc1RVRkJRVUVzUjBGQlJ5eEhRVUZITEV0QlFVdDVReXhqUVVGTUxFTkJRVzlDTTBNc1NVRkJTU3hEUVVGRE1rSXNTMEZCZWtJc1EwRkJUanRCUVVORUxFdEJSa1FzVFVGRlR5eEpRVUZKTTBJc1NVRkJTU3hEUVVGRE9FTXNTVUZCVkN4RlFVRmxPMEZCUTNCQ0xGVkJRVWx1UWl4TFFVRkxMRWRCUVVjc1MwRkJTMWdzVVVGQlRDeEhRVUZuUWl0Q0xFOUJRV2hDTEVOQlFYZENMME1zU1VGQlNTeERRVUZET0VNc1NVRkJOMElzUTBGQldqdEJRVU5CTEZWQlFVbHVRaXhMUVVGTExFdEJRVXNzUTBGQlF5eERRVUZtTEVWQlFXdENla0lzUjBGQlJ5eEhRVUZITEV0QlFVdDVReXhqUVVGTUxFTkJRVzlDYUVJc1MwRkJjRUlzUTBGQlRqdEJRVU51UWpzN1FVRkRSQ3hYUVVGUGVrSXNSMEZCVUR0QlFVTkVPMEZCUlVRN096czdPenM3T3pzN1FVRlZRVHM3T3pzN096czdRVUZSUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFYRkRRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3WlVGdFEyRmtMRWs3UVVGRlpqczdPenM3TzBGQlRVRWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdRM056VTNsdWRHRjRSWEp5YjNJZ1puSnZiU0FuTGk5amMzTXRjM2x1ZEdGNExXVnljbTl5SjF4dWFXMXdiM0owSUZOMGNtbHVaMmxtYVdWeUlHWnliMjBnSnk0dmMzUnlhVzVuYVdacFpYSW5YRzVwYlhCdmNuUWdjM1J5YVc1bmFXWjVJR1p5YjIwZ0p5NHZjM1J5YVc1bmFXWjVKMXh1WEc1bWRXNWpkR2x2YmlCamJHOXVaVTV2WkdVZ0tHOWlhaXdnY0dGeVpXNTBLU0I3WEc0Z0lHeGxkQ0JqYkc5dVpXUWdQU0J1WlhjZ2IySnFMbU52Ym5OMGNuVmpkRzl5S0NsY2JseHVJQ0JtYjNJZ0tHeGxkQ0JwSUdsdUlHOWlhaWtnZTF4dUlDQWdJR2xtSUNnaGIySnFMbWhoYzA5M2JsQnliM0JsY25SNUtHa3BLU0JqYjI1MGFXNTFaVnh1SUNBZ0lHeGxkQ0IyWVd4MVpTQTlJRzlpYWx0cFhWeHVJQ0FnSUd4bGRDQjBlWEJsSUQwZ2RIbHdaVzltSUhaaGJIVmxYRzVjYmlBZ0lDQnBaaUFvYVNBOVBUMGdKM0JoY21WdWRDY2dKaVlnZEhsd1pTQTlQVDBnSjI5aWFtVmpkQ2NwSUh0Y2JpQWdJQ0FnSUdsbUlDaHdZWEpsYm5RcElHTnNiMjVsWkZ0cFhTQTlJSEJoY21WdWRGeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2FTQTlQVDBnSjNOdmRYSmpaU2NwSUh0Y2JpQWdJQ0FnSUdOc2IyNWxaRnRwWFNBOUlIWmhiSFZsWEc0Z0lDQWdmU0JsYkhObElHbG1JQ2gyWVd4MVpTQnBibk4wWVc1alpXOW1JRUZ5Y21GNUtTQjdYRzRnSUNBZ0lDQmpiRzl1WldSYmFWMGdQU0IyWVd4MVpTNXRZWEFvYWlBOVBpQmpiRzl1WlU1dlpHVW9haXdnWTJ4dmJtVmtLU2xjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dVZ1BUMDlJQ2R2WW1wbFkzUW5JQ1ltSUhaaGJIVmxJQ0U5UFNCdWRXeHNLU0IyWVd4MVpTQTlJR05zYjI1bFRtOWtaU2gyWVd4MVpTbGNiaUFnSUNBZ0lHTnNiMjVsWkZ0cFhTQTlJSFpoYkhWbFhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ2NtVjBkWEp1SUdOc2IyNWxaRnh1ZlZ4dVhHNHZLaXBjYmlBcUlFRnNiQ0J1YjJSbElHTnNZWE56WlhNZ2FXNW9aWEpwZENCMGFHVWdabTlzYkc5M2FXNW5JR052YlcxdmJpQnRaWFJvYjJSekxseHVJQ3BjYmlBcUlFQmhZbk4wY21GamRGeHVJQ292WEc1amJHRnpjeUJPYjJSbElIdGNiaUFnTHlvcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YjJKcVpXTjBmU0JiWkdWbVlYVnNkSE5kSUZaaGJIVmxJR1p2Y2lCdWIyUmxJSEJ5YjNCbGNuUnBaWE11WEc0Z0lDQXFMMXh1SUNCamIyNXpkSEoxWTNSdmNpQW9aR1ZtWVhWc2RITWdQU0I3SUgwcElIdGNiaUFnSUNCMGFHbHpMbkpoZDNNZ1BTQjdJSDFjYmlBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQmtaV1poZFd4MGN5QWhQVDBnSjI5aWFtVmpkQ2NnSmlZZ2RIbHdaVzltSUdSbFptRjFiSFJ6SUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnSUNCMGFISnZkeUJ1WlhjZ1JYSnliM0lvWEc0Z0lDQWdJQ0FnSUNBZ0oxQnZjM1JEVTFNZ2JtOWtaWE1nWTI5dWMzUnlkV04wYjNJZ1lXTmpaWEIwY3lCdlltcGxZM1FzSUc1dmRDQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNCS1UwOU9Mbk4wY21sdVoybG1lU2hrWldaaGRXeDBjeWxjYmlBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ0lDQm1iM0lnS0d4bGRDQnVZVzFsSUdsdUlHUmxabUYxYkhSektTQjdYRzRnSUNBZ0lDQjBhR2x6VzI1aGJXVmRJRDBnWkdWbVlYVnNkSE5iYm1GdFpWMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QmhJR0JEYzNOVGVXNTBZWGhGY25KdmNtQWdhVzV6ZEdGdVkyVWdZMjl1ZEdGcGJtbHVaeUIwYUdVZ2IzSnBaMmx1WVd3Z2NHOXphWFJwYjI1Y2JpQWdJQ29nYjJZZ2RHaGxJRzV2WkdVZ2FXNGdkR2hsSUhOdmRYSmpaU3dnYzJodmQybHVaeUJzYVc1bElHRnVaQ0JqYjJ4MWJXNGdiblZ0WW1WeWN5QmhibVFnWVd4emIxeHVJQ0FnS2lCaElITnRZV3hzSUdWNFkyVnljSFFnZEc4Z1ptRmphV3hwZEdGMFpTQmtaV0oxWjJkcGJtY3VYRzRnSUNBcVhHNGdJQ0FxSUVsbUlIQnlaWE5sYm5Rc0lHRnVJR2x1Y0hWMElITnZkWEpqWlNCdFlYQWdkMmxzYkNCaVpTQjFjMlZrSUhSdklHZGxkQ0IwYUdVZ2IzSnBaMmx1WVd3Z2NHOXphWFJwYjI1Y2JpQWdJQ29nYjJZZ2RHaGxJSE52ZFhKalpTd2daWFpsYmlCbWNtOXRJR0VnY0hKbGRtbHZkWE1nWTI5dGNHbHNZWFJwYjI0Z2MzUmxjRnh1SUNBZ0tpQW9aUzVuTGl3Z1puSnZiU0JUWVhOeklHTnZiWEJwYkdGMGFXOXVLUzVjYmlBZ0lDcGNiaUFnSUNvZ1ZHaHBjeUJ0WlhSb2IyUWdjSEp2WkhWalpYTWdkbVZ5ZVNCMWMyVm1kV3dnWlhKeWIzSWdiV1Z6YzJGblpYTXVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J0WlhOellXZGxJQ0FnSUNCRmNuSnZjaUJrWlhOamNtbHdkR2x2Ymk1Y2JpQWdJQ29nUUhCaGNtRnRJSHR2WW1wbFkzUjlJRnR2Y0hSelhTQWdJQ0FnSUU5d2RHbHZibk11WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjM1J5YVc1bmZTQnZjSFJ6TG5Cc2RXZHBiaUJRYkhWbmFXNGdibUZ0WlNCMGFHRjBJR055WldGMFpXUWdkR2hwY3lCbGNuSnZjaTVjYmlBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRkJ2YzNSRFUxTWdkMmxzYkNCelpYUWdhWFFnWVhWMGIyMWhkR2xqWVd4c2VTNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc5d2RITXVkMjl5WkNBZ0lFRWdkMjl5WkNCcGJuTnBaR1VnWVNCdWIyUmw0b0NaY3lCemRISnBibWNnZEdoaGRDQnphRzkxYkdSY2JpQWdJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKbElHaHBaMmhzYVdkb2RHVmtJR0Z6SUhSb1pTQnpiM1Z5WTJVZ2IyWWdkR2hsSUdWeWNtOXlMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyNTFiV0psY24wZ2IzQjBjeTVwYm1SbGVDQWdRVzRnYVc1a1pYZ2dhVzV6YVdSbElHRWdibTlrWmVLQW1YTWdjM1J5YVc1bklIUm9ZWFFnYzJodmRXeGtYRzRnSUNBcUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlaU0JvYVdkb2JHbG5hSFJsWkNCaGN5QjBhR1VnYzI5MWNtTmxJRzltSUhSb1pTQmxjbkp2Y2k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJpQjdRM056VTNsdWRHRjRSWEp5YjNKOUlFVnljbTl5SUc5aWFtVmpkQ0IwYnlCMGFISnZkeUJwZEM1Y2JpQWdJQ3BjYmlBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNvZ2FXWWdLQ0YyWVhKcFlXSnNaWE5iYm1GdFpWMHBJSHRjYmlBZ0lDb2dJQ0IwYUhKdmR5QmtaV05zTG1WeWNtOXlLQ2RWYm10dWIzZHVJSFpoY21saFlteGxJQ2NnS3lCdVlXMWxMQ0I3SUhkdmNtUTZJRzVoYldVZ2ZTbGNiaUFnSUNvZ0lDQXZMeUJEYzNOVGVXNTBZWGhGY25KdmNqb2djRzl6ZEdOemN5MTJZWEp6T21FdWMyRnpjem8wT2pNNklGVnVhMjV2ZDI0Z2RtRnlhV0ZpYkdVZ0pHSnNZV05yWEc0Z0lDQXFJQ0FnTHk4Z0lDQmpiMnh2Y2pvZ0pHSnNZV05yWEc0Z0lDQXFJQ0FnTHk4Z1lWeHVJQ0FnS2lBZ0lDOHZJQ0FnSUNBZ0lDQWdJRjVjYmlBZ0lDb2dJQ0F2THlBZ0lHSmhZMnRuY205MWJtUTZJSGRvYVhSbFhHNGdJQ0FxSUgxY2JpQWdJQ292WEc0Z0lHVnljbTl5SUNodFpYTnpZV2RsTENCdmNIUnpJRDBnZXlCOUtTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWMyOTFjbU5sS1NCN1hHNGdJQ0FnSUNCc1pYUWdjRzl6SUQwZ2RHaHBjeTV3YjNOcGRHbHZia0o1S0c5d2RITXBYRzRnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV6YjNWeVkyVXVhVzV3ZFhRdVpYSnliM0lvYldWemMyRm5aU3dnY0c5ekxteHBibVVzSUhCdmN5NWpiMngxYlc0c0lHOXdkSE1wWEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCdVpYY2dRM056VTNsdWRHRjRSWEp5YjNJb2JXVnpjMkZuWlNsY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlVhR2x6SUcxbGRHaHZaQ0JwY3lCd2NtOTJhV1JsWkNCaGN5QmhJR052Ym5abGJtbGxibU5sSUhkeVlYQndaWElnWm05eUlIdEFiR2x1YXlCU1pYTjFiSFFqZDJGeWJuMHVYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3VW1WemRXeDBmU0J5WlhOMWJIUWdJQ0FnSUNCVWFHVWdlMEJzYVc1cklGSmxjM1ZzZEgwZ2FXNXpkR0Z1WTJWY2JpQWdJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb1lYUWdkMmxzYkNCeVpXTmxhWFpsSUhSb1pTQjNZWEp1YVc1bkxseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnZEdWNGRDQWdJQ0FnSUNBZ1YyRnlibWx1WnlCdFpYTnpZV2RsTGx4dUlDQWdLaUJBY0dGeVlXMGdlMjlpYW1WamRIMGdXMjl3ZEhOZElDQWdJQ0FnVDNCMGFXOXVjMXh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2IzQjBjeTV3YkhWbmFXNGdVR3gxWjJsdUlHNWhiV1VnZEdoaGRDQmpjbVZoZEdWa0lIUm9hWE1nZDJGeWJtbHVaeTVjYmlBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRkJ2YzNSRFUxTWdkMmxzYkNCelpYUWdhWFFnWVhWMGIyMWhkR2xqWVd4c2VTNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc5d2RITXVkMjl5WkNBZ0lFRWdkMjl5WkNCcGJuTnBaR1VnWVNCdWIyUmw0b0NaY3lCemRISnBibWNnZEdoaGRDQnphRzkxYkdSY2JpQWdJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKbElHaHBaMmhzYVdkb2RHVmtJR0Z6SUhSb1pTQnpiM1Z5WTJVZ2IyWWdkR2hsSUhkaGNtNXBibWN1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQnZjSFJ6TG1sdVpHVjRJQ0JCYmlCcGJtUmxlQ0JwYm5OcFpHVWdZU0J1YjJSbDRvQ1pjeUJ6ZEhKcGJtY2dkR2hoZENCemFHOTFiR1JjYmlBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0psSUdocFoyaHNhV2RvZEdWa0lHRnpJSFJvWlNCemIzVnlZMlVnYjJZZ2RHaGxJSGRoY201cGJtY3VYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTFkaGNtNXBibWQ5SUVOeVpXRjBaV1FnZDJGeWJtbHVaeUJ2WW1wbFkzUXVYRzRnSUNBcVhHNGdJQ0FxSUVCbGVHRnRjR3hsWEc0Z0lDQXFJR052Ym5OMElIQnNkV2RwYmlBOUlIQnZjM1JqYzNNdWNHeDFaMmx1S0Nkd2IzTjBZM056TFdSbGNISmxZMkYwWldRbkxDQW9LU0E5UGlCN1hHNGdJQ0FxSUNBZ2NtVjBkWEp1SUNoeWIyOTBMQ0J5WlhOMWJIUXBJRDArSUh0Y2JpQWdJQ29nSUNBZ0lISnZiM1F1ZDJGc2EwUmxZMnh6S0NkaVlXUW5MQ0JrWldOc0lEMCtJSHRjYmlBZ0lDb2dJQ0FnSUNBZ1pHVmpiQzUzWVhKdUtISmxjM1ZzZEN3Z0owUmxjSEpsWTJGMFpXUWdjSEp2Y0dWeWRIa2dZbUZrSnlsY2JpQWdJQ29nSUNBZ0lIMHBYRzRnSUNBcUlDQWdmVnh1SUNBZ0tpQjlLVnh1SUNBZ0tpOWNiaUFnZDJGeWJpQW9jbVZ6ZFd4MExDQjBaWGgwTENCdmNIUnpLU0I3WEc0Z0lDQWdiR1YwSUdSaGRHRWdQU0I3SUc1dlpHVTZJSFJvYVhNZ2ZWeHVJQ0FnSUdadmNpQW9iR1YwSUdrZ2FXNGdiM0IwY3lrZ1pHRjBZVnRwWFNBOUlHOXdkSE5iYVYxY2JpQWdJQ0J5WlhSMWNtNGdjbVZ6ZFd4MExuZGhjbTRvZEdWNGRDd2daR0YwWVNsY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaVzF2ZG1WeklIUm9aU0J1YjJSbElHWnliMjBnYVhSeklIQmhjbVZ1ZENCaGJtUWdZMnhsWVc1eklIUm9aU0J3WVhKbGJuUWdjSEp2Y0dWeWRHbGxjMXh1SUNBZ0tpQm1jbTl0SUhSb1pTQnViMlJsSUdGdVpDQnBkSE1nWTJocGJHUnlaVzR1WEc0Z0lDQXFYRzRnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FxSUdsbUlDaGtaV05zTG5CeWIzQXViV0YwWTJnb0wxNHRkMlZpYTJsMExTOHBLU0I3WEc0Z0lDQXFJQ0FnWkdWamJDNXlaVzF2ZG1Vb0tWeHVJQ0FnS2lCOVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMDV2WkdWOUlFNXZaR1VnZEc4Z2JXRnJaU0JqWVd4c2N5QmphR0ZwYmk1Y2JpQWdJQ292WEc0Z0lISmxiVzkyWlNBb0tTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWNHRnlaVzUwS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbkJoY21WdWRDNXlaVzF2ZG1WRGFHbHNaQ2gwYUdsektWeHVJQ0FnSUgxY2JpQWdJQ0IwYUdsekxuQmhjbVZ1ZENBOUlIVnVaR1ZtYVc1bFpGeHVJQ0FnSUhKbGRIVnliaUIwYUdselhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QmhJRU5UVXlCemRISnBibWNnY21Wd2NtVnpaVzUwYVc1bklIUm9aU0J1YjJSbExseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVoybG1hV1Z5ZkhONWJuUmhlSDBnVzNOMGNtbHVaMmxtYVdWeVhTQkJJSE41Ym5SaGVDQjBieUIxYzJWY2JpQWdJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhVzRnYzNSeWFXNW5JR2RsYm1WeVlYUnBiMjR1WEc0Z0lDQXFYRzRnSUNBcUlFQnlaWFIxY200Z2UzTjBjbWx1WjMwZ1ExTlRJSE4wY21sdVp5QnZaaUIwYUdseklHNXZaR1V1WEc0Z0lDQXFYRzRnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FxSUhCdmMzUmpjM011Y25Wc1pTaDdJSE5sYkdWamRHOXlPaUFuWVNjZ2ZTa3VkRzlUZEhKcGJtY29LU0F2THowK0lGd2lZU0I3ZlZ3aVhHNGdJQ0FxTDF4dUlDQjBiMU4wY21sdVp5QW9jM1J5YVc1bmFXWnBaWElnUFNCemRISnBibWRwWm5rcElIdGNiaUFnSUNCcFppQW9jM1J5YVc1bmFXWnBaWEl1YzNSeWFXNW5hV1o1S1NCemRISnBibWRwWm1sbGNpQTlJSE4wY21sdVoybG1hV1Z5TG5OMGNtbHVaMmxtZVZ4dUlDQWdJR3hsZENCeVpYTjFiSFFnUFNBbkoxeHVJQ0FnSUhOMGNtbHVaMmxtYVdWeUtIUm9hWE1zSUdrZ1BUNGdlMXh1SUNBZ0lDQWdjbVZ6ZFd4MElDczlJR2xjYmlBZ0lDQjlLVnh1SUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFJjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pYUjFjbTV6SUdGdUlHVjRZV04wSUdOc2IyNWxJRzltSUhSb1pTQnViMlJsTGx4dUlDQWdLbHh1SUNBZ0tpQlVhR1VnY21WemRXeDBhVzVuSUdOc2IyNWxaQ0J1YjJSbElHRnVaQ0JwZEhNZ0tHTnNiMjVsWkNrZ1kyaHBiR1J5Wlc0Z2QybHNiQ0J5WlhSaGFXNWNiaUFnSUNvZ1kyOWtaU0J6ZEhsc1pTQndjbTl3WlhKMGFXVnpMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnVzI5MlpYSnlhV1JsYzEwZ1RtVjNJSEJ5YjNCbGNuUnBaWE1nZEc4Z2IzWmxjbkpwWkdVZ2FXNGdkR2hsSUdOc2IyNWxMbHh1SUNBZ0tseHVJQ0FnS2lCQVpYaGhiWEJzWlZ4dUlDQWdLaUJrWldOc0xuSmhkM011WW1WbWIzSmxJQ0FnSUM4dlBUNGdYQ0pjWEc0Z0lGd2lYRzRnSUNBcUlHTnZibk4wSUdOc2IyNWxaQ0E5SUdSbFkyd3VZMnh2Ym1Vb2V5QndjbTl3T2lBbkxXMXZlaTBuSUNzZ1pHVmpiQzV3Y205d0lIMHBYRzRnSUNBcUlHTnNiMjVsWkM1eVlYZHpMbUpsWm05eVpTQWdMeTg5UGlCY0lseGNiaUFnWENKY2JpQWdJQ29nWTJ4dmJtVmtMblJ2VTNSeWFXNW5LQ2tnSUNBdkx6MCtJQzF0YjNvdGRISmhibk5tYjNKdE9pQnpZMkZzWlNnd0tWeHVJQ0FnS2x4dUlDQWdLaUJBY21WMGRYSnVJSHRPYjJSbGZTQkRiRzl1WlNCdlppQjBhR1VnYm05a1pTNWNiaUFnSUNvdlhHNGdJR05zYjI1bElDaHZkbVZ5Y21sa1pYTWdQU0I3SUgwcElIdGNiaUFnSUNCc1pYUWdZMnh2Ym1Wa0lEMGdZMnh2Ym1WT2IyUmxLSFJvYVhNcFhHNGdJQ0FnWm05eUlDaHNaWFFnYm1GdFpTQnBiaUJ2ZG1WeWNtbGtaWE1wSUh0Y2JpQWdJQ0FnSUdOc2IyNWxaRnR1WVcxbFhTQTlJRzkyWlhKeWFXUmxjMXR1WVcxbFhWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdZMnh2Ym1Wa1hHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVMmh2Y25SamRYUWdkRzhnWTJ4dmJtVWdkR2hsSUc1dlpHVWdZVzVrSUdsdWMyVnlkQ0IwYUdVZ2NtVnpkV3gwYVc1bklHTnNiMjVsWkNCdWIyUmxYRzRnSUNBcUlHSmxabTl5WlNCMGFHVWdZM1Z5Y21WdWRDQnViMlJsTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyOWlhbVZqZEgwZ1cyOTJaWEp5YVdSbGMxMGdUV1YzSUhCeWIzQmxjblJwWlhNZ2RHOGdiM1psY25KcFpHVWdhVzRnZEdobElHTnNiMjVsTGx4dUlDQWdLbHh1SUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnS2lCa1pXTnNMbU5zYjI1bFFtVm1iM0psS0hzZ2NISnZjRG9nSnkxdGIzb3RKeUFySUdSbFkyd3VjSEp2Y0NCOUtWeHVJQ0FnS2x4dUlDQWdLaUJBY21WMGRYSnVJSHRPYjJSbGZTQk9aWGNnYm05a1pWeHVJQ0FnS2k5Y2JpQWdZMnh2Ym1WQ1pXWnZjbVVnS0c5MlpYSnlhV1JsY3lBOUlIc2dmU2tnZTF4dUlDQWdJR3hsZENCamJHOXVaV1FnUFNCMGFHbHpMbU5zYjI1bEtHOTJaWEp5YVdSbGN5bGNiaUFnSUNCMGFHbHpMbkJoY21WdWRDNXBibk5sY25SQ1pXWnZjbVVvZEdocGN5d2dZMnh2Ym1Wa0tWeHVJQ0FnSUhKbGRIVnliaUJqYkc5dVpXUmNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJUYUc5eWRHTjFkQ0IwYnlCamJHOXVaU0IwYUdVZ2JtOWtaU0JoYm1RZ2FXNXpaWEowSUhSb1pTQnlaWE4xYkhScGJtY2dZMnh2Ym1Wa0lHNXZaR1ZjYmlBZ0lDb2dZV1owWlhJZ2RHaGxJR04xY25KbGJuUWdibTlrWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHZZbXBsWTNSOUlGdHZkbVZ5Y21sa1pYTmRJRTVsZHlCd2NtOXdaWEowYVdWeklIUnZJRzkyWlhKeWFXUmxJR2x1SUhSb1pTQmpiRzl1WlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJpQjdUbTlrWlgwZ1RtVjNJRzV2WkdVdVhHNGdJQ0FxTDF4dUlDQmpiRzl1WlVGbWRHVnlJQ2h2ZG1WeWNtbGtaWE1nUFNCN0lIMHBJSHRjYmlBZ0lDQnNaWFFnWTJ4dmJtVmtJRDBnZEdocGN5NWpiRzl1WlNodmRtVnljbWxrWlhNcFhHNGdJQ0FnZEdocGN5NXdZWEpsYm5RdWFXNXpaWEowUVdaMFpYSW9kR2hwY3l3Z1kyeHZibVZrS1Z4dUlDQWdJSEpsZEhWeWJpQmpiRzl1WldSY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkpibk5sY25SeklHNXZaR1VvY3lrZ1ltVm1iM0psSUhSb1pTQmpkWEp5Wlc1MElHNXZaR1VnWVc1a0lISmxiVzkyWlhNZ2RHaGxJR04xY25KbGJuUWdibTlrWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIc3VMaTVPYjJSbGZTQnViMlJsY3lCTmIyUmxLSE1wSUhSdklISmxjR3hoWTJVZ1kzVnljbVZ1ZENCdmJtVXVYRzRnSUNBcVhHNGdJQ0FxSUVCbGVHRnRjR3hsWEc0Z0lDQXFJR2xtSUNoaGRISjFiR1V1Ym1GdFpTQTlQVDBnSjIxcGVHbHVKeWtnZTF4dUlDQWdLaUFnSUdGMGNuVnNaUzV5WlhCc1lXTmxWMmwwYUNodGFYaHBibEoxYkdWelcyRjBjblZzWlM1d1lYSmhiWE5kS1Z4dUlDQWdLaUI5WEc0Z0lDQXFYRzRnSUNBcUlFQnlaWFIxY200Z2UwNXZaR1Y5SUVOMWNuSmxiblFnYm05a1pTQjBieUJ0WlhSb2IyUnpJR05vWVdsdUxseHVJQ0FnS2k5Y2JpQWdjbVZ3YkdGalpWZHBkR2dnS0M0dUxtNXZaR1Z6S1NCN1hHNGdJQ0FnYVdZZ0tIUm9hWE11Y0dGeVpXNTBLU0I3WEc0Z0lDQWdJQ0JtYjNJZ0tHeGxkQ0J1YjJSbElHOW1JRzV2WkdWektTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdWNHRnlaVzUwTG1sdWMyVnlkRUpsWm05eVpTaDBhR2x6TENCdWIyUmxLVnh1SUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0IwYUdsekxuSmxiVzkyWlNncFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhOY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWFIxY201eklIUm9aU0J1WlhoMElHTm9hV3hrSUc5bUlIUm9aU0J1YjJSbDRvQ1pjeUJ3WVhKbGJuUXVYRzRnSUNBcUlGSmxkSFZ5Ym5NZ1lIVnVaR1ZtYVc1bFpHQWdhV1lnZEdobElHTjFjbkpsYm5RZ2JtOWtaU0JwY3lCMGFHVWdiR0Z6ZENCamFHbHNaQzVjYmlBZ0lDcGNiaUFnSUNvZ1FISmxkSFZ5YmlCN1RtOWtaWHgxYm1SbFptbHVaV1I5SUU1bGVIUWdibTlrWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNvZ2FXWWdLR052YlcxbGJuUXVkR1Y0ZENBOVBUMGdKMlJsYkdWMFpTQnVaWGgwSnlrZ2UxeHVJQ0FnS2lBZ0lHTnZibk4wSUc1bGVIUWdQU0JqYjIxdFpXNTBMbTVsZUhRb0tWeHVJQ0FnS2lBZ0lHbG1JQ2h1WlhoMEtTQjdYRzRnSUNBcUlDQWdJQ0J1WlhoMExuSmxiVzkyWlNncFhHNGdJQ0FxSUNBZ2ZWeHVJQ0FnS2lCOVhHNGdJQ0FxTDF4dUlDQnVaWGgwSUNncElIdGNiaUFnSUNCcFppQW9JWFJvYVhNdWNHRnlaVzUwS1NCeVpYUjFjbTRnZFc1a1pXWnBibVZrWEc0Z0lDQWdiR1YwSUdsdVpHVjRJRDBnZEdocGN5NXdZWEpsYm5RdWFXNWtaWGdvZEdocGN5bGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXdZWEpsYm5RdWJtOWtaWE5iYVc1a1pYZ2dLeUF4WFZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ2RHaGxJSEJ5WlhacGIzVnpJR05vYVd4a0lHOW1JSFJvWlNCdWIyUmw0b0NaY3lCd1lYSmxiblF1WEc0Z0lDQXFJRkpsZEhWeWJuTWdZSFZ1WkdWbWFXNWxaR0FnYVdZZ2RHaGxJR04xY25KbGJuUWdibTlrWlNCcGN5QjBhR1VnWm1seWMzUWdZMmhwYkdRdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMDV2WkdWOGRXNWtaV1pwYm1Wa2ZTQlFjbVYyYVc5MWN5QnViMlJsTGx4dUlDQWdLbHh1SUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnS2lCamIyNXpkQ0JoYm01dmRHRjBhVzl1SUQwZ1pHVmpiQzV3Y21WMktDbGNiaUFnSUNvZ2FXWWdLR0Z1Ym05MFlYUnBiMjR1ZEhsd1pTQTlQVDBnSjJOdmJXMWxiblFuS1NCN1hHNGdJQ0FxSUNBZ2NtVmhaRUZ1Ym05MFlYUnBiMjRvWVc1dWIzUmhkR2x2Ymk1MFpYaDBLVnh1SUNBZ0tpQjlYRzRnSUNBcUwxeHVJQ0J3Y21WMklDZ3BJSHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVjR0Z5Wlc1MEtTQnlaWFIxY200Z2RXNWtaV1pwYm1Wa1hHNGdJQ0FnYkdWMElHbHVaR1Y0SUQwZ2RHaHBjeTV3WVhKbGJuUXVhVzVrWlhnb2RHaHBjeWxjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV3WVhKbGJuUXVibTlrWlhOYmFXNWtaWGdnTFNBeFhWeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWx1YzJWeWRDQnVaWGNnYm05a1pTQmlaV1p2Y21VZ1kzVnljbVZ1ZENCdWIyUmxJSFJ2SUdOMWNuSmxiblFnYm05a1plS0FtWE1nY0dGeVpXNTBMbHh1SUNBZ0tseHVJQ0FnS2lCS2RYTjBJR0ZzYVdGeklHWnZjaUJnYm05a1pTNXdZWEpsYm5RdWFXNXpaWEowUW1WbWIzSmxLRzV2WkdVc0lHRmtaQ2xnTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwNXZaR1Y4YjJKcVpXTjBmSE4wY21sdVozeE9iMlJsVzExOUlHRmtaQ0JPWlhjZ2JtOWtaUzVjYmlBZ0lDcGNiaUFnSUNvZ1FISmxkSFZ5YmlCN1RtOWtaWDBnVkdocGN5QnViMlJsSUdadmNpQnRaWFJvYjJSeklHTm9ZV2x1TGx4dUlDQWdLbHh1SUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnS2lCa1pXTnNMbUpsWm05eVpTZ25ZMjl1ZEdWdWREb2dYQ0pjSWljcFhHNGdJQ0FxTDF4dUlDQmlaV1p2Y21VZ0tHRmtaQ2tnZTF4dUlDQWdJSFJvYVhNdWNHRnlaVzUwTG1sdWMyVnlkRUpsWm05eVpTaDBhR2x6TENCaFpHUXBYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTmNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJKYm5ObGNuUWdibVYzSUc1dlpHVWdZV1owWlhJZ1kzVnljbVZ1ZENCdWIyUmxJSFJ2SUdOMWNuSmxiblFnYm05a1plS0FtWE1nY0dGeVpXNTBMbHh1SUNBZ0tseHVJQ0FnS2lCS2RYTjBJR0ZzYVdGeklHWnZjaUJnYm05a1pTNXdZWEpsYm5RdWFXNXpaWEowUVdaMFpYSW9ibTlrWlN3Z1lXUmtLV0F1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN1RtOWtaWHh2WW1wbFkzUjhjM1J5YVc1bmZFNXZaR1ZiWFgwZ1lXUmtJRTVsZHlCdWIyUmxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNtVjBkWEp1SUh0T2IyUmxmU0JVYUdseklHNXZaR1VnWm05eUlHMWxkR2h2WkhNZ1kyaGhhVzR1WEc0Z0lDQXFYRzRnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FxSUdSbFkyd3VZV1owWlhJb0oyTnZiRzl5T2lCaWJHRmpheWNwWEc0Z0lDQXFMMXh1SUNCaFpuUmxjaUFvWVdSa0tTQjdYRzRnSUNBZ2RHaHBjeTV3WVhKbGJuUXVhVzV6WlhKMFFXWjBaWElvZEdocGN5d2dZV1JrS1Z4dUlDQWdJSEpsZEhWeWJpQjBhR2x6WEc0Z0lIMWNibHh1SUNCMGIwcFRUMDRnS0NrZ2UxeHVJQ0FnSUd4bGRDQm1hWGhsWkNBOUlIc2dmVnh1WEc0Z0lDQWdabTl5SUNoc1pYUWdibUZ0WlNCcGJpQjBhR2x6S1NCN1hHNGdJQ0FnSUNCcFppQW9JWFJvYVhNdWFHRnpUM2R1VUhKdmNHVnlkSGtvYm1GdFpTa3BJR052Ym5ScGJuVmxYRzRnSUNBZ0lDQnBaaUFvYm1GdFpTQTlQVDBnSjNCaGNtVnVkQ2NwSUdOdmJuUnBiblZsWEc0Z0lDQWdJQ0JzWlhRZ2RtRnNkV1VnUFNCMGFHbHpXMjVoYldWZFhHNWNiaUFnSUNBZ0lHbG1JQ2gyWVd4MVpTQnBibk4wWVc1alpXOW1JRUZ5Y21GNUtTQjdYRzRnSUNBZ0lDQWdJR1pwZUdWa1cyNWhiV1ZkSUQwZ2RtRnNkV1V1YldGd0tHa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdhU0E5UFQwZ0oyOWlhbVZqZENjZ0ppWWdhUzUwYjBwVFQwNHBJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCcExuUnZTbE5QVGlncFhHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJwWEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQjlLVnh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdkbUZzZFdVZ1BUMDlJQ2R2WW1wbFkzUW5JQ1ltSUhaaGJIVmxMblJ2U2xOUFRpa2dlMXh1SUNBZ0lDQWdJQ0JtYVhobFpGdHVZVzFsWFNBOUlIWmhiSFZsTG5SdlNsTlBUaWdwWEc0Z0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0JtYVhobFpGdHVZVzFsWFNBOUlIWmhiSFZsWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlHWnBlR1ZrWEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVjBkWEp1Y3lCaElIdEFiR2x1YXlCT2IyUmxJM0poZDNOOUlIWmhiSFZsTGlCSlppQjBhR1VnYm05a1pTQnBjeUJ0YVhOemFXNW5YRzRnSUNBcUlIUm9aU0JqYjJSbElITjBlV3hsSUhCeWIzQmxjblI1SUNoaVpXTmhkWE5sSUhSb1pTQnViMlJsSUhkaGN5QnRZVzUxWVd4c2VTQmlkV2xzZENCdmNpQmpiRzl1WldRcExGeHVJQ0FnS2lCUWIzTjBRMU5USUhkcGJHd2dkSEo1SUhSdklHRjFkRzlrWlhSbFkzUWdkR2hsSUdOdlpHVWdjM1I1YkdVZ2NISnZjR1Z5ZEhrZ1lua2diRzl2YTJsdVoxeHVJQ0FnS2lCaGRDQnZkR2hsY2lCdWIyUmxjeUJwYmlCMGFHVWdkSEpsWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIQnliM0FnSUNBZ0lDQWdJQ0FnVG1GdFpTQnZaaUJqYjJSbElITjBlV3hsSUhCeWIzQmxjblI1TGx4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozMGdXMlJsWm1GMWJIUlVlWEJsWFNCT1lXMWxJRzltSUdSbFptRjFiSFFnZG1Gc2RXVXNJR2wwSUdOaGJpQmlaU0J0YVhOelpXUmNiaUFnSUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnZEdobElIWmhiSFZsSUdseklIUm9aU0J6WVcxbElHRnpJSEJ5YjNBdVhHNGdJQ0FxWEc0Z0lDQXFJRUJsZUdGdGNHeGxYRzRnSUNBcUlHTnZibk4wSUhKdmIzUWdQU0J3YjNOMFkzTnpMbkJoY25ObEtDZGhJSHNnWW1GamEyZHliM1Z1WkRvZ2QyaHBkR1VnZlNjcFhHNGdJQ0FxSUhKdmIzUXVibTlrWlhOYk1GMHVZWEJ3Wlc1a0tIc2djSEp2Y0RvZ0oyTnZiRzl5Snl3Z2RtRnNkV1U2SUNkaWJHRmpheWNnZlNsY2JpQWdJQ29nY205dmRDNXViMlJsYzFzd1hTNXViMlJsYzFzeFhTNXlZWGR6TG1KbFptOXlaU0FnSUM4dlBUNGdkVzVrWldacGJtVmtYRzRnSUNBcUlISnZiM1F1Ym05a1pYTmJNRjB1Ym05a1pYTmJNVjB1Y21GM0tDZGlaV1p2Y21VbktTQXZMejArSUNjZ0oxeHVJQ0FnS2x4dUlDQWdLaUJBY21WMGRYSnVJSHR6ZEhKcGJtZDlJRU52WkdVZ2MzUjViR1VnZG1Gc2RXVXVYRzRnSUNBcUwxeHVJQ0J5WVhjZ0tIQnliM0FzSUdSbFptRjFiSFJVZVhCbEtTQjdYRzRnSUNBZ2JHVjBJSE4wY2lBOUlHNWxkeUJUZEhKcGJtZHBabWxsY2lncFhHNGdJQ0FnY21WMGRYSnVJSE4wY2k1eVlYY29kR2hwY3l3Z2NISnZjQ3dnWkdWbVlYVnNkRlI1Y0dVcFhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dSbWx1WkhNZ2RHaGxJRkp2YjNRZ2FXNXpkR0Z1WTJVZ2IyWWdkR2hsSUc1dlpHWGlnSmx6SUhSeVpXVXVYRzRnSUNBcVhHNGdJQ0FxSUVCbGVHRnRjR3hsWEc0Z0lDQXFJSEp2YjNRdWJtOWtaWE5iTUYwdWJtOWtaWE5iTUYwdWNtOXZkQ2dwSUQwOVBTQnliMjkwWEc0Z0lDQXFYRzRnSUNBcUlFQnlaWFIxY200Z2UxSnZiM1I5SUZKdmIzUWdjR0Z5Wlc1MExseHVJQ0FnS2k5Y2JpQWdjbTl2ZENBb0tTQjdYRzRnSUNBZ2JHVjBJSEpsYzNWc2RDQTlJSFJvYVhOY2JpQWdJQ0IzYUdsc1pTQW9jbVZ6ZFd4MExuQmhjbVZ1ZENrZ2NtVnpkV3gwSUQwZ2NtVnpkV3gwTG5CaGNtVnVkRnh1SUNBZ0lISmxkSFZ5YmlCeVpYTjFiSFJjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCRGJHVmhjaUIwYUdVZ1kyOWtaU0J6ZEhsc1pTQndjbTl3WlhKMGFXVnpJR1p2Y2lCMGFHVWdibTlrWlNCaGJtUWdhWFJ6SUdOb2FXeGtjbVZ1TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UySnZiMnhsWVc1OUlGdHJaV1Z3UW1WMGQyVmxibDBnUzJWbGNDQjBhR1VnY21GM2N5NWlaWFIzWldWdUlITjViV0p2YkhNdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNGdlM1Z1WkdWbWFXNWxaSDFjYmlBZ0lDcGNiaUFnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ29nYm05a1pTNXlZWGR6TG1KbFptOXlaU0FnTHk4OVBpQW5JQ2RjYmlBZ0lDb2dibTlrWlM1amJHVmhibEpoZDNNb0tWeHVJQ0FnS2lCdWIyUmxMbkpoZDNNdVltVm1iM0psSUNBdkx6MCtJSFZ1WkdWbWFXNWxaRnh1SUNBZ0tpOWNiaUFnWTJ4bFlXNVNZWGR6SUNoclpXVndRbVYwZDJWbGJpa2dlMXh1SUNBZ0lHUmxiR1YwWlNCMGFHbHpMbkpoZDNNdVltVm1iM0psWEc0Z0lDQWdaR1ZzWlhSbElIUm9hWE11Y21GM2N5NWhablJsY2x4dUlDQWdJR2xtSUNnaGEyVmxjRUpsZEhkbFpXNHBJR1JsYkdWMFpTQjBhR2x6TG5KaGQzTXVZbVYwZDJWbGJseHVJQ0I5WEc1Y2JpQWdjRzl6YVhScGIyNUpibk5wWkdVZ0tHbHVaR1Y0S1NCN1hHNGdJQ0FnYkdWMElITjBjbWx1WnlBOUlIUm9hWE11ZEc5VGRISnBibWNvS1Z4dUlDQWdJR3hsZENCamIyeDFiVzRnUFNCMGFHbHpMbk52ZFhKalpTNXpkR0Z5ZEM1amIyeDFiVzVjYmlBZ0lDQnNaWFFnYkdsdVpTQTlJSFJvYVhNdWMyOTFjbU5sTG5OMFlYSjBMbXhwYm1WY2JseHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2FXNWtaWGc3SUdrckt5a2dlMXh1SUNBZ0lDQWdhV1lnS0hOMGNtbHVaMXRwWFNBOVBUMGdKMXhjYmljcElIdGNiaUFnSUNBZ0lDQWdZMjlzZFcxdUlEMGdNVnh1SUNBZ0lDQWdJQ0JzYVc1bElDczlJREZjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR052YkhWdGJpQXJQU0F4WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIc2diR2x1WlN3Z1kyOXNkVzF1SUgxY2JpQWdmVnh1WEc0Z0lIQnZjMmwwYVc5dVFua2dLRzl3ZEhNcElIdGNiaUFnSUNCc1pYUWdjRzl6SUQwZ2RHaHBjeTV6YjNWeVkyVXVjM1JoY25SY2JpQWdJQ0JwWmlBb2IzQjBjeTVwYm1SbGVDa2dlMXh1SUNBZ0lDQWdjRzl6SUQwZ2RHaHBjeTV3YjNOcGRHbHZia2x1YzJsa1pTaHZjSFJ6TG1sdVpHVjRLVnh1SUNBZ0lIMGdaV3h6WlNCcFppQW9iM0IwY3k1M2IzSmtLU0I3WEc0Z0lDQWdJQ0JzWlhRZ2FXNWtaWGdnUFNCMGFHbHpMblJ2VTNSeWFXNW5LQ2t1YVc1a1pYaFBaaWh2Y0hSekxuZHZjbVFwWEc0Z0lDQWdJQ0JwWmlBb2FXNWtaWGdnSVQwOUlDMHhLU0J3YjNNZ1BTQjBhR2x6TG5CdmMybDBhVzl1U1c1emFXUmxLR2x1WkdWNEtWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdjRzl6WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1FHMWxiV0psY205bUlFNXZaR1VqWEc0Z0lDQXFJRUJ0WlcxaVpYSWdlM04wY21sdVozMGdkSGx3WlNCVGRISnBibWNnY21Wd2NtVnpaVzUwYVc1bklIUm9aU0J1YjJSbDRvQ1pjeUIwZVhCbExseHVJQ0FnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdVRzl6YzJsaWJHVWdkbUZzZFdWeklHRnlaU0JnY205dmRHQXNJR0JoZEhKMWJHVmdMQ0JnY25Wc1pXQXNYRzRnSUNBcUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JnWkdWamJHQXNJRzl5SUdCamIyMXRaVzUwWUM1Y2JpQWdJQ3BjYmlBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNvZ2NHOXpkR056Y3k1a1pXTnNLSHNnY0hKdmNEb2dKMk52Ykc5eUp5d2dkbUZzZFdVNklDZGliR0ZqYXljZ2ZTa3VkSGx3WlNBdkx6MCtJQ2RrWldOc0oxeHVJQ0FnS2k5Y2JseHVJQ0F2S2lwY2JpQWdJQ29nUUcxbGJXSmxjbTltSUU1dlpHVWpYRzRnSUNBcUlFQnRaVzFpWlhJZ2UwTnZiblJoYVc1bGNuMGdjR0Z5Wlc1MElGUm9aU0J1YjJSbDRvQ1pjeUJ3WVhKbGJuUWdibTlrWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNvZ2NtOXZkQzV1YjJSbGMxc3dYUzV3WVhKbGJuUWdQVDA5SUhKdmIzUmNiaUFnSUNvdlhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCdFpXMWlaWEp2WmlCT2IyUmxJMXh1SUNBZ0tpQkFiV1Z0WW1WeUlIdHpiM1Z5WTJWOUlITnZkWEpqWlNCVWFHVWdhVzV3ZFhRZ2MyOTFjbU5sSUc5bUlIUm9aU0J1YjJSbExseHVJQ0FnS2x4dUlDQWdLaUJVYUdVZ2NISnZjR1Z5ZEhrZ2FYTWdkWE5sWkNCcGJpQnpiM1Z5WTJVZ2JXRndJR2RsYm1WeVlYUnBiMjR1WEc0Z0lDQXFYRzRnSUNBcUlFbG1JSGx2ZFNCamNtVmhkR1VnWVNCdWIyUmxJRzFoYm5WaGJHeDVJQ2hsTG1jdUxDQjNhWFJvSUdCd2IzTjBZM056TG1SbFkyd29LV0FwTEZ4dUlDQWdLaUIwYUdGMElHNXZaR1VnZDJsc2JDQnViM1FnYUdGMlpTQmhJR0J6YjNWeVkyVmdJSEJ5YjNCbGNuUjVJR0Z1WkNCM2FXeHNJR0psSUdGaWMyVnVkRnh1SUNBZ0tpQm1jbTl0SUhSb1pTQnpiM1Z5WTJVZ2JXRndMaUJHYjNJZ2RHaHBjeUJ5WldGemIyNHNJSFJvWlNCd2JIVm5hVzRnWkdWMlpXeHZjR1Z5SUhOb2IzVnNaRnh1SUNBZ0tpQmpiMjV6YVdSbGNpQmpiRzl1YVc1bklHNXZaR1Z6SUhSdklHTnlaV0YwWlNCdVpYY2diMjVsY3lBb2FXNGdkMmhwWTJnZ1kyRnpaU0IwYUdVZ2JtVjNJRzV2WkdYaWdKbHpYRzRnSUNBcUlITnZkWEpqWlNCM2FXeHNJSEpsWm1WeVpXNWpaU0IwYUdVZ2IzSnBaMmx1WVd3c0lHTnNiMjVsWkNCdWIyUmxLU0J2Y2lCelpYUjBhVzVuWEc0Z0lDQXFJSFJvWlNCZ2MyOTFjbU5sWUNCd2NtOXdaWEowZVNCdFlXNTFZV3hzZVM1Y2JpQWdJQ3BjYmlBZ0lDb2dZR0JnYW5OY2JpQWdJQ29nTHk4Z1FtRmtYRzRnSUNBcUlHTnZibk4wSUhCeVpXWnBlR1ZrSUQwZ2NHOXpkR056Y3k1a1pXTnNLSHRjYmlBZ0lDb2dJQ0J3Y205d09pQW5MVzF2ZWkwbklDc2daR1ZqYkM1d2NtOXdMRnh1SUNBZ0tpQWdJSFpoYkhWbE9pQmtaV05zTG5aaGJIVmxYRzRnSUNBcUlIMHBYRzRnSUNBcVhHNGdJQ0FxSUM4dklFZHZiMlJjYmlBZ0lDb2dZMjl1YzNRZ2NISmxabWw0WldRZ1BTQmtaV05zTG1Oc2IyNWxLSHNnY0hKdmNEb2dKeTF0YjNvdEp5QXJJR1JsWTJ3dWNISnZjQ0I5S1Z4dUlDQWdLaUJnWUdCY2JpQWdJQ3BjYmlBZ0lDb2dZR0JnYW5OY2JpQWdJQ29nYVdZZ0tHRjBjblZzWlM1dVlXMWxJRDA5UFNBbllXUmtMV3hwYm1zbktTQjdYRzRnSUNBcUlDQWdZMjl1YzNRZ2NuVnNaU0E5SUhCdmMzUmpjM011Y25Wc1pTaDdJSE5sYkdWamRHOXlPaUFuWVNjc0lITnZkWEpqWlRvZ1lYUnlkV3hsTG5OdmRYSmpaU0I5S1Z4dUlDQWdLaUFnSUdGMGNuVnNaUzV3WVhKbGJuUXVhVzV6WlhKMFFtVm1iM0psS0dGMGNuVnNaU3dnY25Wc1pTbGNiaUFnSUNvZ2ZWeHVJQ0FnS2lCZ1lHQmNiaUFnSUNwY2JpQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDb2daR1ZqYkM1emIzVnlZMlV1YVc1d2RYUXVabkp2YlNBdkx6MCtJQ2N2YUc5dFpTOWhhUzloTG5OaGMzTW5YRzRnSUNBcUlHUmxZMnd1YzI5MWNtTmxMbk4wWVhKMElDQWdJQ0FnTHk4OVBpQjdJR3hwYm1VNklERXdMQ0JqYjJ4MWJXNDZJRElnZlZ4dUlDQWdLaUJrWldOc0xuTnZkWEpqWlM1bGJtUWdJQ0FnSUNBZ0lDOHZQVDRnZXlCc2FXNWxPaUF4TUN3Z1kyOXNkVzF1T2lBeE1pQjlYRzRnSUNBcUwxeHVYRzRnSUM4cUtseHVJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1RtOWtaU05jYmlBZ0lDb2dRRzFsYldKbGNpQjdiMkpxWldOMGZTQnlZWGR6SUVsdVptOXliV0YwYVc5dUlIUnZJR2RsYm1WeVlYUmxJR0o1ZEdVdGRHOHRZbmwwWlNCbGNYVmhiRnh1SUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTQnpkSEpwYm1jZ1lYTWdhWFFnZDJGeklHbHVJSFJvWlNCdmNtbG5hVzRnYVc1d2RYUXVYRzRnSUNBcVhHNGdJQ0FxSUVWMlpYSjVJSEJoY25ObGNpQnpZWFpsY3lCcGRITWdiM2R1SUhCeWIzQmxjblJwWlhNc1hHNGdJQ0FxSUdKMWRDQjBhR1VnWkdWbVlYVnNkQ0JEVTFNZ2NHRnljMlZ5SUhWelpYTTZYRzRnSUNBcVhHNGdJQ0FxSUNvZ1lHSmxabTl5WldBNklIUm9aU0J6Y0dGalpTQnplVzFpYjJ4eklHSmxabTl5WlNCMGFHVWdibTlrWlM0Z1NYUWdZV3h6YnlCemRHOXlaWE1nWUNwZ1hHNGdJQ0FxSUNBZ1lXNWtJR0JmWUNCemVXMWliMnh6SUdKbFptOXlaU0IwYUdVZ1pHVmpiR0Z5WVhScGIyNGdLRWxGSUdoaFkyc3BMbHh1SUNBZ0tpQXFJR0JoWm5SbGNtQTZJSFJvWlNCemNHRmpaU0J6ZVcxaWIyeHpJR0ZtZEdWeUlIUm9aU0JzWVhOMElHTm9hV3hrSUc5bUlIUm9aU0J1YjJSbFhHNGdJQ0FxSUNBZ2RHOGdkR2hsSUdWdVpDQnZaaUIwYUdVZ2JtOWtaUzVjYmlBZ0lDb2dLaUJnWW1WMGQyVmxibUE2SUhSb1pTQnplVzFpYjJ4eklHSmxkSGRsWlc0Z2RHaGxJSEJ5YjNCbGNuUjVJR0Z1WkNCMllXeDFaVnh1SUNBZ0tpQWdJR1p2Y2lCa1pXTnNZWEpoZEdsdmJuTXNJSE5sYkdWamRHOXlJR0Z1WkNCZ2UyQWdabTl5SUhKMWJHVnpMQ0J2Y2lCc1lYTjBJSEJoY21GdFpYUmxjbHh1SUNBZ0tpQWdJR0Z1WkNCZ2UyQWdabTl5SUdGMExYSjFiR1Z6TGx4dUlDQWdLaUFxSUdCelpXMXBZMjlzYjI1Z09pQmpiMjUwWVdsdWN5QjBjblZsSUdsbUlIUm9aU0JzWVhOMElHTm9hV3hrSUdoaGMxeHVJQ0FnS2lBZ0lHRnVJQ2h2Y0hScGIyNWhiQ2tnYzJWdGFXTnZiRzl1TGx4dUlDQWdLaUFxSUdCaFpuUmxjazVoYldWZ09pQjBhR1VnYzNCaFkyVWdZbVYwZDJWbGJpQjBhR1VnWVhRdGNuVnNaU0J1WVcxbElHRnVaQ0JwZEhNZ2NHRnlZVzFsZEdWeWN5NWNiaUFnSUNvZ0tpQmdiR1ZtZEdBNklIUm9aU0J6Y0dGalpTQnplVzFpYjJ4eklHSmxkSGRsWlc0Z1lDOHFZQ0JoYm1RZ2RHaGxJR052YlcxbGJuVGlnSmx6SUhSbGVIUXVYRzRnSUNBcUlDb2dZSEpwWjJoMFlEb2dkR2hsSUhOd1lXTmxJSE41YldKdmJITWdZbVYwZDJWbGJpQjBhR1VnWTI5dGJXVnVkT0tBbVhNZ2RHVjRkRnh1SUNBZ0tpQWdJR0Z1WkNBOFkyOWtaVDRxSmlNME56czhMMk52WkdVK0xseHVJQ0FnS2lBcUlHQnBiWEJ2Y25SaGJuUmdPaUIwYUdVZ1kyOXVkR1Z1ZENCdlppQjBhR1VnYVcxd2IzSjBZVzUwSUhOMFlYUmxiV1Z1ZEN4Y2JpQWdJQ29nSUNCcFppQnBkQ0JwY3lCdWIzUWdhblZ6ZENCZ0lXbHRjRzl5ZEdGdWRHQXVYRzRnSUNBcVhHNGdJQ0FxSUZCdmMzUkRVMU1nWTJ4bFlXNXpJSE5sYkdWamRHOXljeXdnWkdWamJHRnlZWFJwYjI0Z2RtRnNkV1Z6SUdGdVpDQmhkQzF5ZFd4bElIQmhjbUZ0WlhSbGNuTmNiaUFnSUNvZ1puSnZiU0JqYjIxdFpXNTBjeUJoYm1RZ1pYaDBjbUVnYzNCaFkyVnpMQ0JpZFhRZ2FYUWdjM1J2Y21WeklHOXlhV2RwYmlCamIyNTBaVzUwSUdsdUlISmhkM05jYmlBZ0lDb2djSEp2Y0dWeWRHbGxjeTRnUVhNZ2MzVmphQ3dnYVdZZ2VXOTFJR1J2YnVLQW1YUWdZMmhoYm1kbElHRWdaR1ZqYkdGeVlYUnBiMjdpZ0pseklIWmhiSFZsTEZ4dUlDQWdLaUJRYjNOMFExTlRJSGRwYkd3Z2RYTmxJSFJvWlNCeVlYY2dkbUZzZFdVZ2QybDBhQ0JqYjIxdFpXNTBjeTVjYmlBZ0lDcGNiaUFnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ29nWTI5dWMzUWdjbTl2ZENBOUlIQnZjM1JqYzNNdWNHRnljMlVvSjJFZ2UxeGNiaUFnWTI5c2IzSTZZbXhoWTJ0Y1hHNTlKeWxjYmlBZ0lDb2djbTl2ZEM1bWFYSnpkQzVtYVhKemRDNXlZWGR6SUM4dlBUNGdleUJpWldadmNtVTZJQ2RjWEc0Z0lDY3NJR0psZEhkbFpXNDZJQ2M2SnlCOVhHNGdJQ0FxTDF4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQk9iMlJsWEc1Y2JpOHFLbHh1SUNvZ1FIUjVjR1ZrWldZZ2UyOWlhbVZqZEgwZ2NHOXphWFJwYjI1Y2JpQXFJRUJ3Y205d1pYSjBlU0I3Ym5WdFltVnlmU0JzYVc1bElDQWdVMjkxY21ObElHeHBibVVnYVc0Z1ptbHNaUzVjYmlBcUlFQndjbTl3WlhKMGVTQjdiblZ0WW1WeWZTQmpiMngxYlc0Z1UyOTFjbU5sSUdOdmJIVnRiaUJwYmlCbWFXeGxMbHh1SUNvdlhHNWNiaThxS2x4dUlDb2dRSFI1Y0dWa1pXWWdlMjlpYW1WamRIMGdjMjkxY21ObFhHNGdLaUJBY0hKdmNHVnlkSGtnZTBsdWNIVjBmU0JwYm5CMWRDQWdJQ0I3UUd4cGJtc2dTVzV3ZFhSOUlIZHBkR2dnYVc1d2RYUWdabWxzWlZ4dUlDb2dRSEJ5YjNCbGNuUjVJSHR3YjNOcGRHbHZibjBnYzNSaGNuUWdWR2hsSUhOMFlYSjBhVzVuSUhCdmMybDBhVzl1SUc5bUlIUm9aU0J1YjJSbDRvQ1pjeUJ6YjNWeVkyVXVYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UzQnZjMmwwYVc5dWZTQmxibVFnSUNCVWFHVWdaVzVrYVc1bklIQnZjMmwwYVc5dUlHOW1JSFJvWlNCdWIyUmw0b0NaY3lCemIzVnlZMlV1WEc0Z0tpOWNiaUpkTENKbWFXeGxJam9pYm05a1pTNXFjeUo5XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9zdHJpbmdpZmllciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vc3RyaW5naWZpZXJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBzdHJpbmdpZnkobm9kZSwgYnVpbGRlcikge1xuICB2YXIgc3RyID0gbmV3IF9zdHJpbmdpZmllci5kZWZhdWx0KGJ1aWxkZXIpO1xuICBzdHIuc3RyaW5naWZ5KG5vZGUpO1xufVxuXG52YXIgX2RlZmF1bHQgPSBzdHJpbmdpZnk7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbk4wY21sdVoybG1lUzVsY3pZaVhTd2libUZ0WlhNaU9sc2ljM1J5YVc1bmFXWjVJaXdpYm05a1pTSXNJbUoxYVd4a1pYSWlMQ0p6ZEhJaUxDSlRkSEpwYm1kcFptbGxjaUpkTENKdFlYQndhVzVuY3lJNklqczdPenM3UVVGQlFUczdPenRCUVVWQkxGTkJRVk5CTEZOQlFWUXNRMEZCYjBKRExFbEJRWEJDTEVWQlFUQkNReXhQUVVFeFFpeEZRVUZ0UXp0QlFVTnFReXhOUVVGSlF5eEhRVUZITEVkQlFVY3NTVUZCU1VNc2IwSkJRVW9zUTBGQlowSkdMRTlCUVdoQ0xFTkJRVlk3UVVGRFFVTXNSVUZCUVVFc1IwRkJSeXhEUVVGRFNDeFRRVUZLTEVOQlFXTkRMRWxCUVdRN1FVRkRSRHM3WlVGRlkwUXNVeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JUZEhKcGJtZHBabWxsY2lCbWNtOXRJQ2N1TDNOMGNtbHVaMmxtYVdWeUoxeHVYRzVtZFc1amRHbHZiaUJ6ZEhKcGJtZHBabmtnS0c1dlpHVXNJR0oxYVd4a1pYSXBJSHRjYmlBZ2JHVjBJSE4wY2lBOUlHNWxkeUJUZEhKcGJtZHBabWxsY2loaWRXbHNaR1Z5S1Z4dUlDQnpkSEl1YzNSeWFXNW5hV1o1S0c1dlpHVXBYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUhOMGNtbHVaMmxtZVZ4dUlsMHNJbVpwYkdVaU9pSnpkSEpwYm1kcFpua3Vhbk1pZlE9PVxuIiwiLy8gLmRpcm5hbWUsIC5iYXNlbmFtZSwgYW5kIC5leHRuYW1lIG1ldGhvZHMgYXJlIGV4dHJhY3RlZCBmcm9tIE5vZGUuanMgdjguMTEuMSxcbi8vIGJhY2twb3J0ZWQgYW5kIHRyYW5zcGxpdGVkIHdpdGggQmFiZWwsIHdpdGggYmFja3dhcmRzLWNvbXBhdCBmaXhlc1xuXG4vLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gcmVzb2x2ZXMgLiBhbmQgLi4gZWxlbWVudHMgaW4gYSBwYXRoIGFycmF5IHdpdGggZGlyZWN0b3J5IG5hbWVzIHRoZXJlXG4vLyBtdXN0IGJlIG5vIHNsYXNoZXMsIGVtcHR5IGVsZW1lbnRzLCBvciBkZXZpY2UgbmFtZXMgKGM6XFwpIGluIHRoZSBhcnJheVxuLy8gKHNvIGFsc28gbm8gbGVhZGluZyBhbmQgdHJhaWxpbmcgc2xhc2hlcyAtIGl0IGRvZXMgbm90IGRpc3Rpbmd1aXNoXG4vLyByZWxhdGl2ZSBhbmQgYWJzb2x1dGUgcGF0aHMpXG5mdW5jdGlvbiBub3JtYWxpemVBcnJheShwYXJ0cywgYWxsb3dBYm92ZVJvb3QpIHtcbiAgLy8gaWYgdGhlIHBhdGggdHJpZXMgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIGB1cGAgZW5kcyB1cCA+IDBcbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IHBhcnRzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIGxhc3QgPSBwYXJ0c1tpXTtcbiAgICBpZiAobGFzdCA9PT0gJy4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHBhcnRzLnNwbGljZShpLCAxKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgLy8gaWYgdGhlIHBhdGggaXMgYWxsb3dlZCB0byBnbyBhYm92ZSB0aGUgcm9vdCwgcmVzdG9yZSBsZWFkaW5nIC4uc1xuICBpZiAoYWxsb3dBYm92ZVJvb3QpIHtcbiAgICBmb3IgKDsgdXAtLTsgdXApIHtcbiAgICAgIHBhcnRzLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzO1xufVxuXG4vLyBwYXRoLnJlc29sdmUoW2Zyb20gLi4uXSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLnJlc29sdmUgPSBmdW5jdGlvbigpIHtcbiAgdmFyIHJlc29sdmVkUGF0aCA9ICcnLFxuICAgICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IGZhbHNlO1xuXG4gIGZvciAodmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTsgaSA+PSAtMSAmJiAhcmVzb2x2ZWRBYnNvbHV0ZTsgaS0tKSB7XG4gICAgdmFyIHBhdGggPSAoaSA+PSAwKSA/IGFyZ3VtZW50c1tpXSA6IHByb2Nlc3MuY3dkKCk7XG5cbiAgICAvLyBTa2lwIGVtcHR5IGFuZCBpbnZhbGlkIGVudHJpZXNcbiAgICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudHMgdG8gcGF0aC5yZXNvbHZlIG11c3QgYmUgc3RyaW5ncycpO1xuICAgIH0gZWxzZSBpZiAoIXBhdGgpIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHJlc29sdmVkUGF0aCA9IHBhdGggKyAnLycgKyByZXNvbHZlZFBhdGg7XG4gICAgcmVzb2x2ZWRBYnNvbHV0ZSA9IHBhdGguY2hhckF0KDApID09PSAnLyc7XG4gIH1cblxuICAvLyBBdCB0aGlzIHBvaW50IHRoZSBwYXRoIHNob3VsZCBiZSByZXNvbHZlZCB0byBhIGZ1bGwgYWJzb2x1dGUgcGF0aCwgYnV0XG4gIC8vIGhhbmRsZSByZWxhdGl2ZSBwYXRocyB0byBiZSBzYWZlIChtaWdodCBoYXBwZW4gd2hlbiBwcm9jZXNzLmN3ZCgpIGZhaWxzKVxuXG4gIC8vIE5vcm1hbGl6ZSB0aGUgcGF0aFxuICByZXNvbHZlZFBhdGggPSBub3JtYWxpemVBcnJheShmaWx0ZXIocmVzb2x2ZWRQYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIXJlc29sdmVkQWJzb2x1dGUpLmpvaW4oJy8nKTtcblxuICByZXR1cm4gKChyZXNvbHZlZEFic29sdXRlID8gJy8nIDogJycpICsgcmVzb2x2ZWRQYXRoKSB8fCAnLic7XG59O1xuXG4vLyBwYXRoLm5vcm1hbGl6ZShwYXRoKVxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5ub3JtYWxpemUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHZhciBpc0Fic29sdXRlID0gZXhwb3J0cy5pc0Fic29sdXRlKHBhdGgpLFxuICAgICAgdHJhaWxpbmdTbGFzaCA9IHN1YnN0cihwYXRoLCAtMSkgPT09ICcvJztcblxuICAvLyBOb3JtYWxpemUgdGhlIHBhdGhcbiAgcGF0aCA9IG5vcm1hbGl6ZUFycmF5KGZpbHRlcihwYXRoLnNwbGl0KCcvJyksIGZ1bmN0aW9uKHApIHtcbiAgICByZXR1cm4gISFwO1xuICB9KSwgIWlzQWJzb2x1dGUpLmpvaW4oJy8nKTtcblxuICBpZiAoIXBhdGggJiYgIWlzQWJzb2x1dGUpIHtcbiAgICBwYXRoID0gJy4nO1xuICB9XG4gIGlmIChwYXRoICYmIHRyYWlsaW5nU2xhc2gpIHtcbiAgICBwYXRoICs9ICcvJztcbiAgfVxuXG4gIHJldHVybiAoaXNBYnNvbHV0ZSA/ICcvJyA6ICcnKSArIHBhdGg7XG59O1xuXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLmlzQWJzb2x1dGUgPSBmdW5jdGlvbihwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nO1xufTtcblxuLy8gcG9zaXggdmVyc2lvblxuZXhwb3J0cy5qb2luID0gZnVuY3Rpb24oKSB7XG4gIHZhciBwYXRocyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMCk7XG4gIHJldHVybiBleHBvcnRzLm5vcm1hbGl6ZShmaWx0ZXIocGF0aHMsIGZ1bmN0aW9uKHAsIGluZGV4KSB7XG4gICAgaWYgKHR5cGVvZiBwICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIHRvIHBhdGguam9pbiBtdXN0IGJlIHN0cmluZ3MnKTtcbiAgICB9XG4gICAgcmV0dXJuIHA7XG4gIH0pLmpvaW4oJy8nKSk7XG59O1xuXG5cbi8vIHBhdGgucmVsYXRpdmUoZnJvbSwgdG8pXG4vLyBwb3NpeCB2ZXJzaW9uXG5leHBvcnRzLnJlbGF0aXZlID0gZnVuY3Rpb24oZnJvbSwgdG8pIHtcbiAgZnJvbSA9IGV4cG9ydHMucmVzb2x2ZShmcm9tKS5zdWJzdHIoMSk7XG4gIHRvID0gZXhwb3J0cy5yZXNvbHZlKHRvKS5zdWJzdHIoMSk7XG5cbiAgZnVuY3Rpb24gdHJpbShhcnIpIHtcbiAgICB2YXIgc3RhcnQgPSAwO1xuICAgIGZvciAoOyBzdGFydCA8IGFyci5sZW5ndGg7IHN0YXJ0KyspIHtcbiAgICAgIGlmIChhcnJbc3RhcnRdICE9PSAnJykgYnJlYWs7XG4gICAgfVxuXG4gICAgdmFyIGVuZCA9IGFyci5sZW5ndGggLSAxO1xuICAgIGZvciAoOyBlbmQgPj0gMDsgZW5kLS0pIHtcbiAgICAgIGlmIChhcnJbZW5kXSAhPT0gJycpIGJyZWFrO1xuICAgIH1cblxuICAgIGlmIChzdGFydCA+IGVuZCkgcmV0dXJuIFtdO1xuICAgIHJldHVybiBhcnIuc2xpY2Uoc3RhcnQsIGVuZCAtIHN0YXJ0ICsgMSk7XG4gIH1cblxuICB2YXIgZnJvbVBhcnRzID0gdHJpbShmcm9tLnNwbGl0KCcvJykpO1xuICB2YXIgdG9QYXJ0cyA9IHRyaW0odG8uc3BsaXQoJy8nKSk7XG5cbiAgdmFyIGxlbmd0aCA9IE1hdGgubWluKGZyb21QYXJ0cy5sZW5ndGgsIHRvUGFydHMubGVuZ3RoKTtcbiAgdmFyIHNhbWVQYXJ0c0xlbmd0aCA9IGxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChmcm9tUGFydHNbaV0gIT09IHRvUGFydHNbaV0pIHtcbiAgICAgIHNhbWVQYXJ0c0xlbmd0aCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB2YXIgb3V0cHV0UGFydHMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IHNhbWVQYXJ0c0xlbmd0aDsgaSA8IGZyb21QYXJ0cy5sZW5ndGg7IGkrKykge1xuICAgIG91dHB1dFBhcnRzLnB1c2goJy4uJyk7XG4gIH1cblxuICBvdXRwdXRQYXJ0cyA9IG91dHB1dFBhcnRzLmNvbmNhdCh0b1BhcnRzLnNsaWNlKHNhbWVQYXJ0c0xlbmd0aCkpO1xuXG4gIHJldHVybiBvdXRwdXRQYXJ0cy5qb2luKCcvJyk7XG59O1xuXG5leHBvcnRzLnNlcCA9ICcvJztcbmV4cG9ydHMuZGVsaW1pdGVyID0gJzonO1xuXG5leHBvcnRzLmRpcm5hbWUgPSBmdW5jdGlvbiAocGF0aCkge1xuICBpZiAodHlwZW9mIHBhdGggIT09ICdzdHJpbmcnKSBwYXRoID0gcGF0aCArICcnO1xuICBpZiAocGF0aC5sZW5ndGggPT09IDApIHJldHVybiAnLic7XG4gIHZhciBjb2RlID0gcGF0aC5jaGFyQ29kZUF0KDApO1xuICB2YXIgaGFzUm9vdCA9IGNvZGUgPT09IDQ3IC8qLyovO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICBmb3IgKHZhciBpID0gcGF0aC5sZW5ndGggLSAxOyBpID49IDE7IC0taSkge1xuICAgIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGUgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgZW5kID0gaTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgIC8vIFdlIHNhdyB0aGUgZmlyc3Qgbm9uLXBhdGggc2VwYXJhdG9yXG4gICAgICBtYXRjaGVkU2xhc2ggPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBpZiAoZW5kID09PSAtMSkgcmV0dXJuIGhhc1Jvb3QgPyAnLycgOiAnLic7XG4gIGlmIChoYXNSb290ICYmIGVuZCA9PT0gMSkge1xuICAgIC8vIHJldHVybiAnLy8nO1xuICAgIC8vIEJhY2t3YXJkcy1jb21wYXQgZml4OlxuICAgIHJldHVybiAnLyc7XG4gIH1cbiAgcmV0dXJuIHBhdGguc2xpY2UoMCwgZW5kKTtcbn07XG5cbmZ1bmN0aW9uIGJhc2VuYW1lKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykgcGF0aCA9IHBhdGggKyAnJztcblxuICB2YXIgc3RhcnQgPSAwO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICB2YXIgaTtcblxuICBmb3IgKGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgaWYgKHBhdGguY2hhckNvZGVBdChpKSA9PT0gNDcgLyovKi8pIHtcbiAgICAgICAgLy8gSWYgd2UgcmVhY2hlZCBhIHBhdGggc2VwYXJhdG9yIHRoYXQgd2FzIG5vdCBwYXJ0IG9mIGEgc2V0IG9mIHBhdGhcbiAgICAgICAgLy8gc2VwYXJhdG9ycyBhdCB0aGUgZW5kIG9mIHRoZSBzdHJpbmcsIHN0b3Agbm93XG4gICAgICAgIGlmICghbWF0Y2hlZFNsYXNoKSB7XG4gICAgICAgICAgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXG4gICAgICAvLyBwYXRoIGNvbXBvbmVudFxuICAgICAgbWF0Y2hlZFNsYXNoID0gZmFsc2U7XG4gICAgICBlbmQgPSBpICsgMTtcbiAgICB9XG4gIH1cblxuICBpZiAoZW5kID09PSAtMSkgcmV0dXJuICcnO1xuICByZXR1cm4gcGF0aC5zbGljZShzdGFydCwgZW5kKTtcbn1cblxuLy8gVXNlcyBhIG1peGVkIGFwcHJvYWNoIGZvciBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSwgYXMgZXh0IGJlaGF2aW9yIGNoYW5nZWRcbi8vIGluIG5ldyBOb2RlLmpzIHZlcnNpb25zLCBzbyBvbmx5IGJhc2VuYW1lKCkgYWJvdmUgaXMgYmFja3BvcnRlZCBoZXJlXG5leHBvcnRzLmJhc2VuYW1lID0gZnVuY3Rpb24gKHBhdGgsIGV4dCkge1xuICB2YXIgZiA9IGJhc2VuYW1lKHBhdGgpO1xuICBpZiAoZXh0ICYmIGYuc3Vic3RyKC0xICogZXh0Lmxlbmd0aCkgPT09IGV4dCkge1xuICAgIGYgPSBmLnN1YnN0cigwLCBmLmxlbmd0aCAtIGV4dC5sZW5ndGgpO1xuICB9XG4gIHJldHVybiBmO1xufTtcblxuZXhwb3J0cy5leHRuYW1lID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgaWYgKHR5cGVvZiBwYXRoICE9PSAnc3RyaW5nJykgcGF0aCA9IHBhdGggKyAnJztcbiAgdmFyIHN0YXJ0RG90ID0gLTE7XG4gIHZhciBzdGFydFBhcnQgPSAwO1xuICB2YXIgZW5kID0gLTE7XG4gIHZhciBtYXRjaGVkU2xhc2ggPSB0cnVlO1xuICAvLyBUcmFjayB0aGUgc3RhdGUgb2YgY2hhcmFjdGVycyAoaWYgYW55KSB3ZSBzZWUgYmVmb3JlIG91ciBmaXJzdCBkb3QgYW5kXG4gIC8vIGFmdGVyIGFueSBwYXRoIHNlcGFyYXRvciB3ZSBmaW5kXG4gIHZhciBwcmVEb3RTdGF0ZSA9IDA7XG4gIGZvciAodmFyIGkgPSBwYXRoLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgdmFyIGNvZGUgPSBwYXRoLmNoYXJDb2RlQXQoaSk7XG4gICAgaWYgKGNvZGUgPT09IDQ3IC8qLyovKSB7XG4gICAgICAgIC8vIElmIHdlIHJlYWNoZWQgYSBwYXRoIHNlcGFyYXRvciB0aGF0IHdhcyBub3QgcGFydCBvZiBhIHNldCBvZiBwYXRoXG4gICAgICAgIC8vIHNlcGFyYXRvcnMgYXQgdGhlIGVuZCBvZiB0aGUgc3RyaW5nLCBzdG9wIG5vd1xuICAgICAgICBpZiAoIW1hdGNoZWRTbGFzaCkge1xuICAgICAgICAgIHN0YXJ0UGFydCA9IGkgKyAxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgIGlmIChlbmQgPT09IC0xKSB7XG4gICAgICAvLyBXZSBzYXcgdGhlIGZpcnN0IG5vbi1wYXRoIHNlcGFyYXRvciwgbWFyayB0aGlzIGFzIHRoZSBlbmQgb2Ygb3VyXG4gICAgICAvLyBleHRlbnNpb25cbiAgICAgIG1hdGNoZWRTbGFzaCA9IGZhbHNlO1xuICAgICAgZW5kID0gaSArIDE7XG4gICAgfVxuICAgIGlmIChjb2RlID09PSA0NiAvKi4qLykge1xuICAgICAgICAvLyBJZiB0aGlzIGlzIG91ciBmaXJzdCBkb3QsIG1hcmsgaXQgYXMgdGhlIHN0YXJ0IG9mIG91ciBleHRlbnNpb25cbiAgICAgICAgaWYgKHN0YXJ0RG90ID09PSAtMSlcbiAgICAgICAgICBzdGFydERvdCA9IGk7XG4gICAgICAgIGVsc2UgaWYgKHByZURvdFN0YXRlICE9PSAxKVxuICAgICAgICAgIHByZURvdFN0YXRlID0gMTtcbiAgICB9IGVsc2UgaWYgKHN0YXJ0RG90ICE9PSAtMSkge1xuICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBhbmQgbm9uLXBhdGggc2VwYXJhdG9yIGJlZm9yZSBvdXIgZG90LCBzbyB3ZSBzaG91bGRcbiAgICAgIC8vIGhhdmUgYSBnb29kIGNoYW5jZSBhdCBoYXZpbmcgYSBub24tZW1wdHkgZXh0ZW5zaW9uXG4gICAgICBwcmVEb3RTdGF0ZSA9IC0xO1xuICAgIH1cbiAgfVxuXG4gIGlmIChzdGFydERvdCA9PT0gLTEgfHwgZW5kID09PSAtMSB8fFxuICAgICAgLy8gV2Ugc2F3IGEgbm9uLWRvdCBjaGFyYWN0ZXIgaW1tZWRpYXRlbHkgYmVmb3JlIHRoZSBkb3RcbiAgICAgIHByZURvdFN0YXRlID09PSAwIHx8XG4gICAgICAvLyBUaGUgKHJpZ2h0LW1vc3QpIHRyaW1tZWQgcGF0aCBjb21wb25lbnQgaXMgZXhhY3RseSAnLi4nXG4gICAgICBwcmVEb3RTdGF0ZSA9PT0gMSAmJiBzdGFydERvdCA9PT0gZW5kIC0gMSAmJiBzdGFydERvdCA9PT0gc3RhcnRQYXJ0ICsgMSkge1xuICAgIHJldHVybiAnJztcbiAgfVxuICByZXR1cm4gcGF0aC5zbGljZShzdGFydERvdCwgZW5kKTtcbn07XG5cbmZ1bmN0aW9uIGZpbHRlciAoeHMsIGYpIHtcbiAgICBpZiAoeHMuZmlsdGVyKSByZXR1cm4geHMuZmlsdGVyKGYpO1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChmKHhzW2ldLCBpLCB4cykpIHJlcy5wdXNoKHhzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cblxuLy8gU3RyaW5nLnByb3RvdHlwZS5zdWJzdHIgLSBuZWdhdGl2ZSBpbmRleCBkb24ndCB3b3JrIGluIElFOFxudmFyIHN1YnN0ciA9ICdhYicuc3Vic3RyKC0xKSA9PT0gJ2InXG4gICAgPyBmdW5jdGlvbiAoc3RyLCBzdGFydCwgbGVuKSB7IHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pIH1cbiAgICA6IGZ1bmN0aW9uIChzdHIsIHN0YXJ0LCBsZW4pIHtcbiAgICAgICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSBzdHIubGVuZ3RoICsgc3RhcnQ7XG4gICAgICAgIHJldHVybiBzdHIuc3Vic3RyKHN0YXJ0LCBsZW4pO1xuICAgIH1cbjtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3BhcnNlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcGFyc2VyXCIpKTtcblxudmFyIF9pbnB1dCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vaW5wdXRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBwYXJzZShjc3MsIG9wdHMpIHtcbiAgdmFyIGlucHV0ID0gbmV3IF9pbnB1dC5kZWZhdWx0KGNzcywgb3B0cyk7XG4gIHZhciBwYXJzZXIgPSBuZXcgX3BhcnNlci5kZWZhdWx0KGlucHV0KTtcblxuICB0cnkge1xuICAgIHBhcnNlci5wYXJzZSgpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmIChlLm5hbWUgPT09ICdDc3NTeW50YXhFcnJvcicgJiYgb3B0cyAmJiBvcHRzLmZyb20pIHtcbiAgICAgICAgaWYgKC9cXC5zY3NzJC9pLnRlc3Qob3B0cy5mcm9tKSkge1xuICAgICAgICAgIGUubWVzc2FnZSArPSAnXFxuWW91IHRyaWVkIHRvIHBhcnNlIFNDU1Mgd2l0aCAnICsgJ3RoZSBzdGFuZGFyZCBDU1MgcGFyc2VyOyAnICsgJ3RyeSBhZ2FpbiB3aXRoIHRoZSBwb3N0Y3NzLXNjc3MgcGFyc2VyJztcbiAgICAgICAgfSBlbHNlIGlmICgvXFwuc2Fzcy9pLnRlc3Qob3B0cy5mcm9tKSkge1xuICAgICAgICAgIGUubWVzc2FnZSArPSAnXFxuWW91IHRyaWVkIHRvIHBhcnNlIFNhc3Mgd2l0aCAnICsgJ3RoZSBzdGFuZGFyZCBDU1MgcGFyc2VyOyAnICsgJ3RyeSBhZ2FpbiB3aXRoIHRoZSBwb3N0Y3NzLXNhc3MgcGFyc2VyJztcbiAgICAgICAgfSBlbHNlIGlmICgvXFwubGVzcyQvaS50ZXN0KG9wdHMuZnJvbSkpIHtcbiAgICAgICAgICBlLm1lc3NhZ2UgKz0gJ1xcbllvdSB0cmllZCB0byBwYXJzZSBMZXNzIHdpdGggJyArICd0aGUgc3RhbmRhcmQgQ1NTIHBhcnNlcjsgJyArICd0cnkgYWdhaW4gd2l0aCB0aGUgcG9zdGNzcy1sZXNzIHBhcnNlcic7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aHJvdyBlO1xuICB9XG5cbiAgcmV0dXJuIHBhcnNlci5yb290O1xufVxuXG52YXIgX2RlZmF1bHQgPSBwYXJzZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluQmhjbk5sTG1Wek5pSmRMQ0p1WVcxbGN5STZXeUp3WVhKelpTSXNJbU56Y3lJc0ltOXdkSE1pTENKcGJuQjFkQ0lzSWtsdWNIVjBJaXdpY0dGeWMyVnlJaXdpVUdGeWMyVnlJaXdpWlNJc0luQnliMk5sYzNNaUxDSmxibllpTENKT1QwUkZYMFZPVmlJc0ltNWhiV1VpTENKbWNtOXRJaXdpZEdWemRDSXNJbTFsYzNOaFoyVWlMQ0p5YjI5MElsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096dEJRVUZCT3p0QlFVTkJPenM3TzBGQlJVRXNVMEZCVTBFc1MwRkJWQ3hEUVVGblFrTXNSMEZCYUVJc1JVRkJjVUpETEVsQlFYSkNMRVZCUVRKQ08wRkJRM3BDTEUxQlFVbERMRXRCUVVzc1IwRkJSeXhKUVVGSlF5eGpRVUZLTEVOQlFWVklMRWRCUVZZc1JVRkJaVU1zU1VGQlppeERRVUZhTzBGQlEwRXNUVUZCU1Vjc1RVRkJUU3hIUVVGSExFbEJRVWxETEdWQlFVb3NRMEZCVjBnc1MwRkJXQ3hEUVVGaU96dEJRVU5CTEUxQlFVazdRVUZEUmtVc1NVRkJRVUVzVFVGQlRTeERRVUZEVEN4TFFVRlFPMEZCUTBRc1IwRkdSQ3hEUVVWRkxFOUJRVTlQTEVOQlFWQXNSVUZCVlR0QlFVTldMRkZCUVVsRExFOUJRVThzUTBGQlEwTXNSMEZCVWl4RFFVRlpReXhSUVVGYUxFdEJRWGxDTEZsQlFUZENMRVZCUVRKRE8wRkJRM3BETEZWQlFVbElMRU5CUVVNc1EwRkJRMGtzU1VGQlJpeExRVUZYTEdkQ1FVRllMRWxCUVN0Q1ZDeEpRVUV2UWl4SlFVRjFRMEVzU1VGQlNTeERRVUZEVlN4SlFVRm9SQ3hGUVVGelJEdEJRVU53UkN4WlFVRkpMRmRCUVZkRExFbEJRVmdzUTBGQlowSllMRWxCUVVrc1EwRkJRMVVzU1VGQmNrSXNRMEZCU2l4RlFVRm5RenRCUVVNNVFrd3NWVUZCUVVFc1EwRkJReXhEUVVGRFR5eFBRVUZHTEVsQlFXRXNiME5CUTBFc01rSkJSRUVzUjBGRlFTeDNRMEZHWWp0QlFVZEVMRk5CU2tRc1RVRkpUeXhKUVVGSkxGVkJRVlZFTEVsQlFWWXNRMEZCWlZnc1NVRkJTU3hEUVVGRFZTeEpRVUZ3UWl4RFFVRktMRVZCUVN0Q08wRkJRM0JEVEN4VlFVRkJRU3hEUVVGRExFTkJRVU5QTEU5QlFVWXNTVUZCWVN4dlEwRkRRU3d5UWtGRVFTeEhRVVZCTEhkRFFVWmlPMEZCUjBRc1UwRktUU3hOUVVsQkxFbEJRVWtzVjBGQlYwUXNTVUZCV0N4RFFVRm5RbGdzU1VGQlNTeERRVUZEVlN4SlFVRnlRaXhEUVVGS0xFVkJRV2RETzBGQlEzSkRUQ3hWUVVGQlFTeERRVUZETEVOQlFVTlBMRTlCUVVZc1NVRkJZU3h2UTBGRFFTd3lRa0ZFUVN4SFFVVkJMSGREUVVaaU8wRkJSMFE3UVVGRFJqdEJRVU5HT3p0QlFVTkVMRlZCUVUxUUxFTkJRVTQ3UVVGRFJEczdRVUZGUkN4VFFVRlBSaXhOUVVGTkxFTkJRVU5WTEVsQlFXUTdRVUZEUkRzN1pVRkZZMllzU3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCUVlYSnpaWElnWm5KdmJTQW5MaTl3WVhKelpYSW5YRzVwYlhCdmNuUWdTVzV3ZFhRZ1puSnZiU0FuTGk5cGJuQjFkQ2RjYmx4dVpuVnVZM1JwYjI0Z2NHRnljMlVnS0dOemN5d2diM0IwY3lrZ2UxeHVJQ0JzWlhRZ2FXNXdkWFFnUFNCdVpYY2dTVzV3ZFhRb1kzTnpMQ0J2Y0hSektWeHVJQ0JzWlhRZ2NHRnljMlZ5SUQwZ2JtVjNJRkJoY25ObGNpaHBibkIxZENsY2JpQWdkSEo1SUh0Y2JpQWdJQ0J3WVhKelpYSXVjR0Z5YzJVb0tWeHVJQ0I5SUdOaGRHTm9JQ2hsS1NCN1hHNGdJQ0FnYVdZZ0tIQnliMk5sYzNNdVpXNTJMazVQUkVWZlJVNVdJQ0U5UFNBbmNISnZaSFZqZEdsdmJpY3BJSHRjYmlBZ0lDQWdJR2xtSUNobExtNWhiV1VnUFQwOUlDZERjM05UZVc1MFlYaEZjbkp2Y2ljZ0ppWWdiM0IwY3lBbUppQnZjSFJ6TG1aeWIyMHBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDOWNYQzV6WTNOekpDOXBMblJsYzNRb2IzQjBjeTVtY205dEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUdVdWJXVnpjMkZuWlNBclBTQW5YRnh1V1c5MUlIUnlhV1ZrSUhSdklIQmhjbk5sSUZORFUxTWdkMmwwYUNBbklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0ozUm9aU0J6ZEdGdVpHRnlaQ0JEVTFNZ2NHRnljMlZ5T3lBbklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0ozUnllU0JoWjJGcGJpQjNhWFJvSUhSb1pTQndiM04wWTNOekxYTmpjM01nY0dGeWMyVnlKMXh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0M5Y1hDNXpZWE56TDJrdWRHVnpkQ2h2Y0hSekxtWnliMjBwS1NCN1hHNGdJQ0FnSUNBZ0lDQWdaUzV0WlhOellXZGxJQ3M5SUNkY1hHNVpiM1VnZEhKcFpXUWdkRzhnY0dGeWMyVWdVMkZ6Y3lCM2FYUm9JQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuZEdobElITjBZVzVrWVhKa0lFTlRVeUJ3WVhKelpYSTdJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FuZEhKNUlHRm5ZV2x1SUhkcGRHZ2dkR2hsSUhCdmMzUmpjM010YzJGemN5QndZWEp6WlhJblhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9MMXhjTG14bGMzTWtMMmt1ZEdWemRDaHZjSFJ6TG1aeWIyMHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ1pTNXRaWE56WVdkbElDczlJQ2RjWEc1WmIzVWdkSEpwWldRZ2RHOGdjR0Z5YzJVZ1RHVnpjeUIzYVhSb0lDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5kR2hsSUhOMFlXNWtZWEprSUVOVFV5QndZWEp6WlhJN0lDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW5kSEo1SUdGbllXbHVJSGRwZEdnZ2RHaGxJSEJ2YzNSamMzTXRiR1Z6Y3lCd1lYSnpaWEluWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdkR2h5YjNjZ1pWeHVJQ0I5WEc1Y2JpQWdjbVYwZFhKdUlIQmhjbk5sY2k1eWIyOTBYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUhCaGNuTmxYRzRpWFN3aVptbHNaU0k2SW5CaGNuTmxMbXB6SW4wPVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfbm9kZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbm9kZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0c0xvb3NlKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcy5wcm90b3R5cGUpOyBzdWJDbGFzcy5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBzdWJDbGFzczsgc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG4vKipcbiAqIFJlcHJlc2VudHMgYSBjb21tZW50IGJldHdlZW4gZGVjbGFyYXRpb25zIG9yIHN0YXRlbWVudHMgKHJ1bGUgYW5kIGF0LXJ1bGVzKS5cbiAqXG4gKiBDb21tZW50cyBpbnNpZGUgc2VsZWN0b3JzLCBhdC1ydWxlIHBhcmFtZXRlcnMsIG9yIGRlY2xhcmF0aW9uIHZhbHVlc1xuICogd2lsbCBiZSBzdG9yZWQgaW4gdGhlIGByYXdzYCBwcm9wZXJ0aWVzIGV4cGxhaW5lZCBhYm92ZS5cbiAqXG4gKiBAZXh0ZW5kcyBOb2RlXG4gKi9cbnZhciBDb21tZW50ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uIChfTm9kZSkge1xuICBfaW5oZXJpdHNMb29zZShDb21tZW50LCBfTm9kZSk7XG5cbiAgZnVuY3Rpb24gQ29tbWVudChkZWZhdWx0cykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX05vZGUuY2FsbCh0aGlzLCBkZWZhdWx0cykgfHwgdGhpcztcbiAgICBfdGhpcy50eXBlID0gJ2NvbW1lbnQnO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuICAvKipcbiAgICogQG1lbWJlcm9mIENvbW1lbnQjXG4gICAqIEBtZW1iZXIge3N0cmluZ30gdGV4dCBUaGUgY29tbWVudOKAmXMgdGV4dC5cbiAgICovXG5cbiAgLyoqXG4gICAqIEBtZW1iZXJvZiBDb21tZW50I1xuICAgKiBAbWVtYmVyIHtvYmplY3R9IHJhd3MgSW5mb3JtYXRpb24gdG8gZ2VuZXJhdGUgYnl0ZS10by1ieXRlIGVxdWFsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICBub2RlIHN0cmluZyBhcyBpdCB3YXMgaW4gdGhlIG9yaWdpbiBpbnB1dC5cbiAgICpcbiAgICogRXZlcnkgcGFyc2VyIHNhdmVzIGl0cyBvd24gcHJvcGVydGllcyxcbiAgICogYnV0IHRoZSBkZWZhdWx0IENTUyBwYXJzZXIgdXNlczpcbiAgICpcbiAgICogKiBgYmVmb3JlYDogdGhlIHNwYWNlIHN5bWJvbHMgYmVmb3JlIHRoZSBub2RlLlxuICAgKiAqIGBsZWZ0YDogdGhlIHNwYWNlIHN5bWJvbHMgYmV0d2VlbiBgLypgIGFuZCB0aGUgY29tbWVudOKAmXMgdGV4dC5cbiAgICogKiBgcmlnaHRgOiB0aGUgc3BhY2Ugc3ltYm9scyBiZXR3ZWVuIHRoZSBjb21tZW504oCZcyB0ZXh0LlxuICAgKi9cblxuXG4gIHJldHVybiBDb21tZW50O1xufShfbm9kZS5kZWZhdWx0KTtcblxudmFyIF9kZWZhdWx0ID0gQ29tbWVudDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTnZiVzFsYm5RdVpYTTJJbDBzSW01aGJXVnpJanBiSWtOdmJXMWxiblFpTENKa1pXWmhkV3gwY3lJc0luUjVjR1VpTENKT2IyUmxJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenRCUVVGQk96czdPenM3UVVGRlFUczdPenM3T3pzN1NVRlJUVUVzVHpzN096czdRVUZEU2l4dFFrRkJZVU1zVVVGQllpeEZRVUYxUWp0QlFVRkJPenRCUVVOeVFpdzJRa0ZCVFVFc1VVRkJUanRCUVVOQkxGVkJRVXRETEVsQlFVd3NSMEZCV1N4VFFVRmFPMEZCUm5GQ08wRkJSM1JDTzBGQlJVUTdPenM3TzBGQlMwRTdPenM3T3pzN096czdPenM3T3p0RlFWaHZRa01zWVRzN1pVRjVRbEJJTEU4aUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ1RtOWtaU0JtY205dElDY3VMMjV2WkdVblhHNWNiaThxS2x4dUlDb2dVbVZ3Y21WelpXNTBjeUJoSUdOdmJXMWxiblFnWW1WMGQyVmxiaUJrWldOc1lYSmhkR2x2Ym5NZ2IzSWdjM1JoZEdWdFpXNTBjeUFvY25Wc1pTQmhibVFnWVhRdGNuVnNaWE1wTGx4dUlDcGNiaUFxSUVOdmJXMWxiblJ6SUdsdWMybGtaU0J6Wld4bFkzUnZjbk1zSUdGMExYSjFiR1VnY0dGeVlXMWxkR1Z5Y3l3Z2IzSWdaR1ZqYkdGeVlYUnBiMjRnZG1Gc2RXVnpYRzRnS2lCM2FXeHNJR0psSUhOMGIzSmxaQ0JwYmlCMGFHVWdZSEpoZDNOZ0lIQnliM0JsY25ScFpYTWdaWGh3YkdGcGJtVmtJR0ZpYjNabExseHVJQ3BjYmlBcUlFQmxlSFJsYm1SeklFNXZaR1ZjYmlBcUwxeHVZMnhoYzNNZ1EyOXRiV1Z1ZENCbGVIUmxibVJ6SUU1dlpHVWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpQW9aR1ZtWVhWc2RITXBJSHRjYmlBZ0lDQnpkWEJsY2loa1pXWmhkV3gwY3lsY2JpQWdJQ0IwYUdsekxuUjVjR1VnUFNBblkyOXRiV1Z1ZENkY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFiV1Z0WW1WeWIyWWdRMjl0YldWdWRDTmNiaUFnSUNvZ1FHMWxiV0psY2lCN2MzUnlhVzVuZlNCMFpYaDBJRlJvWlNCamIyMXRaVzUwNG9DWmN5QjBaWGgwTGx4dUlDQWdLaTljYmx4dUlDQXZLaXBjYmlBZ0lDb2dRRzFsYldKbGNtOW1JRU52YlcxbGJuUWpYRzRnSUNBcUlFQnRaVzFpWlhJZ2UyOWlhbVZqZEgwZ2NtRjNjeUJKYm1admNtMWhkR2x2YmlCMGJ5Qm5aVzVsY21GMFpTQmllWFJsTFhSdkxXSjVkR1VnWlhGMVlXeGNiaUFnSUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRzV2WkdVZ2MzUnlhVzVuSUdGeklHbDBJSGRoY3lCcGJpQjBhR1VnYjNKcFoybHVJR2x1Y0hWMExseHVJQ0FnS2x4dUlDQWdLaUJGZG1WeWVTQndZWEp6WlhJZ2MyRjJaWE1nYVhSeklHOTNiaUJ3Y205d1pYSjBhV1Z6TEZ4dUlDQWdLaUJpZFhRZ2RHaGxJR1JsWm1GMWJIUWdRMU5USUhCaGNuTmxjaUIxYzJWek9seHVJQ0FnS2x4dUlDQWdLaUFxSUdCaVpXWnZjbVZnT2lCMGFHVWdjM0JoWTJVZ2MzbHRZbTlzY3lCaVpXWnZjbVVnZEdobElHNXZaR1V1WEc0Z0lDQXFJQ29nWUd4bFpuUmdPaUIwYUdVZ2MzQmhZMlVnYzNsdFltOXNjeUJpWlhSM1pXVnVJR0F2S21BZ1lXNWtJSFJvWlNCamIyMXRaVzUwNG9DWmN5QjBaWGgwTGx4dUlDQWdLaUFxSUdCeWFXZG9kR0E2SUhSb1pTQnpjR0ZqWlNCemVXMWliMnh6SUdKbGRIZGxaVzRnZEdobElHTnZiVzFsYm5UaWdKbHpJSFJsZUhRdVhHNGdJQ0FxTDF4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQkRiMjF0Wlc1MFhHNGlYU3dpWm1sc1pTSTZJbU52YlcxbGJuUXVhbk1pZlE9PVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY29udGFpbmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb250YWluZXJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGFuIGF0LXJ1bGUuXG4gKlxuICogSWYgaXTigJlzIGZvbGxvd2VkIGluIHRoZSBDU1MgYnkgYSB7fSBibG9jaywgdGhpcyBub2RlIHdpbGwgaGF2ZVxuICogYSBub2RlcyBwcm9wZXJ0eSByZXByZXNlbnRpbmcgaXRzIGNoaWxkcmVuLlxuICpcbiAqIEBleHRlbmRzIENvbnRhaW5lclxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCByb290ID0gcG9zdGNzcy5wYXJzZSgnQGNoYXJzZXQgXCJVVEYtOFwiOyBAbWVkaWEgcHJpbnQge30nKVxuICpcbiAqIGNvbnN0IGNoYXJzZXQgPSByb290LmZpcnN0XG4gKiBjaGFyc2V0LnR5cGUgIC8vPT4gJ2F0cnVsZSdcbiAqIGNoYXJzZXQubm9kZXMgLy89PiB1bmRlZmluZWRcbiAqXG4gKiBjb25zdCBtZWRpYSA9IHJvb3QubGFzdFxuICogbWVkaWEubm9kZXMgICAvLz0+IFtdXG4gKi9cbnZhciBBdFJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db250YWluZXIpIHtcbiAgX2luaGVyaXRzTG9vc2UoQXRSdWxlLCBfQ29udGFpbmVyKTtcblxuICBmdW5jdGlvbiBBdFJ1bGUoZGVmYXVsdHMpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBfdGhpcyA9IF9Db250YWluZXIuY2FsbCh0aGlzLCBkZWZhdWx0cykgfHwgdGhpcztcbiAgICBfdGhpcy50eXBlID0gJ2F0cnVsZSc7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IEF0UnVsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZCgpIHtcbiAgICB2YXIgX0NvbnRhaW5lciRwcm90b3R5cGUkO1xuXG4gICAgaWYgKCF0aGlzLm5vZGVzKSB0aGlzLm5vZGVzID0gW107XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2hpbGRyZW4gPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBjaGlsZHJlbltfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gKF9Db250YWluZXIkcHJvdG90eXBlJCA9IF9Db250YWluZXIucHJvdG90eXBlLmFwcGVuZCkuY2FsbC5hcHBseShfQ29udGFpbmVyJHByb3RvdHlwZSQsIFt0aGlzXS5jb25jYXQoY2hpbGRyZW4pKTtcbiAgfTtcblxuICBfcHJvdG8ucHJlcGVuZCA9IGZ1bmN0aW9uIHByZXBlbmQoKSB7XG4gICAgdmFyIF9Db250YWluZXIkcHJvdG90eXBlJDI7XG5cbiAgICBpZiAoIXRoaXMubm9kZXMpIHRoaXMubm9kZXMgPSBbXTtcblxuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgY2hpbGRyZW4gPSBuZXcgQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGNoaWxkcmVuW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgcmV0dXJuIChfQ29udGFpbmVyJHByb3RvdHlwZSQyID0gX0NvbnRhaW5lci5wcm90b3R5cGUucHJlcGVuZCkuY2FsbC5hcHBseShfQ29udGFpbmVyJHByb3RvdHlwZSQyLCBbdGhpc10uY29uY2F0KGNoaWxkcmVuKSk7XG4gIH1cbiAgLyoqXG4gICAqIEBtZW1iZXJvZiBBdFJ1bGUjXG4gICAqIEBtZW1iZXIge3N0cmluZ30gbmFtZSBUaGUgYXQtcnVsZeKAmXMgbmFtZSBpbW1lZGlhdGVseSBmb2xsb3dzIHRoZSBgQGAuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IHJvb3QgID0gcG9zdGNzcy5wYXJzZSgnQG1lZGlhIHByaW50IHt9JylcbiAgICogbWVkaWEubmFtZSAvLz0+ICdtZWRpYSdcbiAgICogY29uc3QgbWVkaWEgPSByb290LmZpcnN0XG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbWVtYmVyb2YgQXRSdWxlI1xuICAgKiBAbWVtYmVyIHtzdHJpbmd9IHBhcmFtcyBUaGUgYXQtcnVsZeKAmXMgcGFyYW1ldGVycywgdGhlIHZhbHVlc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICB0aGF0IGZvbGxvdyB0aGUgYXQtcnVsZeKAmXMgbmFtZSBidXQgcHJlY2VkZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBhbnkge30gYmxvY2suXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IHJvb3QgID0gcG9zdGNzcy5wYXJzZSgnQG1lZGlhIHByaW50LCBzY3JlZW4ge30nKVxuICAgKiBjb25zdCBtZWRpYSA9IHJvb3QuZmlyc3RcbiAgICogbWVkaWEucGFyYW1zIC8vPT4gJ3ByaW50LCBzY3JlZW4nXG4gICAqL1xuXG4gIC8qKlxuICAgKiBAbWVtYmVyb2YgQXRSdWxlI1xuICAgKiBAbWVtYmVyIHtvYmplY3R9IHJhd3MgSW5mb3JtYXRpb24gdG8gZ2VuZXJhdGUgYnl0ZS10by1ieXRlIGVxdWFsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSBzdHJpbmcgYXMgaXQgd2FzIGluIHRoZSBvcmlnaW4gaW5wdXQuXG4gICAqXG4gICAqIEV2ZXJ5IHBhcnNlciBzYXZlcyBpdHMgb3duIHByb3BlcnRpZXMsXG4gICAqIGJ1dCB0aGUgZGVmYXVsdCBDU1MgcGFyc2VyIHVzZXM6XG4gICAqXG4gICAqICogYGJlZm9yZWA6IHRoZSBzcGFjZSBzeW1ib2xzIGJlZm9yZSB0aGUgbm9kZS4gSXQgYWxzbyBzdG9yZXMgYCpgXG4gICAqICAgYW5kIGBfYCBzeW1ib2xzIGJlZm9yZSB0aGUgZGVjbGFyYXRpb24gKElFIGhhY2spLlxuICAgKiAqIGBhZnRlcmA6IHRoZSBzcGFjZSBzeW1ib2xzIGFmdGVyIHRoZSBsYXN0IGNoaWxkIG9mIHRoZSBub2RlXG4gICAqICAgdG8gdGhlIGVuZCBvZiB0aGUgbm9kZS5cbiAgICogKiBgYmV0d2VlbmA6IHRoZSBzeW1ib2xzIGJldHdlZW4gdGhlIHByb3BlcnR5IGFuZCB2YWx1ZVxuICAgKiAgIGZvciBkZWNsYXJhdGlvbnMsIHNlbGVjdG9yIGFuZCBge2AgZm9yIHJ1bGVzLCBvciBsYXN0IHBhcmFtZXRlclxuICAgKiAgIGFuZCBge2AgZm9yIGF0LXJ1bGVzLlxuICAgKiAqIGBzZW1pY29sb25gOiBjb250YWlucyB0cnVlIGlmIHRoZSBsYXN0IGNoaWxkIGhhc1xuICAgKiAgIGFuIChvcHRpb25hbCkgc2VtaWNvbG9uLlxuICAgKiAqIGBhZnRlck5hbWVgOiB0aGUgc3BhY2UgYmV0d2VlbiB0aGUgYXQtcnVsZSBuYW1lIGFuZCBpdHMgcGFyYW1ldGVycy5cbiAgICpcbiAgICogUG9zdENTUyBjbGVhbnMgYXQtcnVsZSBwYXJhbWV0ZXJzIGZyb20gY29tbWVudHMgYW5kIGV4dHJhIHNwYWNlcyxcbiAgICogYnV0IGl0IHN0b3JlcyBvcmlnaW4gY29udGVudCBpbiByYXdzIHByb3BlcnRpZXMuXG4gICAqIEFzIHN1Y2gsIGlmIHlvdSBkb27igJl0IGNoYW5nZSBhIGRlY2xhcmF0aW9u4oCZcyB2YWx1ZSxcbiAgICogUG9zdENTUyB3aWxsIHVzZSB0aGUgcmF3IHZhbHVlIHdpdGggY29tbWVudHMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IHJvb3QgPSBwb3N0Y3NzLnBhcnNlKCcgIEBtZWRpYVxcbnByaW50IHtcXG59JylcbiAgICogcm9vdC5maXJzdC5maXJzdC5yYXdzIC8vPT4geyBiZWZvcmU6ICcgICcsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgYmV0d2VlbjogJyAnLFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGFmdGVyTmFtZTogJ1xcbicsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgYWZ0ZXI6ICdcXG4nIH1cbiAgICovXG4gIDtcblxuICByZXR1cm4gQXRSdWxlO1xufShfY29udGFpbmVyLmRlZmF1bHQpO1xuXG52YXIgX2RlZmF1bHQgPSBBdFJ1bGU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUYwTFhKMWJHVXVaWE0ySWwwc0ltNWhiV1Z6SWpwYklrRjBVblZzWlNJc0ltUmxabUYxYkhSeklpd2lkSGx3WlNJc0ltRndjR1Z1WkNJc0ltNXZaR1Z6SWl3aVkyaHBiR1J5Wlc0aUxDSndjbVZ3Wlc1a0lpd2lRMjl1ZEdGcGJtVnlJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenRCUVVGQk96czdPenM3UVVGRlFUczdPenM3T3pzN096czdPenM3T3pzN08wbEJhMEpOUVN4Tk96czdPenRCUVVOS0xHdENRVUZoUXl4UlFVRmlMRVZCUVhWQ08wRkJRVUU3TzBGQlEzSkNMR3REUVVGTlFTeFJRVUZPTzBGQlEwRXNWVUZCUzBNc1NVRkJUQ3hIUVVGWkxGRkJRVm83UVVGR2NVSTdRVUZIZEVJN096czdVMEZGUkVNc1RTeEhRVUZCTEd0Q1FVRnhRanRCUVVGQk96dEJRVU51UWl4UlFVRkpMRU5CUVVNc1MwRkJTME1zUzBGQlZpeEZRVUZwUWl4TFFVRkxRU3hMUVVGTUxFZEJRV0VzUlVGQllqczdRVUZFUlN4elEwRkJWa01zVVVGQlZUdEJRVUZXUVN4TlFVRkJRU3hSUVVGVk8wRkJRVUU3TzBGQlJXNUNMSGxFUVVGaFJpeE5RVUZpTEd0RVFVRjFRa1VzVVVGQmRrSTdRVUZEUkN4SE96dFRRVVZFUXl4UExFZEJRVUVzYlVKQlFYTkNPMEZCUVVFN08wRkJRM0JDTEZGQlFVa3NRMEZCUXl4TFFVRkxSaXhMUVVGV0xFVkJRV2xDTEV0QlFVdEJMRXRCUVV3c1IwRkJZU3hGUVVGaU96dEJRVVJITEhWRFFVRldReXhSUVVGVk8wRkJRVlpCTEUxQlFVRkJMRkZCUVZVN1FVRkJRVHM3UVVGRmNFSXNNRVJCUVdGRExFOUJRV0lzYlVSQlFYZENSQ3hSUVVGNFFqdEJRVU5FTzBGQlJVUTdPenM3T3pzN096czdRVUZWUVRzN096czdPenM3T3pzN08wRkJXVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdSVUYwUTIxQ1JTeHJRanM3WlVGMVJVNVFMRTBpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcGJYQnZjblFnUTI5dWRHRnBibVZ5SUdaeWIyMGdKeTR2WTI5dWRHRnBibVZ5SjF4dVhHNHZLaXBjYmlBcUlGSmxjSEpsYzJWdWRITWdZVzRnWVhRdGNuVnNaUzVjYmlBcVhHNGdLaUJKWmlCcGRPS0FtWE1nWm05c2JHOTNaV1FnYVc0Z2RHaGxJRU5UVXlCaWVTQmhJSHQ5SUdKc2IyTnJMQ0IwYUdseklHNXZaR1VnZDJsc2JDQm9ZWFpsWEc0Z0tpQmhJRzV2WkdWeklIQnliM0JsY25SNUlISmxjSEpsYzJWdWRHbHVaeUJwZEhNZ1kyaHBiR1J5Wlc0dVhHNGdLbHh1SUNvZ1FHVjRkR1Z1WkhNZ1EyOXVkR0ZwYm1WeVhHNGdLbHh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFJR052Ym5OMElISnZiM1FnUFNCd2IzTjBZM056TG5CaGNuTmxLQ2RBWTJoaGNuTmxkQ0JjSWxWVVJpMDRYQ0k3SUVCdFpXUnBZU0J3Y21sdWRDQjdmU2NwWEc0Z0tseHVJQ29nWTI5dWMzUWdZMmhoY25ObGRDQTlJSEp2YjNRdVptbHljM1JjYmlBcUlHTm9ZWEp6WlhRdWRIbHdaU0FnTHk4OVBpQW5ZWFJ5ZFd4bEoxeHVJQ29nWTJoaGNuTmxkQzV1YjJSbGN5QXZMejArSUhWdVpHVm1hVzVsWkZ4dUlDcGNiaUFxSUdOdmJuTjBJRzFsWkdsaElEMGdjbTl2ZEM1c1lYTjBYRzRnS2lCdFpXUnBZUzV1YjJSbGN5QWdJQzh2UFQ0Z1cxMWNiaUFxTDF4dVkyeGhjM01nUVhSU2RXeGxJR1Y0ZEdWdVpITWdRMjl1ZEdGcGJtVnlJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSWdLR1JsWm1GMWJIUnpLU0I3WEc0Z0lDQWdjM1Z3WlhJb1pHVm1ZWFZzZEhNcFhHNGdJQ0FnZEdocGN5NTBlWEJsSUQwZ0oyRjBjblZzWlNkY2JpQWdmVnh1WEc0Z0lHRndjR1Z1WkNBb0xpNHVZMmhwYkdSeVpXNHBJSHRjYmlBZ0lDQnBaaUFvSVhSb2FYTXVibTlrWlhNcElIUm9hWE11Ym05a1pYTWdQU0JiWFZ4dUlDQWdJSEpsZEhWeWJpQnpkWEJsY2k1aGNIQmxibVFvTGk0dVkyaHBiR1J5Wlc0cFhHNGdJSDFjYmx4dUlDQndjbVZ3Wlc1a0lDZ3VMaTVqYUdsc1pISmxiaWtnZTF4dUlDQWdJR2xtSUNnaGRHaHBjeTV1YjJSbGN5a2dkR2hwY3k1dWIyUmxjeUE5SUZ0ZFhHNGdJQ0FnY21WMGRYSnVJSE4xY0dWeUxuQnlaWEJsYm1Rb0xpNHVZMmhwYkdSeVpXNHBYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUUcxbGJXSmxjbTltSUVGMFVuVnNaU05jYmlBZ0lDb2dRRzFsYldKbGNpQjdjM1J5YVc1bmZTQnVZVzFsSUZSb1pTQmhkQzF5ZFd4bDRvQ1pjeUJ1WVcxbElHbHRiV1ZrYVdGMFpXeDVJR1p2Ykd4dmQzTWdkR2hsSUdCQVlDNWNiaUFnSUNwY2JpQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDb2dZMjl1YzNRZ2NtOXZkQ0FnUFNCd2IzTjBZM056TG5CaGNuTmxLQ2RBYldWa2FXRWdjSEpwYm5RZ2UzMG5LVnh1SUNBZ0tpQnRaV1JwWVM1dVlXMWxJQzh2UFQ0Z0oyMWxaR2xoSjF4dUlDQWdLaUJqYjI1emRDQnRaV1JwWVNBOUlISnZiM1F1Wm1seWMzUmNiaUFnSUNvdlhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCdFpXMWlaWEp2WmlCQmRGSjFiR1VqWEc0Z0lDQXFJRUJ0WlcxaVpYSWdlM04wY21sdVozMGdjR0Z5WVcxeklGUm9aU0JoZEMxeWRXeGw0b0NaY3lCd1lYSmhiV1YwWlhKekxDQjBhR1VnZG1Gc2RXVnpYRzRnSUNBcUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb1lYUWdabTlzYkc5M0lIUm9aU0JoZEMxeWRXeGw0b0NaY3lCdVlXMWxJR0oxZENCd2NtVmpaV1JsWEc0Z0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRnVlU0I3ZlNCaWJHOWpheTVjYmlBZ0lDcGNiaUFnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ29nWTI5dWMzUWdjbTl2ZENBZ1BTQndiM04wWTNOekxuQmhjbk5sS0NkQWJXVmthV0VnY0hKcGJuUXNJSE5qY21WbGJpQjdmU2NwWEc0Z0lDQXFJR052Ym5OMElHMWxaR2xoSUQwZ2NtOXZkQzVtYVhKemRGeHVJQ0FnS2lCdFpXUnBZUzV3WVhKaGJYTWdMeTg5UGlBbmNISnBiblFzSUhOamNtVmxiaWRjYmlBZ0lDb3ZYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFQnRaVzFpWlhKdlppQkJkRkoxYkdValhHNGdJQ0FxSUVCdFpXMWlaWElnZTI5aWFtVmpkSDBnY21GM2N5QkpibVp2Y20xaGRHbHZiaUIwYnlCblpXNWxjbUYwWlNCaWVYUmxMWFJ2TFdKNWRHVWdaWEYxWVd4Y2JpQWdJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnViMlJsSUhOMGNtbHVaeUJoY3lCcGRDQjNZWE1nYVc0Z2RHaGxJRzl5YVdkcGJpQnBibkIxZEM1Y2JpQWdJQ3BjYmlBZ0lDb2dSWFpsY25rZ2NHRnljMlZ5SUhOaGRtVnpJR2wwY3lCdmQyNGdjSEp2Y0dWeWRHbGxjeXhjYmlBZ0lDb2dZblYwSUhSb1pTQmtaV1poZFd4MElFTlRVeUJ3WVhKelpYSWdkWE5sY3pwY2JpQWdJQ3BjYmlBZ0lDb2dLaUJnWW1WbWIzSmxZRG9nZEdobElITndZV05sSUhONWJXSnZiSE1nWW1WbWIzSmxJSFJvWlNCdWIyUmxMaUJKZENCaGJITnZJSE4wYjNKbGN5QmdLbUJjYmlBZ0lDb2dJQ0JoYm1RZ1lGOWdJSE41YldKdmJITWdZbVZtYjNKbElIUm9aU0JrWldOc1lYSmhkR2x2YmlBb1NVVWdhR0ZqYXlrdVhHNGdJQ0FxSUNvZ1lHRm1kR1Z5WURvZ2RHaGxJSE53WVdObElITjViV0p2YkhNZ1lXWjBaWElnZEdobElHeGhjM1FnWTJocGJHUWdiMllnZEdobElHNXZaR1ZjYmlBZ0lDb2dJQ0IwYnlCMGFHVWdaVzVrSUc5bUlIUm9aU0J1YjJSbExseHVJQ0FnS2lBcUlHQmlaWFIzWldWdVlEb2dkR2hsSUhONWJXSnZiSE1nWW1WMGQyVmxiaUIwYUdVZ2NISnZjR1Z5ZEhrZ1lXNWtJSFpoYkhWbFhHNGdJQ0FxSUNBZ1ptOXlJR1JsWTJ4aGNtRjBhVzl1Y3l3Z2MyVnNaV04wYjNJZ1lXNWtJR0I3WUNCbWIzSWdjblZzWlhNc0lHOXlJR3hoYzNRZ2NHRnlZVzFsZEdWeVhHNGdJQ0FxSUNBZ1lXNWtJR0I3WUNCbWIzSWdZWFF0Y25Wc1pYTXVYRzRnSUNBcUlDb2dZSE5sYldsamIyeHZibUE2SUdOdmJuUmhhVzV6SUhSeWRXVWdhV1lnZEdobElHeGhjM1FnWTJocGJHUWdhR0Z6WEc0Z0lDQXFJQ0FnWVc0Z0tHOXdkR2x2Ym1Gc0tTQnpaVzFwWTI5c2IyNHVYRzRnSUNBcUlDb2dZR0ZtZEdWeVRtRnRaV0E2SUhSb1pTQnpjR0ZqWlNCaVpYUjNaV1Z1SUhSb1pTQmhkQzF5ZFd4bElHNWhiV1VnWVc1a0lHbDBjeUJ3WVhKaGJXVjBaWEp6TGx4dUlDQWdLbHh1SUNBZ0tpQlFiM04wUTFOVElHTnNaV0Z1Y3lCaGRDMXlkV3hsSUhCaGNtRnRaWFJsY25NZ1puSnZiU0JqYjIxdFpXNTBjeUJoYm1RZ1pYaDBjbUVnYzNCaFkyVnpMRnh1SUNBZ0tpQmlkWFFnYVhRZ2MzUnZjbVZ6SUc5eWFXZHBiaUJqYjI1MFpXNTBJR2x1SUhKaGQzTWdjSEp2Y0dWeWRHbGxjeTVjYmlBZ0lDb2dRWE1nYzNWamFDd2dhV1lnZVc5MUlHUnZidUtBbVhRZ1kyaGhibWRsSUdFZ1pHVmpiR0Z5WVhScGIyN2lnSmx6SUhaaGJIVmxMRnh1SUNBZ0tpQlFiM04wUTFOVElIZHBiR3dnZFhObElIUm9aU0J5WVhjZ2RtRnNkV1VnZDJsMGFDQmpiMjF0Wlc1MGN5NWNiaUFnSUNwY2JpQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDb2dZMjl1YzNRZ2NtOXZkQ0E5SUhCdmMzUmpjM011Y0dGeWMyVW9KeUFnUUcxbFpHbGhYRnh1Y0hKcGJuUWdlMXhjYm4wbktWeHVJQ0FnS2lCeWIyOTBMbVpwY25OMExtWnBjbk4wTG5KaGQzTWdMeTg5UGlCN0lHSmxabTl5WlRvZ0p5QWdKeXhjYmlBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklDQWdJQ0JpWlhSM1pXVnVPaUFuSUNjc1hHNGdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUNBZ1lXWjBaWEpPWVcxbE9pQW5YRnh1Snl4Y2JpQWdJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJQ0FnSUNCaFpuUmxjam9nSjF4Y2JpY2dmVnh1SUNBZ0tpOWNibjFjYmx4dVpYaHdiM0owSUdSbFptRjFiSFFnUVhSU2RXeGxYRzRpWFN3aVptbHNaU0k2SW1GMExYSjFiR1V1YW5NaWZRPT1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2RlY2xhcmF0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9kZWNsYXJhdGlvblwiKSk7XG5cbnZhciBfY29tbWVudCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY29tbWVudFwiKSk7XG5cbnZhciBfbm9kZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbm9kZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmZ1bmN0aW9uIGNsZWFuU291cmNlKG5vZGVzKSB7XG4gIHJldHVybiBub2Rlcy5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICBpZiAoaS5ub2RlcykgaS5ub2RlcyA9IGNsZWFuU291cmNlKGkubm9kZXMpO1xuICAgIGRlbGV0ZSBpLnNvdXJjZTtcbiAgICByZXR1cm4gaTtcbiAgfSk7XG59XG4vKipcbiAqIFRoZSB7QGxpbmsgUm9vdH0sIHtAbGluayBBdFJ1bGV9LCBhbmQge0BsaW5rIFJ1bGV9IGNvbnRhaW5lciBub2Rlc1xuICogaW5oZXJpdCBzb21lIGNvbW1vbiBtZXRob2RzIHRvIGhlbHAgd29yayB3aXRoIHRoZWlyIGNoaWxkcmVuLlxuICpcbiAqIE5vdGUgdGhhdCBhbGwgY29udGFpbmVycyBjYW4gc3RvcmUgYW55IGNvbnRlbnQuIElmIHlvdSB3cml0ZSBhIHJ1bGUgaW5zaWRlXG4gKiBhIHJ1bGUsIFBvc3RDU1Mgd2lsbCBwYXJzZSBpdC5cbiAqXG4gKiBAZXh0ZW5kcyBOb2RlXG4gKiBAYWJzdHJhY3RcbiAqL1xuXG5cbnZhciBDb250YWluZXIgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Ob2RlKSB7XG4gIF9pbmhlcml0c0xvb3NlKENvbnRhaW5lciwgX05vZGUpO1xuXG4gIGZ1bmN0aW9uIENvbnRhaW5lcigpIHtcbiAgICByZXR1cm4gX05vZGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENvbnRhaW5lci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnB1c2ggPSBmdW5jdGlvbiBwdXNoKGNoaWxkKSB7XG4gICAgY2hpbGQucGFyZW50ID0gdGhpcztcbiAgICB0aGlzLm5vZGVzLnB1c2goY2hpbGQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBJdGVyYXRlcyB0aHJvdWdoIHRoZSBjb250YWluZXLigJlzIGltbWVkaWF0ZSBjaGlsZHJlbixcbiAgICogY2FsbGluZyBgY2FsbGJhY2tgIGZvciBlYWNoIGNoaWxkLlxuICAgKlxuICAgKiBSZXR1cm5pbmcgYGZhbHNlYCBpbiB0aGUgY2FsbGJhY2sgd2lsbCBicmVhayBpdGVyYXRpb24uXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIG9ubHkgaXRlcmF0ZXMgdGhyb3VnaCB0aGUgY29udGFpbmVy4oCZcyBpbW1lZGlhdGUgY2hpbGRyZW4uXG4gICAqIElmIHlvdSBuZWVkIHRvIHJlY3Vyc2l2ZWx5IGl0ZXJhdGUgdGhyb3VnaCBhbGwgdGhlIGNvbnRhaW5lcuKAmXMgZGVzY2VuZGFudFxuICAgKiBub2RlcywgdXNlIHtAbGluayBDb250YWluZXIjd2Fsa30uXG4gICAqXG4gICAqIFVubGlrZSB0aGUgZm9yIGB7fWAtY3ljbGUgb3IgYEFycmF5I2ZvckVhY2hgIHRoaXMgaXRlcmF0b3IgaXMgc2FmZVxuICAgKiBpZiB5b3UgYXJlIG11dGF0aW5nIHRoZSBhcnJheSBvZiBjaGlsZCBub2RlcyBkdXJpbmcgaXRlcmF0aW9uLlxuICAgKiBQb3N0Q1NTIHdpbGwgYWRqdXN0IHRoZSBjdXJyZW50IGluZGV4IHRvIG1hdGNoIHRoZSBtdXRhdGlvbnMuXG4gICAqXG4gICAqIEBwYXJhbSB7Y2hpbGRJdGVyYXRvcn0gY2FsbGJhY2sgSXRlcmF0b3IgcmVjZWl2ZXMgZWFjaCBub2RlIGFuZCBpbmRleC5cbiAgICpcbiAgICogQHJldHVybiB7ZmFsc2V8dW5kZWZpbmVkfSBSZXR1cm5zIGBmYWxzZWAgaWYgaXRlcmF0aW9uIHdhcyBicm9rZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoJ2EgeyBjb2xvcjogYmxhY2s7IHotaW5kZXg6IDEgfScpXG4gICAqIGNvbnN0IHJ1bGUgPSByb290LmZpcnN0XG4gICAqXG4gICAqIGZvciAoY29uc3QgZGVjbCBvZiBydWxlLm5vZGVzKSB7XG4gICAqICAgZGVjbC5jbG9uZUJlZm9yZSh7IHByb3A6ICctd2Via2l0LScgKyBkZWNsLnByb3AgfSlcbiAgICogICAvLyBDeWNsZSB3aWxsIGJlIGluZmluaXRlLCBiZWNhdXNlIGNsb25lQmVmb3JlIG1vdmVzIHRoZSBjdXJyZW50IG5vZGVcbiAgICogICAvLyB0byB0aGUgbmV4dCBpbmRleFxuICAgKiB9XG4gICAqXG4gICAqIHJ1bGUuZWFjaChkZWNsID0+IHtcbiAgICogICBkZWNsLmNsb25lQmVmb3JlKHsgcHJvcDogJy13ZWJraXQtJyArIGRlY2wucHJvcCB9KVxuICAgKiAgIC8vIFdpbGwgYmUgZXhlY3V0ZWQgb25seSBmb3IgY29sb3IgYW5kIHotaW5kZXhcbiAgICogfSlcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZWFjaCA9IGZ1bmN0aW9uIGVhY2goY2FsbGJhY2spIHtcbiAgICBpZiAoIXRoaXMubGFzdEVhY2gpIHRoaXMubGFzdEVhY2ggPSAwO1xuICAgIGlmICghdGhpcy5pbmRleGVzKSB0aGlzLmluZGV4ZXMgPSB7fTtcbiAgICB0aGlzLmxhc3RFYWNoICs9IDE7XG4gICAgdmFyIGlkID0gdGhpcy5sYXN0RWFjaDtcbiAgICB0aGlzLmluZGV4ZXNbaWRdID0gMDtcbiAgICBpZiAoIXRoaXMubm9kZXMpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgdmFyIGluZGV4LCByZXN1bHQ7XG5cbiAgICB3aGlsZSAodGhpcy5pbmRleGVzW2lkXSA8IHRoaXMubm9kZXMubGVuZ3RoKSB7XG4gICAgICBpbmRleCA9IHRoaXMuaW5kZXhlc1tpZF07XG4gICAgICByZXN1bHQgPSBjYWxsYmFjayh0aGlzLm5vZGVzW2luZGV4XSwgaW5kZXgpO1xuICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIGJyZWFrO1xuICAgICAgdGhpcy5pbmRleGVzW2lkXSArPSAxO1xuICAgIH1cblxuICAgIGRlbGV0ZSB0aGlzLmluZGV4ZXNbaWRdO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIFRyYXZlcnNlcyB0aGUgY29udGFpbmVy4oCZcyBkZXNjZW5kYW50IG5vZGVzLCBjYWxsaW5nIGNhbGxiYWNrXG4gICAqIGZvciBlYWNoIG5vZGUuXG4gICAqXG4gICAqIExpa2UgY29udGFpbmVyLmVhY2goKSwgdGhpcyBtZXRob2QgaXMgc2FmZSB0byB1c2VcbiAgICogaWYgeW91IGFyZSBtdXRhdGluZyBhcnJheXMgZHVyaW5nIGl0ZXJhdGlvbi5cbiAgICpcbiAgICogSWYgeW91IG9ubHkgbmVlZCB0byBpdGVyYXRlIHRocm91Z2ggdGhlIGNvbnRhaW5lcuKAmXMgaW1tZWRpYXRlIGNoaWxkcmVuLFxuICAgKiB1c2Uge0BsaW5rIENvbnRhaW5lciNlYWNofS5cbiAgICpcbiAgICogQHBhcmFtIHtjaGlsZEl0ZXJhdG9yfSBjYWxsYmFjayBJdGVyYXRvciByZWNlaXZlcyBlYWNoIG5vZGUgYW5kIGluZGV4LlxuICAgKlxuICAgKiBAcmV0dXJuIHtmYWxzZXx1bmRlZmluZWR9IFJldHVybnMgYGZhbHNlYCBpZiBpdGVyYXRpb24gd2FzIGJyb2tlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiByb290LndhbGsobm9kZSA9PiB7XG4gICAqICAgLy8gVHJhdmVyc2VzIGFsbCBkZXNjZW5kYW50IG5vZGVzLlxuICAgKiB9KVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by53YWxrID0gZnVuY3Rpb24gd2FsayhjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKGNoaWxkLCBpKSB7XG4gICAgICB2YXIgcmVzdWx0O1xuXG4gICAgICB0cnkge1xuICAgICAgICByZXN1bHQgPSBjYWxsYmFjayhjaGlsZCwgaSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGUucG9zdGNzc05vZGUgPSBjaGlsZDtcblxuICAgICAgICBpZiAoZS5zdGFjayAmJiBjaGlsZC5zb3VyY2UgJiYgL1xcblxcc3s0fWF0IC8udGVzdChlLnN0YWNrKSkge1xuICAgICAgICAgIHZhciBzID0gY2hpbGQuc291cmNlO1xuICAgICAgICAgIGUuc3RhY2sgPSBlLnN0YWNrLnJlcGxhY2UoL1xcblxcc3s0fWF0IC8sIFwiJCZcIiArIHMuaW5wdXQuZnJvbSArIFwiOlwiICsgcy5zdGFydC5saW5lICsgXCI6XCIgKyBzLnN0YXJ0LmNvbHVtbiArIFwiJCZcIik7XG4gICAgICAgIH1cblxuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuXG4gICAgICBpZiAocmVzdWx0ICE9PSBmYWxzZSAmJiBjaGlsZC53YWxrKSB7XG4gICAgICAgIHJlc3VsdCA9IGNoaWxkLndhbGsoY2FsbGJhY2spO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBUcmF2ZXJzZXMgdGhlIGNvbnRhaW5lcuKAmXMgZGVzY2VuZGFudCBub2RlcywgY2FsbGluZyBjYWxsYmFja1xuICAgKiBmb3IgZWFjaCBkZWNsYXJhdGlvbiBub2RlLlxuICAgKlxuICAgKiBJZiB5b3UgcGFzcyBhIGZpbHRlciwgaXRlcmF0aW9uIHdpbGwgb25seSBoYXBwZW4gb3ZlciBkZWNsYXJhdGlvbnNcbiAgICogd2l0aCBtYXRjaGluZyBwcm9wZXJ0aWVzLlxuICAgKlxuICAgKiBMaWtlIHtAbGluayBDb250YWluZXIjZWFjaH0sIHRoaXMgbWV0aG9kIGlzIHNhZmVcbiAgICogdG8gdXNlIGlmIHlvdSBhcmUgbXV0YXRpbmcgYXJyYXlzIGR1cmluZyBpdGVyYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfFJlZ0V4cH0gW3Byb3BdICAgU3RyaW5nIG9yIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGZpbHRlciBkZWNsYXJhdGlvbnMgYnkgcHJvcGVydHkgbmFtZS5cbiAgICogQHBhcmFtIHtjaGlsZEl0ZXJhdG9yfSBjYWxsYmFjayBJdGVyYXRvciByZWNlaXZlcyBlYWNoIG5vZGUgYW5kIGluZGV4LlxuICAgKlxuICAgKiBAcmV0dXJuIHtmYWxzZXx1bmRlZmluZWR9IFJldHVybnMgYGZhbHNlYCBpZiBpdGVyYXRpb24gd2FzIGJyb2tlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiByb290LndhbGtEZWNscyhkZWNsID0+IHtcbiAgICogICBjaGVja1Byb3BlcnR5U3VwcG9ydChkZWNsLnByb3ApXG4gICAqIH0pXG4gICAqXG4gICAqIHJvb3Qud2Fsa0RlY2xzKCdib3JkZXItcmFkaXVzJywgZGVjbCA9PiB7XG4gICAqICAgZGVjbC5yZW1vdmUoKVxuICAgKiB9KVxuICAgKlxuICAgKiByb290LndhbGtEZWNscygvXmJhY2tncm91bmQvLCBkZWNsID0+IHtcbiAgICogICBkZWNsLnZhbHVlID0gdGFrZUZpcnN0Q29sb3JGcm9tR3JhZGllbnQoZGVjbC52YWx1ZSlcbiAgICogfSlcbiAgICovXG4gIDtcblxuICBfcHJvdG8ud2Fsa0RlY2xzID0gZnVuY3Rpb24gd2Fsa0RlY2xzKHByb3AsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFjYWxsYmFjaykge1xuICAgICAgY2FsbGJhY2sgPSBwcm9wO1xuICAgICAgcmV0dXJuIHRoaXMud2FsayhmdW5jdGlvbiAoY2hpbGQsIGkpIHtcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdkZWNsJykge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhjaGlsZCwgaSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChwcm9wIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICByZXR1cm4gdGhpcy53YWxrKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ2RlY2wnICYmIHByb3AudGVzdChjaGlsZC5wcm9wKSkge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhjaGlsZCwgaSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLndhbGsoZnVuY3Rpb24gKGNoaWxkLCBpKSB7XG4gICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ2RlY2wnICYmIGNoaWxkLnByb3AgPT09IHByb3ApIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNoaWxkLCBpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogVHJhdmVyc2VzIHRoZSBjb250YWluZXLigJlzIGRlc2NlbmRhbnQgbm9kZXMsIGNhbGxpbmcgY2FsbGJhY2tcbiAgICogZm9yIGVhY2ggcnVsZSBub2RlLlxuICAgKlxuICAgKiBJZiB5b3UgcGFzcyBhIGZpbHRlciwgaXRlcmF0aW9uIHdpbGwgb25seSBoYXBwZW4gb3ZlciBydWxlc1xuICAgKiB3aXRoIG1hdGNoaW5nIHNlbGVjdG9ycy5cbiAgICpcbiAgICogTGlrZSB7QGxpbmsgQ29udGFpbmVyI2VhY2h9LCB0aGlzIG1ldGhvZCBpcyBzYWZlXG4gICAqIHRvIHVzZSBpZiB5b3UgYXJlIG11dGF0aW5nIGFycmF5cyBkdXJpbmcgaXRlcmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB9IFtzZWxlY3Rvcl0gU3RyaW5nIG9yIHJlZ3VsYXIgZXhwcmVzc2lvblxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gZmlsdGVyIHJ1bGVzIGJ5IHNlbGVjdG9yLlxuICAgKiBAcGFyYW0ge2NoaWxkSXRlcmF0b3J9IGNhbGxiYWNrICAgSXRlcmF0b3IgcmVjZWl2ZXMgZWFjaCBub2RlIGFuZCBpbmRleC5cbiAgICpcbiAgICogQHJldHVybiB7ZmFsc2V8dW5kZWZpbmVkfSByZXR1cm5zIGBmYWxzZWAgaWYgaXRlcmF0aW9uIHdhcyBicm9rZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3Qgc2VsZWN0b3JzID0gW11cbiAgICogcm9vdC53YWxrUnVsZXMocnVsZSA9PiB7XG4gICAqICAgc2VsZWN0b3JzLnB1c2gocnVsZS5zZWxlY3RvcilcbiAgICogfSlcbiAgICogY29uc29sZS5sb2coYFlvdXIgQ1NTIHVzZXMgJHsgc2VsZWN0b3JzLmxlbmd0aCB9IHNlbGVjdG9yc2ApXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLndhbGtSdWxlcyA9IGZ1bmN0aW9uIHdhbGtSdWxlcyhzZWxlY3RvciwgY2FsbGJhY2spIHtcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjayA9IHNlbGVjdG9yO1xuICAgICAgcmV0dXJuIHRoaXMud2FsayhmdW5jdGlvbiAoY2hpbGQsIGkpIHtcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdydWxlJykge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhjaGlsZCwgaSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChzZWxlY3RvciBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgICAgcmV0dXJuIHRoaXMud2FsayhmdW5jdGlvbiAoY2hpbGQsIGkpIHtcbiAgICAgICAgaWYgKGNoaWxkLnR5cGUgPT09ICdydWxlJyAmJiBzZWxlY3Rvci50ZXN0KGNoaWxkLnNlbGVjdG9yKSkge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhjaGlsZCwgaSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLndhbGsoZnVuY3Rpb24gKGNoaWxkLCBpKSB7XG4gICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ3J1bGUnICYmIGNoaWxkLnNlbGVjdG9yID09PSBzZWxlY3Rvcikge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2soY2hpbGQsIGkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIC8qKlxuICAgKiBUcmF2ZXJzZXMgdGhlIGNvbnRhaW5lcuKAmXMgZGVzY2VuZGFudCBub2RlcywgY2FsbGluZyBjYWxsYmFja1xuICAgKiBmb3IgZWFjaCBhdC1ydWxlIG5vZGUuXG4gICAqXG4gICAqIElmIHlvdSBwYXNzIGEgZmlsdGVyLCBpdGVyYXRpb24gd2lsbCBvbmx5IGhhcHBlbiBvdmVyIGF0LXJ1bGVzXG4gICAqIHRoYXQgaGF2ZSBtYXRjaGluZyBuYW1lcy5cbiAgICpcbiAgICogTGlrZSB7QGxpbmsgQ29udGFpbmVyI2VhY2h9LCB0aGlzIG1ldGhvZCBpcyBzYWZlXG4gICAqIHRvIHVzZSBpZiB5b3UgYXJlIG11dGF0aW5nIGFycmF5cyBkdXJpbmcgaXRlcmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB9IFtuYW1lXSAgIFN0cmluZyBvciByZWd1bGFyIGV4cHJlc3Npb25cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBmaWx0ZXIgYXQtcnVsZXMgYnkgbmFtZS5cbiAgICogQHBhcmFtIHtjaGlsZEl0ZXJhdG9yfSBjYWxsYmFjayBJdGVyYXRvciByZWNlaXZlcyBlYWNoIG5vZGUgYW5kIGluZGV4LlxuICAgKlxuICAgKiBAcmV0dXJuIHtmYWxzZXx1bmRlZmluZWR9IFJldHVybnMgYGZhbHNlYCBpZiBpdGVyYXRpb24gd2FzIGJyb2tlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiByb290LndhbGtBdFJ1bGVzKHJ1bGUgPT4ge1xuICAgKiAgIGlmIChpc09sZChydWxlLm5hbWUpKSBydWxlLnJlbW92ZSgpXG4gICAqIH0pXG4gICAqXG4gICAqIGxldCBmaXJzdCA9IGZhbHNlXG4gICAqIHJvb3Qud2Fsa0F0UnVsZXMoJ2NoYXJzZXQnLCBydWxlID0+IHtcbiAgICogICBpZiAoIWZpcnN0KSB7XG4gICAqICAgICBmaXJzdCA9IHRydWVcbiAgICogICB9IGVsc2Uge1xuICAgKiAgICAgcnVsZS5yZW1vdmUoKVxuICAgKiAgIH1cbiAgICogfSlcbiAgICovXG4gIDtcblxuICBfcHJvdG8ud2Fsa0F0UnVsZXMgPSBmdW5jdGlvbiB3YWxrQXRSdWxlcyhuYW1lLCBjYWxsYmFjaykge1xuICAgIGlmICghY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrID0gbmFtZTtcbiAgICAgIHJldHVybiB0aGlzLndhbGsoZnVuY3Rpb24gKGNoaWxkLCBpKSB7XG4gICAgICAgIGlmIChjaGlsZC50eXBlID09PSAnYXRydWxlJykge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhjaGlsZCwgaSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChuYW1lIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgICByZXR1cm4gdGhpcy53YWxrKGZ1bmN0aW9uIChjaGlsZCwgaSkge1xuICAgICAgICBpZiAoY2hpbGQudHlwZSA9PT0gJ2F0cnVsZScgJiYgbmFtZS50ZXN0KGNoaWxkLm5hbWUpKSB7XG4gICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNoaWxkLCBpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMud2FsayhmdW5jdGlvbiAoY2hpbGQsIGkpIHtcbiAgICAgIGlmIChjaGlsZC50eXBlID09PSAnYXRydWxlJyAmJiBjaGlsZC5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIHJldHVybiBjYWxsYmFjayhjaGlsZCwgaSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFRyYXZlcnNlcyB0aGUgY29udGFpbmVy4oCZcyBkZXNjZW5kYW50IG5vZGVzLCBjYWxsaW5nIGNhbGxiYWNrXG4gICAqIGZvciBlYWNoIGNvbW1lbnQgbm9kZS5cbiAgICpcbiAgICogTGlrZSB7QGxpbmsgQ29udGFpbmVyI2VhY2h9LCB0aGlzIG1ldGhvZCBpcyBzYWZlXG4gICAqIHRvIHVzZSBpZiB5b3UgYXJlIG11dGF0aW5nIGFycmF5cyBkdXJpbmcgaXRlcmF0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge2NoaWxkSXRlcmF0b3J9IGNhbGxiYWNrIEl0ZXJhdG9yIHJlY2VpdmVzIGVhY2ggbm9kZSBhbmQgaW5kZXguXG4gICAqXG4gICAqIEByZXR1cm4ge2ZhbHNlfHVuZGVmaW5lZH0gUmV0dXJucyBgZmFsc2VgIGlmIGl0ZXJhdGlvbiB3YXMgYnJva2UuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHJvb3Qud2Fsa0NvbW1lbnRzKGNvbW1lbnQgPT4ge1xuICAgKiAgIGNvbW1lbnQucmVtb3ZlKClcbiAgICogfSlcbiAgICovXG4gIDtcblxuICBfcHJvdG8ud2Fsa0NvbW1lbnRzID0gZnVuY3Rpb24gd2Fsa0NvbW1lbnRzKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMud2FsayhmdW5jdGlvbiAoY2hpbGQsIGkpIHtcbiAgICAgIGlmIChjaGlsZC50eXBlID09PSAnY29tbWVudCcpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGNoaWxkLCBpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0cyBuZXcgbm9kZXMgdG8gdGhlIGVuZCBvZiB0aGUgY29udGFpbmVyLlxuICAgKlxuICAgKiBAcGFyYW0gey4uLihOb2RlfG9iamVjdHxzdHJpbmd8Tm9kZVtdKX0gY2hpbGRyZW4gTmV3IG5vZGVzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtOb2RlfSBUaGlzIG5vZGUgZm9yIG1ldGhvZHMgY2hhaW4uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGRlY2wxID0gcG9zdGNzcy5kZWNsKHsgcHJvcDogJ2NvbG9yJywgdmFsdWU6ICdibGFjaycgfSlcbiAgICogY29uc3QgZGVjbDIgPSBwb3N0Y3NzLmRlY2woeyBwcm9wOiAnYmFja2dyb3VuZC1jb2xvcicsIHZhbHVlOiAnd2hpdGUnIH0pXG4gICAqIHJ1bGUuYXBwZW5kKGRlY2wxLCBkZWNsMilcbiAgICpcbiAgICogcm9vdC5hcHBlbmQoeyBuYW1lOiAnY2hhcnNldCcsIHBhcmFtczogJ1wiVVRGLThcIicgfSkgIC8vIGF0LXJ1bGVcbiAgICogcm9vdC5hcHBlbmQoeyBzZWxlY3RvcjogJ2EnIH0pICAgICAgICAgICAgICAgICAgICAgICAvLyBydWxlXG4gICAqIHJ1bGUuYXBwZW5kKHsgcHJvcDogJ2NvbG9yJywgdmFsdWU6ICdibGFjaycgfSkgICAgICAgLy8gZGVjbGFyYXRpb25cbiAgICogcnVsZS5hcHBlbmQoeyB0ZXh0OiAnQ29tbWVudCcgfSkgICAgICAgICAgICAgICAgICAgICAvLyBjb21tZW50XG4gICAqXG4gICAqIHJvb3QuYXBwZW5kKCdhIHt9JylcbiAgICogcm9vdC5maXJzdC5hcHBlbmQoJ2NvbG9yOiBibGFjazsgei1pbmRleDogMScpXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmFwcGVuZCA9IGZ1bmN0aW9uIGFwcGVuZCgpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgY2hpbGRyZW4gPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBjaGlsZHJlbltfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDAsIF9jaGlsZHJlbiA9IGNoaWxkcmVuOyBfaSA8IF9jaGlsZHJlbi5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IF9jaGlsZHJlbltfaV07XG4gICAgICB2YXIgbm9kZXMgPSB0aGlzLm5vcm1hbGl6ZShjaGlsZCwgdGhpcy5sYXN0KTtcblxuICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gbm9kZXMsIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheShfaXRlcmF0b3IpLCBfaTIgPSAwLCBfaXRlcmF0b3IgPSBfaXNBcnJheSA/IF9pdGVyYXRvciA6IF9pdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgICB2YXIgX3JlZjtcblxuICAgICAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgICAgICBpZiAoX2kyID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgICAgIF9yZWYgPSBfaXRlcmF0b3JbX2kyKytdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9pMiA9IF9pdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKF9pMi5kb25lKSBicmVhaztcbiAgICAgICAgICBfcmVmID0gX2kyLnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5vZGUgPSBfcmVmO1xuICAgICAgICB0aGlzLm5vZGVzLnB1c2gobm9kZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydHMgbmV3IG5vZGVzIHRvIHRoZSBzdGFydCBvZiB0aGUgY29udGFpbmVyLlxuICAgKlxuICAgKiBAcGFyYW0gey4uLihOb2RlfG9iamVjdHxzdHJpbmd8Tm9kZVtdKX0gY2hpbGRyZW4gTmV3IG5vZGVzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtOb2RlfSBUaGlzIG5vZGUgZm9yIG1ldGhvZHMgY2hhaW4uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGRlY2wxID0gcG9zdGNzcy5kZWNsKHsgcHJvcDogJ2NvbG9yJywgdmFsdWU6ICdibGFjaycgfSlcbiAgICogY29uc3QgZGVjbDIgPSBwb3N0Y3NzLmRlY2woeyBwcm9wOiAnYmFja2dyb3VuZC1jb2xvcicsIHZhbHVlOiAnd2hpdGUnIH0pXG4gICAqIHJ1bGUucHJlcGVuZChkZWNsMSwgZGVjbDIpXG4gICAqXG4gICAqIHJvb3QuYXBwZW5kKHsgbmFtZTogJ2NoYXJzZXQnLCBwYXJhbXM6ICdcIlVURi04XCInIH0pICAvLyBhdC1ydWxlXG4gICAqIHJvb3QuYXBwZW5kKHsgc2VsZWN0b3I6ICdhJyB9KSAgICAgICAgICAgICAgICAgICAgICAgLy8gcnVsZVxuICAgKiBydWxlLmFwcGVuZCh7IHByb3A6ICdjb2xvcicsIHZhbHVlOiAnYmxhY2snIH0pICAgICAgIC8vIGRlY2xhcmF0aW9uXG4gICAqIHJ1bGUuYXBwZW5kKHsgdGV4dDogJ0NvbW1lbnQnIH0pICAgICAgICAgICAgICAgICAgICAgLy8gY29tbWVudFxuICAgKlxuICAgKiByb290LmFwcGVuZCgnYSB7fScpXG4gICAqIHJvb3QuZmlyc3QuYXBwZW5kKCdjb2xvcjogYmxhY2s7IHotaW5kZXg6IDEnKVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5wcmVwZW5kID0gZnVuY3Rpb24gcHJlcGVuZCgpIHtcbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNoaWxkcmVuID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICBjaGlsZHJlbltfa2V5Ml0gPSBhcmd1bWVudHNbX2tleTJdO1xuICAgIH1cblxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4ucmV2ZXJzZSgpO1xuXG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IGNoaWxkcmVuLCBfaXNBcnJheTIgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvcjIpLCBfaTMgPSAwLCBfaXRlcmF0b3IyID0gX2lzQXJyYXkyID8gX2l0ZXJhdG9yMiA6IF9pdGVyYXRvcjJbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmMjtcblxuICAgICAgaWYgKF9pc0FycmF5Mikge1xuICAgICAgICBpZiAoX2kzID49IF9pdGVyYXRvcjIubGVuZ3RoKSBicmVhaztcbiAgICAgICAgX3JlZjIgPSBfaXRlcmF0b3IyW19pMysrXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9pMyA9IF9pdGVyYXRvcjIubmV4dCgpO1xuICAgICAgICBpZiAoX2kzLmRvbmUpIGJyZWFrO1xuICAgICAgICBfcmVmMiA9IF9pMy52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNoaWxkID0gX3JlZjI7XG4gICAgICB2YXIgbm9kZXMgPSB0aGlzLm5vcm1hbGl6ZShjaGlsZCwgdGhpcy5maXJzdCwgJ3ByZXBlbmQnKS5yZXZlcnNlKCk7XG5cbiAgICAgIGZvciAodmFyIF9pdGVyYXRvcjMgPSBub2RlcywgX2lzQXJyYXkzID0gQXJyYXkuaXNBcnJheShfaXRlcmF0b3IzKSwgX2k0ID0gMCwgX2l0ZXJhdG9yMyA9IF9pc0FycmF5MyA/IF9pdGVyYXRvcjMgOiBfaXRlcmF0b3IzW1N5bWJvbC5pdGVyYXRvcl0oKTs7KSB7XG4gICAgICAgIHZhciBfcmVmMztcblxuICAgICAgICBpZiAoX2lzQXJyYXkzKSB7XG4gICAgICAgICAgaWYgKF9pNCA+PSBfaXRlcmF0b3IzLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgICAgX3JlZjMgPSBfaXRlcmF0b3IzW19pNCsrXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfaTQgPSBfaXRlcmF0b3IzLm5leHQoKTtcbiAgICAgICAgICBpZiAoX2k0LmRvbmUpIGJyZWFrO1xuICAgICAgICAgIF9yZWYzID0gX2k0LnZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIG5vZGUgPSBfcmVmMztcbiAgICAgICAgdGhpcy5ub2Rlcy51bnNoaWZ0KG5vZGUpO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpZCBpbiB0aGlzLmluZGV4ZXMpIHtcbiAgICAgICAgdGhpcy5pbmRleGVzW2lkXSA9IHRoaXMuaW5kZXhlc1tpZF0gKyBub2Rlcy5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmNsZWFuUmF3cyA9IGZ1bmN0aW9uIGNsZWFuUmF3cyhrZWVwQmV0d2Vlbikge1xuICAgIF9Ob2RlLnByb3RvdHlwZS5jbGVhblJhd3MuY2FsbCh0aGlzLCBrZWVwQmV0d2Vlbik7XG5cbiAgICBpZiAodGhpcy5ub2Rlcykge1xuICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yNCA9IHRoaXMubm9kZXMsIF9pc0FycmF5NCA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yNCksIF9pNSA9IDAsIF9pdGVyYXRvcjQgPSBfaXNBcnJheTQgPyBfaXRlcmF0b3I0IDogX2l0ZXJhdG9yNFtTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgICB2YXIgX3JlZjQ7XG5cbiAgICAgICAgaWYgKF9pc0FycmF5NCkge1xuICAgICAgICAgIGlmIChfaTUgPj0gX2l0ZXJhdG9yNC5sZW5ndGgpIGJyZWFrO1xuICAgICAgICAgIF9yZWY0ID0gX2l0ZXJhdG9yNFtfaTUrK107XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgX2k1ID0gX2l0ZXJhdG9yNC5uZXh0KCk7XG4gICAgICAgICAgaWYgKF9pNS5kb25lKSBicmVhaztcbiAgICAgICAgICBfcmVmNCA9IF9pNS52YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBub2RlID0gX3JlZjQ7XG4gICAgICAgIG5vZGUuY2xlYW5SYXdzKGtlZXBCZXR3ZWVuKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEluc2VydCBuZXcgbm9kZSBiZWZvcmUgb2xkIG5vZGUgd2l0aGluIHRoZSBjb250YWluZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZXxudW1iZXJ9IGV4aXN0ICAgICAgICAgICAgIENoaWxkIG9yIGNoaWxk4oCZcyBpbmRleC5cbiAgICogQHBhcmFtIHtOb2RlfG9iamVjdHxzdHJpbmd8Tm9kZVtdfSBhZGQgTmV3IG5vZGUuXG4gICAqXG4gICAqIEByZXR1cm4ge05vZGV9IFRoaXMgbm9kZSBmb3IgbWV0aG9kcyBjaGFpbi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogcnVsZS5pbnNlcnRCZWZvcmUoZGVjbCwgZGVjbC5jbG9uZSh7IHByb3A6ICctd2Via2l0LScgKyBkZWNsLnByb3AgfSkpXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluc2VydEJlZm9yZSA9IGZ1bmN0aW9uIGluc2VydEJlZm9yZShleGlzdCwgYWRkKSB7XG4gICAgZXhpc3QgPSB0aGlzLmluZGV4KGV4aXN0KTtcbiAgICB2YXIgdHlwZSA9IGV4aXN0ID09PSAwID8gJ3ByZXBlbmQnIDogZmFsc2U7XG4gICAgdmFyIG5vZGVzID0gdGhpcy5ub3JtYWxpemUoYWRkLCB0aGlzLm5vZGVzW2V4aXN0XSwgdHlwZSkucmV2ZXJzZSgpO1xuXG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yNSA9IG5vZGVzLCBfaXNBcnJheTUgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvcjUpLCBfaTYgPSAwLCBfaXRlcmF0b3I1ID0gX2lzQXJyYXk1ID8gX2l0ZXJhdG9yNSA6IF9pdGVyYXRvcjVbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmNTtcblxuICAgICAgaWYgKF9pc0FycmF5NSkge1xuICAgICAgICBpZiAoX2k2ID49IF9pdGVyYXRvcjUubGVuZ3RoKSBicmVhaztcbiAgICAgICAgX3JlZjUgPSBfaXRlcmF0b3I1W19pNisrXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9pNiA9IF9pdGVyYXRvcjUubmV4dCgpO1xuICAgICAgICBpZiAoX2k2LmRvbmUpIGJyZWFrO1xuICAgICAgICBfcmVmNSA9IF9pNi52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5vZGUgPSBfcmVmNTtcbiAgICAgIHRoaXMubm9kZXMuc3BsaWNlKGV4aXN0LCAwLCBub2RlKTtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXg7XG5cbiAgICBmb3IgKHZhciBpZCBpbiB0aGlzLmluZGV4ZXMpIHtcbiAgICAgIGluZGV4ID0gdGhpcy5pbmRleGVzW2lkXTtcblxuICAgICAgaWYgKGV4aXN0IDw9IGluZGV4KSB7XG4gICAgICAgIHRoaXMuaW5kZXhlc1tpZF0gPSBpbmRleCArIG5vZGVzLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogSW5zZXJ0IG5ldyBub2RlIGFmdGVyIG9sZCBub2RlIHdpdGhpbiB0aGUgY29udGFpbmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV8bnVtYmVyfSBleGlzdCAgICAgICAgICAgICBDaGlsZCBvciBjaGlsZOKAmXMgaW5kZXguXG4gICAqIEBwYXJhbSB7Tm9kZXxvYmplY3R8c3RyaW5nfE5vZGVbXX0gYWRkIE5ldyBub2RlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtOb2RlfSBUaGlzIG5vZGUgZm9yIG1ldGhvZHMgY2hhaW4uXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLmluc2VydEFmdGVyID0gZnVuY3Rpb24gaW5zZXJ0QWZ0ZXIoZXhpc3QsIGFkZCkge1xuICAgIGV4aXN0ID0gdGhpcy5pbmRleChleGlzdCk7XG4gICAgdmFyIG5vZGVzID0gdGhpcy5ub3JtYWxpemUoYWRkLCB0aGlzLm5vZGVzW2V4aXN0XSkucmV2ZXJzZSgpO1xuXG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yNiA9IG5vZGVzLCBfaXNBcnJheTYgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvcjYpLCBfaTcgPSAwLCBfaXRlcmF0b3I2ID0gX2lzQXJyYXk2ID8gX2l0ZXJhdG9yNiA6IF9pdGVyYXRvcjZbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmNjtcblxuICAgICAgaWYgKF9pc0FycmF5Nikge1xuICAgICAgICBpZiAoX2k3ID49IF9pdGVyYXRvcjYubGVuZ3RoKSBicmVhaztcbiAgICAgICAgX3JlZjYgPSBfaXRlcmF0b3I2W19pNysrXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9pNyA9IF9pdGVyYXRvcjYubmV4dCgpO1xuICAgICAgICBpZiAoX2k3LmRvbmUpIGJyZWFrO1xuICAgICAgICBfcmVmNiA9IF9pNy52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5vZGUgPSBfcmVmNjtcbiAgICAgIHRoaXMubm9kZXMuc3BsaWNlKGV4aXN0ICsgMSwgMCwgbm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4O1xuXG4gICAgZm9yICh2YXIgaWQgaW4gdGhpcy5pbmRleGVzKSB7XG4gICAgICBpbmRleCA9IHRoaXMuaW5kZXhlc1tpZF07XG5cbiAgICAgIGlmIChleGlzdCA8IGluZGV4KSB7XG4gICAgICAgIHRoaXMuaW5kZXhlc1tpZF0gPSBpbmRleCArIG5vZGVzLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlcyBub2RlIGZyb20gdGhlIGNvbnRhaW5lciBhbmQgY2xlYW5zIHRoZSBwYXJlbnQgcHJvcGVydGllc1xuICAgKiBmcm9tIHRoZSBub2RlIGFuZCBpdHMgY2hpbGRyZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7Tm9kZXxudW1iZXJ9IGNoaWxkIENoaWxkIG9yIGNoaWxk4oCZcyBpbmRleC5cbiAgICpcbiAgICogQHJldHVybiB7Tm9kZX0gVGhpcyBub2RlIGZvciBtZXRob2RzIGNoYWluXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHJ1bGUubm9kZXMubGVuZ3RoICAvLz0+IDVcbiAgICogcnVsZS5yZW1vdmVDaGlsZChkZWNsKVxuICAgKiBydWxlLm5vZGVzLmxlbmd0aCAgLy89PiA0XG4gICAqIGRlY2wucGFyZW50ICAgICAgICAvLz0+IHVuZGVmaW5lZFxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5yZW1vdmVDaGlsZCA9IGZ1bmN0aW9uIHJlbW92ZUNoaWxkKGNoaWxkKSB7XG4gICAgY2hpbGQgPSB0aGlzLmluZGV4KGNoaWxkKTtcbiAgICB0aGlzLm5vZGVzW2NoaWxkXS5wYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5ub2Rlcy5zcGxpY2UoY2hpbGQsIDEpO1xuICAgIHZhciBpbmRleDtcblxuICAgIGZvciAodmFyIGlkIGluIHRoaXMuaW5kZXhlcykge1xuICAgICAgaW5kZXggPSB0aGlzLmluZGV4ZXNbaWRdO1xuXG4gICAgICBpZiAoaW5kZXggPj0gY2hpbGQpIHtcbiAgICAgICAgdGhpcy5pbmRleGVzW2lkXSA9IGluZGV4IC0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgY2hpbGRyZW4gZnJvbSB0aGUgY29udGFpbmVyXG4gICAqIGFuZCBjbGVhbnMgdGhlaXIgcGFyZW50IHByb3BlcnRpZXMuXG4gICAqXG4gICAqIEByZXR1cm4ge05vZGV9IFRoaXMgbm9kZSBmb3IgbWV0aG9kcyBjaGFpbi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogcnVsZS5yZW1vdmVBbGwoKVxuICAgKiBydWxlLm5vZGVzLmxlbmd0aCAvLz0+IDBcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVtb3ZlQWxsID0gZnVuY3Rpb24gcmVtb3ZlQWxsKCkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvcjcgPSB0aGlzLm5vZGVzLCBfaXNBcnJheTcgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvcjcpLCBfaTggPSAwLCBfaXRlcmF0b3I3ID0gX2lzQXJyYXk3ID8gX2l0ZXJhdG9yNyA6IF9pdGVyYXRvcjdbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmNztcblxuICAgICAgaWYgKF9pc0FycmF5Nykge1xuICAgICAgICBpZiAoX2k4ID49IF9pdGVyYXRvcjcubGVuZ3RoKSBicmVhaztcbiAgICAgICAgX3JlZjcgPSBfaXRlcmF0b3I3W19pOCsrXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9pOCA9IF9pdGVyYXRvcjcubmV4dCgpO1xuICAgICAgICBpZiAoX2k4LmRvbmUpIGJyZWFrO1xuICAgICAgICBfcmVmNyA9IF9pOC52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5vZGUgPSBfcmVmNztcbiAgICAgIG5vZGUucGFyZW50ID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHRoaXMubm9kZXMgPSBbXTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUGFzc2VzIGFsbCBkZWNsYXJhdGlvbiB2YWx1ZXMgd2l0aGluIHRoZSBjb250YWluZXIgdGhhdCBtYXRjaCBwYXR0ZXJuXG4gICAqIHRocm91Z2ggY2FsbGJhY2ssIHJlcGxhY2luZyB0aG9zZSB2YWx1ZXMgd2l0aCB0aGUgcmV0dXJuZWQgcmVzdWx0XG4gICAqIG9mIGNhbGxiYWNrLlxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyB1c2VmdWwgaWYgeW91IGFyZSB1c2luZyBhIGN1c3RvbSB1bml0IG9yIGZ1bmN0aW9uXG4gICAqIGFuZCBuZWVkIHRvIGl0ZXJhdGUgdGhyb3VnaCBhbGwgdmFsdWVzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ3xSZWdFeHB9IHBhdHRlcm4gICAgICBSZXBsYWNlIHBhdHRlcm4uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzICAgICAgICAgICAgICAgIE9wdGlvbnMgdG8gc3BlZWQgdXAgdGhlIHNlYXJjaC5cbiAgICogQHBhcmFtIHtzdHJpbmd8c3RyaW5nW119IG9wdHMucHJvcHMgQW4gYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLmZhc3QgICAgICAgICAgIFN0cmluZyB0aGF04oCZcyB1c2VkIHRvIG5hcnJvdyBkb3duXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlcyBhbmQgc3BlZWQgdXAgdGhlIHJlZ2V4cCBzZWFyY2guXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb258c3RyaW5nfSBjYWxsYmFjayAgIFN0cmluZyB0byByZXBsYWNlIHBhdHRlcm4gb3IgY2FsbGJhY2tcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhhdCByZXR1cm5zIGEgbmV3IHZhbHVlLiBUaGUgY2FsbGJhY2tcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCByZWNlaXZlIHRoZSBzYW1lIGFyZ3VtZW50c1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcyB0aG9zZSBwYXNzZWQgdG8gYSBmdW5jdGlvbiBwYXJhbWV0ZXJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2YgYFN0cmluZyNyZXBsYWNlYC5cbiAgICpcbiAgICogQHJldHVybiB7Tm9kZX0gVGhpcyBub2RlIGZvciBtZXRob2RzIGNoYWluLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiByb290LnJlcGxhY2VWYWx1ZXMoL1xcZCtyZW0vLCB7IGZhc3Q6ICdyZW0nIH0sIHN0cmluZyA9PiB7XG4gICAqICAgcmV0dXJuIDE1ICogcGFyc2VJbnQoc3RyaW5nKSArICdweCdcbiAgICogfSlcbiAgICovXG4gIDtcblxuICBfcHJvdG8ucmVwbGFjZVZhbHVlcyA9IGZ1bmN0aW9uIHJlcGxhY2VWYWx1ZXMocGF0dGVybiwgb3B0cywgY2FsbGJhY2spIHtcbiAgICBpZiAoIWNhbGxiYWNrKSB7XG4gICAgICBjYWxsYmFjayA9IG9wdHM7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgdGhpcy53YWxrRGVjbHMoZnVuY3Rpb24gKGRlY2wpIHtcbiAgICAgIGlmIChvcHRzLnByb3BzICYmIG9wdHMucHJvcHMuaW5kZXhPZihkZWNsLnByb3ApID09PSAtMSkgcmV0dXJuO1xuICAgICAgaWYgKG9wdHMuZmFzdCAmJiBkZWNsLnZhbHVlLmluZGV4T2Yob3B0cy5mYXN0KSA9PT0gLTEpIHJldHVybjtcbiAgICAgIGRlY2wudmFsdWUgPSBkZWNsLnZhbHVlLnJlcGxhY2UocGF0dGVybiwgY2FsbGJhY2spO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGB0cnVlYCBpZiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYFxuICAgKiBmb3IgYWxsIG9mIHRoZSBjb250YWluZXLigJlzIGNoaWxkcmVuLlxuICAgKlxuICAgKiBAcGFyYW0ge2NoaWxkQ29uZGl0aW9ufSBjb25kaXRpb24gSXRlcmF0b3IgcmV0dXJucyB0cnVlIG9yIGZhbHNlLlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBJcyBldmVyeSBjaGlsZCBwYXNzIGNvbmRpdGlvbi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3Qgbm9QcmVmaXhlcyA9IHJ1bGUuZXZlcnkoaSA9PiBpLnByb3BbMF0gIT09ICctJylcbiAgICovXG4gIDtcblxuICBfcHJvdG8uZXZlcnkgPSBmdW5jdGlvbiBldmVyeShjb25kaXRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5ldmVyeShjb25kaXRpb24pO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGB0cnVlYCBpZiBjYWxsYmFjayByZXR1cm5zIGB0cnVlYCBmb3IgKGF0IGxlYXN0KSBvbmVcbiAgICogb2YgdGhlIGNvbnRhaW5lcuKAmXMgY2hpbGRyZW4uXG4gICAqXG4gICAqIEBwYXJhbSB7Y2hpbGRDb25kaXRpb259IGNvbmRpdGlvbiBJdGVyYXRvciByZXR1cm5zIHRydWUgb3IgZmFsc2UuXG4gICAqXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IElzIHNvbWUgY2hpbGQgcGFzcyBjb25kaXRpb24uXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGhhc1ByZWZpeCA9IHJ1bGUuc29tZShpID0+IGkucHJvcFswXSA9PT0gJy0nKVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5zb21lID0gZnVuY3Rpb24gc29tZShjb25kaXRpb24pIHtcbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5zb21lKGNvbmRpdGlvbik7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBgY2hpbGRg4oCZcyBpbmRleCB3aXRoaW4gdGhlIHtAbGluayBDb250YWluZXIjbm9kZXN9IGFycmF5LlxuICAgKlxuICAgKiBAcGFyYW0ge05vZGV9IGNoaWxkIENoaWxkIG9mIHRoZSBjdXJyZW50IGNvbnRhaW5lci5cbiAgICpcbiAgICogQHJldHVybiB7bnVtYmVyfSBDaGlsZCBpbmRleC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogcnVsZS5pbmRleCggcnVsZS5ub2Rlc1syXSApIC8vPT4gMlxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5pbmRleCA9IGZ1bmN0aW9uIGluZGV4KGNoaWxkKSB7XG4gICAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5ub2Rlcy5pbmRleE9mKGNoaWxkKTtcbiAgfVxuICAvKipcbiAgICogVGhlIGNvbnRhaW5lcuKAmXMgZmlyc3QgY2hpbGQuXG4gICAqXG4gICAqIEB0eXBlIHtOb2RlfVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBydWxlLmZpcnN0ID09PSBydWxlcy5ub2Rlc1swXVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUobm9kZXMsIHNhbXBsZSkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAodHlwZW9mIG5vZGVzID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHBhcnNlID0gcmVxdWlyZSgnLi9wYXJzZScpO1xuXG4gICAgICBub2RlcyA9IGNsZWFuU291cmNlKHBhcnNlKG5vZGVzKS5ub2Rlcyk7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KG5vZGVzKSkge1xuICAgICAgbm9kZXMgPSBub2Rlcy5zbGljZSgwKTtcblxuICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yOCA9IG5vZGVzLCBfaXNBcnJheTggPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvcjgpLCBfaTkgPSAwLCBfaXRlcmF0b3I4ID0gX2lzQXJyYXk4ID8gX2l0ZXJhdG9yOCA6IF9pdGVyYXRvcjhbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgICAgdmFyIF9yZWY4O1xuXG4gICAgICAgIGlmIChfaXNBcnJheTgpIHtcbiAgICAgICAgICBpZiAoX2k5ID49IF9pdGVyYXRvcjgubGVuZ3RoKSBicmVhaztcbiAgICAgICAgICBfcmVmOCA9IF9pdGVyYXRvcjhbX2k5KytdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9pOSA9IF9pdGVyYXRvcjgubmV4dCgpO1xuICAgICAgICAgIGlmIChfaTkuZG9uZSkgYnJlYWs7XG4gICAgICAgICAgX3JlZjggPSBfaTkudmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IF9yZWY4O1xuICAgICAgICBpZiAoaS5wYXJlbnQpIGkucGFyZW50LnJlbW92ZUNoaWxkKGksICdpZ25vcmUnKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5vZGVzLnR5cGUgPT09ICdyb290Jykge1xuICAgICAgbm9kZXMgPSBub2Rlcy5ub2Rlcy5zbGljZSgwKTtcblxuICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yOSA9IG5vZGVzLCBfaXNBcnJheTkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvcjkpLCBfaTEwID0gMCwgX2l0ZXJhdG9yOSA9IF9pc0FycmF5OSA/IF9pdGVyYXRvcjkgOiBfaXRlcmF0b3I5W1N5bWJvbC5pdGVyYXRvcl0oKTs7KSB7XG4gICAgICAgIHZhciBfcmVmOTtcblxuICAgICAgICBpZiAoX2lzQXJyYXk5KSB7XG4gICAgICAgICAgaWYgKF9pMTAgPj0gX2l0ZXJhdG9yOS5sZW5ndGgpIGJyZWFrO1xuICAgICAgICAgIF9yZWY5ID0gX2l0ZXJhdG9yOVtfaTEwKytdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF9pMTAgPSBfaXRlcmF0b3I5Lm5leHQoKTtcbiAgICAgICAgICBpZiAoX2kxMC5kb25lKSBicmVhaztcbiAgICAgICAgICBfcmVmOSA9IF9pMTAudmFsdWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgX2kxMSA9IF9yZWY5O1xuICAgICAgICBpZiAoX2kxMS5wYXJlbnQpIF9pMTEucGFyZW50LnJlbW92ZUNoaWxkKF9pMTEsICdpZ25vcmUnKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG5vZGVzLnR5cGUpIHtcbiAgICAgIG5vZGVzID0gW25vZGVzXTtcbiAgICB9IGVsc2UgaWYgKG5vZGVzLnByb3ApIHtcbiAgICAgIGlmICh0eXBlb2Ygbm9kZXMudmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVmFsdWUgZmllbGQgaXMgbWlzc2VkIGluIG5vZGUgY3JlYXRpb24nKTtcbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG5vZGVzLnZhbHVlICE9PSAnc3RyaW5nJykge1xuICAgICAgICBub2Rlcy52YWx1ZSA9IFN0cmluZyhub2Rlcy52YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIG5vZGVzID0gW25ldyBfZGVjbGFyYXRpb24uZGVmYXVsdChub2RlcyldO1xuICAgIH0gZWxzZSBpZiAobm9kZXMuc2VsZWN0b3IpIHtcbiAgICAgIHZhciBSdWxlID0gcmVxdWlyZSgnLi9ydWxlJyk7XG5cbiAgICAgIG5vZGVzID0gW25ldyBSdWxlKG5vZGVzKV07XG4gICAgfSBlbHNlIGlmIChub2Rlcy5uYW1lKSB7XG4gICAgICB2YXIgQXRSdWxlID0gcmVxdWlyZSgnLi9hdC1ydWxlJyk7XG5cbiAgICAgIG5vZGVzID0gW25ldyBBdFJ1bGUobm9kZXMpXTtcbiAgICB9IGVsc2UgaWYgKG5vZGVzLnRleHQpIHtcbiAgICAgIG5vZGVzID0gW25ldyBfY29tbWVudC5kZWZhdWx0KG5vZGVzKV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBub2RlIHR5cGUgaW4gbm9kZSBjcmVhdGlvbicpO1xuICAgIH1cblxuICAgIHZhciBwcm9jZXNzZWQgPSBub2Rlcy5tYXAoZnVuY3Rpb24gKGkpIHtcbiAgICAgIGlmIChpLnBhcmVudCkgaS5wYXJlbnQucmVtb3ZlQ2hpbGQoaSk7XG5cbiAgICAgIGlmICh0eXBlb2YgaS5yYXdzLmJlZm9yZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgaWYgKHNhbXBsZSAmJiB0eXBlb2Ygc2FtcGxlLnJhd3MuYmVmb3JlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIGkucmF3cy5iZWZvcmUgPSBzYW1wbGUucmF3cy5iZWZvcmUucmVwbGFjZSgvW15cXHNdL2csICcnKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpLnBhcmVudCA9IF90aGlzO1xuICAgICAgcmV0dXJuIGk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHByb2Nlc3NlZDtcbiAgfVxuICAvKipcbiAgICogQG1lbWJlcm9mIENvbnRhaW5lciNcbiAgICogQG1lbWJlciB7Tm9kZVtdfSBub2RlcyBBbiBhcnJheSBjb250YWluaW5nIHRoZSBjb250YWluZXLigJlzIGNoaWxkcmVuLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCByb290ID0gcG9zdGNzcy5wYXJzZSgnYSB7IGNvbG9yOiBibGFjayB9JylcbiAgICogcm9vdC5ub2Rlcy5sZW5ndGggICAgICAgICAgIC8vPT4gMVxuICAgKiByb290Lm5vZGVzWzBdLnNlbGVjdG9yICAgICAgLy89PiAnYSdcbiAgICogcm9vdC5ub2Rlc1swXS5ub2Rlc1swXS5wcm9wIC8vPT4gJ2NvbG9yJ1xuICAgKi9cbiAgO1xuXG4gIF9jcmVhdGVDbGFzcyhDb250YWluZXIsIFt7XG4gICAga2V5OiBcImZpcnN0XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICBpZiAoIXRoaXMubm9kZXMpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdGhpcy5ub2Rlc1swXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGNvbnRhaW5lcuKAmXMgbGFzdCBjaGlsZC5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtOb2RlfVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBydWxlLmxhc3QgPT09IHJ1bGUubm9kZXNbcnVsZS5ub2Rlcy5sZW5ndGggLSAxXVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwibGFzdFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgaWYgKCF0aGlzLm5vZGVzKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHRoaXMubm9kZXNbdGhpcy5ub2Rlcy5sZW5ndGggLSAxXTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gQ29udGFpbmVyO1xufShfbm9kZS5kZWZhdWx0KTtcblxudmFyIF9kZWZhdWx0ID0gQ29udGFpbmVyO1xuLyoqXG4gKiBAY2FsbGJhY2sgY2hpbGRDb25kaXRpb25cbiAqIEBwYXJhbSB7Tm9kZX0gbm9kZSAgICBDb250YWluZXIgY2hpbGQuXG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXggQ2hpbGQgaW5kZXguXG4gKiBAcGFyYW0ge05vZGVbXX0gbm9kZXMgQWxsIGNvbnRhaW5lciBjaGlsZHJlbi5cbiAqIEByZXR1cm4ge2Jvb2xlYW59XG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgY2hpbGRJdGVyYXRvclxuICogQHBhcmFtIHtOb2RlfSBub2RlICAgIENvbnRhaW5lciBjaGlsZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBpbmRleCBDaGlsZCBpbmRleC5cbiAqIEByZXR1cm4ge2ZhbHNlfHVuZGVmaW5lZH0gUmV0dXJuaW5nIGBmYWxzZWAgd2lsbCBicmVhayBpdGVyYXRpb24uXG4gKi9cblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1OdmJuUmhhVzVsY2k1bGN6WWlYU3dpYm1GdFpYTWlPbHNpWTJ4bFlXNVRiM1Z5WTJVaUxDSnViMlJsY3lJc0ltMWhjQ0lzSW1raUxDSnpiM1Z5WTJVaUxDSkRiMjUwWVdsdVpYSWlMQ0p3ZFhOb0lpd2lZMmhwYkdRaUxDSndZWEpsYm5RaUxDSmxZV05vSWl3aVkyRnNiR0poWTJzaUxDSnNZWE4wUldGamFDSXNJbWx1WkdWNFpYTWlMQ0pwWkNJc0luVnVaR1ZtYVc1bFpDSXNJbWx1WkdWNElpd2ljbVZ6ZFd4MElpd2liR1Z1WjNSb0lpd2lkMkZzYXlJc0ltVWlMQ0p3YjNOMFkzTnpUbTlrWlNJc0luTjBZV05ySWl3aWRHVnpkQ0lzSW5NaUxDSnlaWEJzWVdObElpd2lhVzV3ZFhRaUxDSm1jbTl0SWl3aWMzUmhjblFpTENKc2FXNWxJaXdpWTI5c2RXMXVJaXdpZDJGc2EwUmxZMnh6SWl3aWNISnZjQ0lzSW5SNWNHVWlMQ0pTWldkRmVIQWlMQ0ozWVd4clVuVnNaWE1pTENKelpXeGxZM1J2Y2lJc0luZGhiR3RCZEZKMWJHVnpJaXdpYm1GdFpTSXNJbmRoYkd0RGIyMXRaVzUwY3lJc0ltRndjR1Z1WkNJc0ltTm9hV3hrY21WdUlpd2libTl5YldGc2FYcGxJaXdpYkdGemRDSXNJbTV2WkdVaUxDSndjbVZ3Wlc1a0lpd2ljbVYyWlhKelpTSXNJbVpwY25OMElpd2lkVzV6YUdsbWRDSXNJbU5zWldGdVVtRjNjeUlzSW10bFpYQkNaWFIzWldWdUlpd2lhVzV6WlhKMFFtVm1iM0psSWl3aVpYaHBjM1FpTENKaFpHUWlMQ0p6Y0d4cFkyVWlMQ0pwYm5ObGNuUkJablJsY2lJc0luSmxiVzkyWlVOb2FXeGtJaXdpY21WdGIzWmxRV3hzSWl3aWNtVndiR0ZqWlZaaGJIVmxjeUlzSW5CaGRIUmxjbTRpTENKdmNIUnpJaXdpWkdWamJDSXNJbkJ5YjNCeklpd2lhVzVrWlhoUFppSXNJbVpoYzNRaUxDSjJZV3gxWlNJc0ltVjJaWEo1SWl3aVkyOXVaR2wwYVc5dUlpd2ljMjl0WlNJc0luTmhiWEJzWlNJc0luQmhjbk5sSWl3aWNtVnhkV2x5WlNJc0lrRnljbUY1SWl3aWFYTkJjbkpoZVNJc0luTnNhV05sSWl3aVJYSnliM0lpTENKVGRISnBibWNpTENKRVpXTnNZWEpoZEdsdmJpSXNJbEoxYkdVaUxDSkJkRkoxYkdVaUxDSjBaWGgwSWl3aVEyOXRiV1Z1ZENJc0luQnliMk5sYzNObFpDSXNJbkpoZDNNaUxDSmlaV1p2Y21VaUxDSk9iMlJsSWwwc0ltMWhjSEJwYm1keklqb2lPenM3T3p0QlFVRkJPenRCUVVOQk96dEJRVU5CT3pzN096czdPenM3TzBGQlJVRXNVMEZCVTBFc1YwRkJWQ3hEUVVGelFrTXNTMEZCZEVJc1JVRkJOa0k3UVVGRE0wSXNVMEZCVDBFc1MwRkJTeXhEUVVGRFF5eEhRVUZPTEVOQlFWVXNWVUZCUVVNc1EwRkJReXhGUVVGSk8wRkJRM0JDTEZGQlFVbEJMRU5CUVVNc1EwRkJRMFlzUzBGQlRpeEZRVUZoUlN4RFFVRkRMRU5CUVVOR0xFdEJRVVlzUjBGQlZVUXNWMEZCVnl4RFFVRkRSeXhEUVVGRExFTkJRVU5HTEV0QlFVZ3NRMEZCY2tJN1FVRkRZaXhYUVVGUFJTeERRVUZETEVOQlFVTkRMRTFCUVZRN1FVRkRRU3hYUVVGUFJDeERRVUZRTzBGQlEwUXNSMEZLVFN4RFFVRlFPMEZCUzBRN1FVRkZSRHM3T3pzN096czdPenM3TzBsQlZVMUZMRk03T3pzN096czdPenM3TzFOQlEwcERMRWtzUjBGQlFTeGpRVUZOUXl4TFFVRk9MRVZCUVdFN1FVRkRXRUVzU1VGQlFVRXNTMEZCU3l4RFFVRkRReXhOUVVGT0xFZEJRV1VzU1VGQlpqdEJRVU5CTEZOQlFVdFFMRXRCUVV3c1EwRkJWMHNzU1VGQldDeERRVUZuUWtNc1MwRkJhRUk3UVVGRFFTeFhRVUZQTEVsQlFWQTdRVUZEUkR0QlFVVkVPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dFRRV2xEUVVVc1NTeEhRVUZCTEdOQlFVMURMRkZCUVU0c1JVRkJaMEk3UVVGRFpDeFJRVUZKTEVOQlFVTXNTMEZCUzBNc1VVRkJWaXhGUVVGdlFpeExRVUZMUVN4UlFVRk1MRWRCUVdkQ0xFTkJRV2hDTzBGQlEzQkNMRkZCUVVrc1EwRkJReXhMUVVGTFF5eFBRVUZXTEVWQlFXMUNMRXRCUVV0QkxFOUJRVXdzUjBGQlpTeEZRVUZtTzBGQlJXNUNMRk5CUVV0RUxGRkJRVXdzU1VGQmFVSXNRMEZCYWtJN1FVRkRRU3hSUVVGSlJTeEZRVUZGTEVkQlFVY3NTMEZCUzBZc1VVRkJaRHRCUVVOQkxGTkJRVXRETEU5QlFVd3NRMEZCWVVNc1JVRkJZaXhKUVVGdFFpeERRVUZ1UWp0QlFVVkJMRkZCUVVrc1EwRkJReXhMUVVGTFdpeExRVUZXTEVWQlFXbENMRTlCUVU5aExGTkJRVkE3UVVGRmFrSXNVVUZCU1VNc1MwRkJTaXhGUVVGWFF5eE5RVUZZT3p0QlFVTkJMRmRCUVU4c1MwRkJTMG9zVDBGQlRDeERRVUZoUXl4RlFVRmlMRWxCUVcxQ0xFdEJRVXRhTEV0QlFVd3NRMEZCVjJkQ0xFMUJRWEpETEVWQlFUWkRPMEZCUXpORFJpeE5RVUZCUVN4TFFVRkxMRWRCUVVjc1MwRkJTMGdzVDBGQlRDeERRVUZoUXl4RlFVRmlMRU5CUVZJN1FVRkRRVWNzVFVGQlFVRXNUVUZCVFN4SFFVRkhUaXhSUVVGUkxFTkJRVU1zUzBGQlMxUXNTMEZCVEN4RFFVRlhZeXhMUVVGWUxFTkJRVVFzUlVGQmIwSkJMRXRCUVhCQ0xFTkJRV3BDTzBGQlEwRXNWVUZCU1VNc1RVRkJUU3hMUVVGTExFdEJRV1lzUlVGQmMwSTdRVUZGZEVJc1YwRkJTMG9zVDBGQlRDeERRVUZoUXl4RlFVRmlMRXRCUVc5Q0xFTkJRWEJDTzBGQlEwUTdPMEZCUlVRc1YwRkJUeXhMUVVGTFJDeFBRVUZNTEVOQlFXRkRMRVZCUVdJc1EwRkJVRHRCUVVWQkxGZEJRVTlITEUxQlFWQTdRVUZEUkR0QlFVVkVPenM3T3pzN096czdPenM3T3pzN096czdPenM3VTBGdFFrRkZMRWtzUjBGQlFTeGpRVUZOVWl4UlFVRk9MRVZCUVdkQ08wRkJRMlFzVjBGQlR5eExRVUZMUkN4SlFVRk1MRU5CUVZVc1ZVRkJRMFlzUzBGQlJDeEZRVUZSU2l4RFFVRlNMRVZCUVdNN1FVRkROMElzVlVGQlNXRXNUVUZCU2pzN1FVRkRRU3hWUVVGSk8wRkJRMFpCTEZGQlFVRkJMRTFCUVUwc1IwRkJSMDRzVVVGQlVTeERRVUZEU0N4TFFVRkVMRVZCUVZGS0xFTkJRVklzUTBGQmFrSTdRVUZEUkN4UFFVWkVMRU5CUlVVc1QwRkJUMmRDTEVOQlFWQXNSVUZCVlR0QlFVTldRU3hSUVVGQlFTeERRVUZETEVOQlFVTkRMRmRCUVVZc1IwRkJaMEppTEV0QlFXaENPenRCUVVOQkxGbEJRVWxaTEVOQlFVTXNRMEZCUTBVc1MwRkJSaXhKUVVGWFpDeExRVUZMTEVOQlFVTklMRTFCUVdwQ0xFbEJRVEpDTEdGQlFXRnJRaXhKUVVGaUxFTkJRV3RDU0N4RFFVRkRMRU5CUVVORkxFdEJRWEJDTEVOQlFTOUNMRVZCUVRKRU8wRkJRM3BFTEdOQlFVbEZMRU5CUVVNc1IwRkJSMmhDTEV0QlFVc3NRMEZCUTBnc1RVRkJaRHRCUVVOQlpTeFZRVUZCUVN4RFFVRkRMRU5CUVVORkxFdEJRVVlzUjBGQlZVWXNRMEZCUXl4RFFVRkRSU3hMUVVGR0xFTkJRVkZITEU5QlFWSXNRMEZCWjBJc1dVRkJhRUlzVTBGRFJrUXNRMEZCUXl4RFFVRkRSU3hMUVVGR0xFTkJRVkZETEVsQlJFNHNVMEZEWjBKSUxFTkJRVU1zUTBGQlEwa3NTMEZCUml4RFFVRlJReXhKUVVSNFFpeFRRVU5yUTB3c1EwRkJReXhEUVVGRFNTeExRVUZHTEVOQlFWRkZMRTFCUkRGRExGRkJRVlk3UVVGRlJEczdRVUZEUkN4alFVRk5WaXhEUVVGT08wRkJRMFE3TzBGQlEwUXNWVUZCU1Vnc1RVRkJUU3hMUVVGTExFdEJRVmdzU1VGQmIwSlVMRXRCUVVzc1EwRkJRMWNzU1VGQk9VSXNSVUZCYjBNN1FVRkRiRU5HTEZGQlFVRkJMRTFCUVUwc1IwRkJSMVFzUzBGQlN5eERRVUZEVnl4SlFVRk9MRU5CUVZkU0xGRkJRVmdzUTBGQlZEdEJRVU5FT3p0QlFVTkVMR0ZCUVU5TkxFMUJRVkE3UVVGRFJDeExRV3BDVFN4RFFVRlFPMEZCYTBKRU8wRkJSVVE3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1UwRTJRa0ZqTEZNc1IwRkJRU3h0UWtGQlYwTXNTVUZCV0N4RlFVRnBRbkpDTEZGQlFXcENMRVZCUVRKQ08wRkJRM3BDTEZGQlFVa3NRMEZCUTBFc1VVRkJUQ3hGUVVGbE8wRkJRMkpCTEUxQlFVRkJMRkZCUVZFc1IwRkJSM0ZDTEVsQlFWZzdRVUZEUVN4aFFVRlBMRXRCUVV0aUxFbEJRVXdzUTBGQlZTeFZRVUZEV0N4TFFVRkVMRVZCUVZGS0xFTkJRVklzUlVGQll6dEJRVU0zUWl4WlFVRkpTU3hMUVVGTExFTkJRVU41UWl4SlFVRk9MRXRCUVdVc1RVRkJia0lzUlVGQk1rSTdRVUZEZWtJc2FVSkJRVTkwUWl4UlFVRlJMRU5CUVVOSUxFdEJRVVFzUlVGQlVVb3NRMEZCVWl4RFFVRm1PMEZCUTBRN1FVRkRSaXhQUVVwTkxFTkJRVkE3UVVGTFJEczdRVUZEUkN4UlFVRkpORUlzU1VGQlNTeFpRVUZaUlN4TlFVRndRaXhGUVVFMFFqdEJRVU14UWl4aFFVRlBMRXRCUVV0bUxFbEJRVXdzUTBGQlZTeFZRVUZEV0N4TFFVRkVMRVZCUVZGS0xFTkJRVklzUlVGQll6dEJRVU0zUWl4WlFVRkpTU3hMUVVGTExFTkJRVU41UWl4SlFVRk9MRXRCUVdVc1RVRkJaaXhKUVVGNVFrUXNTVUZCU1N4RFFVRkRWQ3hKUVVGTUxFTkJRVlZtTEV0QlFVc3NRMEZCUTNkQ0xFbEJRV2hDTEVOQlFUZENMRVZCUVc5RU8wRkJRMnhFTEdsQ1FVRlBja0lzVVVGQlVTeERRVUZEU0N4TFFVRkVMRVZCUVZGS0xFTkJRVklzUTBGQlpqdEJRVU5FTzBGQlEwWXNUMEZLVFN4RFFVRlFPMEZCUzBRN08wRkJRMFFzVjBGQlR5eExRVUZMWlN4SlFVRk1MRU5CUVZVc1ZVRkJRMWdzUzBGQlJDeEZRVUZSU2l4RFFVRlNMRVZCUVdNN1FVRkROMElzVlVGQlNVa3NTMEZCU3l4RFFVRkRlVUlzU1VGQlRpeExRVUZsTEUxQlFXWXNTVUZCZVVKNlFpeExRVUZMTEVOQlFVTjNRaXhKUVVGT0xFdEJRV1ZCTEVsQlFUVkRMRVZCUVd0RU8wRkJRMmhFTEdWQlFVOXlRaXhSUVVGUkxFTkJRVU5JTEV0QlFVUXNSVUZCVVVvc1EwRkJVaXhEUVVGbU8wRkJRMFE3UVVGRFJpeExRVXBOTEVOQlFWQTdRVUZMUkR0QlFVVkVPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08xTkJkVUpCSzBJc1V5eEhRVUZCTEcxQ1FVRlhReXhSUVVGWUxFVkJRWEZDZWtJc1VVRkJja0lzUlVGQkswSTdRVUZETjBJc1VVRkJTU3hEUVVGRFFTeFJRVUZNTEVWQlFXVTdRVUZEWWtFc1RVRkJRVUVzVVVGQlVTeEhRVUZIZVVJc1VVRkJXRHRCUVVWQkxHRkJRVThzUzBGQlMycENMRWxCUVV3c1EwRkJWU3hWUVVGRFdDeExRVUZFTEVWQlFWRktMRU5CUVZJc1JVRkJZenRCUVVNM1FpeFpRVUZKU1N4TFFVRkxMRU5CUVVONVFpeEpRVUZPTEV0QlFXVXNUVUZCYmtJc1JVRkJNa0k3UVVGRGVrSXNhVUpCUVU5MFFpeFJRVUZSTEVOQlFVTklMRXRCUVVRc1JVRkJVVW9zUTBGQlVpeERRVUZtTzBGQlEwUTdRVUZEUml4UFFVcE5MRU5CUVZBN1FVRkxSRHM3UVVGRFJDeFJRVUZKWjBNc1VVRkJVU3haUVVGWlJpeE5RVUY0UWl4RlFVRm5RenRCUVVNNVFpeGhRVUZQTEV0QlFVdG1MRWxCUVV3c1EwRkJWU3hWUVVGRFdDeExRVUZFTEVWQlFWRktMRU5CUVZJc1JVRkJZenRCUVVNM1FpeFpRVUZKU1N4TFFVRkxMRU5CUVVONVFpeEpRVUZPTEV0QlFXVXNUVUZCWml4SlFVRjVRa2NzVVVGQlVTeERRVUZEWWl4SlFVRlVMRU5CUVdObUxFdEJRVXNzUTBGQlF6UkNMRkZCUVhCQ0xFTkJRVGRDTEVWQlFUUkVPMEZCUXpGRUxHbENRVUZQZWtJc1VVRkJVU3hEUVVGRFNDeExRVUZFTEVWQlFWRktMRU5CUVZJc1EwRkJaanRCUVVORU8wRkJRMFlzVDBGS1RTeERRVUZRTzBGQlMwUTdPMEZCUTBRc1YwRkJUeXhMUVVGTFpTeEpRVUZNTEVOQlFWVXNWVUZCUTFnc1MwRkJSQ3hGUVVGUlNpeERRVUZTTEVWQlFXTTdRVUZETjBJc1ZVRkJTVWtzUzBGQlN5eERRVUZEZVVJc1NVRkJUaXhMUVVGbExFMUJRV1lzU1VGQmVVSjZRaXhMUVVGTExFTkJRVU0wUWl4UlFVRk9MRXRCUVcxQ1FTeFJRVUZvUkN4RlFVRXdSRHRCUVVONFJDeGxRVUZQZWtJc1VVRkJVU3hEUVVGRFNDeExRVUZFTEVWQlFWRktMRU5CUVZJc1EwRkJaanRCUVVORU8wRkJRMFlzUzBGS1RTeERRVUZRTzBGQlMwUTdRVUZGUkRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdVMEU0UWtGcFF5eFhMRWRCUVVFc2NVSkJRV0ZETEVsQlFXSXNSVUZCYlVJelFpeFJRVUZ1UWl4RlFVRTJRanRCUVVNelFpeFJRVUZKTEVOQlFVTkJMRkZCUVV3c1JVRkJaVHRCUVVOaVFTeE5RVUZCUVN4UlFVRlJMRWRCUVVjeVFpeEpRVUZZTzBGQlEwRXNZVUZCVHl4TFFVRkxia0lzU1VGQlRDeERRVUZWTEZWQlFVTllMRXRCUVVRc1JVRkJVVW9zUTBGQlVpeEZRVUZqTzBGQlF6ZENMRmxCUVVsSkxFdEJRVXNzUTBGQlEzbENMRWxCUVU0c1MwRkJaU3hSUVVGdVFpeEZRVUUyUWp0QlFVTXpRaXhwUWtGQlQzUkNMRkZCUVZFc1EwRkJRMGdzUzBGQlJDeEZRVUZSU2l4RFFVRlNMRU5CUVdZN1FVRkRSRHRCUVVOR0xFOUJTazBzUTBGQlVEdEJRVXRFT3p0QlFVTkVMRkZCUVVsclF5eEpRVUZKTEZsQlFWbEtMRTFCUVhCQ0xFVkJRVFJDTzBGQlF6RkNMR0ZCUVU4c1MwRkJTMllzU1VGQlRDeERRVUZWTEZWQlFVTllMRXRCUVVRc1JVRkJVVW9zUTBGQlVpeEZRVUZqTzBGQlF6ZENMRmxCUVVsSkxFdEJRVXNzUTBGQlEzbENMRWxCUVU0c1MwRkJaU3hSUVVGbUxFbEJRVEpDU3l4SlFVRkpMRU5CUVVObUxFbEJRVXdzUTBGQlZXWXNTMEZCU3l4RFFVRkRPRUlzU1VGQmFFSXNRMEZCTDBJc1JVRkJjMFE3UVVGRGNFUXNhVUpCUVU4elFpeFJRVUZSTEVOQlFVTklMRXRCUVVRc1JVRkJVVW9zUTBGQlVpeERRVUZtTzBGQlEwUTdRVUZEUml4UFFVcE5MRU5CUVZBN1FVRkxSRHM3UVVGRFJDeFhRVUZQTEV0QlFVdGxMRWxCUVV3c1EwRkJWU3hWUVVGRFdDeExRVUZFTEVWQlFWRktMRU5CUVZJc1JVRkJZenRCUVVNM1FpeFZRVUZKU1N4TFFVRkxMRU5CUVVONVFpeEpRVUZPTEV0QlFXVXNVVUZCWml4SlFVRXlRbnBDTEV0QlFVc3NRMEZCUXpoQ0xFbEJRVTRzUzBGQlpVRXNTVUZCT1VNc1JVRkJiMFE3UVVGRGJFUXNaVUZCVHpOQ0xGRkJRVkVzUTBGQlEwZ3NTMEZCUkN4RlFVRlJTaXhEUVVGU0xFTkJRV1k3UVVGRFJEdEJRVU5HTEV0QlNrMHNRMEZCVUR0QlFVdEVPMEZCUlVRN096czdPenM3T3pzN096czdPenM3T3p0VFFXZENRVzFETEZrc1IwRkJRU3h6UWtGQll6VkNMRkZCUVdRc1JVRkJkMEk3UVVGRGRFSXNWMEZCVHl4TFFVRkxVU3hKUVVGTUxFTkJRVlVzVlVGQlExZ3NTMEZCUkN4RlFVRlJTaXhEUVVGU0xFVkJRV003UVVGRE4wSXNWVUZCU1Vrc1MwRkJTeXhEUVVGRGVVSXNTVUZCVGl4TFFVRmxMRk5CUVc1Q0xFVkJRVGhDTzBGQlF6VkNMR1ZCUVU5MFFpeFJRVUZSTEVOQlFVTklMRXRCUVVRc1JVRkJVVW9zUTBGQlVpeERRVUZtTzBGQlEwUTdRVUZEUml4TFFVcE5MRU5CUVZBN1FVRkxSRHRCUVVWRU96czdPenM3T3pzN096czdPenM3T3pzN096czdPMU5CYjBKQmIwTXNUU3hIUVVGQkxHdENRVUZ4UWp0QlFVRkJMSE5EUVVGV1F5eFJRVUZWTzBGQlFWWkJMRTFCUVVGQkxGRkJRVlU3UVVGQlFUczdRVUZEYmtJc2FVTkJRV3RDUVN4UlFVRnNRaXdyUWtGQk5FSTdRVUZCZGtJc1ZVRkJTV3BETEV0QlFVc3NaMEpCUVZRN1FVRkRTQ3hWUVVGSlRpeExRVUZMTEVkQlFVY3NTMEZCUzNkRExGTkJRVXdzUTBGQlpXeERMRXRCUVdZc1JVRkJjMElzUzBGQlMyMURMRWxCUVROQ0xFTkJRVm83TzBGQlEwRXNNa0pCUVdsQ2VrTXNTMEZCYWtJN1FVRkJRVHM3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk96dEJRVUZCTEZsQlFWTXdReXhKUVVGVU8wRkJRWGRDTEdGQlFVc3hReXhMUVVGTUxFTkJRVmRMTEVsQlFWZ3NRMEZCWjBKeFF5eEpRVUZvUWp0QlFVRjRRanRCUVVORU96dEJRVU5FTEZkQlFVOHNTVUZCVUR0QlFVTkVPMEZCUlVRN096czdPenM3T3pzN096czdPenM3T3pzN096czdVMEZ2UWtGRExFOHNSMEZCUVN4dFFrRkJjMEk3UVVGQlFTeDFRMEZCVmtvc1VVRkJWVHRCUVVGV1FTeE5RVUZCUVN4UlFVRlZPMEZCUVVFN08wRkJRM0JDUVN4SlFVRkJRU3hSUVVGUkxFZEJRVWRCTEZGQlFWRXNRMEZCUTBzc1QwRkJWQ3hGUVVGWU96dEJRVU5CTERCQ1FVRnJRa3dzVVVGQmJFSXNlVWhCUVRSQ08wRkJRVUU3TzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUczdRVUZCUVN4VlFVRnVRbXBETEV0QlFXMUNPMEZCUXpGQ0xGVkJRVWxPTEV0QlFVc3NSMEZCUnl4TFFVRkxkME1zVTBGQlRDeERRVUZsYkVNc1MwRkJaaXhGUVVGelFpeExRVUZMZFVNc1MwRkJNMElzUlVGQmEwTXNVMEZCYkVNc1JVRkJOa05FTEU5QlFUZERMRVZCUVZvN08wRkJRMEVzTkVKQlFXbENOVU1zUzBGQmFrSTdRVUZCUVRzN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQkxGbEJRVk13UXl4SlFVRlVPMEZCUVhkQ0xHRkJRVXN4UXl4TFFVRk1MRU5CUVZjNFF5eFBRVUZZTEVOQlFXMUNTaXhKUVVGdVFqdEJRVUY0UWpzN1FVRkRRU3hYUVVGTExFbEJRVWs1UWl4RlFVRlVMRWxCUVdVc1MwRkJTMFFzVDBGQmNFSXNSVUZCTmtJN1FVRkRNMElzWVVGQlMwRXNUMEZCVEN4RFFVRmhReXhGUVVGaUxFbEJRVzFDTEV0QlFVdEVMRTlCUVV3c1EwRkJZVU1zUlVGQllpeEpRVUZ0UWxvc1MwRkJTeXhEUVVGRFowSXNUVUZCTlVNN1FVRkRSRHRCUVVOR096dEJRVU5FTEZkQlFVOHNTVUZCVUR0QlFVTkVMRWM3TzFOQlJVUXJRaXhUTEVkQlFVRXNiVUpCUVZkRExGZEJRVmdzUlVGQmQwSTdRVUZEZEVJc2IwSkJRVTFFTEZOQlFVNHNXVUZCWjBKRExGZEJRV2hDT3p0QlFVTkJMRkZCUVVrc1MwRkJTMmhFTEV0QlFWUXNSVUZCWjBJN1FVRkRaQ3cwUWtGQmFVSXNTMEZCUzBFc1MwRkJkRUk3UVVGQlFUczdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCT3p0QlFVRkJMRmxCUVZNd1F5eEpRVUZVTzBGQlFUWkNRU3hSUVVGQlFTeEpRVUZKTEVOQlFVTkxMRk5CUVV3c1EwRkJaVU1zVjBGQlpqdEJRVUUzUWp0QlFVTkVPMEZCUTBZN1FVRkZSRHM3T3pzN096czdPenM3T3p0VFFWZEJReXhaTEVkQlFVRXNjMEpCUVdORExFdEJRV1FzUlVGQmNVSkRMRWRCUVhKQ0xFVkJRVEJDTzBGQlEzaENSQ3hKUVVGQlFTeExRVUZMTEVkQlFVY3NTMEZCUzNCRExFdEJRVXdzUTBGQlYyOURMRXRCUVZnc1EwRkJVanRCUVVWQkxGRkJRVWx1UWl4SlFVRkpMRWRCUVVkdFFpeExRVUZMTEV0QlFVc3NRMEZCVml4SFFVRmpMRk5CUVdRc1IwRkJNRUlzUzBGQmNrTTdRVUZEUVN4UlFVRkpiRVFzUzBGQlN5eEhRVUZITEV0QlFVdDNReXhUUVVGTUxFTkJRV1ZYTEVkQlFXWXNSVUZCYjBJc1MwRkJTMjVFTEV0QlFVd3NRMEZCVjJ0RUxFdEJRVmdzUTBGQmNFSXNSVUZCZFVOdVFpeEpRVUYyUXl4RlFVRTJRMkVzVDBGQk4wTXNSVUZCV2pzN1FVRkRRU3d3UWtGQmFVSTFReXhMUVVGcVFqdEJRVUZCT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdPMEZCUVVFc1ZVRkJVekJETEVsQlFWUTdRVUZCZDBJc1YwRkJTekZETEV0QlFVd3NRMEZCVjI5RUxFMUJRVmdzUTBGQmEwSkdMRXRCUVd4Q0xFVkJRWGxDTEVOQlFYcENMRVZCUVRSQ1VpeEpRVUUxUWp0QlFVRjRRanM3UVVGRlFTeFJRVUZKTlVJc1MwRkJTanM3UVVGRFFTeFRRVUZMTEVsQlFVbEdMRVZCUVZRc1NVRkJaU3hMUVVGTFJDeFBRVUZ3UWl4RlFVRTJRanRCUVVNelFrY3NUVUZCUVVFc1MwRkJTeXhIUVVGSExFdEJRVXRJTEU5QlFVd3NRMEZCWVVNc1JVRkJZaXhEUVVGU096dEJRVU5CTEZWQlFVbHpReXhMUVVGTExFbEJRVWx3UXl4TFFVRmlMRVZCUVc5Q08wRkJRMnhDTEdGQlFVdElMRTlCUVV3c1EwRkJZVU1zUlVGQllpeEpRVUZ0UWtVc1MwRkJTeXhIUVVGSFpDeExRVUZMTEVOQlFVTm5RaXhOUVVGcVF6dEJRVU5FTzBGQlEwWTdPMEZCUlVRc1YwRkJUeXhKUVVGUU8wRkJRMFE3UVVGRlJEczdPenM3T3pzN096dFRRVkZCY1VNc1Z5eEhRVUZCTEhGQ1FVRmhTQ3hMUVVGaUxFVkJRVzlDUXl4SFFVRndRaXhGUVVGNVFqdEJRVU4yUWtRc1NVRkJRVUVzUzBGQlN5eEhRVUZITEV0QlFVdHdReXhMUVVGTUxFTkJRVmR2UXl4TFFVRllMRU5CUVZJN1FVRkZRU3hSUVVGSmJFUXNTMEZCU3l4SFFVRkhMRXRCUVV0M1F5eFRRVUZNTEVOQlFXVlhMRWRCUVdZc1JVRkJiMElzUzBGQlMyNUVMRXRCUVV3c1EwRkJWMnRFTEV0QlFWZ3NRMEZCY0VJc1JVRkJkVU5PTEU5QlFYWkRMRVZCUVZvN08wRkJRMEVzTUVKQlFXbENOVU1zUzBGQmFrSTdRVUZCUVRzN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQkxGVkJRVk13UXl4SlFVRlVPMEZCUVhkQ0xGZEJRVXN4UXl4TFFVRk1MRU5CUVZkdlJDeE5RVUZZTEVOQlFXdENSaXhMUVVGTExFZEJRVWNzUTBGQk1VSXNSVUZCTmtJc1EwRkJOMElzUlVGQlowTlNMRWxCUVdoRE8wRkJRWGhDT3p0QlFVVkJMRkZCUVVrMVFpeExRVUZLT3p0QlFVTkJMRk5CUVVzc1NVRkJTVVlzUlVGQlZDeEpRVUZsTEV0QlFVdEVMRTlCUVhCQ0xFVkJRVFpDTzBGQlF6TkNSeXhOUVVGQlFTeExRVUZMTEVkQlFVY3NTMEZCUzBnc1QwRkJUQ3hEUVVGaFF5eEZRVUZpTEVOQlFWSTdPMEZCUTBFc1ZVRkJTWE5ETEV0QlFVc3NSMEZCUjNCRExFdEJRVm9zUlVGQmJVSTdRVUZEYWtJc1lVRkJTMGdzVDBGQlRDeERRVUZoUXl4RlFVRmlMRWxCUVcxQ1JTeExRVUZMTEVkQlFVZGtMRXRCUVVzc1EwRkJRMmRDTEUxQlFXcERPMEZCUTBRN1FVRkRSanM3UVVGRlJDeFhRVUZQTEVsQlFWQTdRVUZEUkR0QlFVVkVPenM3T3pzN096czdPenM3T3pzN08xTkJZMEZ6UXl4WExFZEJRVUVzY1VKQlFXRm9SQ3hMUVVGaUxFVkJRVzlDTzBGQlEyeENRU3hKUVVGQlFTeExRVUZMTEVkQlFVY3NTMEZCUzFFc1MwRkJUQ3hEUVVGWFVpeExRVUZZTEVOQlFWSTdRVUZEUVN4VFFVRkxUaXhMUVVGTUxFTkJRVmROTEV0QlFWZ3NSVUZCYTBKRExFMUJRV3hDTEVkQlFUSkNUU3hUUVVFelFqdEJRVU5CTEZOQlFVdGlMRXRCUVV3c1EwRkJWMjlFTEUxQlFWZ3NRMEZCYTBJNVF5eExRVUZzUWl4RlFVRjVRaXhEUVVGNlFqdEJRVVZCTEZGQlFVbFJMRXRCUVVvN08wRkJRMEVzVTBGQlN5eEpRVUZKUml4RlFVRlVMRWxCUVdVc1MwRkJTMFFzVDBGQmNFSXNSVUZCTmtJN1FVRkRNMEpITEUxQlFVRkJMRXRCUVVzc1IwRkJSeXhMUVVGTFNDeFBRVUZNTEVOQlFXRkRMRVZCUVdJc1EwRkJVanM3UVVGRFFTeFZRVUZKUlN4TFFVRkxMRWxCUVVsU0xFdEJRV0lzUlVGQmIwSTdRVUZEYkVJc1lVRkJTMHNzVDBGQlRDeERRVUZoUXl4RlFVRmlMRWxCUVcxQ1JTeExRVUZMTEVkQlFVY3NRMEZCTTBJN1FVRkRSRHRCUVVOR096dEJRVVZFTEZkQlFVOHNTVUZCVUR0QlFVTkVPMEZCUlVRN096czdPenM3T3pzN096dFRRVlZCZVVNc1V5eEhRVUZCTEhGQ1FVRmhPMEZCUTFnc01FSkJRV2xDTEV0QlFVdDJSQ3hMUVVGMFFqdEJRVUZCT3p0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdPMEZCUVVFc1ZVRkJVekJETEVsQlFWUTdRVUZCTmtKQkxFMUJRVUZCTEVsQlFVa3NRMEZCUTI1RExFMUJRVXdzUjBGQlkwMHNVMEZCWkR0QlFVRTNRanM3UVVGRFFTeFRRVUZMWWl4TFFVRk1MRWRCUVdFc1JVRkJZanRCUVVOQkxGZEJRVThzU1VGQlVEdEJRVU5FTzBGQlJVUTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdVMEV3UWtGM1JDeGhMRWRCUVVFc2RVSkJRV1ZETEU5QlFXWXNSVUZCZDBKRExFbEJRWGhDTEVWQlFUaENha1FzVVVGQk9VSXNSVUZCZDBNN1FVRkRkRU1zVVVGQlNTeERRVUZEUVN4UlFVRk1MRVZCUVdVN1FVRkRZa0VzVFVGQlFVRXNVVUZCVVN4SFFVRkhhVVFzU1VGQldEdEJRVU5CUVN4TlFVRkJRU3hKUVVGSkxFZEJRVWNzUlVGQlVEdEJRVU5FT3p0QlFVVkVMRk5CUVVzM1FpeFRRVUZNTEVOQlFXVXNWVUZCUVRoQ0xFbEJRVWtzUlVGQlNUdEJRVU55UWl4VlFVRkpSQ3hKUVVGSkxFTkJRVU5GTEV0QlFVd3NTVUZCWTBZc1NVRkJTU3hEUVVGRFJTeExRVUZNTEVOQlFWZERMRTlCUVZnc1EwRkJiVUpHTEVsQlFVa3NRMEZCUXpkQ0xFbEJRWGhDTEUxQlFXdERMRU5CUVVNc1EwRkJja1FzUlVGQmQwUTdRVUZEZUVRc1ZVRkJTVFJDTEVsQlFVa3NRMEZCUTBrc1NVRkJUQ3hKUVVGaFNDeEpRVUZKTEVOQlFVTkpMRXRCUVV3c1EwRkJWMFlzVDBGQldDeERRVUZ0UWtnc1NVRkJTU3hEUVVGRFNTeEpRVUY0UWl4TlFVRnJReXhEUVVGRExFTkJRWEJFTEVWQlFYVkVPMEZCUlhaRVNDeE5RVUZCUVN4SlFVRkpMRU5CUVVOSkxFdEJRVXdzUjBGQllVb3NTVUZCU1N4RFFVRkRTU3hMUVVGTUxFTkJRVmQ0UXl4UFFVRllMRU5CUVcxQ2EwTXNUMEZCYmtJc1JVRkJORUpvUkN4UlFVRTFRaXhEUVVGaU8wRkJRMFFzUzBGTVJEdEJRVTlCTEZkQlFVOHNTVUZCVUR0QlFVTkVPMEZCUlVRN096czdPenM3T3pzN096czdVMEZYUVhWRUxFc3NSMEZCUVN4bFFVRlBReXhUUVVGUUxFVkJRV3RDTzBGQlEyaENMRmRCUVU4c1MwRkJTMnBGTEV0QlFVd3NRMEZCVjJkRkxFdEJRVmdzUTBGQmFVSkRMRk5CUVdwQ0xFTkJRVkE3UVVGRFJEdEJRVVZFT3pzN096czdPenM3T3pzN08xTkJWMEZETEVrc1IwRkJRU3hqUVVGTlJDeFRRVUZPTEVWQlFXbENPMEZCUTJZc1YwRkJUeXhMUVVGTGFrVXNTMEZCVEN4RFFVRlhhMFVzU1VGQldDeERRVUZuUWtRc1UwRkJhRUlzUTBGQlVEdEJRVU5FTzBGQlJVUTdPenM3T3pzN096czdPenRUUVZWQmJrUXNTeXhIUVVGQkxHVkJRVTlTTEV0QlFWQXNSVUZCWXp0QlFVTmFMRkZCUVVrc1QwRkJUMEVzUzBGQlVDeExRVUZwUWl4UlFVRnlRaXhGUVVFclFqdEJRVU0zUWl4aFFVRlBRU3hMUVVGUU8wRkJRMFE3TzBGQlEwUXNWMEZCVHl4TFFVRkxUaXhMUVVGTUxFTkJRVmMyUkN4UFFVRllMRU5CUVcxQ2RrUXNTMEZCYmtJc1EwRkJVRHRCUVVORU8wRkJSVVE3T3pzN096czdPenM3VTBFd1FrRnJReXhUTEVkQlFVRXNiVUpCUVZkNFF5eExRVUZZTEVWQlFXdENiVVVzVFVGQmJFSXNSVUZCTUVJN1FVRkJRVHM3UVVGRGVFSXNVVUZCU1N4UFFVRlBia1VzUzBGQlVDeExRVUZwUWl4UlFVRnlRaXhGUVVFclFqdEJRVU0zUWl4VlFVRkpiMFVzUzBGQlN5eEhRVUZIUXl4UFFVRlBMRU5CUVVNc1UwRkJSQ3hEUVVGdVFqczdRVUZEUVhKRkxFMUJRVUZCTEV0QlFVc3NSMEZCUjBRc1YwRkJWeXhEUVVGRGNVVXNTMEZCU3l4RFFVRkRjRVVzUzBGQlJDeERRVUZNTEVOQlFXRkJMRXRCUVdRc1EwRkJia0k3UVVGRFJDeExRVWhFTEUxQlIwOHNTVUZCU1hORkxFdEJRVXNzUTBGQlEwTXNUMEZCVGl4RFFVRmpka1VzUzBGQlpDeERRVUZLTEVWQlFUQkNPMEZCUXk5Q1FTeE5RVUZCUVN4TFFVRkxMRWRCUVVkQkxFdEJRVXNzUTBGQlEzZEZMRXRCUVU0c1EwRkJXU3hEUVVGYUxFTkJRVkk3TzBGQlEwRXNORUpCUVdONFJTeExRVUZrTEhsSVFVRnhRanRCUVVGQk96dEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3TzBGQlFVRXNXVUZCV2tVc1EwRkJXVHRCUVVOdVFpeFpRVUZKUVN4RFFVRkRMRU5CUVVOTExFMUJRVTRzUlVGQlkwd3NRMEZCUXl4RFFVRkRTeXhOUVVGR0xFTkJRVk1yUXl4WFFVRlVMRU5CUVhGQ2NFUXNRMEZCY2tJc1JVRkJkMElzVVVGQmVFSTdRVUZEWmp0QlFVTkdMRXRCVEUwc1RVRkxRU3hKUVVGSlJpeExRVUZMTEVOQlFVTXJRaXhKUVVGT0xFdEJRV1VzVFVGQmJrSXNSVUZCTWtJN1FVRkRhRU12UWl4TlFVRkJRU3hMUVVGTExFZEJRVWRCTEV0QlFVc3NRMEZCUTBFc1MwRkJUaXhEUVVGWmQwVXNTMEZCV2l4RFFVRnJRaXhEUVVGc1FpeERRVUZTT3p0QlFVTkJMRFJDUVVGamVFVXNTMEZCWkN3d1NFRkJjVUk3UVVGQlFUczdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCT3p0QlFVRkJMRmxCUVZwRkxFbEJRVms3UVVGRGJrSXNXVUZCU1VFc1NVRkJReXhEUVVGRFN5eE5RVUZPTEVWQlFXTk1MRWxCUVVNc1EwRkJRMHNzVFVGQlJpeERRVUZUSzBNc1YwRkJWQ3hEUVVGeFFuQkVMRWxCUVhKQ0xFVkJRWGRDTEZGQlFYaENPMEZCUTJZN1FVRkRSaXhMUVV4TkxFMUJTMEVzU1VGQlNVWXNTMEZCU3l4RFFVRkRLMElzU1VGQlZpeEZRVUZuUWp0QlFVTnlRaTlDTEUxQlFVRkJMRXRCUVVzc1IwRkJSeXhEUVVGRFFTeExRVUZFTEVOQlFWSTdRVUZEUkN4TFFVWk5MRTFCUlVFc1NVRkJTVUVzUzBGQlN5eERRVUZET0VJc1NVRkJWaXhGUVVGblFqdEJRVU55UWl4VlFVRkpMRTlCUVU4NVFpeExRVUZMTEVOQlFVTXJSQ3hMUVVGaUxFdEJRWFZDTEZkQlFUTkNMRVZCUVhkRE8wRkJRM1JETEdOQlFVMHNTVUZCU1ZVc1MwRkJTaXhEUVVGVkxIZERRVUZXTEVOQlFVNDdRVUZEUkN4UFFVWkVMRTFCUlU4c1NVRkJTU3hQUVVGUGVrVXNTMEZCU3l4RFFVRkRLMFFzUzBGQllpeExRVUYxUWl4UlFVRXpRaXhGUVVGeFF6dEJRVU14UXk5RUxGRkJRVUZCTEV0QlFVc3NRMEZCUXl0RUxFdEJRVTRzUjBGQlkxY3NUVUZCVFN4RFFVRkRNVVVzUzBGQlN5eERRVUZESzBRc1MwRkJVQ3hEUVVGd1FqdEJRVU5FT3p0QlFVTkVMMFFzVFVGQlFVRXNTMEZCU3l4SFFVRkhMRU5CUVVNc1NVRkJTVEpGTEc5Q1FVRktMRU5CUVdkQ00wVXNTMEZCYUVJc1EwRkJSQ3hEUVVGU08wRkJRMFFzUzBGUVRTeE5RVTlCTEVsQlFVbEJMRXRCUVVzc1EwRkJRMnRETEZGQlFWWXNSVUZCYjBJN1FVRkRla0lzVlVGQlNUQkRMRWxCUVVrc1IwRkJSMUFzVDBGQlR5eERRVUZETEZGQlFVUXNRMEZCYkVJN08wRkJRMEZ5UlN4TlFVRkJRU3hMUVVGTExFZEJRVWNzUTBGQlF5eEpRVUZKTkVVc1NVRkJTaXhEUVVGVE5VVXNTMEZCVkN4RFFVRkVMRU5CUVZJN1FVRkRSQ3hMUVVoTkxFMUJSMEVzU1VGQlNVRXNTMEZCU3l4RFFVRkRiME1zU1VGQlZpeEZRVUZuUWp0QlFVTnlRaXhWUVVGSmVVTXNUVUZCVFN4SFFVRkhVaXhQUVVGUExFTkJRVU1zVjBGQlJDeERRVUZ3UWpzN1FVRkRRWEpGTEUxQlFVRkJMRXRCUVVzc1IwRkJSeXhEUVVGRExFbEJRVWsyUlN4TlFVRktMRU5CUVZjM1JTeExRVUZZTEVOQlFVUXNRMEZCVWp0QlFVTkVMRXRCU0Uwc1RVRkhRU3hKUVVGSlFTeExRVUZMTEVOQlFVTTRSU3hKUVVGV0xFVkJRV2RDTzBGQlEzSkNPVVVzVFVGQlFVRXNTMEZCU3l4SFFVRkhMRU5CUVVNc1NVRkJTU3RGTEdkQ1FVRktMRU5CUVZrdlJTeExRVUZhTEVOQlFVUXNRMEZCVWp0QlFVTkVMRXRCUmswc1RVRkZRVHRCUVVOTUxGbEJRVTBzU1VGQlNYbEZMRXRCUVVvc1EwRkJWU3h2UTBGQlZpeERRVUZPTzBGQlEwUTdPMEZCUlVRc1VVRkJTVThzVTBGQlV5eEhRVUZIYUVZc1MwRkJTeXhEUVVGRFF5eEhRVUZPTEVOQlFWVXNWVUZCUVVNc1EwRkJReXhGUVVGSk8wRkJRemRDTEZWQlFVbEJMRU5CUVVNc1EwRkJRMHNzVFVGQlRpeEZRVUZqVEN4RFFVRkRMRU5CUVVOTExFMUJRVVlzUTBGQlV5dERMRmRCUVZRc1EwRkJjVUp3UkN4RFFVRnlRanM3UVVGRFpDeFZRVUZKTEU5QlFVOUJMRU5CUVVNc1EwRkJReXRGTEVsQlFVWXNRMEZCVDBNc1RVRkJaQ3hMUVVGNVFpeFhRVUUzUWl4RlFVRXdRenRCUVVONFF5eFpRVUZKWml4TlFVRk5MRWxCUVVrc1QwRkJUMEVzVFVGQlRTeERRVUZEWXl4SlFVRlFMRU5CUVZsRExFMUJRVzVDTEV0QlFUaENMRmRCUVRWRExFVkJRWGxFTzBGQlEzWkVhRVlzVlVGQlFVRXNRMEZCUXl4RFFVRkRLMFVzU1VGQlJpeERRVUZQUXl4TlFVRlFMRWRCUVdkQ1ppeE5RVUZOTEVOQlFVTmpMRWxCUVZBc1EwRkJXVU1zVFVGQldpeERRVUZ0UWpORUxFOUJRVzVDTEVOQlFUSkNMRkZCUVROQ0xFVkJRWEZETEVWQlFYSkRMRU5CUVdoQ08wRkJRMFE3UVVGRFJqczdRVUZEUkhKQ0xFMUJRVUZCTEVOQlFVTXNRMEZCUTBzc1RVRkJSaXhIUVVGWExFdEJRVmc3UVVGRFFTeGhRVUZQVEN4RFFVRlFPMEZCUTBRc1MwRlVaU3hEUVVGb1FqdEJRVmRCTEZkQlFVODRSU3hUUVVGUU8wRkJRMFE3UVVGRlJEczdPenM3T3pzN096czdPenM3ZDBKQmJrVmhPMEZCUTFnc1ZVRkJTU3hEUVVGRExFdEJRVXRvUml4TFFVRldMRVZCUVdsQ0xFOUJRVTloTEZOQlFWQTdRVUZEYWtJc1lVRkJUeXhMUVVGTFlpeExRVUZNTEVOQlFWY3NRMEZCV0N4RFFVRlFPMEZCUTBRN1FVRkZSRHM3T3pzN096czdPenM3ZDBKQlVWazdRVUZEVml4VlFVRkpMRU5CUVVNc1MwRkJTMEVzUzBGQlZpeEZRVUZwUWl4UFFVRlBZU3hUUVVGUU8wRkJRMnBDTEdGQlFVOHNTMEZCUzJJc1MwRkJUQ3hEUVVGWExFdEJRVXRCTEV0QlFVd3NRMEZCVjJkQ0xFMUJRVmdzUjBGQmIwSXNRMEZCTDBJc1EwRkJVRHRCUVVORU96czdPMFZCYUdwQ2NVSnRSU3hoT3p0bFFTdHRRbFF2UlN4VE8wRkJSV1k3T3pzN096czdPMEZCVVVFaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ1JHVmpiR0Z5WVhScGIyNGdabkp2YlNBbkxpOWtaV05zWVhKaGRHbHZiaWRjYm1sdGNHOXlkQ0JEYjIxdFpXNTBJR1p5YjIwZ0p5NHZZMjl0YldWdWRDZGNibWx0Y0c5eWRDQk9iMlJsSUdaeWIyMGdKeTR2Ym05a1pTZGNibHh1Wm5WdVkzUnBiMjRnWTJ4bFlXNVRiM1Z5WTJVZ0tHNXZaR1Z6S1NCN1hHNGdJSEpsZEhWeWJpQnViMlJsY3k1dFlYQW9hU0E5UGlCN1hHNGdJQ0FnYVdZZ0tHa3VibTlrWlhNcElHa3VibTlrWlhNZ1BTQmpiR1ZoYmxOdmRYSmpaU2hwTG01dlpHVnpLVnh1SUNBZ0lHUmxiR1YwWlNCcExuTnZkWEpqWlZ4dUlDQWdJSEpsZEhWeWJpQnBYRzRnSUgwcFhHNTlYRzVjYmk4cUtseHVJQ29nVkdobElIdEFiR2x1YXlCU2IyOTBmU3dnZTBCc2FXNXJJRUYwVW5Wc1pYMHNJR0Z1WkNCN1FHeHBibXNnVW5Wc1pYMGdZMjl1ZEdGcGJtVnlJRzV2WkdWelhHNGdLaUJwYm1obGNtbDBJSE52YldVZ1kyOXRiVzl1SUcxbGRHaHZaSE1nZEc4Z2FHVnNjQ0IzYjNKcklIZHBkR2dnZEdobGFYSWdZMmhwYkdSeVpXNHVYRzRnS2x4dUlDb2dUbTkwWlNCMGFHRjBJR0ZzYkNCamIyNTBZV2x1WlhKeklHTmhiaUJ6ZEc5eVpTQmhibmtnWTI5dWRHVnVkQzRnU1dZZ2VXOTFJSGR5YVhSbElHRWdjblZzWlNCcGJuTnBaR1ZjYmlBcUlHRWdjblZzWlN3Z1VHOXpkRU5UVXlCM2FXeHNJSEJoY25ObElHbDBMbHh1SUNwY2JpQXFJRUJsZUhSbGJtUnpJRTV2WkdWY2JpQXFJRUJoWW5OMGNtRmpkRnh1SUNvdlhHNWpiR0Z6Y3lCRGIyNTBZV2x1WlhJZ1pYaDBaVzVrY3lCT2IyUmxJSHRjYmlBZ2NIVnphQ0FvWTJocGJHUXBJSHRjYmlBZ0lDQmphR2xzWkM1d1lYSmxiblFnUFNCMGFHbHpYRzRnSUNBZ2RHaHBjeTV1YjJSbGN5NXdkWE5vS0dOb2FXeGtLVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nU1hSbGNtRjBaWE1nZEdoeWIzVm5hQ0IwYUdVZ1kyOXVkR0ZwYm1WeTRvQ1pjeUJwYlcxbFpHbGhkR1VnWTJocGJHUnlaVzRzWEc0Z0lDQXFJR05oYkd4cGJtY2dZR05oYkd4aVlXTnJZQ0JtYjNJZ1pXRmphQ0JqYUdsc1pDNWNiaUFnSUNwY2JpQWdJQ29nVW1WMGRYSnVhVzVuSUdCbVlXeHpaV0FnYVc0Z2RHaGxJR05oYkd4aVlXTnJJSGRwYkd3Z1luSmxZV3NnYVhSbGNtRjBhVzl1TGx4dUlDQWdLbHh1SUNBZ0tpQlVhR2x6SUcxbGRHaHZaQ0J2Ym14NUlHbDBaWEpoZEdWeklIUm9jbTkxWjJnZ2RHaGxJR052Ym5SaGFXNWxjdUtBbVhNZ2FXMXRaV1JwWVhSbElHTm9hV3hrY21WdUxseHVJQ0FnS2lCSlppQjViM1VnYm1WbFpDQjBieUJ5WldOMWNuTnBkbVZzZVNCcGRHVnlZWFJsSUhSb2NtOTFaMmdnWVd4c0lIUm9aU0JqYjI1MFlXbHVaWExpZ0pseklHUmxjMk5sYm1SaGJuUmNiaUFnSUNvZ2JtOWtaWE1zSUhWelpTQjdRR3hwYm1zZ1EyOXVkR0ZwYm1WeUkzZGhiR3Q5TGx4dUlDQWdLbHh1SUNBZ0tpQlZibXhwYTJVZ2RHaGxJR1p2Y2lCZ2UzMWdMV041WTJ4bElHOXlJR0JCY25KaGVTTm1iM0pGWVdOb1lDQjBhR2x6SUdsMFpYSmhkRzl5SUdseklITmhabVZjYmlBZ0lDb2dhV1lnZVc5MUlHRnlaU0J0ZFhSaGRHbHVaeUIwYUdVZ1lYSnlZWGtnYjJZZ1kyaHBiR1FnYm05a1pYTWdaSFZ5YVc1bklHbDBaWEpoZEdsdmJpNWNiaUFnSUNvZ1VHOXpkRU5UVXlCM2FXeHNJR0ZrYW5WemRDQjBhR1VnWTNWeWNtVnVkQ0JwYm1SbGVDQjBieUJ0WVhSamFDQjBhR1VnYlhWMFlYUnBiMjV6TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyTm9hV3hrU1hSbGNtRjBiM0o5SUdOaGJHeGlZV05ySUVsMFpYSmhkRzl5SUhKbFkyVnBkbVZ6SUdWaFkyZ2dibTlrWlNCaGJtUWdhVzVrWlhndVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMlpoYkhObGZIVnVaR1ZtYVc1bFpIMGdVbVYwZFhKdWN5QmdabUZzYzJWZ0lHbG1JR2wwWlhKaGRHbHZiaUIzWVhNZ1luSnZhMlV1WEc0Z0lDQXFYRzRnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FxSUdOdmJuTjBJSEp2YjNRZ1BTQndiM04wWTNOekxuQmhjbk5sS0NkaElIc2dZMjlzYjNJNklHSnNZV05yT3lCNkxXbHVaR1Y0T2lBeElIMG5LVnh1SUNBZ0tpQmpiMjV6ZENCeWRXeGxJRDBnY205dmRDNW1hWEp6ZEZ4dUlDQWdLbHh1SUNBZ0tpQm1iM0lnS0dOdmJuTjBJR1JsWTJ3Z2IyWWdjblZzWlM1dWIyUmxjeWtnZTF4dUlDQWdLaUFnSUdSbFkyd3VZMnh2Ym1WQ1pXWnZjbVVvZXlCd2NtOXdPaUFuTFhkbFltdHBkQzBuSUNzZ1pHVmpiQzV3Y205d0lIMHBYRzRnSUNBcUlDQWdMeThnUTNsamJHVWdkMmxzYkNCaVpTQnBibVpwYm1sMFpTd2dZbVZqWVhWelpTQmpiRzl1WlVKbFptOXlaU0J0YjNabGN5QjBhR1VnWTNWeWNtVnVkQ0J1YjJSbFhHNGdJQ0FxSUNBZ0x5OGdkRzhnZEdobElHNWxlSFFnYVc1a1pYaGNiaUFnSUNvZ2ZWeHVJQ0FnS2x4dUlDQWdLaUJ5ZFd4bExtVmhZMmdvWkdWamJDQTlQaUI3WEc0Z0lDQXFJQ0FnWkdWamJDNWpiRzl1WlVKbFptOXlaU2g3SUhCeWIzQTZJQ2N0ZDJWaWEybDBMU2NnS3lCa1pXTnNMbkJ5YjNBZ2ZTbGNiaUFnSUNvZ0lDQXZMeUJYYVd4c0lHSmxJR1Y0WldOMWRHVmtJRzl1YkhrZ1ptOXlJR052Ykc5eUlHRnVaQ0I2TFdsdVpHVjRYRzRnSUNBcUlIMHBYRzRnSUNBcUwxeHVJQ0JsWVdOb0lDaGpZV3hzWW1GamF5a2dlMXh1SUNBZ0lHbG1JQ2doZEdocGN5NXNZWE4wUldGamFDa2dkR2hwY3k1c1lYTjBSV0ZqYUNBOUlEQmNiaUFnSUNCcFppQW9JWFJvYVhNdWFXNWtaWGhsY3lrZ2RHaHBjeTVwYm1SbGVHVnpJRDBnZXlCOVhHNWNiaUFnSUNCMGFHbHpMbXhoYzNSRllXTm9JQ3M5SURGY2JpQWdJQ0JzWlhRZ2FXUWdQU0IwYUdsekxteGhjM1JGWVdOb1hHNGdJQ0FnZEdocGN5NXBibVJsZUdWelcybGtYU0E5SURCY2JseHVJQ0FnSUdsbUlDZ2hkR2hwY3k1dWIyUmxjeWtnY21WMGRYSnVJSFZ1WkdWbWFXNWxaRnh1WEc0Z0lDQWdiR1YwSUdsdVpHVjRMQ0J5WlhOMWJIUmNiaUFnSUNCM2FHbHNaU0FvZEdocGN5NXBibVJsZUdWelcybGtYU0E4SUhSb2FYTXVibTlrWlhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNCcGJtUmxlQ0E5SUhSb2FYTXVhVzVrWlhobGMxdHBaRjFjYmlBZ0lDQWdJSEpsYzNWc2RDQTlJR05oYkd4aVlXTnJLSFJvYVhNdWJtOWtaWE5iYVc1a1pYaGRMQ0JwYm1SbGVDbGNiaUFnSUNBZ0lHbG1JQ2h5WlhOMWJIUWdQVDA5SUdaaGJITmxLU0JpY21WaGExeHVYRzRnSUNBZ0lDQjBhR2x6TG1sdVpHVjRaWE5iYVdSZElDczlJREZjYmlBZ0lDQjlYRzVjYmlBZ0lDQmtaV3hsZEdVZ2RHaHBjeTVwYm1SbGVHVnpXMmxrWFZ4dVhHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2RGeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRlJ5WVhabGNuTmxjeUIwYUdVZ1kyOXVkR0ZwYm1WeTRvQ1pjeUJrWlhOalpXNWtZVzUwSUc1dlpHVnpMQ0JqWVd4c2FXNW5JR05oYkd4aVlXTnJYRzRnSUNBcUlHWnZjaUJsWVdOb0lHNXZaR1V1WEc0Z0lDQXFYRzRnSUNBcUlFeHBhMlVnWTI5dWRHRnBibVZ5TG1WaFkyZ29LU3dnZEdocGN5QnRaWFJvYjJRZ2FYTWdjMkZtWlNCMGJ5QjFjMlZjYmlBZ0lDb2dhV1lnZVc5MUlHRnlaU0J0ZFhSaGRHbHVaeUJoY25KaGVYTWdaSFZ5YVc1bklHbDBaWEpoZEdsdmJpNWNiaUFnSUNwY2JpQWdJQ29nU1dZZ2VXOTFJRzl1YkhrZ2JtVmxaQ0IwYnlCcGRHVnlZWFJsSUhSb2NtOTFaMmdnZEdobElHTnZiblJoYVc1bGN1S0FtWE1nYVcxdFpXUnBZWFJsSUdOb2FXeGtjbVZ1TEZ4dUlDQWdLaUIxYzJVZ2UwQnNhVzVySUVOdmJuUmhhVzVsY2lObFlXTm9mUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0amFHbHNaRWwwWlhKaGRHOXlmU0JqWVd4c1ltRmpheUJKZEdWeVlYUnZjaUJ5WldObGFYWmxjeUJsWVdOb0lHNXZaR1VnWVc1a0lHbHVaR1Y0TGx4dUlDQWdLbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdG1ZV3h6Wlh4MWJtUmxabWx1WldSOUlGSmxkSFZ5Ym5NZ1lHWmhiSE5sWUNCcFppQnBkR1Z5WVhScGIyNGdkMkZ6SUdKeWIydGxMbHh1SUNBZ0tseHVJQ0FnS2lCQVpYaGhiWEJzWlZ4dUlDQWdLaUJ5YjI5MExuZGhiR3NvYm05a1pTQTlQaUI3WEc0Z0lDQXFJQ0FnTHk4Z1ZISmhkbVZ5YzJWeklHRnNiQ0JrWlhOalpXNWtZVzUwSUc1dlpHVnpMbHh1SUNBZ0tpQjlLVnh1SUNBZ0tpOWNiaUFnZDJGc2F5QW9ZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVsWVdOb0tDaGphR2xzWkN3Z2FTa2dQVDRnZTF4dUlDQWdJQ0FnYkdWMElISmxjM1ZzZEZ4dUlDQWdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MElEMGdZMkZzYkdKaFkyc29ZMmhwYkdRc0lHa3BYRzRnSUNBZ0lDQjlJR05oZEdOb0lDaGxLU0I3WEc0Z0lDQWdJQ0FnSUdVdWNHOXpkR056YzA1dlpHVWdQU0JqYUdsc1pGeHVJQ0FnSUNBZ0lDQnBaaUFvWlM1emRHRmpheUFtSmlCamFHbHNaQzV6YjNWeVkyVWdKaVlnTDF4Y2JseGNjM3MwZldGMElDOHVkR1Z6ZENobExuTjBZV05yS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJR3hsZENCeklEMGdZMmhwYkdRdWMyOTFjbU5sWEc0Z0lDQWdJQ0FnSUNBZ1pTNXpkR0ZqYXlBOUlHVXVjM1JoWTJzdWNtVndiR0ZqWlNndlhGeHVYRnh6ZXpSOVlYUWdMeXhjYmlBZ0lDQWdJQ0FnSUNBZ0lHQWtKaVI3SUhNdWFXNXdkWFF1Wm5KdmJTQjlPaVI3SUhNdWMzUmhjblF1YkdsdVpTQjlPaVI3SUhNdWMzUmhjblF1WTI5c2RXMXVJSDBrSm1BcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdkR2h5YjNjZ1pWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2FXWWdLSEpsYzNWc2RDQWhQVDBnWm1Gc2MyVWdKaVlnWTJocGJHUXVkMkZzYXlrZ2UxeHVJQ0FnSUNBZ0lDQnlaWE4xYkhRZ1BTQmphR2xzWkM1M1lXeHJLR05oYkd4aVlXTnJLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlISmxjM1ZzZEZ4dUlDQWdJSDBwWEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1ZISmhkbVZ5YzJWeklIUm9aU0JqYjI1MFlXbHVaWExpZ0pseklHUmxjMk5sYm1SaGJuUWdibTlrWlhNc0lHTmhiR3hwYm1jZ1kyRnNiR0poWTJ0Y2JpQWdJQ29nWm05eUlHVmhZMmdnWkdWamJHRnlZWFJwYjI0Z2JtOWtaUzVjYmlBZ0lDcGNiaUFnSUNvZ1NXWWdlVzkxSUhCaGMzTWdZU0JtYVd4MFpYSXNJR2wwWlhKaGRHbHZiaUIzYVd4c0lHOXViSGtnYUdGd2NHVnVJRzkyWlhJZ1pHVmpiR0Z5WVhScGIyNXpYRzRnSUNBcUlIZHBkR2dnYldGMFkyaHBibWNnY0hKdmNHVnlkR2xsY3k1Y2JpQWdJQ3BjYmlBZ0lDb2dUR2xyWlNCN1FHeHBibXNnUTI5dWRHRnBibVZ5STJWaFkyaDlMQ0IwYUdseklHMWxkR2h2WkNCcGN5QnpZV1psWEc0Z0lDQXFJSFJ2SUhWelpTQnBaaUI1YjNVZ1lYSmxJRzExZEdGMGFXNW5JR0Z5Y21GNWN5QmtkWEpwYm1jZ2FYUmxjbUYwYVc5dUxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozeFNaV2RGZUhCOUlGdHdjbTl3WFNBZ0lGTjBjbWx1WnlCdmNpQnlaV2QxYkdGeUlHVjRjSEpsYzNOcGIyNWNiaUFnSUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYnlCbWFXeDBaWElnWkdWamJHRnlZWFJwYjI1eklHSjVJSEJ5YjNCbGNuUjVJRzVoYldVdVhHNGdJQ0FxSUVCd1lYSmhiU0I3WTJocGJHUkpkR1Z5WVhSdmNuMGdZMkZzYkdKaFkyc2dTWFJsY21GMGIzSWdjbVZqWldsMlpYTWdaV0ZqYUNCdWIyUmxJR0Z1WkNCcGJtUmxlQzVjYmlBZ0lDcGNiaUFnSUNvZ1FISmxkSFZ5YmlCN1ptRnNjMlY4ZFc1a1pXWnBibVZrZlNCU1pYUjFjbTV6SUdCbVlXeHpaV0FnYVdZZ2FYUmxjbUYwYVc5dUlIZGhjeUJpY205clpTNWNiaUFnSUNwY2JpQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDb2djbTl2ZEM1M1lXeHJSR1ZqYkhNb1pHVmpiQ0E5UGlCN1hHNGdJQ0FxSUNBZ1kyaGxZMnRRY205d1pYSjBlVk4xY0hCdmNuUW9aR1ZqYkM1d2NtOXdLVnh1SUNBZ0tpQjlLVnh1SUNBZ0tseHVJQ0FnS2lCeWIyOTBMbmRoYkd0RVpXTnNjeWduWW05eVpHVnlMWEpoWkdsMWN5Y3NJR1JsWTJ3Z1BUNGdlMXh1SUNBZ0tpQWdJR1JsWTJ3dWNtVnRiM1psS0NsY2JpQWdJQ29nZlNsY2JpQWdJQ3BjYmlBZ0lDb2djbTl2ZEM1M1lXeHJSR1ZqYkhNb0wxNWlZV05yWjNKdmRXNWtMeXdnWkdWamJDQTlQaUI3WEc0Z0lDQXFJQ0FnWkdWamJDNTJZV3gxWlNBOUlIUmhhMlZHYVhKemRFTnZiRzl5Um5KdmJVZHlZV1JwWlc1MEtHUmxZMnd1ZG1Gc2RXVXBYRzRnSUNBcUlIMHBYRzRnSUNBcUwxeHVJQ0IzWVd4clJHVmpiSE1nS0hCeWIzQXNJR05oYkd4aVlXTnJLU0I3WEc0Z0lDQWdhV1lnS0NGallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUNBZ1kyRnNiR0poWTJzZ1BTQndjbTl3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1M1lXeHJLQ2hqYUdsc1pDd2dhU2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBaaUFvWTJocGJHUXVkSGx3WlNBOVBUMGdKMlJsWTJ3bktTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05oYkd4aVlXTnJLR05vYVd4a0xDQnBLVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvY0hKdmNDQnBibk4wWVc1alpXOW1JRkpsWjBWNGNDa2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11ZDJGc2F5Z29ZMmhwYkdRc0lHa3BJRDArSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR05vYVd4a0xuUjVjR1VnUFQwOUlDZGtaV05zSnlBbUppQndjbTl3TG5SbGMzUW9ZMmhwYkdRdWNISnZjQ2twSUh0Y2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1kyRnNiR0poWTJzb1kyaHBiR1FzSUdrcFhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMHBYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuZGhiR3NvS0dOb2FXeGtMQ0JwS1NBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvWTJocGJHUXVkSGx3WlNBOVBUMGdKMlJsWTJ3bklDWW1JR05vYVd4a0xuQnliM0FnUFQwOUlIQnliM0FwSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOaGJHeGlZV05yS0dOb2FXeGtMQ0JwS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwWEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1ZISmhkbVZ5YzJWeklIUm9aU0JqYjI1MFlXbHVaWExpZ0pseklHUmxjMk5sYm1SaGJuUWdibTlrWlhNc0lHTmhiR3hwYm1jZ1kyRnNiR0poWTJ0Y2JpQWdJQ29nWm05eUlHVmhZMmdnY25Wc1pTQnViMlJsTGx4dUlDQWdLbHh1SUNBZ0tpQkpaaUI1YjNVZ2NHRnpjeUJoSUdacGJIUmxjaXdnYVhSbGNtRjBhVzl1SUhkcGJHd2diMjVzZVNCb1lYQndaVzRnYjNabGNpQnlkV3hsYzF4dUlDQWdLaUIzYVhSb0lHMWhkR05vYVc1bklITmxiR1ZqZEc5eWN5NWNiaUFnSUNwY2JpQWdJQ29nVEdsclpTQjdRR3hwYm1zZ1EyOXVkR0ZwYm1WeUkyVmhZMmg5TENCMGFHbHpJRzFsZEdodlpDQnBjeUJ6WVdabFhHNGdJQ0FxSUhSdklIVnpaU0JwWmlCNWIzVWdZWEpsSUcxMWRHRjBhVzVuSUdGeWNtRjVjeUJrZFhKcGJtY2dhWFJsY21GMGFXOXVMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaM3hTWldkRmVIQjlJRnR6Wld4bFkzUnZjbDBnVTNSeWFXNW5JRzl5SUhKbFozVnNZWElnWlhod2NtVnpjMmx2Ymx4dUlDQWdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkRzhnWm1sc2RHVnlJSEoxYkdWeklHSjVJSE5sYkdWamRHOXlMbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyTm9hV3hrU1hSbGNtRjBiM0o5SUdOaGJHeGlZV05ySUNBZ1NYUmxjbUYwYjNJZ2NtVmpaV2wyWlhNZ1pXRmphQ0J1YjJSbElHRnVaQ0JwYm1SbGVDNWNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnliaUI3Wm1Gc2MyVjhkVzVrWldacGJtVmtmU0J5WlhSMWNtNXpJR0JtWVd4elpXQWdhV1lnYVhSbGNtRjBhVzl1SUhkaGN5QmljbTlyWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNvZ1kyOXVjM1FnYzJWc1pXTjBiM0p6SUQwZ1cxMWNiaUFnSUNvZ2NtOXZkQzUzWVd4clVuVnNaWE1vY25Wc1pTQTlQaUI3WEc0Z0lDQXFJQ0FnYzJWc1pXTjBiM0p6TG5CMWMyZ29jblZzWlM1elpXeGxZM1J2Y2lsY2JpQWdJQ29nZlNsY2JpQWdJQ29nWTI5dWMyOXNaUzVzYjJjb1lGbHZkWElnUTFOVElIVnpaWE1nSkhzZ2MyVnNaV04wYjNKekxteGxibWQwYUNCOUlITmxiR1ZqZEc5eWMyQXBYRzRnSUNBcUwxeHVJQ0IzWVd4clVuVnNaWE1nS0hObGJHVmpkRzl5TENCallXeHNZbUZqYXlrZ2UxeHVJQ0FnSUdsbUlDZ2hZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQWdJR05oYkd4aVlXTnJJRDBnYzJWc1pXTjBiM0pjYmx4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWQyRnNheWdvWTJocGJHUXNJR2twSUQwK0lIdGNiaUFnSUNBZ0lDQWdhV1lnS0dOb2FXeGtMblI1Y0dVZ1BUMDlJQ2R5ZFd4bEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqWVd4c1ltRmpheWhqYUdsc1pDd2dhU2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNsY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hObGJHVmpkRzl5SUdsdWMzUmhibU5sYjJZZ1VtVm5SWGh3S1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NTNZV3hyS0NoamFHbHNaQ3dnYVNrZ1BUNGdlMXh1SUNBZ0lDQWdJQ0JwWmlBb1kyaHBiR1F1ZEhsd1pTQTlQVDBnSjNKMWJHVW5JQ1ltSUhObGJHVmpkRzl5TG5SbGMzUW9ZMmhwYkdRdWMyVnNaV04wYjNJcEtTQjdYRzRnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05oYkd4aVlXTnJLR05vYVd4a0xDQnBLVnh1SUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0I5S1Z4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTUzWVd4cktDaGphR2xzWkN3Z2FTa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tHTm9hV3hrTG5SNWNHVWdQVDA5SUNkeWRXeGxKeUFtSmlCamFHbHNaQzV6Wld4bFkzUnZjaUE5UFQwZ2MyVnNaV04wYjNJcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTmhiR3hpWVdOcktHTm9hV3hrTENCcEtWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcFhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dWSEpoZG1WeWMyVnpJSFJvWlNCamIyNTBZV2x1WlhMaWdKbHpJR1JsYzJObGJtUmhiblFnYm05a1pYTXNJR05oYkd4cGJtY2dZMkZzYkdKaFkydGNiaUFnSUNvZ1ptOXlJR1ZoWTJnZ1lYUXRjblZzWlNCdWIyUmxMbHh1SUNBZ0tseHVJQ0FnS2lCSlppQjViM1VnY0dGemN5QmhJR1pwYkhSbGNpd2dhWFJsY21GMGFXOXVJSGRwYkd3Z2IyNXNlU0JvWVhCd1pXNGdiM1psY2lCaGRDMXlkV3hsYzF4dUlDQWdLaUIwYUdGMElHaGhkbVVnYldGMFkyaHBibWNnYm1GdFpYTXVYRzRnSUNBcVhHNGdJQ0FxSUV4cGEyVWdlMEJzYVc1cklFTnZiblJoYVc1bGNpTmxZV05vZlN3Z2RHaHBjeUJ0WlhSb2IyUWdhWE1nYzJGbVpWeHVJQ0FnS2lCMGJ5QjFjMlVnYVdZZ2VXOTFJR0Z5WlNCdGRYUmhkR2x1WnlCaGNuSmhlWE1nWkhWeWFXNW5JR2wwWlhKaGRHbHZiaTVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ4VW1WblJYaHdmU0JiYm1GdFpWMGdJQ0JUZEhKcGJtY2diM0lnY21WbmRXeGhjaUJsZUhCeVpYTnphVzl1WEc0Z0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHOGdabWxzZEdWeUlHRjBMWEoxYkdWeklHSjVJRzVoYldVdVhHNGdJQ0FxSUVCd1lYSmhiU0I3WTJocGJHUkpkR1Z5WVhSdmNuMGdZMkZzYkdKaFkyc2dTWFJsY21GMGIzSWdjbVZqWldsMlpYTWdaV0ZqYUNCdWIyUmxJR0Z1WkNCcGJtUmxlQzVjYmlBZ0lDcGNiaUFnSUNvZ1FISmxkSFZ5YmlCN1ptRnNjMlY4ZFc1a1pXWnBibVZrZlNCU1pYUjFjbTV6SUdCbVlXeHpaV0FnYVdZZ2FYUmxjbUYwYVc5dUlIZGhjeUJpY205clpTNWNiaUFnSUNwY2JpQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDb2djbTl2ZEM1M1lXeHJRWFJTZFd4bGN5aHlkV3hsSUQwK0lIdGNiaUFnSUNvZ0lDQnBaaUFvYVhOUGJHUW9jblZzWlM1dVlXMWxLU2tnY25Wc1pTNXlaVzF2ZG1Vb0tWeHVJQ0FnS2lCOUtWeHVJQ0FnS2x4dUlDQWdLaUJzWlhRZ1ptbHljM1FnUFNCbVlXeHpaVnh1SUNBZ0tpQnliMjkwTG5kaGJHdEJkRkoxYkdWektDZGphR0Z5YzJWMEp5d2djblZzWlNBOVBpQjdYRzRnSUNBcUlDQWdhV1lnS0NGbWFYSnpkQ2tnZTF4dUlDQWdLaUFnSUNBZ1ptbHljM1FnUFNCMGNuVmxYRzRnSUNBcUlDQWdmU0JsYkhObElIdGNiaUFnSUNvZ0lDQWdJSEoxYkdVdWNtVnRiM1psS0NsY2JpQWdJQ29nSUNCOVhHNGdJQ0FxSUgwcFhHNGdJQ0FxTDF4dUlDQjNZV3hyUVhSU2RXeGxjeUFvYm1GdFpTd2dZMkZzYkdKaFkyc3BJSHRjYmlBZ0lDQnBaaUFvSVdOaGJHeGlZV05yS1NCN1hHNGdJQ0FnSUNCallXeHNZbUZqYXlBOUlHNWhiV1ZjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5kaGJHc29LR05vYVd4a0xDQnBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqYUdsc1pDNTBlWEJsSUQwOVBTQW5ZWFJ5ZFd4bEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJqWVd4c1ltRmpheWhqYUdsc1pDd2dhU2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNsY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0c1aGJXVWdhVzV6ZEdGdVkyVnZaaUJTWldkRmVIQXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5kaGJHc29LR05vYVd4a0xDQnBLU0E5UGlCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2hqYUdsc1pDNTBlWEJsSUQwOVBTQW5ZWFJ5ZFd4bEp5QW1KaUJ1WVcxbExuUmxjM1FvWTJocGJHUXVibUZ0WlNrcElIdGNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMkZzYkdKaFkyc29ZMmhwYkdRc0lHa3BYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDBwWEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbmRoYkdzb0tHTm9hV3hrTENCcEtTQTlQaUI3WEc0Z0lDQWdJQ0JwWmlBb1kyaHBiR1F1ZEhsd1pTQTlQVDBnSjJGMGNuVnNaU2NnSmlZZ1kyaHBiR1F1Ym1GdFpTQTlQVDBnYm1GdFpTa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMkZzYkdKaFkyc29ZMmhwYkdRc0lHa3BYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZTbGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJVY21GMlpYSnpaWE1nZEdobElHTnZiblJoYVc1bGN1S0FtWE1nWkdWelkyVnVaR0Z1ZENCdWIyUmxjeXdnWTJGc2JHbHVaeUJqWVd4c1ltRmphMXh1SUNBZ0tpQm1iM0lnWldGamFDQmpiMjF0Wlc1MElHNXZaR1V1WEc0Z0lDQXFYRzRnSUNBcUlFeHBhMlVnZTBCc2FXNXJJRU52Ym5SaGFXNWxjaU5sWVdOb2ZTd2dkR2hwY3lCdFpYUm9iMlFnYVhNZ2MyRm1aVnh1SUNBZ0tpQjBieUIxYzJVZ2FXWWdlVzkxSUdGeVpTQnRkWFJoZEdsdVp5QmhjbkpoZVhNZ1pIVnlhVzVuSUdsMFpYSmhkR2x2Ymk1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdGphR2xzWkVsMFpYSmhkRzl5ZlNCallXeHNZbUZqYXlCSmRHVnlZWFJ2Y2lCeVpXTmxhWFpsY3lCbFlXTm9JRzV2WkdVZ1lXNWtJR2x1WkdWNExseHVJQ0FnS2x4dUlDQWdLaUJBY21WMGRYSnVJSHRtWVd4elpYeDFibVJsWm1sdVpXUjlJRkpsZEhWeWJuTWdZR1poYkhObFlDQnBaaUJwZEdWeVlYUnBiMjRnZDJGeklHSnliMnRsTGx4dUlDQWdLbHh1SUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnS2lCeWIyOTBMbmRoYkd0RGIyMXRaVzUwY3loamIyMXRaVzUwSUQwK0lIdGNiaUFnSUNvZ0lDQmpiMjF0Wlc1MExuSmxiVzkyWlNncFhHNGdJQ0FxSUgwcFhHNGdJQ0FxTDF4dUlDQjNZV3hyUTI5dGJXVnVkSE1nS0dOaGJHeGlZV05yS1NCN1hHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWQyRnNheWdvWTJocGJHUXNJR2twSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2hqYUdsc1pDNTBlWEJsSUQwOVBTQW5ZMjl0YldWdWRDY3BJSHRjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR05oYkd4aVlXTnJLR05vYVd4a0xDQnBLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nU1c1elpYSjBjeUJ1WlhjZ2JtOWtaWE1nZEc4Z2RHaGxJR1Z1WkNCdlppQjBhR1VnWTI5dWRHRnBibVZ5TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2V5NHVMaWhPYjJSbGZHOWlhbVZqZEh4emRISnBibWQ4VG05a1pWdGRLWDBnWTJocGJHUnlaVzRnVG1WM0lHNXZaR1Z6TGx4dUlDQWdLbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdE9iMlJsZlNCVWFHbHpJRzV2WkdVZ1ptOXlJRzFsZEdodlpITWdZMmhoYVc0dVhHNGdJQ0FxWEc0Z0lDQXFJRUJsZUdGdGNHeGxYRzRnSUNBcUlHTnZibk4wSUdSbFkyd3hJRDBnY0c5emRHTnpjeTVrWldOc0tIc2djSEp2Y0RvZ0oyTnZiRzl5Snl3Z2RtRnNkV1U2SUNkaWJHRmpheWNnZlNsY2JpQWdJQ29nWTI5dWMzUWdaR1ZqYkRJZ1BTQndiM04wWTNOekxtUmxZMndvZXlCd2NtOXdPaUFuWW1GamEyZHliM1Z1WkMxamIyeHZjaWNzSUhaaGJIVmxPaUFuZDJocGRHVW5JSDBwWEc0Z0lDQXFJSEoxYkdVdVlYQndaVzVrS0dSbFkyd3hMQ0JrWldOc01pbGNiaUFnSUNwY2JpQWdJQ29nY205dmRDNWhjSEJsYm1Rb2V5QnVZVzFsT2lBblkyaGhjbk5sZENjc0lIQmhjbUZ0Y3pvZ0oxd2lWVlJHTFRoY0lpY2dmU2tnSUM4dklHRjBMWEoxYkdWY2JpQWdJQ29nY205dmRDNWhjSEJsYm1Rb2V5QnpaV3hsWTNSdmNqb2dKMkVuSUgwcElDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlCeWRXeGxYRzRnSUNBcUlISjFiR1V1WVhCd1pXNWtLSHNnY0hKdmNEb2dKMk52Ykc5eUp5d2dkbUZzZFdVNklDZGliR0ZqYXljZ2ZTa2dJQ0FnSUNBZ0x5OGdaR1ZqYkdGeVlYUnBiMjVjYmlBZ0lDb2djblZzWlM1aGNIQmxibVFvZXlCMFpYaDBPaUFuUTI5dGJXVnVkQ2NnZlNrZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUJqYjIxdFpXNTBYRzRnSUNBcVhHNGdJQ0FxSUhKdmIzUXVZWEJ3Wlc1a0tDZGhJSHQ5SnlsY2JpQWdJQ29nY205dmRDNW1hWEp6ZEM1aGNIQmxibVFvSjJOdmJHOXlPaUJpYkdGamF6c2dlaTFwYm1SbGVEb2dNU2NwWEc0Z0lDQXFMMXh1SUNCaGNIQmxibVFnS0M0dUxtTm9hV3hrY21WdUtTQjdYRzRnSUNBZ1ptOXlJQ2hzWlhRZ1kyaHBiR1FnYjJZZ1kyaHBiR1J5Wlc0cElIdGNiaUFnSUNBZ0lHeGxkQ0J1YjJSbGN5QTlJSFJvYVhNdWJtOXliV0ZzYVhwbEtHTm9hV3hrTENCMGFHbHpMbXhoYzNRcFhHNGdJQ0FnSUNCbWIzSWdLR3hsZENCdWIyUmxJRzltSUc1dlpHVnpLU0IwYUdsekxtNXZaR1Z6TG5CMWMyZ29ibTlrWlNsY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE5jYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCSmJuTmxjblJ6SUc1bGR5QnViMlJsY3lCMGJ5QjBhR1VnYzNSaGNuUWdiMllnZEdobElHTnZiblJoYVc1bGNpNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHN1TGk0b1RtOWtaWHh2WW1wbFkzUjhjM1J5YVc1bmZFNXZaR1ZiWFNsOUlHTm9hV3hrY21WdUlFNWxkeUJ1YjJSbGN5NWNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnliaUI3VG05a1pYMGdWR2hwY3lCdWIyUmxJR1p2Y2lCdFpYUm9iMlJ6SUdOb1lXbHVMbHh1SUNBZ0tseHVJQ0FnS2lCQVpYaGhiWEJzWlZ4dUlDQWdLaUJqYjI1emRDQmtaV05zTVNBOUlIQnZjM1JqYzNNdVpHVmpiQ2g3SUhCeWIzQTZJQ2RqYjJ4dmNpY3NJSFpoYkhWbE9pQW5ZbXhoWTJzbklIMHBYRzRnSUNBcUlHTnZibk4wSUdSbFkyd3lJRDBnY0c5emRHTnpjeTVrWldOc0tIc2djSEp2Y0RvZ0oySmhZMnRuY205MWJtUXRZMjlzYjNJbkxDQjJZV3gxWlRvZ0ozZG9hWFJsSnlCOUtWeHVJQ0FnS2lCeWRXeGxMbkJ5WlhCbGJtUW9aR1ZqYkRFc0lHUmxZMnd5S1Z4dUlDQWdLbHh1SUNBZ0tpQnliMjkwTG1Gd2NHVnVaQ2g3SUc1aGJXVTZJQ2RqYUdGeWMyVjBKeXdnY0dGeVlXMXpPaUFuWENKVlZFWXRPRndpSnlCOUtTQWdMeThnWVhRdGNuVnNaVnh1SUNBZ0tpQnliMjkwTG1Gd2NHVnVaQ2g3SUhObGJHVmpkRzl5T2lBbllTY2dmU2tnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJSEoxYkdWY2JpQWdJQ29nY25Wc1pTNWhjSEJsYm1Rb2V5QndjbTl3T2lBblkyOXNiM0luTENCMllXeDFaVG9nSjJKc1lXTnJKeUI5S1NBZ0lDQWdJQ0F2THlCa1pXTnNZWEpoZEdsdmJseHVJQ0FnS2lCeWRXeGxMbUZ3Y0dWdVpDaDdJSFJsZUhRNklDZERiMjF0Wlc1MEp5QjlLU0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklHTnZiVzFsYm5SY2JpQWdJQ3BjYmlBZ0lDb2djbTl2ZEM1aGNIQmxibVFvSjJFZ2UzMG5LVnh1SUNBZ0tpQnliMjkwTG1acGNuTjBMbUZ3Y0dWdVpDZ25ZMjlzYjNJNklHSnNZV05yT3lCNkxXbHVaR1Y0T2lBeEp5bGNiaUFnSUNvdlhHNGdJSEJ5WlhCbGJtUWdLQzR1TG1Ob2FXeGtjbVZ1S1NCN1hHNGdJQ0FnWTJocGJHUnlaVzRnUFNCamFHbHNaSEpsYmk1eVpYWmxjbk5sS0NsY2JpQWdJQ0JtYjNJZ0tHeGxkQ0JqYUdsc1pDQnZaaUJqYUdsc1pISmxiaWtnZTF4dUlDQWdJQ0FnYkdWMElHNXZaR1Z6SUQwZ2RHaHBjeTV1YjNKdFlXeHBlbVVvWTJocGJHUXNJSFJvYVhNdVptbHljM1FzSUNkd2NtVndaVzVrSnlrdWNtVjJaWEp6WlNncFhHNGdJQ0FnSUNCbWIzSWdLR3hsZENCdWIyUmxJRzltSUc1dlpHVnpLU0IwYUdsekxtNXZaR1Z6TG5WdWMyaHBablFvYm05a1pTbGNiaUFnSUNBZ0lHWnZjaUFvYkdWMElHbGtJR2x1SUhSb2FYTXVhVzVrWlhobGN5a2dlMXh1SUNBZ0lDQWdJQ0IwYUdsekxtbHVaR1Y0WlhOYmFXUmRJRDBnZEdocGN5NXBibVJsZUdWelcybGtYU0FySUc1dlpHVnpMbXhsYm1kMGFGeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkR2hwYzF4dUlDQjlYRzVjYmlBZ1kyeGxZVzVTWVhkeklDaHJaV1Z3UW1WMGQyVmxiaWtnZTF4dUlDQWdJSE4xY0dWeUxtTnNaV0Z1VW1GM2N5aHJaV1Z3UW1WMGQyVmxiaWxjYmlBZ0lDQnBaaUFvZEdocGN5NXViMlJsY3lrZ2UxeHVJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2JtOWtaU0J2WmlCMGFHbHpMbTV2WkdWektTQnViMlJsTG1Oc1pXRnVVbUYzY3loclpXVndRbVYwZDJWbGJpbGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dTVzV6WlhKMElHNWxkeUJ1YjJSbElHSmxabTl5WlNCdmJHUWdibTlrWlNCM2FYUm9hVzRnZEdobElHTnZiblJoYVc1bGNpNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRPYjJSbGZHNTFiV0psY24wZ1pYaHBjM1FnSUNBZ0lDQWdJQ0FnSUNBZ1EyaHBiR1FnYjNJZ1kyaHBiR1RpZ0pseklHbHVaR1Y0TGx4dUlDQWdLaUJBY0dGeVlXMGdlMDV2WkdWOGIySnFaV04wZkhOMGNtbHVaM3hPYjJSbFcxMTlJR0ZrWkNCT1pYY2dibTlrWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJpQjdUbTlrWlgwZ1ZHaHBjeUJ1YjJSbElHWnZjaUJ0WlhSb2IyUnpJR05vWVdsdUxseHVJQ0FnS2x4dUlDQWdLaUJBWlhoaGJYQnNaVnh1SUNBZ0tpQnlkV3hsTG1sdWMyVnlkRUpsWm05eVpTaGtaV05zTENCa1pXTnNMbU5zYjI1bEtIc2djSEp2Y0RvZ0p5MTNaV0pyYVhRdEp5QXJJR1JsWTJ3dWNISnZjQ0I5S1NsY2JpQWdJQ292WEc0Z0lHbHVjMlZ5ZEVKbFptOXlaU0FvWlhocGMzUXNJR0ZrWkNrZ2UxeHVJQ0FnSUdWNGFYTjBJRDBnZEdocGN5NXBibVJsZUNobGVHbHpkQ2xjYmx4dUlDQWdJR3hsZENCMGVYQmxJRDBnWlhocGMzUWdQVDA5SURBZ1B5QW5jSEpsY0dWdVpDY2dPaUJtWVd4elpWeHVJQ0FnSUd4bGRDQnViMlJsY3lBOUlIUm9hWE11Ym05eWJXRnNhWHBsS0dGa1pDd2dkR2hwY3k1dWIyUmxjMXRsZUdsemRGMHNJSFI1Y0dVcExuSmxkbVZ5YzJVb0tWeHVJQ0FnSUdadmNpQW9iR1YwSUc1dlpHVWdiMllnYm05a1pYTXBJSFJvYVhNdWJtOWtaWE11YzNCc2FXTmxLR1Y0YVhOMExDQXdMQ0J1YjJSbEtWeHVYRzRnSUNBZ2JHVjBJR2x1WkdWNFhHNGdJQ0FnWm05eUlDaHNaWFFnYVdRZ2FXNGdkR2hwY3k1cGJtUmxlR1Z6S1NCN1hHNGdJQ0FnSUNCcGJtUmxlQ0E5SUhSb2FYTXVhVzVrWlhobGMxdHBaRjFjYmlBZ0lDQWdJR2xtSUNobGVHbHpkQ0E4UFNCcGJtUmxlQ2tnZTF4dUlDQWdJQ0FnSUNCMGFHbHpMbWx1WkdWNFpYTmJhV1JkSUQwZ2FXNWtaWGdnS3lCdWIyUmxjeTVzWlc1bmRHaGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCeVpYUjFjbTRnZEdocGMxeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRWx1YzJWeWRDQnVaWGNnYm05a1pTQmhablJsY2lCdmJHUWdibTlrWlNCM2FYUm9hVzRnZEdobElHTnZiblJoYVc1bGNpNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRPYjJSbGZHNTFiV0psY24wZ1pYaHBjM1FnSUNBZ0lDQWdJQ0FnSUNBZ1EyaHBiR1FnYjNJZ1kyaHBiR1RpZ0pseklHbHVaR1Y0TGx4dUlDQWdLaUJBY0dGeVlXMGdlMDV2WkdWOGIySnFaV04wZkhOMGNtbHVaM3hPYjJSbFcxMTlJR0ZrWkNCT1pYY2dibTlrWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJpQjdUbTlrWlgwZ1ZHaHBjeUJ1YjJSbElHWnZjaUJ0WlhSb2IyUnpJR05vWVdsdUxseHVJQ0FnS2k5Y2JpQWdhVzV6WlhKMFFXWjBaWElnS0dWNGFYTjBMQ0JoWkdRcElIdGNiaUFnSUNCbGVHbHpkQ0E5SUhSb2FYTXVhVzVrWlhnb1pYaHBjM1FwWEc1Y2JpQWdJQ0JzWlhRZ2JtOWtaWE1nUFNCMGFHbHpMbTV2Y20xaGJHbDZaU2hoWkdRc0lIUm9hWE11Ym05a1pYTmJaWGhwYzNSZEtTNXlaWFpsY25ObEtDbGNiaUFnSUNCbWIzSWdLR3hsZENCdWIyUmxJRzltSUc1dlpHVnpLU0IwYUdsekxtNXZaR1Z6TG5Od2JHbGpaU2hsZUdsemRDQXJJREVzSURBc0lHNXZaR1VwWEc1Y2JpQWdJQ0JzWlhRZ2FXNWtaWGhjYmlBZ0lDQm1iM0lnS0d4bGRDQnBaQ0JwYmlCMGFHbHpMbWx1WkdWNFpYTXBJSHRjYmlBZ0lDQWdJR2x1WkdWNElEMGdkR2hwY3k1cGJtUmxlR1Z6VzJsa1hWeHVJQ0FnSUNBZ2FXWWdLR1Y0YVhOMElEd2dhVzVrWlhncElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1cGJtUmxlR1Z6VzJsa1hTQTlJR2x1WkdWNElDc2dibTlrWlhNdWJHVnVaM1JvWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE5jYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCU1pXMXZkbVZ6SUc1dlpHVWdabkp2YlNCMGFHVWdZMjl1ZEdGcGJtVnlJR0Z1WkNCamJHVmhibk1nZEdobElIQmhjbVZ1ZENCd2NtOXdaWEowYVdWelhHNGdJQ0FxSUdaeWIyMGdkR2hsSUc1dlpHVWdZVzVrSUdsMGN5QmphR2xzWkhKbGJpNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHRPYjJSbGZHNTFiV0psY24wZ1kyaHBiR1FnUTJocGJHUWdiM0lnWTJocGJHVGlnSmx6SUdsdVpHVjRMbHh1SUNBZ0tseHVJQ0FnS2lCQWNtVjBkWEp1SUh0T2IyUmxmU0JVYUdseklHNXZaR1VnWm05eUlHMWxkR2h2WkhNZ1kyaGhhVzVjYmlBZ0lDcGNiaUFnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ29nY25Wc1pTNXViMlJsY3k1c1pXNW5kR2dnSUM4dlBUNGdOVnh1SUNBZ0tpQnlkV3hsTG5KbGJXOTJaVU5vYVd4a0tHUmxZMndwWEc0Z0lDQXFJSEoxYkdVdWJtOWtaWE11YkdWdVozUm9JQ0F2THowK0lEUmNiaUFnSUNvZ1pHVmpiQzV3WVhKbGJuUWdJQ0FnSUNBZ0lDOHZQVDRnZFc1a1pXWnBibVZrWEc0Z0lDQXFMMXh1SUNCeVpXMXZkbVZEYUdsc1pDQW9ZMmhwYkdRcElIdGNiaUFnSUNCamFHbHNaQ0E5SUhSb2FYTXVhVzVrWlhnb1kyaHBiR1FwWEc0Z0lDQWdkR2hwY3k1dWIyUmxjMXRqYUdsc1pGMHVjR0Z5Wlc1MElEMGdkVzVrWldacGJtVmtYRzRnSUNBZ2RHaHBjeTV1YjJSbGN5NXpjR3hwWTJVb1kyaHBiR1FzSURFcFhHNWNiaUFnSUNCc1pYUWdhVzVrWlhoY2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwWkNCcGJpQjBhR2x6TG1sdVpHVjRaWE1wSUh0Y2JpQWdJQ0FnSUdsdVpHVjRJRDBnZEdocGN5NXBibVJsZUdWelcybGtYVnh1SUNBZ0lDQWdhV1lnS0dsdVpHVjRJRDQ5SUdOb2FXeGtLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVhVzVrWlhobGMxdHBaRjBnUFNCcGJtUmxlQ0F0SURGY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwYzF4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxiVzkyWlhNZ1lXeHNJR05vYVd4a2NtVnVJR1p5YjIwZ2RHaGxJR052Ym5SaGFXNWxjbHh1SUNBZ0tpQmhibVFnWTJ4bFlXNXpJSFJvWldseUlIQmhjbVZ1ZENCd2NtOXdaWEowYVdWekxseHVJQ0FnS2x4dUlDQWdLaUJBY21WMGRYSnVJSHRPYjJSbGZTQlVhR2x6SUc1dlpHVWdabTl5SUcxbGRHaHZaSE1nWTJoaGFXNHVYRzRnSUNBcVhHNGdJQ0FxSUVCbGVHRnRjR3hsWEc0Z0lDQXFJSEoxYkdVdWNtVnRiM1psUVd4c0tDbGNiaUFnSUNvZ2NuVnNaUzV1YjJSbGN5NXNaVzVuZEdnZ0x5ODlQaUF3WEc0Z0lDQXFMMXh1SUNCeVpXMXZkbVZCYkd3Z0tDa2dlMXh1SUNBZ0lHWnZjaUFvYkdWMElHNXZaR1VnYjJZZ2RHaHBjeTV1YjJSbGN5a2dibTlrWlM1d1lYSmxiblFnUFNCMWJtUmxabWx1WldSY2JpQWdJQ0IwYUdsekxtNXZaR1Z6SUQwZ1cxMWNiaUFnSUNCeVpYUjFjbTRnZEdocGMxeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkJoYzNObGN5QmhiR3dnWkdWamJHRnlZWFJwYjI0Z2RtRnNkV1Z6SUhkcGRHaHBiaUIwYUdVZ1kyOXVkR0ZwYm1WeUlIUm9ZWFFnYldGMFkyZ2djR0YwZEdWeWJseHVJQ0FnS2lCMGFISnZkV2RvSUdOaGJHeGlZV05yTENCeVpYQnNZV05wYm1jZ2RHaHZjMlVnZG1Gc2RXVnpJSGRwZEdnZ2RHaGxJSEpsZEhWeWJtVmtJSEpsYzNWc2RGeHVJQ0FnS2lCdlppQmpZV3hzWW1GamF5NWNiaUFnSUNwY2JpQWdJQ29nVkdocGN5QnRaWFJvYjJRZ2FYTWdkWE5sWm5Wc0lHbG1JSGx2ZFNCaGNtVWdkWE5wYm1jZ1lTQmpkWE4wYjIwZ2RXNXBkQ0J2Y2lCbWRXNWpkR2x2Ymx4dUlDQWdLaUJoYm1RZ2JtVmxaQ0IwYnlCcGRHVnlZWFJsSUhSb2NtOTFaMmdnWVd4c0lIWmhiSFZsY3k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOFVtVm5SWGh3ZlNCd1lYUjBaWEp1SUNBZ0lDQWdVbVZ3YkdGalpTQndZWFIwWlhKdUxseHVJQ0FnS2lCQWNHRnlZVzBnZTI5aWFtVmpkSDBnYjNCMGN5QWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCUGNIUnBiMjV6SUhSdklITndaV1ZrSUhWd0lIUm9aU0J6WldGeVkyZ3VYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZkhOMGNtbHVaMXRkZlNCdmNIUnpMbkJ5YjNCeklFRnVJR0Z5Y21GNUlHOW1JSEJ5YjNCbGNuUjVJRzVoYldWekxseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYjNCMGN5NW1ZWE4wSUNBZ0lDQWdJQ0FnSUNCVGRISnBibWNnZEdoaGRPS0FtWE1nZFhObFpDQjBieUJ1WVhKeWIzY2daRzkzYmx4dUlDQWdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVd4MVpYTWdZVzVrSUhOd1pXVmtJSFZ3SUhSb1pTQnlaV2RsZUhBZ2MyVmhjbU5vTGx4dUlDQWdLaUJBY0dGeVlXMGdlMloxYm1OMGFXOXVmSE4wY21sdVozMGdZMkZzYkdKaFkyc2dJQ0JUZEhKcGJtY2dkRzhnY21Wd2JHRmpaU0J3WVhSMFpYSnVJRzl5SUdOaGJHeGlZV05yWEc0Z0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvWVhRZ2NtVjBkWEp1Y3lCaElHNWxkeUIyWVd4MVpTNGdWR2hsSUdOaGJHeGlZV05yWEc0Z0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRwYkd3Z2NtVmpaV2wyWlNCMGFHVWdjMkZ0WlNCaGNtZDFiV1Z1ZEhOY2JpQWdJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhNZ2RHaHZjMlVnY0dGemMyVmtJSFJ2SUdFZ1puVnVZM1JwYjI0Z2NHRnlZVzFsZEdWeVhHNGdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUc5bUlHQlRkSEpwYm1jamNtVndiR0ZqWldBdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMDV2WkdWOUlGUm9hWE1nYm05a1pTQm1iM0lnYldWMGFHOWtjeUJqYUdGcGJpNWNiaUFnSUNwY2JpQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDb2djbTl2ZEM1eVpYQnNZV05sVm1Gc2RXVnpLQzljWEdRcmNtVnRMeXdnZXlCbVlYTjBPaUFuY21WdEp5QjlMQ0J6ZEhKcGJtY2dQVDRnZTF4dUlDQWdLaUFnSUhKbGRIVnliaUF4TlNBcUlIQmhjbk5sU1c1MEtITjBjbWx1WnlrZ0t5QW5jSGduWEc0Z0lDQXFJSDBwWEc0Z0lDQXFMMXh1SUNCeVpYQnNZV05sVm1Gc2RXVnpJQ2h3WVhSMFpYSnVMQ0J2Y0hSekxDQmpZV3hzWW1GamF5a2dlMXh1SUNBZ0lHbG1JQ2doWTJGc2JHSmhZMnNwSUh0Y2JpQWdJQ0FnSUdOaGJHeGlZV05ySUQwZ2IzQjBjMXh1SUNBZ0lDQWdiM0IwY3lBOUlIc2dmVnh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11ZDJGc2EwUmxZMnh6S0dSbFkyd2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tHOXdkSE11Y0hKdmNITWdKaVlnYjNCMGN5NXdjbTl3Y3k1cGJtUmxlRTltS0dSbFkyd3VjSEp2Y0NrZ1BUMDlJQzB4S1NCeVpYUjFjbTVjYmlBZ0lDQWdJR2xtSUNodmNIUnpMbVpoYzNRZ0ppWWdaR1ZqYkM1MllXeDFaUzVwYm1SbGVFOW1LRzl3ZEhNdVptRnpkQ2tnUFQwOUlDMHhLU0J5WlhSMWNtNWNibHh1SUNBZ0lDQWdaR1ZqYkM1MllXeDFaU0E5SUdSbFkyd3VkbUZzZFdVdWNtVndiR0ZqWlNod1lYUjBaWEp1TENCallXeHNZbUZqYXlsY2JpQWdJQ0I5S1Z4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhOY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQlNaWFIxY201eklHQjBjblZsWUNCcFppQmpZV3hzWW1GamF5QnlaWFIxY201eklHQjBjblZsWUZ4dUlDQWdLaUJtYjNJZ1lXeHNJRzltSUhSb1pTQmpiMjUwWVdsdVpYTGlnSmx6SUdOb2FXeGtjbVZ1TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyTm9hV3hrUTI5dVpHbDBhVzl1ZlNCamIyNWthWFJwYjI0Z1NYUmxjbUYwYjNJZ2NtVjBkWEp1Y3lCMGNuVmxJRzl5SUdaaGJITmxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNtVjBkWEp1SUh0aWIyOXNaV0Z1ZlNCSmN5QmxkbVZ5ZVNCamFHbHNaQ0J3WVhOeklHTnZibVJwZEdsdmJpNWNiaUFnSUNwY2JpQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDb2dZMjl1YzNRZ2JtOVFjbVZtYVhobGN5QTlJSEoxYkdVdVpYWmxjbmtvYVNBOVBpQnBMbkJ5YjNCYk1GMGdJVDA5SUNjdEp5bGNiaUFnSUNvdlhHNGdJR1YyWlhKNUlDaGpiMjVrYVhScGIyNHBJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV1YjJSbGN5NWxkbVZ5ZVNoamIyNWthWFJwYjI0cFhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVbVYwZFhKdWN5QmdkSEoxWldBZ2FXWWdZMkZzYkdKaFkyc2djbVYwZFhKdWN5QmdkSEoxWldBZ1ptOXlJQ2hoZENCc1pXRnpkQ2tnYjI1bFhHNGdJQ0FxSUc5bUlIUm9aU0JqYjI1MFlXbHVaWExpZ0pseklHTm9hV3hrY21WdUxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlMk5vYVd4a1EyOXVaR2wwYVc5dWZTQmpiMjVrYVhScGIyNGdTWFJsY21GMGIzSWdjbVYwZFhKdWN5QjBjblZsSUc5eUlHWmhiSE5sTGx4dUlDQWdLbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdGliMjlzWldGdWZTQkpjeUJ6YjIxbElHTm9hV3hrSUhCaGMzTWdZMjl1WkdsMGFXOXVMbHh1SUNBZ0tseHVJQ0FnS2lCQVpYaGhiWEJzWlZ4dUlDQWdLaUJqYjI1emRDQm9ZWE5RY21WbWFYZ2dQU0J5ZFd4bExuTnZiV1VvYVNBOVBpQnBMbkJ5YjNCYk1GMGdQVDA5SUNjdEp5bGNiaUFnSUNvdlhHNGdJSE52YldVZ0tHTnZibVJwZEdsdmJpa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbTV2WkdWekxuTnZiV1VvWTI5dVpHbDBhVzl1S1Z4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ1lTQmdZMmhwYkdSZzRvQ1pjeUJwYm1SbGVDQjNhWFJvYVc0Z2RHaGxJSHRBYkdsdWF5QkRiMjUwWVdsdVpYSWpibTlrWlhOOUlHRnljbUY1TGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwNXZaR1Y5SUdOb2FXeGtJRU5vYVd4a0lHOW1JSFJvWlNCamRYSnlaVzUwSUdOdmJuUmhhVzVsY2k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJpQjdiblZ0WW1WeWZTQkRhR2xzWkNCcGJtUmxlQzVjYmlBZ0lDcGNiaUFnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ29nY25Wc1pTNXBibVJsZUNnZ2NuVnNaUzV1YjJSbGMxc3lYU0FwSUM4dlBUNGdNbHh1SUNBZ0tpOWNiaUFnYVc1a1pYZ2dLR05vYVd4a0tTQjdYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQmphR2xzWkNBOVBUMGdKMjUxYldKbGNpY3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmphR2xzWkZ4dUlDQWdJSDFjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV1YjJSbGN5NXBibVJsZUU5bUtHTm9hV3hrS1Z4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGUm9aU0JqYjI1MFlXbHVaWExpZ0pseklHWnBjbk4wSUdOb2FXeGtMbHh1SUNBZ0tseHVJQ0FnS2lCQWRIbHdaU0I3VG05a1pYMWNiaUFnSUNwY2JpQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDb2djblZzWlM1bWFYSnpkQ0E5UFQwZ2NuVnNaWE11Ym05a1pYTmJNRjFjYmlBZ0lDb3ZYRzRnSUdkbGRDQm1hWEp6ZENBb0tTQjdYRzRnSUNBZ2FXWWdLQ0YwYUdsekxtNXZaR1Z6S1NCeVpYUjFjbTRnZFc1a1pXWnBibVZrWEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11Ym05a1pYTmJNRjFjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVWdZMjl1ZEdGcGJtVnk0b0NaY3lCc1lYTjBJR05vYVd4a0xseHVJQ0FnS2x4dUlDQWdLaUJBZEhsd1pTQjdUbTlrWlgxY2JpQWdJQ3BjYmlBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNvZ2NuVnNaUzVzWVhOMElEMDlQU0J5ZFd4bExtNXZaR1Z6VzNKMWJHVXVibTlrWlhNdWJHVnVaM1JvSUMwZ01WMWNiaUFnSUNvdlhHNGdJR2RsZENCc1lYTjBJQ2dwSUh0Y2JpQWdJQ0JwWmlBb0lYUm9hWE11Ym05a1pYTXBJSEpsZEhWeWJpQjFibVJsWm1sdVpXUmNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXViMlJsYzF0MGFHbHpMbTV2WkdWekxteGxibWQwYUNBdElERmRYRzRnSUgxY2JseHVJQ0J1YjNKdFlXeHBlbVVnS0c1dlpHVnpMQ0J6WVcxd2JHVXBJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JRzV2WkdWeklEMDlQU0FuYzNSeWFXNW5KeWtnZTF4dUlDQWdJQ0FnYkdWMElIQmhjbk5sSUQwZ2NtVnhkV2x5WlNnbkxpOXdZWEp6WlNjcFhHNGdJQ0FnSUNCdWIyUmxjeUE5SUdOc1pXRnVVMjkxY21ObEtIQmhjbk5sS0c1dlpHVnpLUzV1YjJSbGN5bGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tFRnljbUY1TG1selFYSnlZWGtvYm05a1pYTXBLU0I3WEc0Z0lDQWdJQ0J1YjJSbGN5QTlJRzV2WkdWekxuTnNhV05sS0RBcFhHNGdJQ0FnSUNCbWIzSWdLR3hsZENCcElHOW1JRzV2WkdWektTQjdYRzRnSUNBZ0lDQWdJR2xtSUNocExuQmhjbVZ1ZENrZ2FTNXdZWEpsYm5RdWNtVnRiM1psUTJocGJHUW9hU3dnSjJsbmJtOXlaU2NwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElHbG1JQ2h1YjJSbGN5NTBlWEJsSUQwOVBTQW5jbTl2ZENjcElIdGNiaUFnSUNBZ0lHNXZaR1Z6SUQwZ2JtOWtaWE11Ym05a1pYTXVjMnhwWTJVb01DbGNiaUFnSUNBZ0lHWnZjaUFvYkdWMElHa2diMllnYm05a1pYTXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHa3VjR0Z5Wlc1MEtTQnBMbkJoY21WdWRDNXlaVzF2ZG1WRGFHbHNaQ2hwTENBbmFXZHViM0psSnlsY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0c1dlpHVnpMblI1Y0dVcElIdGNiaUFnSUNBZ0lHNXZaR1Z6SUQwZ1cyNXZaR1Z6WFZ4dUlDQWdJSDBnWld4elpTQnBaaUFvYm05a1pYTXVjSEp2Y0NrZ2UxeHVJQ0FnSUNBZ2FXWWdLSFI1Y0dWdlppQnViMlJsY3k1MllXeDFaU0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLQ2RXWVd4MVpTQm1hV1ZzWkNCcGN5QnRhWE56WldRZ2FXNGdibTlrWlNCamNtVmhkR2x2YmljcFhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUjVjR1Z2WmlCdWIyUmxjeTUyWVd4MVpTQWhQVDBnSjNOMGNtbHVaeWNwSUh0Y2JpQWdJQ0FnSUNBZ2JtOWtaWE11ZG1Gc2RXVWdQU0JUZEhKcGJtY29ibTlrWlhNdWRtRnNkV1VwWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdJQ0J1YjJSbGN5QTlJRnR1WlhjZ1JHVmpiR0Z5WVhScGIyNG9ibTlrWlhNcFhWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JtOWtaWE11YzJWc1pXTjBiM0lwSUh0Y2JpQWdJQ0FnSUd4bGRDQlNkV3hsSUQwZ2NtVnhkV2x5WlNnbkxpOXlkV3hsSnlsY2JpQWdJQ0FnSUc1dlpHVnpJRDBnVzI1bGR5QlNkV3hsS0c1dlpHVnpLVjFjYmlBZ0lDQjlJR1ZzYzJVZ2FXWWdLRzV2WkdWekxtNWhiV1VwSUh0Y2JpQWdJQ0FnSUd4bGRDQkJkRkoxYkdVZ1BTQnlaWEYxYVhKbEtDY3VMMkYwTFhKMWJHVW5LVnh1SUNBZ0lDQWdibTlrWlhNZ1BTQmJibVYzSUVGMFVuVnNaU2h1YjJSbGN5bGRYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaHViMlJsY3k1MFpYaDBLU0I3WEc0Z0lDQWdJQ0J1YjJSbGN5QTlJRnR1WlhjZ1EyOXRiV1Z1ZENodWIyUmxjeWxkWEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblZXNXJibTkzYmlCdWIyUmxJSFI1Y0dVZ2FXNGdibTlrWlNCamNtVmhkR2x2YmljcFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYkdWMElIQnliMk5sYzNObFpDQTlJRzV2WkdWekxtMWhjQ2hwSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2hwTG5CaGNtVnVkQ2tnYVM1d1lYSmxiblF1Y21WdGIzWmxRMmhwYkdRb2FTbGNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdhUzV5WVhkekxtSmxabTl5WlNBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLSE5oYlhCc1pTQW1KaUIwZVhCbGIyWWdjMkZ0Y0d4bExuSmhkM011WW1WbWIzSmxJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdrdWNtRjNjeTVpWldadmNtVWdQU0J6WVcxd2JHVXVjbUYzY3k1aVpXWnZjbVV1Y21Wd2JHRmpaU2d2VzE1Y1hITmRMMmNzSUNjbktWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ0lDQnBMbkJoY21WdWRDQTlJSFJvYVhOY2JpQWdJQ0FnSUhKbGRIVnliaUJwWEc0Z0lDQWdmU2xjYmx4dUlDQWdJSEpsZEhWeWJpQndjbTlqWlhOelpXUmNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJBYldWdFltVnliMllnUTI5dWRHRnBibVZ5STF4dUlDQWdLaUJBYldWdFltVnlJSHRPYjJSbFcxMTlJRzV2WkdWeklFRnVJR0Z5Y21GNUlHTnZiblJoYVc1cGJtY2dkR2hsSUdOdmJuUmhhVzVsY3VLQW1YTWdZMmhwYkdSeVpXNHVYRzRnSUNBcVhHNGdJQ0FxSUVCbGVHRnRjR3hsWEc0Z0lDQXFJR052Ym5OMElISnZiM1FnUFNCd2IzTjBZM056TG5CaGNuTmxLQ2RoSUhzZ1kyOXNiM0k2SUdKc1lXTnJJSDBuS1Z4dUlDQWdLaUJ5YjI5MExtNXZaR1Z6TG14bGJtZDBhQ0FnSUNBZ0lDQWdJQ0FnTHk4OVBpQXhYRzRnSUNBcUlISnZiM1F1Ym05a1pYTmJNRjB1YzJWc1pXTjBiM0lnSUNBZ0lDQXZMejArSUNkaEoxeHVJQ0FnS2lCeWIyOTBMbTV2WkdWeld6QmRMbTV2WkdWeld6QmRMbkJ5YjNBZ0x5ODlQaUFuWTI5c2IzSW5YRzRnSUNBcUwxeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JEYjI1MFlXbHVaWEpjYmx4dUx5b3FYRzRnS2lCQVkyRnNiR0poWTJzZ1kyaHBiR1JEYjI1a2FYUnBiMjVjYmlBcUlFQndZWEpoYlNCN1RtOWtaWDBnYm05a1pTQWdJQ0JEYjI1MFlXbHVaWElnWTJocGJHUXVYRzRnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnYVc1a1pYZ2dRMmhwYkdRZ2FXNWtaWGd1WEc0Z0tpQkFjR0Z5WVcwZ2UwNXZaR1ZiWFgwZ2JtOWtaWE1nUVd4c0lHTnZiblJoYVc1bGNpQmphR2xzWkhKbGJpNWNiaUFxSUVCeVpYUjFjbTRnZTJKdmIyeGxZVzU5WEc0Z0tpOWNibHh1THlvcVhHNGdLaUJBWTJGc2JHSmhZMnNnWTJocGJHUkpkR1Z5WVhSdmNseHVJQ29nUUhCaGNtRnRJSHRPYjJSbGZTQnViMlJsSUNBZ0lFTnZiblJoYVc1bGNpQmphR2xzWkM1Y2JpQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQnBibVJsZUNCRGFHbHNaQ0JwYm1SbGVDNWNiaUFxSUVCeVpYUjFjbTRnZTJaaGJITmxmSFZ1WkdWbWFXNWxaSDBnVW1WMGRYSnVhVzVuSUdCbVlXeHpaV0FnZDJsc2JDQmljbVZoYXlCcGRHVnlZWFJwYjI0dVhHNGdLaTljYmlKZExDSm1hV3hsSWpvaVkyOXVkR0ZwYm1WeUxtcHpJbjA9XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9jb250YWluZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NvbnRhaW5lclwiKSk7XG5cbnZhciBfbGlzdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vbGlzdFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7IHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzOyBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIENTUyBydWxlOiBhIHNlbGVjdG9yIGZvbGxvd2VkIGJ5IGEgZGVjbGFyYXRpb24gYmxvY2suXG4gKlxuICogQGV4dGVuZHMgQ29udGFpbmVyXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHJvb3QgPSBwb3N0Y3NzLnBhcnNlKCdhe30nKVxuICogY29uc3QgcnVsZSA9IHJvb3QuZmlyc3RcbiAqIHJ1bGUudHlwZSAgICAgICAvLz0+ICdydWxlJ1xuICogcnVsZS50b1N0cmluZygpIC8vPT4gJ2F7fSdcbiAqL1xudmFyIFJ1bGUgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db250YWluZXIpIHtcbiAgX2luaGVyaXRzTG9vc2UoUnVsZSwgX0NvbnRhaW5lcik7XG5cbiAgZnVuY3Rpb24gUnVsZShkZWZhdWx0cykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbnRhaW5lci5jYWxsKHRoaXMsIGRlZmF1bHRzKSB8fCB0aGlzO1xuICAgIF90aGlzLnR5cGUgPSAncnVsZSc7XG4gICAgaWYgKCFfdGhpcy5ub2RlcykgX3RoaXMubm9kZXMgPSBbXTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cbiAgLyoqXG4gICAqIEFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIHJ1bGXigJlzIGluZGl2aWR1YWwgc2VsZWN0b3JzLlxuICAgKiBHcm91cHMgb2Ygc2VsZWN0b3JzIGFyZSBzcGxpdCBhdCBjb21tYXMuXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmdbXX1cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoJ2EsIGIgeyB9JylcbiAgICogY29uc3QgcnVsZSA9IHJvb3QuZmlyc3RcbiAgICpcbiAgICogcnVsZS5zZWxlY3RvciAgLy89PiAnYSwgYidcbiAgICogcnVsZS5zZWxlY3RvcnMgLy89PiBbJ2EnLCAnYiddXG4gICAqXG4gICAqIHJ1bGUuc2VsZWN0b3JzID0gWydhJywgJ3N0cm9uZyddXG4gICAqIHJ1bGUuc2VsZWN0b3IgLy89PiAnYSwgc3Ryb25nJ1xuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhSdWxlLCBbe1xuICAgIGtleTogXCJzZWxlY3RvcnNcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiBfbGlzdC5kZWZhdWx0LmNvbW1hKHRoaXMuc2VsZWN0b3IpO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWVzKSB7XG4gICAgICB2YXIgbWF0Y2ggPSB0aGlzLnNlbGVjdG9yID8gdGhpcy5zZWxlY3Rvci5tYXRjaCgvLFxccyovKSA6IG51bGw7XG4gICAgICB2YXIgc2VwID0gbWF0Y2ggPyBtYXRjaFswXSA6ICcsJyArIHRoaXMucmF3KCdiZXR3ZWVuJywgJ2JlZm9yZU9wZW4nKTtcbiAgICAgIHRoaXMuc2VsZWN0b3IgPSB2YWx1ZXMuam9pbihzZXApO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAbWVtYmVyb2YgUnVsZSNcbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IHNlbGVjdG9yIFRoZSBydWxl4oCZcyBmdWxsIHNlbGVjdG9yIHJlcHJlc2VudGVkXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICBhcyBhIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoJ2EsIGIgeyB9JylcbiAgICAgKiBjb25zdCBydWxlID0gcm9vdC5maXJzdFxuICAgICAqIHJ1bGUuc2VsZWN0b3IgLy89PiAnYSwgYidcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBSdWxlI1xuICAgICAqIEBtZW1iZXIge29iamVjdH0gcmF3cyBJbmZvcm1hdGlvbiB0byBnZW5lcmF0ZSBieXRlLXRvLWJ5dGUgZXF1YWxcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgbm9kZSBzdHJpbmcgYXMgaXQgd2FzIGluIHRoZSBvcmlnaW4gaW5wdXQuXG4gICAgICpcbiAgICAgKiBFdmVyeSBwYXJzZXIgc2F2ZXMgaXRzIG93biBwcm9wZXJ0aWVzLFxuICAgICAqIGJ1dCB0aGUgZGVmYXVsdCBDU1MgcGFyc2VyIHVzZXM6XG4gICAgICpcbiAgICAgKiAqIGBiZWZvcmVgOiB0aGUgc3BhY2Ugc3ltYm9scyBiZWZvcmUgdGhlIG5vZGUuIEl0IGFsc28gc3RvcmVzIGAqYFxuICAgICAqICAgYW5kIGBfYCBzeW1ib2xzIGJlZm9yZSB0aGUgZGVjbGFyYXRpb24gKElFIGhhY2spLlxuICAgICAqICogYGFmdGVyYDogdGhlIHNwYWNlIHN5bWJvbHMgYWZ0ZXIgdGhlIGxhc3QgY2hpbGQgb2YgdGhlIG5vZGVcbiAgICAgKiAgIHRvIHRoZSBlbmQgb2YgdGhlIG5vZGUuXG4gICAgICogKiBgYmV0d2VlbmA6IHRoZSBzeW1ib2xzIGJldHdlZW4gdGhlIHByb3BlcnR5IGFuZCB2YWx1ZVxuICAgICAqICAgZm9yIGRlY2xhcmF0aW9ucywgc2VsZWN0b3IgYW5kIGB7YCBmb3IgcnVsZXMsIG9yIGxhc3QgcGFyYW1ldGVyXG4gICAgICogICBhbmQgYHtgIGZvciBhdC1ydWxlcy5cbiAgICAgKiAqIGBzZW1pY29sb25gOiBjb250YWlucyBgdHJ1ZWAgaWYgdGhlIGxhc3QgY2hpbGQgaGFzXG4gICAgICogICBhbiAob3B0aW9uYWwpIHNlbWljb2xvbi5cbiAgICAgKiAqIGBvd25TZW1pY29sb25gOiBjb250YWlucyBgdHJ1ZWAgaWYgdGhlcmUgaXMgc2VtaWNvbG9uIGFmdGVyIHJ1bGUuXG4gICAgICpcbiAgICAgKiBQb3N0Q1NTIGNsZWFucyBzZWxlY3RvcnMgZnJvbSBjb21tZW50cyBhbmQgZXh0cmEgc3BhY2VzLFxuICAgICAqIGJ1dCBpdCBzdG9yZXMgb3JpZ2luIGNvbnRlbnQgaW4gcmF3cyBwcm9wZXJ0aWVzLlxuICAgICAqIEFzIHN1Y2gsIGlmIHlvdSBkb27igJl0IGNoYW5nZSBhIGRlY2xhcmF0aW9u4oCZcyB2YWx1ZSxcbiAgICAgKiBQb3N0Q1NTIHdpbGwgdXNlIHRoZSByYXcgdmFsdWUgd2l0aCBjb21tZW50cy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoJ2Ege1xcbiAgY29sb3I6YmxhY2tcXG59JylcbiAgICAgKiByb290LmZpcnN0LmZpcnN0LnJhd3MgLy89PiB7IGJlZm9yZTogJycsIGJldHdlZW46ICcgJywgYWZ0ZXI6ICdcXG4nIH1cbiAgICAgKi9cblxuICB9XSk7XG5cbiAgcmV0dXJuIFJ1bGU7XG59KF9jb250YWluZXIuZGVmYXVsdCk7XG5cbnZhciBfZGVmYXVsdCA9IFJ1bGU7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbkoxYkdVdVpYTTJJbDBzSW01aGJXVnpJanBiSWxKMWJHVWlMQ0prWldaaGRXeDBjeUlzSW5SNWNHVWlMQ0p1YjJSbGN5SXNJbXhwYzNRaUxDSmpiMjF0WVNJc0luTmxiR1ZqZEc5eUlpd2lkbUZzZFdWeklpd2liV0YwWTJnaUxDSnpaWEFpTENKeVlYY2lMQ0pxYjJsdUlpd2lRMjl1ZEdGcGJtVnlJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenRCUVVGQk96dEJRVU5CT3pzN096czdPenM3TzBGQlJVRTdPenM3T3pzN096czdPMGxCVjAxQkxFazdPenM3TzBGQlEwb3NaMEpCUVdGRExGRkJRV0lzUlVGQmRVSTdRVUZCUVRzN1FVRkRja0lzYTBOQlFVMUJMRkZCUVU0N1FVRkRRU3hWUVVGTFF5eEpRVUZNTEVkQlFWa3NUVUZCV2p0QlFVTkJMRkZCUVVrc1EwRkJReXhOUVVGTFF5eExRVUZXTEVWQlFXbENMRTFCUVV0QkxFdEJRVXdzUjBGQllTeEZRVUZpTzBGQlNFazdRVUZKZEVJN1FVRkZSRHM3T3pzN096czdPenM3T3pzN096czdPenM3ZDBKQlowSnBRanRCUVVObUxHRkJRVTlETEdOQlFVdERMRXRCUVV3c1EwRkJWeXhMUVVGTFF5eFJRVUZvUWl4RFFVRlFPMEZCUTBRc1N6dHpRa0ZGWTBNc1RTeEZRVUZSTzBGQlEzSkNMRlZCUVVsRExFdEJRVXNzUjBGQlJ5eExRVUZMUml4UlFVRk1MRWRCUVdkQ0xFdEJRVXRCTEZGQlFVd3NRMEZCWTBVc1MwRkJaQ3hEUVVGdlFpeE5RVUZ3UWl4RFFVRm9RaXhIUVVFNFF5eEpRVUV4UkR0QlFVTkJMRlZCUVVsRExFZEJRVWNzUjBGQlIwUXNTMEZCU3l4SFFVRkhRU3hMUVVGTExFTkJRVU1zUTBGQlJDeERRVUZTTEVkQlFXTXNUVUZCVFN4TFFVRkxSU3hIUVVGTUxFTkJRVk1zVTBGQlZDeEZRVUZ2UWl4WlFVRndRaXhEUVVGdVF6dEJRVU5CTEZkQlFVdEtMRkZCUVV3c1IwRkJaMEpETEUxQlFVMHNRMEZCUTBrc1NVRkJVQ3hEUVVGWlJpeEhRVUZhTEVOQlFXaENPMEZCUTBRN1FVRkZSRHM3T3pzN096czdPenM3UVVGWFFUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UlVFMVEybENSeXhyUWpzN1pVRXdSVXBhTEVraUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ1EyOXVkR0ZwYm1WeUlHWnliMjBnSnk0dlkyOXVkR0ZwYm1WeUoxeHVhVzF3YjNKMElHeHBjM1FnWm5KdmJTQW5MaTlzYVhOMEoxeHVYRzR2S2lwY2JpQXFJRkpsY0hKbGMyVnVkSE1nWVNCRFUxTWdjblZzWlRvZ1lTQnpaV3hsWTNSdmNpQm1iMnhzYjNkbFpDQmllU0JoSUdSbFkyeGhjbUYwYVc5dUlHSnNiMk5yTGx4dUlDcGNiaUFxSUVCbGVIUmxibVJ6SUVOdmJuUmhhVzVsY2x4dUlDcGNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tpQmpiMjV6ZENCeWIyOTBJRDBnY0c5emRHTnpjeTV3WVhKelpTZ25ZWHQ5SnlsY2JpQXFJR052Ym5OMElISjFiR1VnUFNCeWIyOTBMbVpwY25OMFhHNGdLaUJ5ZFd4bExuUjVjR1VnSUNBZ0lDQWdMeTg5UGlBbmNuVnNaU2RjYmlBcUlISjFiR1V1ZEc5VGRISnBibWNvS1NBdkx6MCtJQ2RoZTMwblhHNGdLaTljYm1Oc1lYTnpJRkoxYkdVZ1pYaDBaVzVrY3lCRGIyNTBZV2x1WlhJZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lBb1pHVm1ZWFZzZEhNcElIdGNiaUFnSUNCemRYQmxjaWhrWldaaGRXeDBjeWxjYmlBZ0lDQjBhR2x6TG5SNWNHVWdQU0FuY25Wc1pTZGNiaUFnSUNCcFppQW9JWFJvYVhNdWJtOWtaWE1wSUhSb2FYTXVibTlrWlhNZ1BTQmJYVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVGdUlHRnljbUY1SUdOdmJuUmhhVzVwYm1jZ2RHaGxJSEoxYkdYaWdKbHpJR2x1WkdsMmFXUjFZV3dnYzJWc1pXTjBiM0p6TGx4dUlDQWdLaUJIY205MWNITWdiMllnYzJWc1pXTjBiM0p6SUdGeVpTQnpjR3hwZENCaGRDQmpiMjF0WVhNdVhHNGdJQ0FxWEc0Z0lDQXFJRUIwZVhCbElIdHpkSEpwYm1kYlhYMWNiaUFnSUNwY2JpQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDb2dZMjl1YzNRZ2NtOXZkQ0E5SUhCdmMzUmpjM011Y0dGeWMyVW9KMkVzSUdJZ2V5QjlKeWxjYmlBZ0lDb2dZMjl1YzNRZ2NuVnNaU0E5SUhKdmIzUXVabWx5YzNSY2JpQWdJQ3BjYmlBZ0lDb2djblZzWlM1elpXeGxZM1J2Y2lBZ0x5ODlQaUFuWVN3Z1lpZGNiaUFnSUNvZ2NuVnNaUzV6Wld4bFkzUnZjbk1nTHk4OVBpQmJKMkVuTENBbllpZGRYRzRnSUNBcVhHNGdJQ0FxSUhKMWJHVXVjMlZzWldOMGIzSnpJRDBnV3lkaEp5d2dKM04wY205dVp5ZGRYRzRnSUNBcUlISjFiR1V1YzJWc1pXTjBiM0lnTHk4OVBpQW5ZU3dnYzNSeWIyNW5KMXh1SUNBZ0tpOWNiaUFnWjJWMElITmxiR1ZqZEc5eWN5QW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlHeHBjM1F1WTI5dGJXRW9kR2hwY3k1elpXeGxZM1J2Y2lsY2JpQWdmVnh1WEc0Z0lITmxkQ0J6Wld4bFkzUnZjbk1nS0haaGJIVmxjeWtnZTF4dUlDQWdJR3hsZENCdFlYUmphQ0E5SUhSb2FYTXVjMlZzWldOMGIzSWdQeUIwYUdsekxuTmxiR1ZqZEc5eUxtMWhkR05vS0M4c1hGeHpLaThwSURvZ2JuVnNiRnh1SUNBZ0lHeGxkQ0J6WlhBZ1BTQnRZWFJqYUNBL0lHMWhkR05vV3pCZElEb2dKeXduSUNzZ2RHaHBjeTV5WVhjb0oySmxkSGRsWlc0bkxDQW5ZbVZtYjNKbFQzQmxiaWNwWEc0Z0lDQWdkR2hwY3k1elpXeGxZM1J2Y2lBOUlIWmhiSFZsY3k1cWIybHVLSE5sY0NsY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkFiV1Z0WW1WeWIyWWdVblZzWlNOY2JpQWdJQ29nUUcxbGJXSmxjaUI3YzNSeWFXNW5mU0J6Wld4bFkzUnZjaUJVYUdVZ2NuVnNaZUtBbVhNZ1puVnNiQ0J6Wld4bFkzUnZjaUJ5WlhCeVpYTmxiblJsWkZ4dUlDQWdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0Z6SUdFZ2MzUnlhVzVuTGx4dUlDQWdLbHh1SUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnS2lCamIyNXpkQ0J5YjI5MElEMGdjRzl6ZEdOemN5NXdZWEp6WlNnbllTd2dZaUI3SUgwbktWeHVJQ0FnS2lCamIyNXpkQ0J5ZFd4bElEMGdjbTl2ZEM1bWFYSnpkRnh1SUNBZ0tpQnlkV3hsTG5ObGJHVmpkRzl5SUM4dlBUNGdKMkVzSUdJblhHNGdJQ0FxTDF4dVhHNGdJQzhxS2x4dUlDQWdLaUJBYldWdFltVnliMllnVW5Wc1pTTmNiaUFnSUNvZ1FHMWxiV0psY2lCN2IySnFaV04wZlNCeVlYZHpJRWx1Wm05eWJXRjBhVzl1SUhSdklHZGxibVZ5WVhSbElHSjVkR1V0ZEc4dFlubDBaU0JsY1hWaGJGeHVJQ0FnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibTlrWlNCemRISnBibWNnWVhNZ2FYUWdkMkZ6SUdsdUlIUm9aU0J2Y21sbmFXNGdhVzV3ZFhRdVhHNGdJQ0FxWEc0Z0lDQXFJRVYyWlhKNUlIQmhjbk5sY2lCellYWmxjeUJwZEhNZ2IzZHVJSEJ5YjNCbGNuUnBaWE1zWEc0Z0lDQXFJR0oxZENCMGFHVWdaR1ZtWVhWc2RDQkRVMU1nY0dGeWMyVnlJSFZ6WlhNNlhHNGdJQ0FxWEc0Z0lDQXFJQ29nWUdKbFptOXlaV0E2SUhSb1pTQnpjR0ZqWlNCemVXMWliMnh6SUdKbFptOXlaU0IwYUdVZ2JtOWtaUzRnU1hRZ1lXeHpieUJ6ZEc5eVpYTWdZQ3BnWEc0Z0lDQXFJQ0FnWVc1a0lHQmZZQ0J6ZVcxaWIyeHpJR0psWm05eVpTQjBhR1VnWkdWamJHRnlZWFJwYjI0Z0tFbEZJR2hoWTJzcExseHVJQ0FnS2lBcUlHQmhablJsY21BNklIUm9aU0J6Y0dGalpTQnplVzFpYjJ4eklHRm1kR1Z5SUhSb1pTQnNZWE4wSUdOb2FXeGtJRzltSUhSb1pTQnViMlJsWEc0Z0lDQXFJQ0FnZEc4Z2RHaGxJR1Z1WkNCdlppQjBhR1VnYm05a1pTNWNiaUFnSUNvZ0tpQmdZbVYwZDJWbGJtQTZJSFJvWlNCemVXMWliMnh6SUdKbGRIZGxaVzRnZEdobElIQnliM0JsY25SNUlHRnVaQ0IyWVd4MVpWeHVJQ0FnS2lBZ0lHWnZjaUJrWldOc1lYSmhkR2x2Ym5Nc0lITmxiR1ZqZEc5eUlHRnVaQ0JnZTJBZ1ptOXlJSEoxYkdWekxDQnZjaUJzWVhOMElIQmhjbUZ0WlhSbGNseHVJQ0FnS2lBZ0lHRnVaQ0JnZTJBZ1ptOXlJR0YwTFhKMWJHVnpMbHh1SUNBZ0tpQXFJR0J6WlcxcFkyOXNiMjVnT2lCamIyNTBZV2x1Y3lCZ2RISjFaV0FnYVdZZ2RHaGxJR3hoYzNRZ1kyaHBiR1FnYUdGelhHNGdJQ0FxSUNBZ1lXNGdLRzl3ZEdsdmJtRnNLU0J6WlcxcFkyOXNiMjR1WEc0Z0lDQXFJQ29nWUc5M2JsTmxiV2xqYjJ4dmJtQTZJR052Ym5SaGFXNXpJR0IwY25WbFlDQnBaaUIwYUdWeVpTQnBjeUJ6WlcxcFkyOXNiMjRnWVdaMFpYSWdjblZzWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dVRzl6ZEVOVFV5QmpiR1ZoYm5NZ2MyVnNaV04wYjNKeklHWnliMjBnWTI5dGJXVnVkSE1nWVc1a0lHVjRkSEpoSUhOd1lXTmxjeXhjYmlBZ0lDb2dZblYwSUdsMElITjBiM0psY3lCdmNtbG5hVzRnWTI5dWRHVnVkQ0JwYmlCeVlYZHpJSEJ5YjNCbGNuUnBaWE11WEc0Z0lDQXFJRUZ6SUhOMVkyZ3NJR2xtSUhsdmRTQmtiMjdpZ0psMElHTm9ZVzVuWlNCaElHUmxZMnhoY21GMGFXOXU0b0NaY3lCMllXeDFaU3hjYmlBZ0lDb2dVRzl6ZEVOVFV5QjNhV3hzSUhWelpTQjBhR1VnY21GM0lIWmhiSFZsSUhkcGRHZ2dZMjl0YldWdWRITXVYRzRnSUNBcVhHNGdJQ0FxSUVCbGVHRnRjR3hsWEc0Z0lDQXFJR052Ym5OMElISnZiM1FnUFNCd2IzTjBZM056TG5CaGNuTmxLQ2RoSUh0Y1hHNGdJR052Ykc5eU9tSnNZV05yWEZ4dWZTY3BYRzRnSUNBcUlISnZiM1F1Wm1seWMzUXVabWx5YzNRdWNtRjNjeUF2THowK0lIc2dZbVZtYjNKbE9pQW5KeXdnWW1WMGQyVmxiam9nSnlBbkxDQmhablJsY2pvZ0oxeGNiaWNnZlZ4dUlDQWdLaTljYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1VuVnNaVnh1SWwwc0ltWnBiR1VpT2lKeWRXeGxMbXB6SW4wPVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG52YXIgcHJvY2VzcyA9IG1vZHVsZS5leHBvcnRzID0ge307XG5cbi8vIGNhY2hlZCBmcm9tIHdoYXRldmVyIGdsb2JhbCBpcyBwcmVzZW50IHNvIHRoYXQgdGVzdCBydW5uZXJzIHRoYXQgc3R1YiBpdFxuLy8gZG9uJ3QgYnJlYWsgdGhpbmdzLiAgQnV0IHdlIG5lZWQgdG8gd3JhcCBpdCBpbiBhIHRyeSBjYXRjaCBpbiBjYXNlIGl0IGlzXG4vLyB3cmFwcGVkIGluIHN0cmljdCBtb2RlIGNvZGUgd2hpY2ggZG9lc24ndCBkZWZpbmUgYW55IGdsb2JhbHMuICBJdCdzIGluc2lkZSBhXG4vLyBmdW5jdGlvbiBiZWNhdXNlIHRyeS9jYXRjaGVzIGRlb3B0aW1pemUgaW4gY2VydGFpbiBlbmdpbmVzLlxuXG52YXIgY2FjaGVkU2V0VGltZW91dDtcbnZhciBjYWNoZWRDbGVhclRpbWVvdXQ7XG5cbmZ1bmN0aW9uIGRlZmF1bHRTZXRUaW1vdXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdzZXRUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG5mdW5jdGlvbiBkZWZhdWx0Q2xlYXJUaW1lb3V0ICgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NsZWFyVGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuKGZ1bmN0aW9uICgpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbiAgICB9XG59ICgpKVxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuXG5wcm9jZXNzLm5leHRUaWNrID0gZnVuY3Rpb24gKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59O1xuXG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xucHJvY2Vzcy50aXRsZSA9ICdicm93c2VyJztcbnByb2Nlc3MuYnJvd3NlciA9IHRydWU7XG5wcm9jZXNzLmVudiA9IHt9O1xucHJvY2Vzcy5hcmd2ID0gW107XG5wcm9jZXNzLnZlcnNpb24gPSAnJzsgLy8gZW1wdHkgc3RyaW5nIHRvIGF2b2lkIHJlZ2V4cCBpc3N1ZXNcbnByb2Nlc3MudmVyc2lvbnMgPSB7fTtcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnByb2Nlc3Mub24gPSBub29wO1xucHJvY2Vzcy5hZGRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLm9uY2UgPSBub29wO1xucHJvY2Vzcy5vZmYgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUFsbExpc3RlbmVycyA9IG5vb3A7XG5wcm9jZXNzLmVtaXQgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5wcmVwZW5kT25jZUxpc3RlbmVyID0gbm9vcDtcblxucHJvY2Vzcy5saXN0ZW5lcnMgPSBmdW5jdGlvbiAobmFtZSkgeyByZXR1cm4gW10gfVxuXG5wcm9jZXNzLmJpbmRpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5cbnByb2Nlc3MuY3dkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gJy8nIH07XG5wcm9jZXNzLmNoZGlyID0gZnVuY3Rpb24gKGRpcikge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5jaGRpciBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xucHJvY2Vzcy51bWFzayA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3N1cHBvcnRzQ29sb3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJzdXBwb3J0cy1jb2xvclwiKSk7XG5cbnZhciBfY2hhbGsgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjaGFsa1wiKSk7XG5cbnZhciBfdGVybWluYWxIaWdobGlnaHQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Rlcm1pbmFsLWhpZ2hsaWdodFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZikgeyBpZiAoc2VsZiA9PT0gdm9pZCAwKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykgeyB2YXIgX2NhY2hlID0gdHlwZW9mIE1hcCA9PT0gXCJmdW5jdGlvblwiID8gbmV3IE1hcCgpIDogdW5kZWZpbmVkOyBfd3JhcE5hdGl2ZVN1cGVyID0gZnVuY3Rpb24gX3dyYXBOYXRpdmVTdXBlcihDbGFzcykgeyBpZiAoQ2xhc3MgPT09IG51bGwgfHwgIV9pc05hdGl2ZUZ1bmN0aW9uKENsYXNzKSkgcmV0dXJuIENsYXNzOyBpZiAodHlwZW9mIENsYXNzICE9PSBcImZ1bmN0aW9uXCIpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uXCIpOyB9IGlmICh0eXBlb2YgX2NhY2hlICE9PSBcInVuZGVmaW5lZFwiKSB7IGlmIChfY2FjaGUuaGFzKENsYXNzKSkgcmV0dXJuIF9jYWNoZS5nZXQoQ2xhc3MpOyBfY2FjaGUuc2V0KENsYXNzLCBXcmFwcGVyKTsgfSBmdW5jdGlvbiBXcmFwcGVyKCkgeyByZXR1cm4gX2NvbnN0cnVjdChDbGFzcywgYXJndW1lbnRzLCBfZ2V0UHJvdG90eXBlT2YodGhpcykuY29uc3RydWN0b3IpOyB9IFdyYXBwZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IFdyYXBwZXIsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IHJldHVybiBfc2V0UHJvdG90eXBlT2YoV3JhcHBlciwgQ2xhc3MpOyB9OyByZXR1cm4gX3dyYXBOYXRpdmVTdXBlcihDbGFzcyk7IH1cblxuZnVuY3Rpb24gaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkgeyBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgfHwgIVJlZmxlY3QuY29uc3RydWN0KSByZXR1cm4gZmFsc2U7IGlmIChSZWZsZWN0LmNvbnN0cnVjdC5zaGFtKSByZXR1cm4gZmFsc2U7IGlmICh0eXBlb2YgUHJveHkgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIHRydWU7IHRyeSB7IERhdGUucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoUmVmbGVjdC5jb25zdHJ1Y3QoRGF0ZSwgW10sIGZ1bmN0aW9uICgpIHt9KSk7IHJldHVybiB0cnVlOyB9IGNhdGNoIChlKSB7IHJldHVybiBmYWxzZTsgfSB9XG5cbmZ1bmN0aW9uIF9jb25zdHJ1Y3QoUGFyZW50LCBhcmdzLCBDbGFzcykgeyBpZiAoaXNOYXRpdmVSZWZsZWN0Q29uc3RydWN0KCkpIHsgX2NvbnN0cnVjdCA9IFJlZmxlY3QuY29uc3RydWN0OyB9IGVsc2UgeyBfY29uc3RydWN0ID0gZnVuY3Rpb24gX2NvbnN0cnVjdChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7IHZhciBhID0gW251bGxdOyBhLnB1c2guYXBwbHkoYSwgYXJncyk7IHZhciBDb25zdHJ1Y3RvciA9IEZ1bmN0aW9uLmJpbmQuYXBwbHkoUGFyZW50LCBhKTsgdmFyIGluc3RhbmNlID0gbmV3IENvbnN0cnVjdG9yKCk7IGlmIChDbGFzcykgX3NldFByb3RvdHlwZU9mKGluc3RhbmNlLCBDbGFzcy5wcm90b3R5cGUpOyByZXR1cm4gaW5zdGFuY2U7IH07IH0gcmV0dXJuIF9jb25zdHJ1Y3QuYXBwbHkobnVsbCwgYXJndW1lbnRzKTsgfVxuXG5mdW5jdGlvbiBfaXNOYXRpdmVGdW5jdGlvbihmbikgeyByZXR1cm4gRnVuY3Rpb24udG9TdHJpbmcuY2FsbChmbikuaW5kZXhPZihcIltuYXRpdmUgY29kZV1cIikgIT09IC0xOyB9XG5cbmZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBvLl9fcHJvdG9fXyA9IHA7IHJldHVybiBvOyB9OyByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApOyB9XG5cbmZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IF9nZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5nZXRQcm90b3R5cGVPZiA6IGZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7IHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7IH07IHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7IH1cblxuLyoqXG4gKiBUaGUgQ1NTIHBhcnNlciB0aHJvd3MgdGhpcyBlcnJvciBmb3IgYnJva2VuIENTUy5cbiAqXG4gKiBDdXN0b20gcGFyc2VycyBjYW4gdGhyb3cgdGhpcyBlcnJvciBmb3IgYnJva2VuIGN1c3RvbSBzeW50YXggdXNpbmdcbiAqIHRoZSB7QGxpbmsgTm9kZSNlcnJvcn0gbWV0aG9kLlxuICpcbiAqIFBvc3RDU1Mgd2lsbCB1c2UgdGhlIGlucHV0IHNvdXJjZSBtYXAgdG8gZGV0ZWN0IHRoZSBvcmlnaW5hbCBlcnJvciBsb2NhdGlvbi5cbiAqIElmIHlvdSB3cm90ZSBhIFNhc3MgZmlsZSwgY29tcGlsZWQgaXQgdG8gQ1NTIGFuZCB0aGVuIHBhcnNlZCBpdCB3aXRoIFBvc3RDU1MsXG4gKiBQb3N0Q1NTIHdpbGwgc2hvdyB0aGUgb3JpZ2luYWwgcG9zaXRpb24gaW4gdGhlIFNhc3MgZmlsZS5cbiAqXG4gKiBJZiB5b3UgbmVlZCB0aGUgcG9zaXRpb24gaW4gdGhlIFBvc3RDU1MgaW5wdXRcbiAqIChlLmcuLCB0byBkZWJ1ZyB0aGUgcHJldmlvdXMgY29tcGlsZXIpLCB1c2UgYGVycm9yLmlucHV0LmZpbGVgLlxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDYXRjaGluZyBhbmQgY2hlY2tpbmcgc3ludGF4IGVycm9yXG4gKiB0cnkge1xuICogICBwb3N0Y3NzLnBhcnNlKCdheycpXG4gKiB9IGNhdGNoIChlcnJvcikge1xuICogICBpZiAoZXJyb3IubmFtZSA9PT0gJ0Nzc1N5bnRheEVycm9yJykge1xuICogICAgIGVycm9yIC8vPT4gQ3NzU3ludGF4RXJyb3JcbiAqICAgfVxuICogfVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBSYWlzaW5nIGVycm9yIGZyb20gcGx1Z2luXG4gKiB0aHJvdyBub2RlLmVycm9yKCdVbmtub3duIHZhcmlhYmxlJywgeyBwbHVnaW46ICdwb3N0Y3NzLXZhcnMnIH0pXG4gKi9cbnZhciBDc3NTeW50YXhFcnJvciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX0Vycm9yKSB7XG4gIF9pbmhlcml0c0xvb3NlKENzc1N5bnRheEVycm9yLCBfRXJyb3IpO1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAgRXJyb3IgbWVzc2FnZS5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtsaW5lXSAgIFNvdXJjZSBsaW5lIG9mIHRoZSBlcnJvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtjb2x1bW5dIFNvdXJjZSBjb2x1bW4gb2YgdGhlIGVycm9yLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3NvdXJjZV0gU291cmNlIGNvZGUgb2YgdGhlIGJyb2tlbiBmaWxlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2ZpbGVdICAgQWJzb2x1dGUgcGF0aCB0byB0aGUgYnJva2VuIGZpbGUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbcGx1Z2luXSBQb3N0Q1NTIHBsdWdpbiBuYW1lLCBpZiBlcnJvciBjYW1lIGZyb20gcGx1Z2luLlxuICAgKi9cbiAgZnVuY3Rpb24gQ3NzU3ludGF4RXJyb3IobWVzc2FnZSwgbGluZSwgY29sdW1uLCBzb3VyY2UsIGZpbGUsIHBsdWdpbikge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSkgfHwgdGhpcztcbiAgICAvKipcbiAgICAgKiBBbHdheXMgZXF1YWwgdG8gYCdDc3NTeW50YXhFcnJvcidgLiBZb3Ugc2hvdWxkIGFsd2F5cyBjaGVjayBlcnJvciB0eXBlXG4gICAgICogYnkgYGVycm9yLm5hbWUgPT09ICdDc3NTeW50YXhFcnJvcidgXG4gICAgICogaW5zdGVhZCBvZiBgZXJyb3IgaW5zdGFuY2VvZiBDc3NTeW50YXhFcnJvcmAsXG4gICAgICogYmVjYXVzZSBucG0gY291bGQgaGF2ZSBzZXZlcmFsIFBvc3RDU1MgdmVyc2lvbnMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBpZiAoZXJyb3IubmFtZSA9PT0gJ0Nzc1N5bnRheEVycm9yJykge1xuICAgICAqICAgZXJyb3IgLy89PiBDc3NTeW50YXhFcnJvclxuICAgICAqIH1cbiAgICAgKi9cblxuICAgIF90aGlzLm5hbWUgPSAnQ3NzU3ludGF4RXJyb3InO1xuICAgIC8qKlxuICAgICAqIEVycm9yIG1lc3NhZ2UuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBlcnJvci5tZXNzYWdlIC8vPT4gJ1VuY2xvc2VkIGJsb2NrJ1xuICAgICAqL1xuXG4gICAgX3RoaXMucmVhc29uID0gbWVzc2FnZTtcblxuICAgIGlmIChmaWxlKSB7XG4gICAgICAvKipcbiAgICAgICAqIEFic29sdXRlIHBhdGggdG8gdGhlIGJyb2tlbiBmaWxlLlxuICAgICAgICpcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKlxuICAgICAgICogQGV4YW1wbGVcbiAgICAgICAqIGVycm9yLmZpbGUgICAgICAgLy89PiAnYS5zYXNzJ1xuICAgICAgICogZXJyb3IuaW5wdXQuZmlsZSAvLz0+ICdhLmNzcydcbiAgICAgICAqL1xuICAgICAgX3RoaXMuZmlsZSA9IGZpbGU7XG4gICAgfVxuXG4gICAgaWYgKHNvdXJjZSkge1xuICAgICAgLyoqXG4gICAgICAgKiBTb3VyY2UgY29kZSBvZiB0aGUgYnJva2VuIGZpbGUuXG4gICAgICAgKlxuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqXG4gICAgICAgKiBAZXhhbXBsZVxuICAgICAgICogZXJyb3Iuc291cmNlICAgICAgIC8vPT4gJ2EgeyBiIHt9IH0nXG4gICAgICAgKiBlcnJvci5pbnB1dC5jb2x1bW4gLy89PiAnYSBiIHsgfSdcbiAgICAgICAqL1xuICAgICAgX3RoaXMuc291cmNlID0gc291cmNlO1xuICAgIH1cblxuICAgIGlmIChwbHVnaW4pIHtcbiAgICAgIC8qKlxuICAgICAgICogUGx1Z2luIG5hbWUsIGlmIGVycm9yIGNhbWUgZnJvbSBwbHVnaW4uXG4gICAgICAgKlxuICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAqXG4gICAgICAgKiBAZXhhbXBsZVxuICAgICAgICogZXJyb3IucGx1Z2luIC8vPT4gJ3Bvc3Rjc3MtdmFycydcbiAgICAgICAqL1xuICAgICAgX3RoaXMucGx1Z2luID0gcGx1Z2luO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbGluZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGNvbHVtbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8qKlxuICAgICAgICogU291cmNlIGxpbmUgb2YgdGhlIGVycm9yLlxuICAgICAgICpcbiAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgKlxuICAgICAgICogQGV4YW1wbGVcbiAgICAgICAqIGVycm9yLmxpbmUgICAgICAgLy89PiAyXG4gICAgICAgKiBlcnJvci5pbnB1dC5saW5lIC8vPT4gNFxuICAgICAgICovXG4gICAgICBfdGhpcy5saW5lID0gbGluZTtcbiAgICAgIC8qKlxuICAgICAgICogU291cmNlIGNvbHVtbiBvZiB0aGUgZXJyb3IuXG4gICAgICAgKlxuICAgICAgICogQHR5cGUge251bWJlcn1cbiAgICAgICAqXG4gICAgICAgKiBAZXhhbXBsZVxuICAgICAgICogZXJyb3IuY29sdW1uICAgICAgIC8vPT4gMVxuICAgICAgICogZXJyb3IuaW5wdXQuY29sdW1uIC8vPT4gNFxuICAgICAgICovXG5cbiAgICAgIF90aGlzLmNvbHVtbiA9IGNvbHVtbjtcbiAgICB9XG5cbiAgICBfdGhpcy5zZXRNZXNzYWdlKCk7XG5cbiAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQoX3RoaXMpLCBDc3NTeW50YXhFcnJvcik7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IENzc1N5bnRheEVycm9yLnByb3RvdHlwZTtcblxuICBfcHJvdG8uc2V0TWVzc2FnZSA9IGZ1bmN0aW9uIHNldE1lc3NhZ2UoKSB7XG4gICAgLyoqXG4gICAgICogRnVsbCBlcnJvciB0ZXh0IGluIHRoZSBHTlUgZXJyb3IgZm9ybWF0XG4gICAgICogd2l0aCBwbHVnaW4sIGZpbGUsIGxpbmUgYW5kIGNvbHVtbi5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIGVycm9yLm1lc3NhZ2UgLy89PiAnYS5jc3M6MToxOiBVbmNsb3NlZCBibG9jaydcbiAgICAgKi9cbiAgICB0aGlzLm1lc3NhZ2UgPSB0aGlzLnBsdWdpbiA/IHRoaXMucGx1Z2luICsgJzogJyA6ICcnO1xuICAgIHRoaXMubWVzc2FnZSArPSB0aGlzLmZpbGUgPyB0aGlzLmZpbGUgOiAnPGNzcyBpbnB1dD4nO1xuXG4gICAgaWYgKHR5cGVvZiB0aGlzLmxpbmUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aGlzLm1lc3NhZ2UgKz0gJzonICsgdGhpcy5saW5lICsgJzonICsgdGhpcy5jb2x1bW47XG4gICAgfVxuXG4gICAgdGhpcy5tZXNzYWdlICs9ICc6ICcgKyB0aGlzLnJlYXNvbjtcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIGZldyBsaW5lcyBvZiBDU1Mgc291cmNlIHRoYXQgY2F1c2VkIHRoZSBlcnJvci5cbiAgICpcbiAgICogSWYgdGhlIENTUyBoYXMgYW4gaW5wdXQgc291cmNlIG1hcCB3aXRob3V0IGBzb3VyY2VDb250ZW50YCxcbiAgICogdGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gYW4gZW1wdHkgc3RyaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtjb2xvcl0gV2hldGhlciBhcnJvdyB3aWxsIGJlIGNvbG9yZWQgcmVkIGJ5IHRlcm1pbmFsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xvciBjb2Rlcy4gQnkgZGVmYXVsdCwgUG9zdENTUyB3aWxsIGRldGVjdFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3Igc3VwcG9ydCBieSBgcHJvY2Vzcy5zdGRvdXQuaXNUVFlgXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgYHByb2Nlc3MuZW52Lk5PREVfRElTQUJMRV9DT0xPUlNgLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBlcnJvci5zaG93U291cmNlQ29kZSgpIC8vPT4gXCIgIDQgfCB9XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICA1IHwgYSB7XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgPiA2IHwgICBiYWRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgfCAgIF5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgIDcgfCB9XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICA4IHwgYiB7XCJcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBGZXcgbGluZXMgb2YgQ1NTIHNvdXJjZSB0aGF0IGNhdXNlZCB0aGUgZXJyb3IuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnNob3dTb3VyY2VDb2RlID0gZnVuY3Rpb24gc2hvd1NvdXJjZUNvZGUoY29sb3IpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIGlmICghdGhpcy5zb3VyY2UpIHJldHVybiAnJztcbiAgICB2YXIgY3NzID0gdGhpcy5zb3VyY2U7XG5cbiAgICBpZiAoX3Rlcm1pbmFsSGlnaGxpZ2h0LmRlZmF1bHQpIHtcbiAgICAgIGlmICh0eXBlb2YgY29sb3IgPT09ICd1bmRlZmluZWQnKSBjb2xvciA9IF9zdXBwb3J0c0NvbG9yLmRlZmF1bHQuc3Rkb3V0O1xuICAgICAgaWYgKGNvbG9yKSBjc3MgPSAoMCwgX3Rlcm1pbmFsSGlnaGxpZ2h0LmRlZmF1bHQpKGNzcyk7XG4gICAgfVxuXG4gICAgdmFyIGxpbmVzID0gY3NzLnNwbGl0KC9cXHI/XFxuLyk7XG4gICAgdmFyIHN0YXJ0ID0gTWF0aC5tYXgodGhpcy5saW5lIC0gMywgMCk7XG4gICAgdmFyIGVuZCA9IE1hdGgubWluKHRoaXMubGluZSArIDIsIGxpbmVzLmxlbmd0aCk7XG4gICAgdmFyIG1heFdpZHRoID0gU3RyaW5nKGVuZCkubGVuZ3RoO1xuXG4gICAgZnVuY3Rpb24gbWFyayh0ZXh0KSB7XG4gICAgICBpZiAoY29sb3IgJiYgX2NoYWxrLmRlZmF1bHQucmVkKSB7XG4gICAgICAgIHJldHVybiBfY2hhbGsuZGVmYXVsdC5yZWQuYm9sZCh0ZXh0KTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXNpZGUodGV4dCkge1xuICAgICAgaWYgKGNvbG9yICYmIF9jaGFsay5kZWZhdWx0LmdyYXkpIHtcbiAgICAgICAgcmV0dXJuIF9jaGFsay5kZWZhdWx0LmdyYXkodGV4dCk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0ZXh0O1xuICAgIH1cblxuICAgIHJldHVybiBsaW5lcy5zbGljZShzdGFydCwgZW5kKS5tYXAoZnVuY3Rpb24gKGxpbmUsIGluZGV4KSB7XG4gICAgICB2YXIgbnVtYmVyID0gc3RhcnQgKyAxICsgaW5kZXg7XG4gICAgICB2YXIgZ3V0dGVyID0gJyAnICsgKCcgJyArIG51bWJlcikuc2xpY2UoLW1heFdpZHRoKSArICcgfCAnO1xuXG4gICAgICBpZiAobnVtYmVyID09PSBfdGhpczIubGluZSkge1xuICAgICAgICB2YXIgc3BhY2luZyA9IGFzaWRlKGd1dHRlci5yZXBsYWNlKC9cXGQvZywgJyAnKSkgKyBsaW5lLnNsaWNlKDAsIF90aGlzMi5jb2x1bW4gLSAxKS5yZXBsYWNlKC9bXlxcdF0vZywgJyAnKTtcbiAgICAgICAgcmV0dXJuIG1hcmsoJz4nKSArIGFzaWRlKGd1dHRlcikgKyBsaW5lICsgJ1xcbiAnICsgc3BhY2luZyArIG1hcmsoJ14nKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuICcgJyArIGFzaWRlKGd1dHRlcikgKyBsaW5lO1xuICAgIH0pLmpvaW4oJ1xcbicpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGVycm9yIHBvc2l0aW9uLCBtZXNzYWdlIGFuZCBzb3VyY2UgY29kZSBvZiB0aGUgYnJva2VuIHBhcnQuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGVycm9yLnRvU3RyaW5nKCkgLy89PiBcIkNzc1N5bnRheEVycm9yOiBhcHAuY3NzOjE6MTogVW5jbG9zZWQgYmxvY2tcbiAgICogICAgICAgICAgICAgICAgICAvLyAgICA+IDEgfCBhIHtcbiAgICogICAgICAgICAgICAgICAgICAvLyAgICAgICAgfCBeXCJcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBFcnJvciBwb3NpdGlvbiwgbWVzc2FnZSBhbmQgc291cmNlIGNvZGUuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgdmFyIGNvZGUgPSB0aGlzLnNob3dTb3VyY2VDb2RlKCk7XG5cbiAgICBpZiAoY29kZSkge1xuICAgICAgY29kZSA9ICdcXG5cXG4nICsgY29kZSArICdcXG4nO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm5hbWUgKyAnOiAnICsgdGhpcy5tZXNzYWdlICsgY29kZTtcbiAgfVxuICAvKipcbiAgICogQG1lbWJlcm9mIENzc1N5bnRheEVycm9yI1xuICAgKiBAbWVtYmVyIHtJbnB1dH0gaW5wdXQgSW5wdXQgb2JqZWN0IHdpdGggUG9zdENTUyBpbnRlcm5hbCBpbmZvcm1hdGlvblxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgYWJvdXQgaW5wdXQgZmlsZS4gSWYgaW5wdXQgaGFzIHNvdXJjZSBtYXBcbiAgICogICAgICAgICAgICAgICAgICAgICAgIGZyb20gcHJldmlvdXMgdG9vbCwgUG9zdENTUyB3aWxsIHVzZSBvcmlnaW5cbiAgICogICAgICAgICAgICAgICAgICAgICAgIChmb3IgZXhhbXBsZSwgU2Fzcykgc291cmNlLiBZb3UgY2FuIHVzZSB0aGlzXG4gICAqICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QgdG8gZ2V0IFBvc3RDU1MgaW5wdXQgc291cmNlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBlcnJvci5pbnB1dC5maWxlIC8vPT4gJ2EuY3NzJ1xuICAgKiBlcnJvci5maWxlICAgICAgIC8vPT4gJ2Euc2FzcydcbiAgICovXG4gIDtcblxuICByZXR1cm4gQ3NzU3ludGF4RXJyb3I7XG59KF93cmFwTmF0aXZlU3VwZXIoRXJyb3IpKTtcblxudmFyIF9kZWZhdWx0ID0gQ3NzU3ludGF4RXJyb3I7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbU56Y3kxemVXNTBZWGd0WlhKeWIzSXVaWE0ySWwwc0ltNWhiV1Z6SWpwYklrTnpjMU41Ym5SaGVFVnljbTl5SWl3aWJXVnpjMkZuWlNJc0lteHBibVVpTENKamIyeDFiVzRpTENKemIzVnlZMlVpTENKbWFXeGxJaXdpY0d4MVoybHVJaXdpYm1GdFpTSXNJbkpsWVhOdmJpSXNJbk5sZEUxbGMzTmhaMlVpTENKRmNuSnZjaUlzSW1OaGNIUjFjbVZUZEdGamExUnlZV05sSWl3aWMyaHZkMU52ZFhKalpVTnZaR1VpTENKamIyeHZjaUlzSW1OemN5SXNJblJsY20xcGJtRnNTR2xuYUd4cFoyaDBJaXdpYzNWd2NHOXlkSE5EYjJ4dmNpSXNJbk4wWkc5MWRDSXNJbXhwYm1Weklpd2ljM0JzYVhRaUxDSnpkR0Z5ZENJc0lrMWhkR2dpTENKdFlYZ2lMQ0psYm1RaUxDSnRhVzRpTENKc1pXNW5kR2dpTENKdFlYaFhhV1IwYUNJc0lsTjBjbWx1WnlJc0ltMWhjbXNpTENKMFpYaDBJaXdpWTJoaGJHc2lMQ0p5WldRaUxDSmliMnhrSWl3aVlYTnBaR1VpTENKbmNtRjVJaXdpYzJ4cFkyVWlMQ0p0WVhBaUxDSnBibVJsZUNJc0ltNTFiV0psY2lJc0ltZDFkSFJsY2lJc0luTndZV05wYm1jaUxDSnlaWEJzWVdObElpd2lhbTlwYmlJc0luUnZVM1J5YVc1bklpd2lZMjlrWlNKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN1FVRkJRVHM3UVVGRFFUczdRVUZGUVRzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRkZRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMGxCTWtKTlFTeGpPenM3T3p0QlFVTktPenM3T3pzN096dEJRVkZCTERCQ1FVRmhReXhQUVVGaUxFVkJRWE5DUXl4SlFVRjBRaXhGUVVFMFFrTXNUVUZCTlVJc1JVRkJiME5ETEUxQlFYQkRMRVZCUVRSRFF5eEpRVUUxUXl4RlFVRnJSRU1zVFVGQmJFUXNSVUZCTUVRN1FVRkJRVHM3UVVGRGVFUXNPRUpCUVUxTUxFOUJRVTQ3UVVGRlFUczdPenM3T3pzN096czdPenM3UVVGaFFTeFZRVUZMVFN4SlFVRk1MRWRCUVZrc1owSkJRVm83UVVGRFFUczdPenM3T3pzN08wRkJVVUVzVlVGQlMwTXNUVUZCVEN4SFFVRmpVQ3hQUVVGa096dEJRVVZCTEZGQlFVbEpMRWxCUVVvc1JVRkJWVHRCUVVOU096czdPenM3T3pzN1FVRlRRU3haUVVGTFFTeEpRVUZNTEVkQlFWbEJMRWxCUVZvN1FVRkRSRHM3UVVGRFJDeFJRVUZKUkN4TlFVRktMRVZCUVZrN1FVRkRWanM3T3pzN096czdPMEZCVTBFc1dVRkJTMEVzVFVGQlRDeEhRVUZqUVN4TlFVRmtPMEZCUTBRN08wRkJRMFFzVVVGQlNVVXNUVUZCU2l4RlFVRlpPMEZCUTFZN096czdPenM3TzBGQlVVRXNXVUZCUzBFc1RVRkJUQ3hIUVVGalFTeE5RVUZrTzBGQlEwUTdPMEZCUTBRc1VVRkJTU3hQUVVGUFNpeEpRVUZRTEV0QlFXZENMRmRCUVdoQ0xFbEJRU3RDTEU5QlFVOURMRTFCUVZBc1MwRkJhMElzVjBGQmNrUXNSVUZCYTBVN1FVRkRhRVU3T3pzN096czdPenRCUVZOQkxGbEJRVXRFTEVsQlFVd3NSMEZCV1VFc1NVRkJXanRCUVVOQk96czdPenM3T3pzN08wRkJVMEVzV1VGQlMwTXNUVUZCVEN4SFFVRmpRU3hOUVVGa08wRkJRMFE3TzBGQlJVUXNWVUZCUzAwc1ZVRkJURHM3UVVGRlFTeFJRVUZKUXl4TFFVRkxMRU5CUVVORExHbENRVUZXTEVWQlFUWkNPMEZCUXpOQ1JDeE5RVUZCUVN4TFFVRkxMRU5CUVVORExHbENRVUZPTEdkRFFVRTRRbGdzWTBGQk9VSTdRVUZEUkRzN1FVRjZSblZFTzBGQk1FWjZSRHM3T3p0VFFVVkVVeXhWTEVkQlFVRXNjMEpCUVdNN1FVRkRXanM3T3pzN096czdPMEZCVTBFc1UwRkJTMUlzVDBGQlRDeEhRVUZsTEV0QlFVdExMRTFCUVV3c1IwRkJZeXhMUVVGTFFTeE5RVUZNTEVkQlFXTXNTVUZCTlVJc1IwRkJiVU1zUlVGQmJFUTdRVUZEUVN4VFFVRkxUQ3hQUVVGTUxFbEJRV2RDTEV0QlFVdEpMRWxCUVV3c1IwRkJXU3hMUVVGTFFTeEpRVUZxUWl4SFFVRjNRaXhoUVVGNFF6czdRVUZEUVN4UlFVRkpMRTlCUVU4c1MwRkJTMGdzU1VGQldpeExRVUZ4UWl4WFFVRjZRaXhGUVVGelF6dEJRVU53UXl4WFFVRkxSQ3hQUVVGTUxFbEJRV2RDTEUxQlFVMHNTMEZCUzBNc1NVRkJXQ3hIUVVGclFpeEhRVUZzUWl4SFFVRjNRaXhMUVVGTFF5eE5RVUUzUXp0QlFVTkVPenRCUVVORUxGTkJRVXRHTEU5QlFVd3NTVUZCWjBJc1QwRkJUeXhMUVVGTFR5eE5RVUUxUWp0QlFVTkVPMEZCUlVRN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMU5CY1VKQlNTeGpMRWRCUVVFc2QwSkJRV2RDUXl4TFFVRm9RaXhGUVVGMVFqdEJRVUZCT3p0QlFVTnlRaXhSUVVGSkxFTkJRVU1zUzBGQlMxUXNUVUZCVml4RlFVRnJRaXhQUVVGUExFVkJRVkE3UVVGRmJFSXNVVUZCU1ZVc1IwRkJSeXhIUVVGSExFdEJRVXRXTEUxQlFXWTdPMEZCUTBFc1VVRkJTVmNzTUVKQlFVb3NSVUZCZFVJN1FVRkRja0lzVlVGQlNTeFBRVUZQUml4TFFVRlFMRXRCUVdsQ0xGZEJRWEpDTEVWQlFXdERRU3hMUVVGTExFZEJRVWRITEhWQ1FVRmpReXhOUVVGMFFqdEJRVU5zUXl4VlFVRkpTaXhMUVVGS0xFVkJRVmRETEVkQlFVY3NSMEZCUnl4blEwRkJhMEpCTEVkQlFXeENMRU5CUVU0N1FVRkRXanM3UVVGRlJDeFJRVUZKU1N4TFFVRkxMRWRCUVVkS0xFZEJRVWNzUTBGQlEwc3NTMEZCU2l4RFFVRlZMRTlCUVZZc1EwRkJXanRCUVVOQkxGRkJRVWxETEV0QlFVc3NSMEZCUjBNc1NVRkJTU3hEUVVGRFF5eEhRVUZNTEVOQlFWTXNTMEZCUzNCQ0xFbEJRVXdzUjBGQldTeERRVUZ5UWl4RlFVRjNRaXhEUVVGNFFpeERRVUZhTzBGQlEwRXNVVUZCU1hGQ0xFZEJRVWNzUjBGQlIwWXNTVUZCU1N4RFFVRkRSeXhIUVVGTUxFTkJRVk1zUzBGQlMzUkNMRWxCUVV3c1IwRkJXU3hEUVVGeVFpeEZRVUYzUW1kQ0xFdEJRVXNzUTBGQlEwOHNUVUZCT1VJc1EwRkJWanRCUVVWQkxGRkJRVWxETEZGQlFWRXNSMEZCUjBNc1RVRkJUU3hEUVVGRFNpeEhRVUZFTEVOQlFVNHNRMEZCV1VVc1RVRkJNMEk3TzBGQlJVRXNZVUZCVTBjc1NVRkJWQ3hEUVVGbFF5eEpRVUZtTEVWQlFYRkNPMEZCUTI1Q0xGVkJRVWxvUWl4TFFVRkxMRWxCUVVscFFpeGxRVUZOUXl4SFFVRnVRaXhGUVVGM1FqdEJRVU4wUWl4bFFVRlBSQ3hsUVVGTlF5eEhRVUZPTEVOQlFWVkRMRWxCUVZZc1EwRkJaVWdzU1VGQlppeERRVUZRTzBGQlEwUTdPMEZCUTBRc1lVRkJUMEVzU1VGQlVEdEJRVU5FT3p0QlFVTkVMR0ZCUVZOSkxFdEJRVlFzUTBGQlowSktMRWxCUVdoQ0xFVkJRWE5DTzBGQlEzQkNMRlZCUVVsb1FpeExRVUZMTEVsQlFVbHBRaXhsUVVGTlNTeEpRVUZ1UWl4RlFVRjVRanRCUVVOMlFpeGxRVUZQU2l4bFFVRk5TU3hKUVVGT0xFTkJRVmRNTEVsQlFWZ3NRMEZCVUR0QlFVTkVPenRCUVVORUxHRkJRVTlCTEVsQlFWQTdRVUZEUkRzN1FVRkZSQ3hYUVVGUFdDeExRVUZMTEVOQlFVTnBRaXhMUVVGT0xFTkJRVmxtTEV0QlFWb3NSVUZCYlVKSExFZEJRVzVDTEVWQlFYZENZU3hIUVVGNFFpeERRVUUwUWl4VlFVRkRiRU1zU1VGQlJDeEZRVUZQYlVNc1MwRkJVQ3hGUVVGcFFqdEJRVU5zUkN4VlFVRkpReXhOUVVGTkxFZEJRVWRzUWl4TFFVRkxMRWRCUVVjc1EwRkJVaXhIUVVGWmFVSXNTMEZCZWtJN1FVRkRRU3hWUVVGSlJTeE5RVUZOTEVkQlFVY3NUVUZCVFN4RFFVRkRMRTFCUVUxRUxFMUJRVkFzUlVGQlpVZ3NTMEZCWml4RFFVRnhRaXhEUVVGRFZDeFJRVUYwUWl4RFFVRk9MRWRCUVhkRExFdEJRWEpFT3p0QlFVTkJMRlZCUVVsWkxFMUJRVTBzUzBGQlN5eE5RVUZKTEVOQlFVTndReXhKUVVGd1FpeEZRVUV3UWp0QlFVTjRRaXhaUVVGSmMwTXNUMEZCVHl4SFFVRkhVQ3hMUVVGTExFTkJRVU5OTEUxQlFVMHNRMEZCUTBVc1QwRkJVQ3hEUVVGbExFdEJRV1lzUlVGQmMwSXNSMEZCZEVJc1EwRkJSQ3hEUVVGTUxFZEJRMXAyUXl4SlFVRkpMRU5CUVVOcFF5eExRVUZNTEVOQlFWY3NRMEZCV0N4RlFVRmpMRTFCUVVrc1EwRkJRMmhETEUxQlFVd3NSMEZCWXl4RFFVRTFRaXhGUVVFclFuTkRMRTlCUVM5Q0xFTkJRWFZETEZGQlFYWkRMRVZCUVdsRUxFZEJRV3BFTEVOQlJFWTdRVUZGUVN4bFFVRlBZaXhKUVVGSkxFTkJRVU1zUjBGQlJDeERRVUZLTEVkQlFWbExMRXRCUVVzc1EwRkJRMDBzVFVGQlJDeERRVUZxUWl4SFFVRTBRbkpETEVsQlFUVkNMRWRCUVcxRExFdEJRVzVETEVkQlFUSkRjME1zVDBGQk0wTXNSMEZCY1VSYUxFbEJRVWtzUTBGQlF5eEhRVUZFTEVOQlFXaEZPMEZCUTBRN08wRkJRMFFzWVVGQlR5eE5RVUZOU3l4TFFVRkxMRU5CUVVOTkxFMUJRVVFzUTBGQldDeEhRVUZ6UW5KRExFbEJRVGRDTzBGQlEwUXNTMEZVVFN4RlFWTktkME1zU1VGVVNTeERRVk5ETEVsQlZFUXNRMEZCVUR0QlFWVkVPMEZCUlVRN096czdPenM3T3pzN096dFRRVlZCUXl4UkxFZEJRVUVzYjBKQlFWazdRVUZEVml4UlFVRkpReXhKUVVGSkxFZEJRVWNzUzBGQlMyaERMR05CUVV3c1JVRkJXRHM3UVVGRFFTeFJRVUZKWjBNc1NVRkJTaXhGUVVGVk8wRkJRMUpCTEUxQlFVRkJMRWxCUVVrc1IwRkJSeXhUUVVGVFFTeEpRVUZVTEVkQlFXZENMRWxCUVhaQ08wRkJRMFE3TzBGQlEwUXNWMEZCVHl4TFFVRkxja01zU1VGQlRDeEhRVUZaTEVsQlFWb3NSMEZCYlVJc1MwRkJTMDRzVDBGQmVFSXNSMEZCYTBNeVF5eEpRVUY2UXp0QlFVTkVPMEZCUlVRN096czdPenM3T3pzN096czdPenR0UWtGMFRUSkNiRU1zU3pzN1pVRnZUbVJXTEdNaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SnBiWEJ2Y25RZ2MzVndjRzl5ZEhORGIyeHZjaUJtY205dElDZHpkWEJ3YjNKMGN5MWpiMnh2Y2lkY2JtbHRjRzl5ZENCamFHRnNheUJtY205dElDZGphR0ZzYXlkY2JseHVhVzF3YjNKMElIUmxjbTFwYm1Gc1NHbG5hR3hwWjJoMElHWnliMjBnSnk0dmRHVnliV2x1WVd3dGFHbG5hR3hwWjJoMEoxeHVYRzR2S2lwY2JpQXFJRlJvWlNCRFUxTWdjR0Z5YzJWeUlIUm9jbTkzY3lCMGFHbHpJR1Z5Y205eUlHWnZjaUJpY205clpXNGdRMU5UTGx4dUlDcGNiaUFxSUVOMWMzUnZiU0J3WVhKelpYSnpJR05oYmlCMGFISnZkeUIwYUdseklHVnljbTl5SUdadmNpQmljbTlyWlc0Z1kzVnpkRzl0SUhONWJuUmhlQ0IxYzJsdVoxeHVJQ29nZEdobElIdEFiR2x1YXlCT2IyUmxJMlZ5Y205eWZTQnRaWFJvYjJRdVhHNGdLbHh1SUNvZ1VHOXpkRU5UVXlCM2FXeHNJSFZ6WlNCMGFHVWdhVzV3ZFhRZ2MyOTFjbU5sSUcxaGNDQjBieUJrWlhSbFkzUWdkR2hsSUc5eWFXZHBibUZzSUdWeWNtOXlJR3h2WTJGMGFXOXVMbHh1SUNvZ1NXWWdlVzkxSUhkeWIzUmxJR0VnVTJGemN5Qm1hV3hsTENCamIyMXdhV3hsWkNCcGRDQjBieUJEVTFNZ1lXNWtJSFJvWlc0Z2NHRnljMlZrSUdsMElIZHBkR2dnVUc5emRFTlRVeXhjYmlBcUlGQnZjM1JEVTFNZ2QybHNiQ0J6YUc5M0lIUm9aU0J2Y21sbmFXNWhiQ0J3YjNOcGRHbHZiaUJwYmlCMGFHVWdVMkZ6Y3lCbWFXeGxMbHh1SUNwY2JpQXFJRWxtSUhsdmRTQnVaV1ZrSUhSb1pTQndiM05wZEdsdmJpQnBiaUIwYUdVZ1VHOXpkRU5UVXlCcGJuQjFkRnh1SUNvZ0tHVXVaeTRzSUhSdklHUmxZblZuSUhSb1pTQndjbVYyYVc5MWN5QmpiMjF3YVd4bGNpa3NJSFZ6WlNCZ1pYSnliM0l1YVc1d2RYUXVabWxzWldBdVhHNGdLbHh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFJQzh2SUVOaGRHTm9hVzVuSUdGdVpDQmphR1ZqYTJsdVp5QnplVzUwWVhnZ1pYSnliM0pjYmlBcUlIUnllU0I3WEc0Z0tpQWdJSEJ2YzNSamMzTXVjR0Z5YzJVb0oyRjdKeWxjYmlBcUlIMGdZMkYwWTJnZ0tHVnljbTl5S1NCN1hHNGdLaUFnSUdsbUlDaGxjbkp2Y2k1dVlXMWxJRDA5UFNBblEzTnpVM2x1ZEdGNFJYSnliM0luS1NCN1hHNGdLaUFnSUNBZ1pYSnliM0lnTHk4OVBpQkRjM05UZVc1MFlYaEZjbkp2Y2x4dUlDb2dJQ0I5WEc0Z0tpQjlYRzRnS2x4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxSUM4dklGSmhhWE5wYm1jZ1pYSnliM0lnWm5KdmJTQndiSFZuYVc1Y2JpQXFJSFJvY205M0lHNXZaR1V1WlhKeWIzSW9KMVZ1YTI1dmQyNGdkbUZ5YVdGaWJHVW5MQ0I3SUhCc2RXZHBiam9nSjNCdmMzUmpjM010ZG1GeWN5Y2dmU2xjYmlBcUwxeHVZMnhoYzNNZ1EzTnpVM2x1ZEdGNFJYSnliM0lnWlhoMFpXNWtjeUJGY25KdmNpQjdYRzRnSUM4cUtseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYldWemMyRm5aU0FnUlhKeWIzSWdiV1Z6YzJGblpTNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0dWRXMWlaWEo5SUZ0c2FXNWxYU0FnSUZOdmRYSmpaU0JzYVc1bElHOW1JSFJvWlNCbGNuSnZjaTVjYmlBZ0lDb2dRSEJoY21GdElIdHVkVzFpWlhKOUlGdGpiMngxYlc1ZElGTnZkWEpqWlNCamIyeDFiVzRnYjJZZ2RHaGxJR1Z5Y205eUxseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzNOdmRYSmpaVjBnVTI5MWNtTmxJR052WkdVZ2IyWWdkR2hsSUdKeWIydGxiaUJtYVd4bExseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnVzJacGJHVmRJQ0FnUVdKemIyeDFkR1VnY0dGMGFDQjBieUIwYUdVZ1luSnZhMlZ1SUdacGJHVXVYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCYmNHeDFaMmx1WFNCUWIzTjBRMU5USUhCc2RXZHBiaUJ1WVcxbExDQnBaaUJsY25KdmNpQmpZVzFsSUdaeWIyMGdjR3gxWjJsdUxseHVJQ0FnS2k5Y2JpQWdZMjl1YzNSeWRXTjBiM0lnS0cxbGMzTmhaMlVzSUd4cGJtVXNJR052YkhWdGJpd2djMjkxY21ObExDQm1hV3hsTENCd2JIVm5hVzRwSUh0Y2JpQWdJQ0J6ZFhCbGNpaHRaWE56WVdkbEtWeHVYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRV3gzWVhseklHVnhkV0ZzSUhSdklHQW5RM056VTNsdWRHRjRSWEp5YjNJbllDNGdXVzkxSUhOb2IzVnNaQ0JoYkhkaGVYTWdZMmhsWTJzZ1pYSnliM0lnZEhsd1pWeHVJQ0FnSUNBcUlHSjVJR0JsY25KdmNpNXVZVzFsSUQwOVBTQW5RM056VTNsdWRHRjRSWEp5YjNJbllGeHVJQ0FnSUNBcUlHbHVjM1JsWVdRZ2IyWWdZR1Z5Y205eUlHbHVjM1JoYm1ObGIyWWdRM056VTNsdWRHRjRSWEp5YjNKZ0xGeHVJQ0FnSUNBcUlHSmxZMkYxYzJVZ2JuQnRJR052ZFd4a0lHaGhkbVVnYzJWMlpYSmhiQ0JRYjNOMFExTlRJSFpsY25OcGIyNXpMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UzTjBjbWx1WjMxY2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCbGVHRnRjR3hsWEc0Z0lDQWdJQ29nYVdZZ0tHVnljbTl5TG01aGJXVWdQVDA5SUNkRGMzTlRlVzUwWVhoRmNuSnZjaWNwSUh0Y2JpQWdJQ0FnS2lBZ0lHVnljbTl5SUM4dlBUNGdRM056VTNsdWRHRjRSWEp5YjNKY2JpQWdJQ0FnS2lCOVhHNGdJQ0FnSUNvdlhHNGdJQ0FnZEdocGN5NXVZVzFsSUQwZ0owTnpjMU41Ym5SaGVFVnljbTl5SjF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVWeWNtOXlJRzFsYzNOaFoyVXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFkSGx3WlNCN2MzUnlhVzVuZlZ4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDQWdLaUJsY25KdmNpNXRaWE56WVdkbElDOHZQVDRnSjFWdVkyeHZjMlZrSUdKc2IyTnJKMXh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11Y21WaGMyOXVJRDBnYldWemMyRm5aVnh1WEc0Z0lDQWdhV1lnS0dacGJHVXBJSHRjYmlBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNvZ1FXSnpiMngxZEdVZ2NHRjBhQ0IwYnlCMGFHVWdZbkp2YTJWdUlHWnBiR1V1WEc0Z0lDQWdJQ0FnS2x4dUlDQWdJQ0FnSUNvZ1FIUjVjR1VnZTNOMGNtbHVaMzFjYmlBZ0lDQWdJQ0FxWEc0Z0lDQWdJQ0FnS2lCQVpYaGhiWEJzWlZ4dUlDQWdJQ0FnSUNvZ1pYSnliM0l1Wm1sc1pTQWdJQ0FnSUNBdkx6MCtJQ2RoTG5OaGMzTW5YRzRnSUNBZ0lDQWdLaUJsY25KdmNpNXBibkIxZEM1bWFXeGxJQzh2UFQ0Z0oyRXVZM056SjF4dUlDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNCMGFHbHpMbVpwYkdVZ1BTQm1hV3hsWEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2h6YjNWeVkyVXBJSHRjYmlBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNvZ1UyOTFjbU5sSUdOdlpHVWdiMllnZEdobElHSnliMnRsYmlCbWFXeGxMbHh1SUNBZ0lDQWdJQ3BjYmlBZ0lDQWdJQ0FxSUVCMGVYQmxJSHR6ZEhKcGJtZDlYRzRnSUNBZ0lDQWdLbHh1SUNBZ0lDQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDQWdJQ0FxSUdWeWNtOXlMbk52ZFhKalpTQWdJQ0FnSUNBdkx6MCtJQ2RoSUhzZ1lpQjdmU0I5SjF4dUlDQWdJQ0FnSUNvZ1pYSnliM0l1YVc1d2RYUXVZMjlzZFcxdUlDOHZQVDRnSjJFZ1lpQjdJSDBuWEc0Z0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUhSb2FYTXVjMjkxY21ObElEMGdjMjkxY21ObFhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNod2JIVm5hVzRwSUh0Y2JpQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDb2dVR3gxWjJsdUlHNWhiV1VzSUdsbUlHVnljbTl5SUdOaGJXVWdabkp2YlNCd2JIVm5hVzR1WEc0Z0lDQWdJQ0FnS2x4dUlDQWdJQ0FnSUNvZ1FIUjVjR1VnZTNOMGNtbHVaMzFjYmlBZ0lDQWdJQ0FxWEc0Z0lDQWdJQ0FnS2lCQVpYaGhiWEJzWlZ4dUlDQWdJQ0FnSUNvZ1pYSnliM0l1Y0d4MVoybHVJQzh2UFQ0Z0ozQnZjM1JqYzNNdGRtRnljeWRjYmlBZ0lDQWdJQ0FxTDF4dUlDQWdJQ0FnZEdocGN5NXdiSFZuYVc0Z1BTQndiSFZuYVc1Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJzYVc1bElDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQjBlWEJsYjJZZ1kyOXNkVzF1SUNFOVBTQW5kVzVrWldacGJtVmtKeWtnZTF4dUlDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0tpQlRiM1Z5WTJVZ2JHbHVaU0J2WmlCMGFHVWdaWEp5YjNJdVhHNGdJQ0FnSUNBZ0tseHVJQ0FnSUNBZ0lDb2dRSFI1Y0dVZ2UyNTFiV0psY24xY2JpQWdJQ0FnSUNBcVhHNGdJQ0FnSUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnSUNBZ0lDb2daWEp5YjNJdWJHbHVaU0FnSUNBZ0lDQXZMejArSURKY2JpQWdJQ0FnSUNBcUlHVnljbTl5TG1sdWNIVjBMbXhwYm1VZ0x5ODlQaUEwWEc0Z0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUhSb2FYTXViR2x1WlNBOUlHeHBibVZjYmlBZ0lDQWdJQzhxS2x4dUlDQWdJQ0FnSUNvZ1UyOTFjbU5sSUdOdmJIVnRiaUJ2WmlCMGFHVWdaWEp5YjNJdVhHNGdJQ0FnSUNBZ0tseHVJQ0FnSUNBZ0lDb2dRSFI1Y0dVZ2UyNTFiV0psY24xY2JpQWdJQ0FnSUNBcVhHNGdJQ0FnSUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnSUNBZ0lDb2daWEp5YjNJdVkyOXNkVzF1SUNBZ0lDQWdJQzh2UFQ0Z01WeHVJQ0FnSUNBZ0lDb2daWEp5YjNJdWFXNXdkWFF1WTI5c2RXMXVJQzh2UFQ0Z05GeHVJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQjBhR2x6TG1OdmJIVnRiaUE5SUdOdmJIVnRibHh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11YzJWMFRXVnpjMkZuWlNncFhHNWNiaUFnSUNCcFppQW9SWEp5YjNJdVkyRndkSFZ5WlZOMFlXTnJWSEpoWTJVcElIdGNiaUFnSUNBZ0lFVnljbTl5TG1OaGNIUjFjbVZUZEdGamExUnlZV05sS0hSb2FYTXNJRU56YzFONWJuUmhlRVZ5Y205eUtWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lITmxkRTFsYzNOaFoyVWdLQ2tnZTF4dUlDQWdJQzhxS2x4dUlDQWdJQ0FxSUVaMWJHd2daWEp5YjNJZ2RHVjRkQ0JwYmlCMGFHVWdSMDVWSUdWeWNtOXlJR1p2Y20xaGRGeHVJQ0FnSUNBcUlIZHBkR2dnY0d4MVoybHVMQ0JtYVd4bExDQnNhVzVsSUdGdVpDQmpiMngxYlc0dVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWRIbHdaU0I3YzNSeWFXNW5mVnh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNBZ0tpQmxjbkp2Y2k1dFpYTnpZV2RsSUM4dlBUNGdKMkV1WTNOek9qRTZNVG9nVlc1amJHOXpaV1FnWW14dlkyc25YRzRnSUNBZ0lDb3ZYRzRnSUNBZ2RHaHBjeTV0WlhOellXZGxJRDBnZEdocGN5NXdiSFZuYVc0Z1B5QjBhR2x6TG5Cc2RXZHBiaUFySUNjNklDY2dPaUFuSjF4dUlDQWdJSFJvYVhNdWJXVnpjMkZuWlNBclBTQjBhR2x6TG1acGJHVWdQeUIwYUdsekxtWnBiR1VnT2lBblBHTnpjeUJwYm5CMWRENG5YRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQjBhR2x6TG14cGJtVWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQjBhR2x6TG0xbGMzTmhaMlVnS3owZ0p6b25JQ3NnZEdocGN5NXNhVzVsSUNzZ0p6b25JQ3NnZEdocGN5NWpiMngxYlc1Y2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1dFpYTnpZV2RsSUNzOUlDYzZJQ2NnS3lCMGFHbHpMbkpsWVhOdmJseHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdZU0JtWlhjZ2JHbHVaWE1nYjJZZ1ExTlRJSE52ZFhKalpTQjBhR0YwSUdOaGRYTmxaQ0IwYUdVZ1pYSnliM0l1WEc0Z0lDQXFYRzRnSUNBcUlFbG1JSFJvWlNCRFUxTWdhR0Z6SUdGdUlHbHVjSFYwSUhOdmRYSmpaU0J0WVhBZ2QybDBhRzkxZENCZ2MyOTFjbU5sUTI5dWRHVnVkR0FzWEc0Z0lDQXFJSFJvYVhNZ2JXVjBhRzlrSUhkcGJHd2djbVYwZFhKdUlHRnVJR1Z0Y0hSNUlITjBjbWx1Wnk1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdGliMjlzWldGdWZTQmJZMjlzYjNKZElGZG9aWFJvWlhJZ1lYSnliM2NnZDJsc2JDQmlaU0JqYjJ4dmNtVmtJSEpsWkNCaWVTQjBaWEp0YVc1aGJGeHVJQ0FnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTI5c2IzSWdZMjlrWlhNdUlFSjVJR1JsWm1GMWJIUXNJRkJ2YzNSRFUxTWdkMmxzYkNCa1pYUmxZM1JjYmlBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTnZiRzl5SUhOMWNIQnZjblFnWW5rZ1lIQnliMk5sYzNNdWMzUmtiM1YwTG1selZGUlpZRnh1SUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lXNWtJR0J3Y205alpYTnpMbVZ1ZGk1T1QwUkZYMFJKVTBGQ1RFVmZRMDlNVDFKVFlDNWNiaUFnSUNwY2JpQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDb2daWEp5YjNJdWMyaHZkMU52ZFhKalpVTnZaR1VvS1NBdkx6MCtJRndpSUNBMElId2dmVnh1SUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklDQWdJQ0FnTlNCOElHRWdlMXh1SUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklDQWdJRDRnTmlCOElDQWdZbUZrWEc0Z0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdJQ0FnSUNBZ0lId2dJQ0JlWEc0Z0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdJQ0FnSUNBM0lId2dmVnh1SUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUM4dklDQWdJQ0FnT0NCOElHSWdlMXdpWEc0Z0lDQXFYRzRnSUNBcUlFQnlaWFIxY200Z2UzTjBjbWx1WjMwZ1JtVjNJR3hwYm1WeklHOW1JRU5UVXlCemIzVnlZMlVnZEdoaGRDQmpZWFZ6WldRZ2RHaGxJR1Z5Y205eUxseHVJQ0FnS2k5Y2JpQWdjMmh2ZDFOdmRYSmpaVU52WkdVZ0tHTnZiRzl5S1NCN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TG5OdmRYSmpaU2tnY21WMGRYSnVJQ2NuWEc1Y2JpQWdJQ0JzWlhRZ1kzTnpJRDBnZEdocGN5NXpiM1Z5WTJWY2JpQWdJQ0JwWmlBb2RHVnliV2x1WVd4SWFXZG9iR2xuYUhRcElIdGNiaUFnSUNBZ0lHbG1JQ2gwZVhCbGIyWWdZMjlzYjNJZ1BUMDlJQ2QxYm1SbFptbHVaV1FuS1NCamIyeHZjaUE5SUhOMWNIQnZjblJ6UTI5c2IzSXVjM1JrYjNWMFhHNGdJQ0FnSUNCcFppQW9ZMjlzYjNJcElHTnpjeUE5SUhSbGNtMXBibUZzU0dsbmFHeHBaMmgwS0dOemN5bGNiaUFnSUNCOVhHNWNiaUFnSUNCc1pYUWdiR2x1WlhNZ1BTQmpjM011YzNCc2FYUW9MMXhjY2o5Y1hHNHZLVnh1SUNBZ0lHeGxkQ0J6ZEdGeWRDQTlJRTFoZEdndWJXRjRLSFJvYVhNdWJHbHVaU0F0SURNc0lEQXBYRzRnSUNBZ2JHVjBJR1Z1WkNBOUlFMWhkR2d1YldsdUtIUm9hWE11YkdsdVpTQXJJRElzSUd4cGJtVnpMbXhsYm1kMGFDbGNibHh1SUNBZ0lHeGxkQ0J0WVhoWGFXUjBhQ0E5SUZOMGNtbHVaeWhsYm1RcExteGxibWQwYUZ4dVhHNGdJQ0FnWm5WdVkzUnBiMjRnYldGeWF5QW9kR1Y0ZENrZ2UxeHVJQ0FnSUNBZ2FXWWdLR052Ykc5eUlDWW1JR05vWVd4ckxuSmxaQ2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJoaGJHc3VjbVZrTG1KdmJHUW9kR1Y0ZENsY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhKbGRIVnliaUIwWlhoMFhHNGdJQ0FnZlZ4dUlDQWdJR1oxYm1OMGFXOXVJR0Z6YVdSbElDaDBaWGgwS1NCN1hHNGdJQ0FnSUNCcFppQW9ZMjlzYjNJZ0ppWWdZMmhoYkdzdVozSmhlU2tnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWTJoaGJHc3VaM0poZVNoMFpYaDBLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlIUmxlSFJjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2JHbHVaWE11YzJ4cFkyVW9jM1JoY25Rc0lHVnVaQ2t1YldGd0tDaHNhVzVsTENCcGJtUmxlQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ2JHVjBJRzUxYldKbGNpQTlJSE4wWVhKMElDc2dNU0FySUdsdVpHVjRYRzRnSUNBZ0lDQnNaWFFnWjNWMGRHVnlJRDBnSnlBbklDc2dLQ2NnSnlBcklHNTFiV0psY2lrdWMyeHBZMlVvTFcxaGVGZHBaSFJvS1NBcklDY2dmQ0FuWEc0Z0lDQWdJQ0JwWmlBb2JuVnRZbVZ5SUQwOVBTQjBhR2x6TG14cGJtVXBJSHRjYmlBZ0lDQWdJQ0FnYkdWMElITndZV05wYm1jZ1BTQmhjMmxrWlNobmRYUjBaWEl1Y21Wd2JHRmpaU2d2WEZ4a0wyY3NJQ2NnSnlrcElDdGNiaUFnSUNBZ0lDQWdJQ0JzYVc1bExuTnNhV05sS0RBc0lIUm9hWE11WTI5c2RXMXVJQzBnTVNrdWNtVndiR0ZqWlNndlcxNWNYSFJkTDJjc0lDY2dKeWxjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRzFoY21zb0p6NG5LU0FySUdGemFXUmxLR2QxZEhSbGNpa2dLeUJzYVc1bElDc2dKMXhjYmlBbklDc2djM0JoWTJsdVp5QXJJRzFoY21zb0oxNG5LVnh1SUNBZ0lDQWdmVnh1SUNBZ0lDQWdjbVYwZFhKdUlDY2dKeUFySUdGemFXUmxLR2QxZEhSbGNpa2dLeUJzYVc1bFhHNGdJQ0FnZlNrdWFtOXBiaWduWEZ4dUp5bGNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJTWlhSMWNtNXpJR1Z5Y205eUlIQnZjMmwwYVc5dUxDQnRaWE56WVdkbElHRnVaQ0J6YjNWeVkyVWdZMjlrWlNCdlppQjBhR1VnWW5KdmEyVnVJSEJoY25RdVhHNGdJQ0FxWEc0Z0lDQXFJRUJsZUdGdGNHeGxYRzRnSUNBcUlHVnljbTl5TG5SdlUzUnlhVzVuS0NrZ0x5ODlQaUJjSWtOemMxTjViblJoZUVWeWNtOXlPaUJoY0hBdVkzTnpPakU2TVRvZ1ZXNWpiRzl6WldRZ1lteHZZMnRjYmlBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUFnSUNBK0lERWdmQ0JoSUh0Y2JpQWdJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F2THlBZ0lDQWdJQ0FnZkNCZVhDSmNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnliaUI3YzNSeWFXNW5mU0JGY25KdmNpQndiM05wZEdsdmJpd2diV1Z6YzJGblpTQmhibVFnYzI5MWNtTmxJR052WkdVdVhHNGdJQ0FxTDF4dUlDQjBiMU4wY21sdVp5QW9LU0I3WEc0Z0lDQWdiR1YwSUdOdlpHVWdQU0IwYUdsekxuTm9iM2RUYjNWeVkyVkRiMlJsS0NsY2JpQWdJQ0JwWmlBb1kyOWtaU2tnZTF4dUlDQWdJQ0FnWTI5a1pTQTlJQ2RjWEc1Y1hHNG5JQ3NnWTI5a1pTQXJJQ2RjWEc0blhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG01aGJXVWdLeUFuT2lBbklDc2dkR2hwY3k1dFpYTnpZV2RsSUNzZ1kyOWtaVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVCdFpXMWlaWEp2WmlCRGMzTlRlVzUwWVhoRmNuSnZjaU5jYmlBZ0lDb2dRRzFsYldKbGNpQjdTVzV3ZFhSOUlHbHVjSFYwSUVsdWNIVjBJRzlpYW1WamRDQjNhWFJvSUZCdmMzUkRVMU1nYVc1MFpYSnVZV3dnYVc1bWIzSnRZWFJwYjI1Y2JpQWdJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRmliM1YwSUdsdWNIVjBJR1pwYkdVdUlFbG1JR2x1Y0hWMElHaGhjeUJ6YjNWeVkyVWdiV0Z3WEc0Z0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbWNtOXRJSEJ5WlhacGIzVnpJSFJ2YjJ3c0lGQnZjM1JEVTFNZ2QybHNiQ0IxYzJVZ2IzSnBaMmx1WEc0Z0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBb1ptOXlJR1Y0WVcxd2JHVXNJRk5oYzNNcElITnZkWEpqWlM0Z1dXOTFJR05oYmlCMWMyVWdkR2hwYzF4dUlDQWdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2IySnFaV04wSUhSdklHZGxkQ0JRYjNOMFExTlRJR2x1Y0hWMElITnZkWEpqWlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNvZ1pYSnliM0l1YVc1d2RYUXVabWxzWlNBdkx6MCtJQ2RoTG1OemN5ZGNiaUFnSUNvZ1pYSnliM0l1Wm1sc1pTQWdJQ0FnSUNBdkx6MCtJQ2RoTG5OaGMzTW5YRzRnSUNBcUwxeHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0JEYzNOVGVXNTBZWGhGY25KdmNseHVJbDBzSW1acGJHVWlPaUpqYzNNdGMzbHVkR0Y0TFdWeWNtOXlMbXB6SW4wPVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG52YXIgREVGQVVMVF9SQVcgPSB7XG4gIGNvbG9uOiAnOiAnLFxuICBpbmRlbnQ6ICcgICAgJyxcbiAgYmVmb3JlRGVjbDogJ1xcbicsXG4gIGJlZm9yZVJ1bGU6ICdcXG4nLFxuICBiZWZvcmVPcGVuOiAnICcsXG4gIGJlZm9yZUNsb3NlOiAnXFxuJyxcbiAgYmVmb3JlQ29tbWVudDogJ1xcbicsXG4gIGFmdGVyOiAnXFxuJyxcbiAgZW1wdHlCb2R5OiAnJyxcbiAgY29tbWVudExlZnQ6ICcgJyxcbiAgY29tbWVudFJpZ2h0OiAnICcsXG4gIHNlbWljb2xvbjogZmFsc2Vcbn07XG5cbmZ1bmN0aW9uIGNhcGl0YWxpemUoc3RyKSB7XG4gIHJldHVybiBzdHJbMF0udG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcbn1cblxudmFyIFN0cmluZ2lmaWVyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gU3RyaW5naWZpZXIoYnVpbGRlcikge1xuICAgIHRoaXMuYnVpbGRlciA9IGJ1aWxkZXI7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gU3RyaW5naWZpZXIucHJvdG90eXBlO1xuXG4gIF9wcm90by5zdHJpbmdpZnkgPSBmdW5jdGlvbiBzdHJpbmdpZnkobm9kZSwgc2VtaWNvbG9uKSB7XG4gICAgdGhpc1tub2RlLnR5cGVdKG5vZGUsIHNlbWljb2xvbik7XG4gIH07XG5cbiAgX3Byb3RvLnJvb3QgPSBmdW5jdGlvbiByb290KG5vZGUpIHtcbiAgICB0aGlzLmJvZHkobm9kZSk7XG4gICAgaWYgKG5vZGUucmF3cy5hZnRlcikgdGhpcy5idWlsZGVyKG5vZGUucmF3cy5hZnRlcik7XG4gIH07XG5cbiAgX3Byb3RvLmNvbW1lbnQgPSBmdW5jdGlvbiBjb21tZW50KG5vZGUpIHtcbiAgICB2YXIgbGVmdCA9IHRoaXMucmF3KG5vZGUsICdsZWZ0JywgJ2NvbW1lbnRMZWZ0Jyk7XG4gICAgdmFyIHJpZ2h0ID0gdGhpcy5yYXcobm9kZSwgJ3JpZ2h0JywgJ2NvbW1lbnRSaWdodCcpO1xuICAgIHRoaXMuYnVpbGRlcignLyonICsgbGVmdCArIG5vZGUudGV4dCArIHJpZ2h0ICsgJyovJywgbm9kZSk7XG4gIH07XG5cbiAgX3Byb3RvLmRlY2wgPSBmdW5jdGlvbiBkZWNsKG5vZGUsIHNlbWljb2xvbikge1xuICAgIHZhciBiZXR3ZWVuID0gdGhpcy5yYXcobm9kZSwgJ2JldHdlZW4nLCAnY29sb24nKTtcbiAgICB2YXIgc3RyaW5nID0gbm9kZS5wcm9wICsgYmV0d2VlbiArIHRoaXMucmF3VmFsdWUobm9kZSwgJ3ZhbHVlJyk7XG5cbiAgICBpZiAobm9kZS5pbXBvcnRhbnQpIHtcbiAgICAgIHN0cmluZyArPSBub2RlLnJhd3MuaW1wb3J0YW50IHx8ICcgIWltcG9ydGFudCc7XG4gICAgfVxuXG4gICAgaWYgKHNlbWljb2xvbikgc3RyaW5nICs9ICc7JztcbiAgICB0aGlzLmJ1aWxkZXIoc3RyaW5nLCBub2RlKTtcbiAgfTtcblxuICBfcHJvdG8ucnVsZSA9IGZ1bmN0aW9uIHJ1bGUobm9kZSkge1xuICAgIHRoaXMuYmxvY2sobm9kZSwgdGhpcy5yYXdWYWx1ZShub2RlLCAnc2VsZWN0b3InKSk7XG5cbiAgICBpZiAobm9kZS5yYXdzLm93blNlbWljb2xvbikge1xuICAgICAgdGhpcy5idWlsZGVyKG5vZGUucmF3cy5vd25TZW1pY29sb24sIG5vZGUsICdlbmQnKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmF0cnVsZSA9IGZ1bmN0aW9uIGF0cnVsZShub2RlLCBzZW1pY29sb24pIHtcbiAgICB2YXIgbmFtZSA9ICdAJyArIG5vZGUubmFtZTtcbiAgICB2YXIgcGFyYW1zID0gbm9kZS5wYXJhbXMgPyB0aGlzLnJhd1ZhbHVlKG5vZGUsICdwYXJhbXMnKSA6ICcnO1xuXG4gICAgaWYgKHR5cGVvZiBub2RlLnJhd3MuYWZ0ZXJOYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgbmFtZSArPSBub2RlLnJhd3MuYWZ0ZXJOYW1lO1xuICAgIH0gZWxzZSBpZiAocGFyYW1zKSB7XG4gICAgICBuYW1lICs9ICcgJztcbiAgICB9XG5cbiAgICBpZiAobm9kZS5ub2Rlcykge1xuICAgICAgdGhpcy5ibG9jayhub2RlLCBuYW1lICsgcGFyYW1zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGVuZCA9IChub2RlLnJhd3MuYmV0d2VlbiB8fCAnJykgKyAoc2VtaWNvbG9uID8gJzsnIDogJycpO1xuICAgICAgdGhpcy5idWlsZGVyKG5hbWUgKyBwYXJhbXMgKyBlbmQsIG5vZGUpO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uYm9keSA9IGZ1bmN0aW9uIGJvZHkobm9kZSkge1xuICAgIHZhciBsYXN0ID0gbm9kZS5ub2Rlcy5sZW5ndGggLSAxO1xuXG4gICAgd2hpbGUgKGxhc3QgPiAwKSB7XG4gICAgICBpZiAobm9kZS5ub2Rlc1tsYXN0XS50eXBlICE9PSAnY29tbWVudCcpIGJyZWFrO1xuICAgICAgbGFzdCAtPSAxO1xuICAgIH1cblxuICAgIHZhciBzZW1pY29sb24gPSB0aGlzLnJhdyhub2RlLCAnc2VtaWNvbG9uJyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5vZGUubm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IG5vZGUubm9kZXNbaV07XG4gICAgICB2YXIgYmVmb3JlID0gdGhpcy5yYXcoY2hpbGQsICdiZWZvcmUnKTtcbiAgICAgIGlmIChiZWZvcmUpIHRoaXMuYnVpbGRlcihiZWZvcmUpO1xuICAgICAgdGhpcy5zdHJpbmdpZnkoY2hpbGQsIGxhc3QgIT09IGkgfHwgc2VtaWNvbG9uKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmJsb2NrID0gZnVuY3Rpb24gYmxvY2sobm9kZSwgc3RhcnQpIHtcbiAgICB2YXIgYmV0d2VlbiA9IHRoaXMucmF3KG5vZGUsICdiZXR3ZWVuJywgJ2JlZm9yZU9wZW4nKTtcbiAgICB0aGlzLmJ1aWxkZXIoc3RhcnQgKyBiZXR3ZWVuICsgJ3snLCBub2RlLCAnc3RhcnQnKTtcbiAgICB2YXIgYWZ0ZXI7XG5cbiAgICBpZiAobm9kZS5ub2RlcyAmJiBub2RlLm5vZGVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5ib2R5KG5vZGUpO1xuICAgICAgYWZ0ZXIgPSB0aGlzLnJhdyhub2RlLCAnYWZ0ZXInKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYWZ0ZXIgPSB0aGlzLnJhdyhub2RlLCAnYWZ0ZXInLCAnZW1wdHlCb2R5Jyk7XG4gICAgfVxuXG4gICAgaWYgKGFmdGVyKSB0aGlzLmJ1aWxkZXIoYWZ0ZXIpO1xuICAgIHRoaXMuYnVpbGRlcignfScsIG5vZGUsICdlbmQnKTtcbiAgfTtcblxuICBfcHJvdG8ucmF3ID0gZnVuY3Rpb24gcmF3KG5vZGUsIG93biwgZGV0ZWN0KSB7XG4gICAgdmFyIHZhbHVlO1xuICAgIGlmICghZGV0ZWN0KSBkZXRlY3QgPSBvd247IC8vIEFscmVhZHkgaGFkXG5cbiAgICBpZiAob3duKSB7XG4gICAgICB2YWx1ZSA9IG5vZGUucmF3c1tvd25dO1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICB2YXIgcGFyZW50ID0gbm9kZS5wYXJlbnQ7IC8vIEhhY2sgZm9yIGZpcnN0IHJ1bGUgaW4gQ1NTXG5cbiAgICBpZiAoZGV0ZWN0ID09PSAnYmVmb3JlJykge1xuICAgICAgaWYgKCFwYXJlbnQgfHwgcGFyZW50LnR5cGUgPT09ICdyb290JyAmJiBwYXJlbnQuZmlyc3QgPT09IG5vZGUpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgICAgfVxuICAgIH0gLy8gRmxvYXRpbmcgY2hpbGQgd2l0aG91dCBwYXJlbnRcblxuXG4gICAgaWYgKCFwYXJlbnQpIHJldHVybiBERUZBVUxUX1JBV1tkZXRlY3RdOyAvLyBEZXRlY3Qgc3R5bGUgYnkgb3RoZXIgbm9kZXNcblxuICAgIHZhciByb290ID0gbm9kZS5yb290KCk7XG4gICAgaWYgKCFyb290LnJhd0NhY2hlKSByb290LnJhd0NhY2hlID0ge307XG5cbiAgICBpZiAodHlwZW9mIHJvb3QucmF3Q2FjaGVbZGV0ZWN0XSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiByb290LnJhd0NhY2hlW2RldGVjdF07XG4gICAgfVxuXG4gICAgaWYgKGRldGVjdCA9PT0gJ2JlZm9yZScgfHwgZGV0ZWN0ID09PSAnYWZ0ZXInKSB7XG4gICAgICByZXR1cm4gdGhpcy5iZWZvcmVBZnRlcihub2RlLCBkZXRlY3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbWV0aG9kID0gJ3JhdycgKyBjYXBpdGFsaXplKGRldGVjdCk7XG5cbiAgICAgIGlmICh0aGlzW21ldGhvZF0pIHtcbiAgICAgICAgdmFsdWUgPSB0aGlzW21ldGhvZF0ocm9vdCwgbm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByb290LndhbGsoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICB2YWx1ZSA9IGkucmF3c1tvd25dO1xuICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB2YWx1ZSA9IERFRkFVTFRfUkFXW2RldGVjdF07XG4gICAgcm9vdC5yYXdDYWNoZVtkZXRlY3RdID0gdmFsdWU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIF9wcm90by5yYXdTZW1pY29sb24gPSBmdW5jdGlvbiByYXdTZW1pY29sb24ocm9vdCkge1xuICAgIHZhciB2YWx1ZTtcbiAgICByb290LndhbGsoZnVuY3Rpb24gKGkpIHtcbiAgICAgIGlmIChpLm5vZGVzICYmIGkubm9kZXMubGVuZ3RoICYmIGkubGFzdC50eXBlID09PSAnZGVjbCcpIHtcbiAgICAgICAgdmFsdWUgPSBpLnJhd3Muc2VtaWNvbG9uO1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICBfcHJvdG8ucmF3RW1wdHlCb2R5ID0gZnVuY3Rpb24gcmF3RW1wdHlCb2R5KHJvb3QpIHtcbiAgICB2YXIgdmFsdWU7XG4gICAgcm9vdC53YWxrKGZ1bmN0aW9uIChpKSB7XG4gICAgICBpZiAoaS5ub2RlcyAmJiBpLm5vZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICB2YWx1ZSA9IGkucmF3cy5hZnRlcjtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgX3Byb3RvLnJhd0luZGVudCA9IGZ1bmN0aW9uIHJhd0luZGVudChyb290KSB7XG4gICAgaWYgKHJvb3QucmF3cy5pbmRlbnQpIHJldHVybiByb290LnJhd3MuaW5kZW50O1xuICAgIHZhciB2YWx1ZTtcbiAgICByb290LndhbGsoZnVuY3Rpb24gKGkpIHtcbiAgICAgIHZhciBwID0gaS5wYXJlbnQ7XG5cbiAgICAgIGlmIChwICYmIHAgIT09IHJvb3QgJiYgcC5wYXJlbnQgJiYgcC5wYXJlbnQgPT09IHJvb3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpLnJhd3MuYmVmb3JlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhciBwYXJ0cyA9IGkucmF3cy5iZWZvcmUuc3BsaXQoJ1xcbicpO1xuICAgICAgICAgIHZhbHVlID0gcGFydHNbcGFydHMubGVuZ3RoIC0gMV07XG4gICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXlxcc10vZywgJycpO1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICBfcHJvdG8ucmF3QmVmb3JlQ29tbWVudCA9IGZ1bmN0aW9uIHJhd0JlZm9yZUNvbW1lbnQocm9vdCwgbm9kZSkge1xuICAgIHZhciB2YWx1ZTtcbiAgICByb290LndhbGtDb21tZW50cyhmdW5jdGlvbiAoaSkge1xuICAgICAgaWYgKHR5cGVvZiBpLnJhd3MuYmVmb3JlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICB2YWx1ZSA9IGkucmF3cy5iZWZvcmU7XG5cbiAgICAgICAgaWYgKHZhbHVlLmluZGV4T2YoJ1xcbicpICE9PSAtMSkge1xuICAgICAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvW15cXG5dKyQvLCAnJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdmFsdWUgPSB0aGlzLnJhdyhub2RlLCBudWxsLCAnYmVmb3JlRGVjbCcpO1xuICAgIH0gZWxzZSBpZiAodmFsdWUpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvW15cXHNdL2csICcnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgX3Byb3RvLnJhd0JlZm9yZURlY2wgPSBmdW5jdGlvbiByYXdCZWZvcmVEZWNsKHJvb3QsIG5vZGUpIHtcbiAgICB2YXIgdmFsdWU7XG4gICAgcm9vdC53YWxrRGVjbHMoZnVuY3Rpb24gKGkpIHtcbiAgICAgIGlmICh0eXBlb2YgaS5yYXdzLmJlZm9yZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFsdWUgPSBpLnJhd3MuYmVmb3JlO1xuXG4gICAgICAgIGlmICh2YWx1ZS5pbmRleE9mKCdcXG4nKSAhPT0gLTEpIHtcbiAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1teXFxuXSskLywgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhbHVlID0gdGhpcy5yYXcobm9kZSwgbnVsbCwgJ2JlZm9yZVJ1bGUnKTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1teXFxzXS9nLCAnJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIF9wcm90by5yYXdCZWZvcmVSdWxlID0gZnVuY3Rpb24gcmF3QmVmb3JlUnVsZShyb290KSB7XG4gICAgdmFyIHZhbHVlO1xuICAgIHJvb3Qud2FsayhmdW5jdGlvbiAoaSkge1xuICAgICAgaWYgKGkubm9kZXMgJiYgKGkucGFyZW50ICE9PSByb290IHx8IHJvb3QuZmlyc3QgIT09IGkpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaS5yYXdzLmJlZm9yZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICB2YWx1ZSA9IGkucmF3cy5iZWZvcmU7XG5cbiAgICAgICAgICBpZiAodmFsdWUuaW5kZXhPZignXFxuJykgIT09IC0xKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1teXFxuXSskLywgJycpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICh2YWx1ZSkgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXlxcc10vZywgJycpO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICBfcHJvdG8ucmF3QmVmb3JlQ2xvc2UgPSBmdW5jdGlvbiByYXdCZWZvcmVDbG9zZShyb290KSB7XG4gICAgdmFyIHZhbHVlO1xuICAgIHJvb3Qud2FsayhmdW5jdGlvbiAoaSkge1xuICAgICAgaWYgKGkubm9kZXMgJiYgaS5ub2Rlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaS5yYXdzLmFmdGVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgIHZhbHVlID0gaS5yYXdzLmFmdGVyO1xuXG4gICAgICAgICAgaWYgKHZhbHVlLmluZGV4T2YoJ1xcbicpICE9PSAtMSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bXlxcbl0rJC8sICcnKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAodmFsdWUpIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvW15cXHNdL2csICcnKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgX3Byb3RvLnJhd0JlZm9yZU9wZW4gPSBmdW5jdGlvbiByYXdCZWZvcmVPcGVuKHJvb3QpIHtcbiAgICB2YXIgdmFsdWU7XG4gICAgcm9vdC53YWxrKGZ1bmN0aW9uIChpKSB7XG4gICAgICBpZiAoaS50eXBlICE9PSAnZGVjbCcpIHtcbiAgICAgICAgdmFsdWUgPSBpLnJhd3MuYmV0d2VlbjtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgX3Byb3RvLnJhd0NvbG9uID0gZnVuY3Rpb24gcmF3Q29sb24ocm9vdCkge1xuICAgIHZhciB2YWx1ZTtcbiAgICByb290LndhbGtEZWNscyhmdW5jdGlvbiAoaSkge1xuICAgICAgaWYgKHR5cGVvZiBpLnJhd3MuYmV0d2VlbiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFsdWUgPSBpLnJhd3MuYmV0d2Vlbi5yZXBsYWNlKC9bXlxcczpdL2csICcnKTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICBfcHJvdG8uYmVmb3JlQWZ0ZXIgPSBmdW5jdGlvbiBiZWZvcmVBZnRlcihub2RlLCBkZXRlY3QpIHtcbiAgICB2YXIgdmFsdWU7XG5cbiAgICBpZiAobm9kZS50eXBlID09PSAnZGVjbCcpIHtcbiAgICAgIHZhbHVlID0gdGhpcy5yYXcobm9kZSwgbnVsbCwgJ2JlZm9yZURlY2wnKTtcbiAgICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gJ2NvbW1lbnQnKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMucmF3KG5vZGUsIG51bGwsICdiZWZvcmVDb21tZW50Jyk7XG4gICAgfSBlbHNlIGlmIChkZXRlY3QgPT09ICdiZWZvcmUnKSB7XG4gICAgICB2YWx1ZSA9IHRoaXMucmF3KG5vZGUsIG51bGwsICdiZWZvcmVSdWxlJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlID0gdGhpcy5yYXcobm9kZSwgbnVsbCwgJ2JlZm9yZUNsb3NlJyk7XG4gICAgfVxuXG4gICAgdmFyIGJ1ZiA9IG5vZGUucGFyZW50O1xuICAgIHZhciBkZXB0aCA9IDA7XG5cbiAgICB3aGlsZSAoYnVmICYmIGJ1Zi50eXBlICE9PSAncm9vdCcpIHtcbiAgICAgIGRlcHRoICs9IDE7XG4gICAgICBidWYgPSBidWYucGFyZW50O1xuICAgIH1cblxuICAgIGlmICh2YWx1ZS5pbmRleE9mKCdcXG4nKSAhPT0gLTEpIHtcbiAgICAgIHZhciBpbmRlbnQgPSB0aGlzLnJhdyhub2RlLCBudWxsLCAnaW5kZW50Jyk7XG5cbiAgICAgIGlmIChpbmRlbnQubGVuZ3RoKSB7XG4gICAgICAgIGZvciAodmFyIHN0ZXAgPSAwOyBzdGVwIDwgZGVwdGg7IHN0ZXArKykge1xuICAgICAgICAgIHZhbHVlICs9IGluZGVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfTtcblxuICBfcHJvdG8ucmF3VmFsdWUgPSBmdW5jdGlvbiByYXdWYWx1ZShub2RlLCBwcm9wKSB7XG4gICAgdmFyIHZhbHVlID0gbm9kZVtwcm9wXTtcbiAgICB2YXIgcmF3ID0gbm9kZS5yYXdzW3Byb3BdO1xuXG4gICAgaWYgKHJhdyAmJiByYXcudmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gcmF3LnJhdztcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG5cbiAgcmV0dXJuIFN0cmluZ2lmaWVyO1xufSgpO1xuXG52YXIgX2RlZmF1bHQgPSBTdHJpbmdpZmllcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluTjBjbWx1WjJsbWFXVnlMbVZ6TmlKZExDSnVZVzFsY3lJNld5SkVSVVpCVlV4VVgxSkJWeUlzSW1OdmJHOXVJaXdpYVc1a1pXNTBJaXdpWW1WbWIzSmxSR1ZqYkNJc0ltSmxabTl5WlZKMWJHVWlMQ0ppWldadmNtVlBjR1Z1SWl3aVltVm1iM0psUTJ4dmMyVWlMQ0ppWldadmNtVkRiMjF0Wlc1MElpd2lZV1owWlhJaUxDSmxiWEIwZVVKdlpIa2lMQ0pqYjIxdFpXNTBUR1ZtZENJc0ltTnZiVzFsYm5SU2FXZG9kQ0lzSW5ObGJXbGpiMnh2YmlJc0ltTmhjR2wwWVd4cGVtVWlMQ0p6ZEhJaUxDSjBiMVZ3Y0dWeVEyRnpaU0lzSW5Oc2FXTmxJaXdpVTNSeWFXNW5hV1pwWlhJaUxDSmlkV2xzWkdWeUlpd2ljM1J5YVc1bmFXWjVJaXdpYm05a1pTSXNJblI1Y0dVaUxDSnliMjkwSWl3aVltOWtlU0lzSW5KaGQzTWlMQ0pqYjIxdFpXNTBJaXdpYkdWbWRDSXNJbkpoZHlJc0luSnBaMmgwSWl3aWRHVjRkQ0lzSW1SbFkyd2lMQ0ppWlhSM1pXVnVJaXdpYzNSeWFXNW5JaXdpY0hKdmNDSXNJbkpoZDFaaGJIVmxJaXdpYVcxd2IzSjBZVzUwSWl3aWNuVnNaU0lzSW1Kc2IyTnJJaXdpYjNkdVUyVnRhV052Ykc5dUlpd2lZWFJ5ZFd4bElpd2libUZ0WlNJc0luQmhjbUZ0Y3lJc0ltRm1kR1Z5VG1GdFpTSXNJbTV2WkdWeklpd2laVzVrSWl3aWJHRnpkQ0lzSW14bGJtZDBhQ0lzSW1raUxDSmphR2xzWkNJc0ltSmxabTl5WlNJc0luTjBZWEowSWl3aWIzZHVJaXdpWkdWMFpXTjBJaXdpZG1Gc2RXVWlMQ0p3WVhKbGJuUWlMQ0ptYVhKemRDSXNJbkpoZDBOaFkyaGxJaXdpWW1WbWIzSmxRV1owWlhJaUxDSnRaWFJvYjJRaUxDSjNZV3hySWl3aWNtRjNVMlZ0YVdOdmJHOXVJaXdpY21GM1JXMXdkSGxDYjJSNUlpd2ljbUYzU1c1a1pXNTBJaXdpY0NJc0luQmhjblJ6SWl3aWMzQnNhWFFpTENKeVpYQnNZV05sSWl3aWNtRjNRbVZtYjNKbFEyOXRiV1Z1ZENJc0luZGhiR3REYjIxdFpXNTBjeUlzSW1sdVpHVjRUMllpTENKeVlYZENaV1p2Y21WRVpXTnNJaXdpZDJGc2EwUmxZMnh6SWl3aWNtRjNRbVZtYjNKbFVuVnNaU0lzSW5KaGQwSmxabTl5WlVOc2IzTmxJaXdpY21GM1FtVm1iM0psVDNCbGJpSXNJbkpoZDBOdmJHOXVJaXdpWW5WbUlpd2laR1Z3ZEdnaUxDSnpkR1Z3SWwwc0ltMWhjSEJwYm1keklqb2lPenM3TzBGQlFVRXNTVUZCVFVFc1YwRkJWeXhIUVVGSE8wRkJRMnhDUXl4RlFVRkJRU3hMUVVGTExFVkJRVVVzU1VGRVZ6dEJRVVZzUWtNc1JVRkJRVUVzVFVGQlRTeEZRVUZGTEUxQlJsVTdRVUZIYkVKRExFVkJRVUZCTEZWQlFWVXNSVUZCUlN4SlFVaE5PMEZCU1d4Q1F5eEZRVUZCUVN4VlFVRlZMRVZCUVVVc1NVRktUVHRCUVV0c1FrTXNSVUZCUVVFc1ZVRkJWU3hGUVVGRkxFZEJURTA3UVVGTmJFSkRMRVZCUVVGQkxGZEJRVmNzUlVGQlJTeEpRVTVMTzBGQlQyeENReXhGUVVGQlFTeGhRVUZoTEVWQlFVVXNTVUZRUnp0QlFWRnNRa01zUlVGQlFVRXNTMEZCU3l4RlFVRkZMRWxCVWxjN1FVRlRiRUpETEVWQlFVRkJMRk5CUVZNc1JVRkJSU3hGUVZSUE8wRkJWV3hDUXl4RlFVRkJRU3hYUVVGWExFVkJRVVVzUjBGV1N6dEJRVmRzUWtNc1JVRkJRVUVzV1VGQldTeEZRVUZGTEVkQldFazdRVUZaYkVKRExFVkJRVUZCTEZOQlFWTXNSVUZCUlR0QlFWcFBMRU5CUVhCQ096dEJRV1ZCTEZOQlFWTkRMRlZCUVZRc1EwRkJjVUpETEVkQlFYSkNMRVZCUVRCQ08wRkJRM2hDTEZOQlFVOUJMRWRCUVVjc1EwRkJReXhEUVVGRUxFTkJRVWdzUTBGQlQwTXNWMEZCVUN4TFFVRjFRa1FzUjBGQlJ5eERRVUZEUlN4TFFVRktMRU5CUVZVc1EwRkJWaXhEUVVFNVFqdEJRVU5FT3p0SlFVVkxReXhYT3pzN1FVRkRTaXgxUWtGQllVTXNUMEZCWWl4RlFVRnpRanRCUVVOd1FpeFRRVUZMUVN4UFFVRk1MRWRCUVdWQkxFOUJRV1k3UVVGRFJEczdPenRUUVVWRVF5eFRMRWRCUVVFc2JVSkJRVmRETEVsQlFWZ3NSVUZCYVVKU0xGTkJRV3BDTEVWQlFUUkNPMEZCUXpGQ0xGTkJRVXRSTEVsQlFVa3NRMEZCUTBNc1NVRkJWaXhGUVVGblFrUXNTVUZCYUVJc1JVRkJjMEpTTEZOQlFYUkNPMEZCUTBRc1J6czdVMEZGUkZVc1NTeEhRVUZCTEdOQlFVMUdMRWxCUVU0c1JVRkJXVHRCUVVOV0xGTkJRVXRITEVsQlFVd3NRMEZCVlVnc1NVRkJWanRCUVVOQkxGRkJRVWxCTEVsQlFVa3NRMEZCUTBrc1NVRkJUQ3hEUVVGVmFFSXNTMEZCWkN4RlFVRnhRaXhMUVVGTFZTeFBRVUZNTEVOQlFXRkZMRWxCUVVrc1EwRkJRMGtzU1VGQlRDeERRVUZWYUVJc1MwRkJka0k3UVVGRGRFSXNSenM3VTBGRlJHbENMRThzUjBGQlFTeHBRa0ZCVTB3c1NVRkJWQ3hGUVVGbE8wRkJRMklzVVVGQlNVMHNTVUZCU1N4SFFVRkhMRXRCUVV0RExFZEJRVXdzUTBGQlUxQXNTVUZCVkN4RlFVRmxMRTFCUVdZc1JVRkJkVUlzWVVGQmRrSXNRMEZCV0R0QlFVTkJMRkZCUVVsUkxFdEJRVXNzUjBGQlJ5eExRVUZMUkN4SFFVRk1MRU5CUVZOUUxFbEJRVlFzUlVGQlpTeFBRVUZtTEVWQlFYZENMR05CUVhoQ0xFTkJRVm83UVVGRFFTeFRRVUZMUml4UFFVRk1MRU5CUVdFc1QwRkJUMUVzU1VGQlVDeEhRVUZqVGl4SlFVRkpMRU5CUVVOVExFbEJRVzVDTEVkQlFUQkNSQ3hMUVVFeFFpeEhRVUZyUXl4SlFVRXZReXhGUVVGeFJGSXNTVUZCY2tRN1FVRkRSQ3hIT3p0VFFVVkVWU3hKTEVkQlFVRXNZMEZCVFZZc1NVRkJUaXhGUVVGWlVpeFRRVUZhTEVWQlFYVkNPMEZCUTNKQ0xGRkJRVWx0UWl4UFFVRlBMRWRCUVVjc1MwRkJTMG9zUjBGQlRDeERRVUZUVUN4SlFVRlVMRVZCUVdVc1UwRkJaaXhGUVVFd1FpeFBRVUV4UWl4RFFVRmtPMEZCUTBFc1VVRkJTVmtzVFVGQlRTeEhRVUZIV2l4SlFVRkpMRU5CUVVOaExFbEJRVXdzUjBGQldVWXNUMEZCV2l4SFFVRnpRaXhMUVVGTFJ5eFJRVUZNTEVOQlFXTmtMRWxCUVdRc1JVRkJiMElzVDBGQmNFSXNRMEZCYmtNN08wRkJSVUVzVVVGQlNVRXNTVUZCU1N4RFFVRkRaU3hUUVVGVUxFVkJRVzlDTzBGQlEyeENTQ3hOUVVGQlFTeE5RVUZOTEVsQlFVbGFMRWxCUVVrc1EwRkJRMGtzU1VGQlRDeERRVUZWVnl4VFFVRldMRWxCUVhWQ0xHRkJRV3BETzBGQlEwUTdPMEZCUlVRc1VVRkJTWFpDTEZOQlFVb3NSVUZCWlc5Q0xFMUJRVTBzU1VGQlNTeEhRVUZXTzBGQlEyWXNVMEZCUzJRc1QwRkJUQ3hEUVVGaFl5eE5RVUZpTEVWQlFYRkNXaXhKUVVGeVFqdEJRVU5FTEVjN08xTkJSVVJuUWl4SkxFZEJRVUVzWTBGQlRXaENMRWxCUVU0c1JVRkJXVHRCUVVOV0xGTkJRVXRwUWl4TFFVRk1MRU5CUVZkcVFpeEpRVUZZTEVWQlFXbENMRXRCUVV0akxGRkJRVXdzUTBGQlkyUXNTVUZCWkN4RlFVRnZRaXhWUVVGd1FpeERRVUZxUWpzN1FVRkRRU3hSUVVGSlFTeEpRVUZKTEVOQlFVTkpMRWxCUVV3c1EwRkJWV01zV1VGQlpDeEZRVUUwUWp0QlFVTXhRaXhYUVVGTGNFSXNUMEZCVEN4RFFVRmhSU3hKUVVGSkxFTkJRVU5KTEVsQlFVd3NRMEZCVldNc1dVRkJka0lzUlVGQmNVTnNRaXhKUVVGeVF5eEZRVUV5UXl4TFFVRXpRenRCUVVORU8wRkJRMFlzUnpzN1UwRkZSRzFDTEUwc1IwRkJRU3huUWtGQlVXNUNMRWxCUVZJc1JVRkJZMUlzVTBGQlpDeEZRVUY1UWp0QlFVTjJRaXhSUVVGSk5FSXNTVUZCU1N4SFFVRkhMRTFCUVUxd1FpeEpRVUZKTEVOQlFVTnZRaXhKUVVGMFFqdEJRVU5CTEZGQlFVbERMRTFCUVUwc1IwRkJSM0pDTEVsQlFVa3NRMEZCUTNGQ0xFMUJRVXdzUjBGQll5eExRVUZMVUN4UlFVRk1MRU5CUVdOa0xFbEJRV1FzUlVGQmIwSXNVVUZCY0VJc1EwRkJaQ3hIUVVFNFF5eEZRVUV6UkRzN1FVRkZRU3hSUVVGSkxFOUJRVTlCTEVsQlFVa3NRMEZCUTBrc1NVRkJUQ3hEUVVGVmEwSXNVMEZCYWtJc1MwRkJLMElzVjBGQmJrTXNSVUZCWjBRN1FVRkRPVU5HTEUxQlFVRkJMRWxCUVVrc1NVRkJTWEJDTEVsQlFVa3NRMEZCUTBrc1NVRkJUQ3hEUVVGVmEwSXNVMEZCYkVJN1FVRkRSQ3hMUVVaRUxFMUJSVThzU1VGQlNVUXNUVUZCU2l4RlFVRlpPMEZCUTJwQ1JDeE5RVUZCUVN4SlFVRkpMRWxCUVVrc1IwRkJVanRCUVVORU96dEJRVVZFTEZGQlFVbHdRaXhKUVVGSkxFTkJRVU4xUWl4TFFVRlVMRVZCUVdkQ08wRkJRMlFzVjBGQlMwNHNTMEZCVEN4RFFVRlhha0lzU1VGQldDeEZRVUZwUW05Q0xFbEJRVWtzUjBGQlIwTXNUVUZCZUVJN1FVRkRSQ3hMUVVaRUxFMUJSVTg3UVVGRFRDeFZRVUZKUnl4SFFVRkhMRWRCUVVjc1EwRkJRM2hDTEVsQlFVa3NRMEZCUTBrc1NVRkJUQ3hEUVVGVlR5eFBRVUZXTEVsQlFYRkNMRVZCUVhSQ0xFdEJRVFpDYmtJc1UwRkJVeXhIUVVGSExFZEJRVWdzUjBGQlV5eEZRVUV2UXl4RFFVRldPMEZCUTBFc1YwRkJTMDBzVDBGQlRDeERRVUZoYzBJc1NVRkJTU3hIUVVGSFF5eE5RVUZRTEVkQlFXZENSeXhIUVVFM1FpeEZRVUZyUTNoQ0xFbEJRV3hETzBGQlEwUTdRVUZEUml4SE96dFRRVVZFUnl4SkxFZEJRVUVzWTBGQlRVZ3NTVUZCVGl4RlFVRlpPMEZCUTFZc1VVRkJTWGxDTEVsQlFVa3NSMEZCUjNwQ0xFbEJRVWtzUTBGQlEzVkNMRXRCUVV3c1EwRkJWMGNzVFVGQldDeEhRVUZ2UWl4RFFVRXZRanM3UVVGRFFTeFhRVUZQUkN4SlFVRkpMRWRCUVVjc1EwRkJaQ3hGUVVGcFFqdEJRVU5tTEZWQlFVbDZRaXhKUVVGSkxFTkJRVU4xUWl4TFFVRk1MRU5CUVZkRkxFbEJRVmdzUlVGQmFVSjRRaXhKUVVGcVFpeExRVUV3UWl4VFFVRTVRaXhGUVVGNVF6dEJRVU42UTNkQ0xFMUJRVUZCTEVsQlFVa3NTVUZCU1N4RFFVRlNPMEZCUTBRN08wRkJSVVFzVVVGQlNXcERMRk5CUVZNc1IwRkJSeXhMUVVGTFpTeEhRVUZNTEVOQlFWTlFMRWxCUVZRc1JVRkJaU3hYUVVGbUxFTkJRV2hDT3p0QlFVTkJMRk5CUVVzc1NVRkJTVEpDTEVOQlFVTXNSMEZCUnl4RFFVRmlMRVZCUVdkQ1FTeERRVUZETEVkQlFVY3pRaXhKUVVGSkxFTkJRVU4xUWl4TFFVRk1MRU5CUVZkSExFMUJRUzlDTEVWQlFYVkRReXhEUVVGRExFVkJRWGhETEVWQlFUUkRPMEZCUXpGRExGVkJRVWxETEV0QlFVc3NSMEZCUnpWQ0xFbEJRVWtzUTBGQlEzVkNMRXRCUVV3c1EwRkJWMGtzUTBGQldDeERRVUZhTzBGQlEwRXNWVUZCU1VVc1RVRkJUU3hIUVVGSExFdEJRVXQwUWl4SFFVRk1MRU5CUVZOeFFpeExRVUZVTEVWQlFXZENMRkZCUVdoQ0xFTkJRV0k3UVVGRFFTeFZRVUZKUXl4TlFVRktMRVZCUVZrc1MwRkJTeTlDTEU5QlFVd3NRMEZCWVN0Q0xFMUJRV0k3UVVGRFdpeFhRVUZMT1VJc1UwRkJUQ3hEUVVGbE5rSXNTMEZCWml4RlFVRnpRa2dzU1VGQlNTeExRVUZMUlN4RFFVRlVMRWxCUVdOdVF5eFRRVUZ3UXp0QlFVTkVPMEZCUTBZc1J6czdVMEZGUkhsQ0xFc3NSMEZCUVN4bFFVRlBha0lzU1VGQlVDeEZRVUZoT0VJc1MwRkJZaXhGUVVGdlFqdEJRVU5zUWl4UlFVRkpia0lzVDBGQlR5eEhRVUZITEV0QlFVdEtMRWRCUVV3c1EwRkJVMUFzU1VGQlZDeEZRVUZsTEZOQlFXWXNSVUZCTUVJc1dVRkJNVUlzUTBGQlpEdEJRVU5CTEZOQlFVdEdMRTlCUVV3c1EwRkJZV2RETEV0QlFVc3NSMEZCUjI1Q0xFOUJRVklzUjBGQmEwSXNSMEZCTDBJc1JVRkJiME5ZTEVsQlFYQkRMRVZCUVRCRExFOUJRVEZETzBGQlJVRXNVVUZCU1Zvc1MwRkJTanM3UVVGRFFTeFJRVUZKV1N4SlFVRkpMRU5CUVVOMVFpeExRVUZNTEVsQlFXTjJRaXhKUVVGSkxFTkJRVU4xUWl4TFFVRk1MRU5CUVZkSExFMUJRVGRDTEVWQlFYRkRPMEZCUTI1RExGZEJRVXQyUWl4SlFVRk1MRU5CUVZWSUxFbEJRVlk3UVVGRFFWb3NUVUZCUVVFc1MwRkJTeXhIUVVGSExFdEJRVXR0UWl4SFFVRk1MRU5CUVZOUUxFbEJRVlFzUlVGQlpTeFBRVUZtTEVOQlFWSTdRVUZEUkN4TFFVaEVMRTFCUjA4N1FVRkRURm9zVFVGQlFVRXNTMEZCU3l4SFFVRkhMRXRCUVV0dFFpeEhRVUZNTEVOQlFWTlFMRWxCUVZRc1JVRkJaU3hQUVVGbUxFVkJRWGRDTEZkQlFYaENMRU5CUVZJN1FVRkRSRHM3UVVGRlJDeFJRVUZKV2l4TFFVRktMRVZCUVZjc1MwRkJTMVVzVDBGQlRDeERRVUZoVml4TFFVRmlPMEZCUTFnc1UwRkJTMVVzVDBGQlRDeERRVUZoTEVkQlFXSXNSVUZCYTBKRkxFbEJRV3hDTEVWQlFYZENMRXRCUVhoQ08wRkJRMFFzUnpzN1UwRkZSRThzUnl4SFFVRkJMR0ZCUVV0UUxFbEJRVXdzUlVGQlZ5dENMRWRCUVZnc1JVRkJaMEpETEUxQlFXaENMRVZCUVhkQ08wRkJRM1JDTEZGQlFVbERMRXRCUVVvN1FVRkRRU3hSUVVGSkxFTkJRVU5FTEUxQlFVd3NSVUZCWVVFc1RVRkJUU3hIUVVGSFJDeEhRVUZVTEVOQlJsTXNRMEZKZEVJN08wRkJRMEVzVVVGQlNVRXNSMEZCU2l4RlFVRlRPMEZCUTFCRkxFMUJRVUZCTEV0QlFVc3NSMEZCUjJwRExFbEJRVWtzUTBGQlEwa3NTVUZCVEN4RFFVRlZNa0lzUjBGQlZpeERRVUZTTzBGQlEwRXNWVUZCU1N4UFFVRlBSU3hMUVVGUUxFdEJRV2xDTEZkQlFYSkNMRVZCUVd0RExFOUJRVTlCTEV0QlFWQTdRVUZEYmtNN08wRkJSVVFzVVVGQlNVTXNUVUZCVFN4SFFVRkhiRU1zU1VGQlNTeERRVUZEYTBNc1RVRkJiRUlzUTBGV2MwSXNRMEZaZEVJN08wRkJRMEVzVVVGQlNVWXNUVUZCVFN4TFFVRkxMRkZCUVdZc1JVRkJlVUk3UVVGRGRrSXNWVUZCU1N4RFFVRkRSU3hOUVVGRUxFbEJRVmxCTEUxQlFVMHNRMEZCUTJwRExFbEJRVkFzUzBGQlowSXNUVUZCYUVJc1NVRkJNRUpwUXl4TlFVRk5MRU5CUVVORExFdEJRVkFzUzBGQmFVSnVReXhKUVVFelJDeEZRVUZyUlR0QlFVTm9SU3hsUVVGUExFVkJRVkE3UVVGRFJEdEJRVU5HTEV0QmFrSnhRaXhEUVcxQ2RFSTdPenRCUVVOQkxGRkJRVWtzUTBGQlEydERMRTFCUVV3c1JVRkJZU3hQUVVGUGRFUXNWMEZCVnl4RFFVRkRiMFFzVFVGQlJDeERRVUZzUWl4RFFYQkNVeXhEUVhOQ2RFSTdPMEZCUTBFc1VVRkJTVGxDTEVsQlFVa3NSMEZCUjBZc1NVRkJTU3hEUVVGRFJTeEpRVUZNTEVWQlFWZzdRVUZEUVN4UlFVRkpMRU5CUVVOQkxFbEJRVWtzUTBGQlEydERMRkZCUVZZc1JVRkJiMEpzUXl4SlFVRkpMRU5CUVVOclF5eFJRVUZNTEVkQlFXZENMRVZCUVdoQ096dEJRVU53UWl4UlFVRkpMRTlCUVU5c1F5eEpRVUZKTEVOQlFVTnJReXhSUVVGTUxFTkJRV05LTEUxQlFXUXNRMEZCVUN4TFFVRnBReXhYUVVGeVF5eEZRVUZyUkR0QlFVTm9SQ3hoUVVGUE9VSXNTVUZCU1N4RFFVRkRhME1zVVVGQlRDeERRVUZqU2l4TlFVRmtMRU5CUVZBN1FVRkRSRHM3UVVGRlJDeFJRVUZKUVN4TlFVRk5MRXRCUVVzc1VVRkJXQ3hKUVVGMVFrRXNUVUZCVFN4TFFVRkxMRTlCUVhSRExFVkJRU3RETzBGQlF6ZERMR0ZCUVU4c1MwRkJTMHNzVjBGQlRDeERRVUZwUW5KRExFbEJRV3BDTEVWQlFYVkNaME1zVFVGQmRrSXNRMEZCVUR0QlFVTkVMRXRCUmtRc1RVRkZUenRCUVVOTUxGVkJRVWxOTEUxQlFVMHNSMEZCUnl4UlFVRlJOME1zVlVGQlZTeERRVUZEZFVNc1RVRkJSQ3hEUVVFdlFqczdRVUZEUVN4VlFVRkpMRXRCUVV0TkxFMUJRVXdzUTBGQlNpeEZRVUZyUWp0QlFVTm9Ra3dzVVVGQlFVRXNTMEZCU3l4SFFVRkhMRXRCUVV0TExFMUJRVXdzUlVGQllYQkRMRWxCUVdJc1JVRkJiVUpHTEVsQlFXNUNMRU5CUVZJN1FVRkRSQ3hQUVVaRUxFMUJSVTg3UVVGRFRFVXNVVUZCUVVFc1NVRkJTU3hEUVVGRGNVTXNTVUZCVEN4RFFVRlZMRlZCUVVGYUxFTkJRVU1zUlVGQlNUdEJRVU5pVFN4VlFVRkJRU3hMUVVGTExFZEJRVWRPTEVOQlFVTXNRMEZCUTNaQ0xFbEJRVVlzUTBGQlR6SkNMRWRCUVZBc1EwRkJVanRCUVVOQkxHTkJRVWtzVDBGQlQwVXNTMEZCVUN4TFFVRnBRaXhYUVVGeVFpeEZRVUZyUXl4UFFVRlBMRXRCUVZBN1FVRkRia01zVTBGSVJEdEJRVWxFTzBGQlEwWTdPMEZCUlVRc1VVRkJTU3hQUVVGUFFTeExRVUZRTEV0QlFXbENMRmRCUVhKQ0xFVkJRV3REUVN4TFFVRkxMRWRCUVVkeVJDeFhRVUZYTEVOQlFVTnZSQ3hOUVVGRUxFTkJRVzVDTzBGQlJXeERPVUlzU1VGQlFVRXNTVUZCU1N4RFFVRkRhME1zVVVGQlRDeERRVUZqU2l4TlFVRmtMRWxCUVhkQ1F5eExRVUY0UWp0QlFVTkJMRmRCUVU5QkxFdEJRVkE3UVVGRFJDeEhPenRUUVVWRVR5eFpMRWRCUVVFc2MwSkJRV04wUXl4SlFVRmtMRVZCUVc5Q08wRkJRMnhDTEZGQlFVa3JRaXhMUVVGS08wRkJRMEV2UWl4SlFVRkJRU3hKUVVGSkxFTkJRVU54UXl4SlFVRk1MRU5CUVZVc1ZVRkJRVm9zUTBGQlF5eEZRVUZKTzBGQlEySXNWVUZCU1VFc1EwRkJReXhEUVVGRFNpeExRVUZHTEVsQlFWZEpMRU5CUVVNc1EwRkJRMG9zUzBGQlJpeERRVUZSUnl4TlFVRnVRaXhKUVVFMlFrTXNRMEZCUXl4RFFVRkRSaXhKUVVGR0xFTkJRVTk0UWl4SlFVRlFMRXRCUVdkQ0xFMUJRV3BFTEVWQlFYbEVPMEZCUTNaRVowTXNVVUZCUVVFc1MwRkJTeXhIUVVGSFRpeERRVUZETEVOQlFVTjJRaXhKUVVGR0xFTkJRVTlhTEZOQlFXWTdRVUZEUVN4WlFVRkpMRTlCUVU5NVF5eExRVUZRTEV0QlFXbENMRmRCUVhKQ0xFVkJRV3RETEU5QlFVOHNTMEZCVUR0QlFVTnVRenRCUVVOR0xFdEJURVE3UVVGTlFTeFhRVUZQUVN4TFFVRlFPMEZCUTBRc1J6czdVMEZGUkZFc1dTeEhRVUZCTEhOQ1FVRmpka01zU1VGQlpDeEZRVUZ2UWp0QlFVTnNRaXhSUVVGSkswSXNTMEZCU2p0QlFVTkJMMElzU1VGQlFVRXNTVUZCU1N4RFFVRkRjVU1zU1VGQlRDeERRVUZWTEZWQlFVRmFMRU5CUVVNc1JVRkJTVHRCUVVOaUxGVkJRVWxCTEVOQlFVTXNRMEZCUTBvc1MwRkJSaXhKUVVGWFNTeERRVUZETEVOQlFVTktMRXRCUVVZc1EwRkJVVWNzVFVGQlVpeExRVUZ0UWl4RFFVRnNReXhGUVVGeFF6dEJRVU51UTA4c1VVRkJRVUVzUzBGQlN5eEhRVUZIVGl4RFFVRkRMRU5CUVVOMlFpeEpRVUZHTEVOQlFVOW9RaXhMUVVGbU8wRkJRMEVzV1VGQlNTeFBRVUZQTmtNc1MwRkJVQ3hMUVVGcFFpeFhRVUZ5UWl4RlFVRnJReXhQUVVGUExFdEJRVkE3UVVGRGJrTTdRVUZEUml4TFFVeEVPMEZCVFVFc1YwRkJUMEVzUzBGQlVEdEJRVU5FTEVjN08xTkJSVVJUTEZNc1IwRkJRU3h0UWtGQlYzaERMRWxCUVZnc1JVRkJhVUk3UVVGRFppeFJRVUZKUVN4SlFVRkpMRU5CUVVORkxFbEJRVXdzUTBGQlZYUkNMRTFCUVdRc1JVRkJjMElzVDBGQlQyOUNMRWxCUVVrc1EwRkJRMFVzU1VGQlRDeERRVUZWZEVJc1RVRkJha0k3UVVGRGRFSXNVVUZCU1cxRUxFdEJRVW83UVVGRFFTOUNMRWxCUVVGQkxFbEJRVWtzUTBGQlEzRkRMRWxCUVV3c1EwRkJWU3hWUVVGQldpeERRVUZETEVWQlFVazdRVUZEWWl4VlFVRkpaMElzUTBGQlF5eEhRVUZIYUVJc1EwRkJReXhEUVVGRFR5eE5RVUZXT3p0QlFVTkJMRlZCUVVsVExFTkJRVU1zU1VGQlNVRXNRMEZCUXl4TFFVRkxla01zU1VGQldDeEpRVUZ0UW5sRExFTkJRVU1zUTBGQlExUXNUVUZCY2tJc1NVRkJLMEpUTEVOQlFVTXNRMEZCUTFRc1RVRkJSaXhMUVVGaGFFTXNTVUZCYUVRc1JVRkJjMFE3UVVGRGNFUXNXVUZCU1N4UFFVRlBlVUlzUTBGQlF5eERRVUZEZGtJc1NVRkJSaXhEUVVGUGVVSXNUVUZCWkN4TFFVRjVRaXhYUVVFM1FpeEZRVUV3UXp0QlFVTjRReXhqUVVGSlpTeExRVUZMTEVkQlFVZHFRaXhEUVVGRExFTkJRVU4yUWl4SlFVRkdMRU5CUVU5NVFpeE5RVUZRTEVOQlFXTm5RaXhMUVVGa0xFTkJRVzlDTEVsQlFYQkNMRU5CUVZvN1FVRkRRVm9zVlVGQlFVRXNTMEZCU3l4SFFVRkhWeXhMUVVGTExFTkJRVU5CTEV0QlFVc3NRMEZCUTJ4Q0xFMUJRVTRzUjBGQlpTeERRVUZvUWl4RFFVRmlPMEZCUTBGUExGVkJRVUZCTEV0QlFVc3NSMEZCUjBFc1MwRkJTeXhEUVVGRFlTeFBRVUZPTEVOQlFXTXNVVUZCWkN4RlFVRjNRaXhGUVVGNFFpeERRVUZTTzBGQlEwRXNhVUpCUVU4c1MwRkJVRHRCUVVORU8wRkJRMFk3UVVGRFJpeExRVlpFTzBGQlYwRXNWMEZCVDJJc1MwRkJVRHRCUVVORUxFYzdPMU5CUlVSakxHZENMRWRCUVVFc01FSkJRV3RDTjBNc1NVRkJiRUlzUlVGQmQwSkdMRWxCUVhoQ0xFVkJRVGhDTzBGQlF6VkNMRkZCUVVscFF5eExRVUZLTzBGQlEwRXZRaXhKUVVGQlFTeEpRVUZKTEVOQlFVTTRReXhaUVVGTUxFTkJRV3RDTEZWQlFVRnlRaXhEUVVGRExFVkJRVWs3UVVGRGNrSXNWVUZCU1N4UFFVRlBRU3hEUVVGRExFTkJRVU4yUWl4SlFVRkdMRU5CUVU5NVFpeE5RVUZrTEV0QlFYbENMRmRCUVRkQ0xFVkJRVEJETzBGQlEzaERTU3hSUVVGQlFTeExRVUZMTEVkQlFVZE9MRU5CUVVNc1EwRkJRM1pDTEVsQlFVWXNRMEZCVDNsQ0xFMUJRV1k3TzBGQlEwRXNXVUZCU1Vrc1MwRkJTeXhEUVVGRFowSXNUMEZCVGl4RFFVRmpMRWxCUVdRc1RVRkJkMElzUTBGQlF5eERRVUUzUWl4RlFVRm5RenRCUVVNNVFtaENMRlZCUVVGQkxFdEJRVXNzUjBGQlIwRXNTMEZCU3l4RFFVRkRZU3hQUVVGT0xFTkJRV01zVTBGQlpDeEZRVUY1UWl4RlFVRjZRaXhEUVVGU08wRkJRMFE3TzBGQlEwUXNaVUZCVHl4TFFVRlFPMEZCUTBRN1FVRkRSaXhMUVZKRU96dEJRVk5CTEZGQlFVa3NUMEZCVDJJc1MwRkJVQ3hMUVVGcFFpeFhRVUZ5UWl4RlFVRnJRenRCUVVOb1EwRXNUVUZCUVVFc1MwRkJTeXhIUVVGSExFdEJRVXN4UWl4SFFVRk1MRU5CUVZOUUxFbEJRVlFzUlVGQlpTeEpRVUZtTEVWQlFYRkNMRmxCUVhKQ0xFTkJRVkk3UVVGRFJDeExRVVpFTEUxQlJVOHNTVUZCU1dsRExFdEJRVW9zUlVGQlZ6dEJRVU5vUWtFc1RVRkJRVUVzUzBGQlN5eEhRVUZIUVN4TFFVRkxMRU5CUVVOaExFOUJRVTRzUTBGQll5eFJRVUZrTEVWQlFYZENMRVZCUVhoQ0xFTkJRVkk3UVVGRFJEczdRVUZEUkN4WFFVRlBZaXhMUVVGUU8wRkJRMFFzUnpzN1UwRkZSR2xDTEdFc1IwRkJRU3gxUWtGQlpXaEVMRWxCUVdZc1JVRkJjVUpHTEVsQlFYSkNMRVZCUVRKQ08wRkJRM3BDTEZGQlFVbHBReXhMUVVGS08wRkJRMEV2UWl4SlFVRkJRU3hKUVVGSkxFTkJRVU5wUkN4VFFVRk1MRU5CUVdVc1ZVRkJRWGhDTEVOQlFVTXNSVUZCU1R0QlFVTnNRaXhWUVVGSkxFOUJRVTlCTEVOQlFVTXNRMEZCUTNaQ0xFbEJRVVlzUTBGQlQzbENMRTFCUVdRc1MwRkJlVUlzVjBGQk4wSXNSVUZCTUVNN1FVRkRlRU5KTEZGQlFVRkJMRXRCUVVzc1IwRkJSMDRzUTBGQlF5eERRVUZEZGtJc1NVRkJSaXhEUVVGUGVVSXNUVUZCWmpzN1FVRkRRU3haUVVGSlNTeExRVUZMTEVOQlFVTm5RaXhQUVVGT0xFTkJRV01zU1VGQlpDeE5RVUYzUWl4RFFVRkRMRU5CUVRkQ0xFVkJRV2RETzBGQlF6bENhRUlzVlVGQlFVRXNTMEZCU3l4SFFVRkhRU3hMUVVGTExFTkJRVU5oTEU5QlFVNHNRMEZCWXl4VFFVRmtMRVZCUVhsQ0xFVkJRWHBDTEVOQlFWSTdRVUZEUkRzN1FVRkRSQ3hsUVVGUExFdEJRVkE3UVVGRFJEdEJRVU5HTEV0QlVrUTdPMEZCVTBFc1VVRkJTU3hQUVVGUFlpeExRVUZRTEV0QlFXbENMRmRCUVhKQ0xFVkJRV3RETzBGQlEyaERRU3hOUVVGQlFTeExRVUZMTEVkQlFVY3NTMEZCU3pGQ0xFZEJRVXdzUTBGQlUxQXNTVUZCVkN4RlFVRmxMRWxCUVdZc1JVRkJjVUlzV1VGQmNrSXNRMEZCVWp0QlFVTkVMRXRCUmtRc1RVRkZUeXhKUVVGSmFVTXNTMEZCU2l4RlFVRlhPMEZCUTJoQ1FTeE5RVUZCUVN4TFFVRkxMRWRCUVVkQkxFdEJRVXNzUTBGQlEyRXNUMEZCVGl4RFFVRmpMRkZCUVdRc1JVRkJkMElzUlVGQmVFSXNRMEZCVWp0QlFVTkVPenRCUVVORUxGZEJRVTlpTEV0QlFWQTdRVUZEUkN4SE96dFRRVVZFYlVJc1lTeEhRVUZCTEhWQ1FVRmxiRVFzU1VGQlppeEZRVUZ4UWp0QlFVTnVRaXhSUVVGSkswSXNTMEZCU2p0QlFVTkJMMElzU1VGQlFVRXNTVUZCU1N4RFFVRkRjVU1zU1VGQlRDeERRVUZWTEZWQlFVRmFMRU5CUVVNc1JVRkJTVHRCUVVOaUxGVkJRVWxCTEVOQlFVTXNRMEZCUTBvc1MwRkJSaXhMUVVGWlNTeERRVUZETEVOQlFVTlBMRTFCUVVZc1MwRkJZV2hETEVsQlFXSXNTVUZCY1VKQkxFbEJRVWtzUTBGQlEybERMRXRCUVV3c1MwRkJaVklzUTBGQmFFUXNRMEZCU2l4RlFVRjNSRHRCUVVOMFJDeFpRVUZKTEU5QlFVOUJMRU5CUVVNc1EwRkJRM1pDTEVsQlFVWXNRMEZCVDNsQ0xFMUJRV1FzUzBGQmVVSXNWMEZCTjBJc1JVRkJNRU03UVVGRGVFTkpMRlZCUVVGQkxFdEJRVXNzUjBGQlIwNHNRMEZCUXl4RFFVRkRka0lzU1VGQlJpeERRVUZQZVVJc1RVRkJaanM3UVVGRFFTeGpRVUZKU1N4TFFVRkxMRU5CUVVOblFpeFBRVUZPTEVOQlFXTXNTVUZCWkN4TlFVRjNRaXhEUVVGRExFTkJRVGRDTEVWQlFXZERPMEZCUXpsQ2FFSXNXVUZCUVVFc1MwRkJTeXhIUVVGSFFTeExRVUZMTEVOQlFVTmhMRTlCUVU0c1EwRkJZeXhUUVVGa0xFVkJRWGxDTEVWQlFYcENMRU5CUVZJN1FVRkRSRHM3UVVGRFJDeHBRa0ZCVHl4TFFVRlFPMEZCUTBRN1FVRkRSanRCUVVOR0xFdEJWa1E3UVVGWFFTeFJRVUZKWWl4TFFVRktMRVZCUVZkQkxFdEJRVXNzUjBGQlIwRXNTMEZCU3l4RFFVRkRZU3hQUVVGT0xFTkJRV01zVVVGQlpDeEZRVUYzUWl4RlFVRjRRaXhEUVVGU08wRkJRMWdzVjBGQlQySXNTMEZCVUR0QlFVTkVMRWM3TzFOQlJVUnZRaXhqTEVkQlFVRXNkMEpCUVdkQ2JrUXNTVUZCYUVJc1JVRkJjMEk3UVVGRGNFSXNVVUZCU1N0Q0xFdEJRVW83UVVGRFFTOUNMRWxCUVVGQkxFbEJRVWtzUTBGQlEzRkRMRWxCUVV3c1EwRkJWU3hWUVVGQldpeERRVUZETEVWQlFVazdRVUZEWWl4VlFVRkpRU3hEUVVGRExFTkJRVU5LTEV0QlFVWXNTVUZCVjBrc1EwRkJReXhEUVVGRFNpeExRVUZHTEVOQlFWRkhMRTFCUVZJc1IwRkJhVUlzUTBGQmFFTXNSVUZCYlVNN1FVRkRha01zV1VGQlNTeFBRVUZQUXl4RFFVRkRMRU5CUVVOMlFpeEpRVUZHTEVOQlFVOW9RaXhMUVVGa0xFdEJRWGRDTEZkQlFUVkNMRVZCUVhsRE8wRkJRM1pETmtNc1ZVRkJRVUVzUzBGQlN5eEhRVUZIVGl4RFFVRkRMRU5CUVVOMlFpeEpRVUZHTEVOQlFVOW9RaXhMUVVGbU96dEJRVU5CTEdOQlFVazJReXhMUVVGTExFTkJRVU5uUWl4UFFVRk9MRU5CUVdNc1NVRkJaQ3hOUVVGM1FpeERRVUZETEVOQlFUZENMRVZCUVdkRE8wRkJRemxDYUVJc1dVRkJRVUVzUzBGQlN5eEhRVUZIUVN4TFFVRkxMRU5CUVVOaExFOUJRVTRzUTBGQll5eFRRVUZrTEVWQlFYbENMRVZCUVhwQ0xFTkJRVkk3UVVGRFJEczdRVUZEUkN4cFFrRkJUeXhMUVVGUU8wRkJRMFE3UVVGRFJqdEJRVU5HTEV0QlZrUTdRVUZYUVN4UlFVRkpZaXhMUVVGS0xFVkJRVmRCTEV0QlFVc3NSMEZCUjBFc1MwRkJTeXhEUVVGRFlTeFBRVUZPTEVOQlFXTXNVVUZCWkN4RlFVRjNRaXhGUVVGNFFpeERRVUZTTzBGQlExZ3NWMEZCVDJJc1MwRkJVRHRCUVVORUxFYzdPMU5CUlVSeFFpeGhMRWRCUVVFc2RVSkJRV1Z3UkN4SlFVRm1MRVZCUVhGQ08wRkJRMjVDTEZGQlFVa3JRaXhMUVVGS08wRkJRMEV2UWl4SlFVRkJRU3hKUVVGSkxFTkJRVU54UXl4SlFVRk1MRU5CUVZVc1ZVRkJRVm9zUTBGQlF5eEZRVUZKTzBGQlEySXNWVUZCU1VFc1EwRkJReXhEUVVGRE1VSXNTVUZCUml4TFFVRlhMRTFCUVdZc1JVRkJkVUk3UVVGRGNrSm5ReXhSUVVGQlFTeExRVUZMTEVkQlFVZE9MRU5CUVVNc1EwRkJRM1pDTEVsQlFVWXNRMEZCVDA4c1QwRkJaanRCUVVOQkxGbEJRVWtzVDBGQlQzTkNMRXRCUVZBc1MwRkJhVUlzVjBGQmNrSXNSVUZCYTBNc1QwRkJUeXhMUVVGUU8wRkJRMjVETzBGQlEwWXNTMEZNUkR0QlFVMUJMRmRCUVU5QkxFdEJRVkE3UVVGRFJDeEhPenRUUVVWRWMwSXNVU3hIUVVGQkxHdENRVUZWY2tRc1NVRkJWaXhGUVVGblFqdEJRVU5rTEZGQlFVa3JRaXhMUVVGS08wRkJRMEV2UWl4SlFVRkJRU3hKUVVGSkxFTkJRVU5wUkN4VFFVRk1MRU5CUVdVc1ZVRkJRWGhDTEVOQlFVTXNSVUZCU1R0QlFVTnNRaXhWUVVGSkxFOUJRVTlCTEVOQlFVTXNRMEZCUTNaQ0xFbEJRVVlzUTBGQlQwOHNUMEZCWkN4TFFVRXdRaXhYUVVFNVFpeEZRVUV5UXp0QlFVTjZRM05DTEZGQlFVRkJMRXRCUVVzc1IwRkJSMDRzUTBGQlF5eERRVUZEZGtJc1NVRkJSaXhEUVVGUFR5eFBRVUZRTEVOQlFXVnRReXhQUVVGbUxFTkJRWFZDTEZOQlFYWkNMRVZCUVd0RExFVkJRV3hETEVOQlFWSTdRVUZEUVN4bFFVRlBMRXRCUVZBN1FVRkRSRHRCUVVOR0xFdEJURVE3UVVGTlFTeFhRVUZQWWl4TFFVRlFPMEZCUTBRc1J6czdVMEZGUkVrc1Z5eEhRVUZCTEhGQ1FVRmhja01zU1VGQllpeEZRVUZ0UW1kRExFMUJRVzVDTEVWQlFUSkNPMEZCUTNwQ0xGRkJRVWxETEV0QlFVbzdPMEZCUTBFc1VVRkJTV3BETEVsQlFVa3NRMEZCUTBNc1NVRkJUQ3hMUVVGakxFMUJRV3hDTEVWQlFUQkNPMEZCUTNoQ1owTXNUVUZCUVVFc1MwRkJTeXhIUVVGSExFdEJRVXN4UWl4SFFVRk1MRU5CUVZOUUxFbEJRVlFzUlVGQlpTeEpRVUZtTEVWQlFYRkNMRmxCUVhKQ0xFTkJRVkk3UVVGRFJDeExRVVpFTEUxQlJVOHNTVUZCU1VFc1NVRkJTU3hEUVVGRFF5eEpRVUZNTEV0QlFXTXNVMEZCYkVJc1JVRkJOa0k3UVVGRGJFTm5ReXhOUVVGQlFTeExRVUZMTEVkQlFVY3NTMEZCU3pGQ0xFZEJRVXdzUTBGQlUxQXNTVUZCVkN4RlFVRmxMRWxCUVdZc1JVRkJjVUlzWlVGQmNrSXNRMEZCVWp0QlFVTkVMRXRCUmswc1RVRkZRU3hKUVVGSlowTXNUVUZCVFN4TFFVRkxMRkZCUVdZc1JVRkJlVUk3UVVGRE9VSkRMRTFCUVVGQkxFdEJRVXNzUjBGQlJ5eExRVUZMTVVJc1IwRkJUQ3hEUVVGVFVDeEpRVUZVTEVWQlFXVXNTVUZCWml4RlFVRnhRaXhaUVVGeVFpeERRVUZTTzBGQlEwUXNTMEZHVFN4TlFVVkJPMEZCUTB4cFF5eE5RVUZCUVN4TFFVRkxMRWRCUVVjc1MwRkJTekZDTEVkQlFVd3NRMEZCVTFBc1NVRkJWQ3hGUVVGbExFbEJRV1lzUlVGQmNVSXNZVUZCY2tJc1EwRkJVanRCUVVORU96dEJRVVZFTEZGQlFVbDNSQ3hIUVVGSExFZEJRVWQ0UkN4SlFVRkpMRU5CUVVOclF5eE5RVUZtTzBGQlEwRXNVVUZCU1hWQ0xFdEJRVXNzUjBGQlJ5eERRVUZhT3p0QlFVTkJMRmRCUVU5RUxFZEJRVWNzU1VGQlNVRXNSMEZCUnl4RFFVRkRka1FzU1VGQlNpeExRVUZoTEUxQlFUTkNMRVZCUVcxRE8wRkJRMnBEZDBRc1RVRkJRVUVzUzBGQlN5eEpRVUZKTEVOQlFWUTdRVUZEUVVRc1RVRkJRVUVzUjBGQlJ5eEhRVUZIUVN4SFFVRkhMRU5CUVVOMFFpeE5RVUZXTzBGQlEwUTdPMEZCUlVRc1VVRkJTVVFzUzBGQlN5eERRVUZEWjBJc1QwRkJUaXhEUVVGakxFbEJRV1FzVFVGQmQwSXNRMEZCUXl4RFFVRTNRaXhGUVVGblF6dEJRVU01UWl4VlFVRkpia1VzVFVGQlRTeEhRVUZITEV0QlFVdDVRaXhIUVVGTUxFTkJRVk5RTEVsQlFWUXNSVUZCWlN4SlFVRm1MRVZCUVhGQ0xGRkJRWEpDTEVOQlFXSTdPMEZCUTBFc1ZVRkJTV3hDTEUxQlFVMHNRMEZCUXpSRExFMUJRVmdzUlVGQmJVSTdRVUZEYWtJc1lVRkJTeXhKUVVGSlowTXNTVUZCU1N4SFFVRkhMRU5CUVdoQ0xFVkJRVzFDUVN4SlFVRkpMRWRCUVVkRUxFdEJRVEZDTEVWQlFXbERReXhKUVVGSkxFVkJRWEpETzBGQlFYbERla0lzVlVGQlFVRXNTMEZCU3l4SlFVRkpia1FzVFVGQlZEdEJRVUY2UXp0QlFVTkVPMEZCUTBZN08wRkJSVVFzVjBGQlQyMUVMRXRCUVZBN1FVRkRSQ3hIT3p0VFFVVkVia0lzVVN4SFFVRkJMR3RDUVVGVlpDeEpRVUZXTEVWQlFXZENZU3hKUVVGb1FpeEZRVUZ6UWp0QlFVTndRaXhSUVVGSmIwSXNTMEZCU3l4SFFVRkhha01zU1VGQlNTeERRVUZEWVN4SlFVRkVMRU5CUVdoQ08wRkJRMEVzVVVGQlNVNHNSMEZCUnl4SFFVRkhVQ3hKUVVGSkxFTkJRVU5KTEVsQlFVd3NRMEZCVlZNc1NVRkJWaXhEUVVGV096dEJRVU5CTEZGQlFVbE9MRWRCUVVjc1NVRkJTVUVzUjBGQlJ5eERRVUZETUVJc1MwRkJTaXhMUVVGalFTeExRVUY2UWl4RlFVRm5RenRCUVVNNVFpeGhRVUZQTVVJc1IwRkJSeXhEUVVGRFFTeEhRVUZZTzBGQlEwUTdPMEZCUlVRc1YwRkJUekJDTEV0QlFWQTdRVUZEUkN4SE96czdPenRsUVVkWmNFTXNWeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1OdmJuTjBJRVJGUmtGVlRGUmZVa0ZYSUQwZ2UxeHVJQ0JqYjJ4dmJqb2dKem9nSnl4Y2JpQWdhVzVrWlc1ME9pQW5JQ0FnSUNjc1hHNGdJR0psWm05eVpVUmxZMnc2SUNkY1hHNG5MRnh1SUNCaVpXWnZjbVZTZFd4bE9pQW5YRnh1Snl4Y2JpQWdZbVZtYjNKbFQzQmxiam9nSnlBbkxGeHVJQ0JpWldadmNtVkRiRzl6WlRvZ0oxeGNiaWNzWEc0Z0lHSmxabTl5WlVOdmJXMWxiblE2SUNkY1hHNG5MRnh1SUNCaFpuUmxjam9nSjF4Y2JpY3NYRzRnSUdWdGNIUjVRbTlrZVRvZ0p5Y3NYRzRnSUdOdmJXMWxiblJNWldaME9pQW5JQ2NzWEc0Z0lHTnZiVzFsYm5SU2FXZG9kRG9nSnlBbkxGeHVJQ0J6WlcxcFkyOXNiMjQ2SUdaaGJITmxYRzU5WEc1Y2JtWjFibU4wYVc5dUlHTmhjR2wwWVd4cGVtVWdLSE4wY2lrZ2UxeHVJQ0J5WlhSMWNtNGdjM1J5V3pCZExuUnZWWEJ3WlhKRFlYTmxLQ2tnS3lCemRISXVjMnhwWTJVb01TbGNibjFjYmx4dVkyeGhjM01nVTNSeWFXNW5hV1pwWlhJZ2UxeHVJQ0JqYjI1emRISjFZM1J2Y2lBb1luVnBiR1JsY2lrZ2UxeHVJQ0FnSUhSb2FYTXVZblZwYkdSbGNpQTlJR0oxYVd4a1pYSmNiaUFnZlZ4dVhHNGdJSE4wY21sdVoybG1lU0FvYm05a1pTd2djMlZ0YVdOdmJHOXVLU0I3WEc0Z0lDQWdkR2hwYzF0dWIyUmxMblI1Y0dWZEtHNXZaR1VzSUhObGJXbGpiMnh2YmlsY2JpQWdmVnh1WEc0Z0lISnZiM1FnS0c1dlpHVXBJSHRjYmlBZ0lDQjBhR2x6TG1KdlpIa29ibTlrWlNsY2JpQWdJQ0JwWmlBb2JtOWtaUzV5WVhkekxtRm1kR1Z5S1NCMGFHbHpMbUoxYVd4a1pYSW9ibTlrWlM1eVlYZHpMbUZtZEdWeUtWeHVJQ0I5WEc1Y2JpQWdZMjl0YldWdWRDQW9ibTlrWlNrZ2UxeHVJQ0FnSUd4bGRDQnNaV1owSUQwZ2RHaHBjeTV5WVhjb2JtOWtaU3dnSjJ4bFpuUW5MQ0FuWTI5dGJXVnVkRXhsWm5RbktWeHVJQ0FnSUd4bGRDQnlhV2RvZENBOUlIUm9hWE11Y21GM0tHNXZaR1VzSUNkeWFXZG9kQ2NzSUNkamIyMXRaVzUwVW1sbmFIUW5LVnh1SUNBZ0lIUm9hWE11WW5WcGJHUmxjaWduTHlvbklDc2diR1ZtZENBcklHNXZaR1V1ZEdWNGRDQXJJSEpwWjJoMElDc2dKeW92Snl3Z2JtOWtaU2xjYmlBZ2ZWeHVYRzRnSUdSbFkyd2dLRzV2WkdVc0lITmxiV2xqYjJ4dmJpa2dlMXh1SUNBZ0lHeGxkQ0JpWlhSM1pXVnVJRDBnZEdocGN5NXlZWGNvYm05a1pTd2dKMkpsZEhkbFpXNG5MQ0FuWTI5c2IyNG5LVnh1SUNBZ0lHeGxkQ0J6ZEhKcGJtY2dQU0J1YjJSbExuQnliM0FnS3lCaVpYUjNaV1Z1SUNzZ2RHaHBjeTV5WVhkV1lXeDFaU2h1YjJSbExDQW5kbUZzZFdVbktWeHVYRzRnSUNBZ2FXWWdLRzV2WkdVdWFXMXdiM0owWVc1MEtTQjdYRzRnSUNBZ0lDQnpkSEpwYm1jZ0t6MGdibTlrWlM1eVlYZHpMbWx0Y0c5eWRHRnVkQ0I4ZkNBbklDRnBiWEJ2Y25SaGJuUW5YRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLSE5sYldsamIyeHZiaWtnYzNSeWFXNW5JQ3M5SUNjN0oxeHVJQ0FnSUhSb2FYTXVZblZwYkdSbGNpaHpkSEpwYm1jc0lHNXZaR1VwWEc0Z0lIMWNibHh1SUNCeWRXeGxJQ2h1YjJSbEtTQjdYRzRnSUNBZ2RHaHBjeTVpYkc5amF5aHViMlJsTENCMGFHbHpMbkpoZDFaaGJIVmxLRzV2WkdVc0lDZHpaV3hsWTNSdmNpY3BLVnh1SUNBZ0lHbG1JQ2h1YjJSbExuSmhkM011YjNkdVUyVnRhV052Ykc5dUtTQjdYRzRnSUNBZ0lDQjBhR2x6TG1KMWFXeGtaWElvYm05a1pTNXlZWGR6TG05M2JsTmxiV2xqYjJ4dmJpd2dibTlrWlN3Z0oyVnVaQ2NwWEc0Z0lDQWdmVnh1SUNCOVhHNWNiaUFnWVhSeWRXeGxJQ2h1YjJSbExDQnpaVzFwWTI5c2IyNHBJSHRjYmlBZ0lDQnNaWFFnYm1GdFpTQTlJQ2RBSnlBcklHNXZaR1V1Ym1GdFpWeHVJQ0FnSUd4bGRDQndZWEpoYlhNZ1BTQnViMlJsTG5CaGNtRnRjeUEvSUhSb2FYTXVjbUYzVm1Gc2RXVW9ibTlrWlN3Z0ozQmhjbUZ0Y3ljcElEb2dKeWRjYmx4dUlDQWdJR2xtSUNoMGVYQmxiMllnYm05a1pTNXlZWGR6TG1GbWRHVnlUbUZ0WlNBaFBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUc1aGJXVWdLejBnYm05a1pTNXlZWGR6TG1GbWRHVnlUbUZ0WlZ4dUlDQWdJSDBnWld4elpTQnBaaUFvY0dGeVlXMXpLU0I3WEc0Z0lDQWdJQ0J1WVcxbElDczlJQ2NnSjF4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNodWIyUmxMbTV2WkdWektTQjdYRzRnSUNBZ0lDQjBhR2x6TG1Kc2IyTnJLRzV2WkdVc0lHNWhiV1VnS3lCd1lYSmhiWE1wWEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHeGxkQ0JsYm1RZ1BTQW9ibTlrWlM1eVlYZHpMbUpsZEhkbFpXNGdmSHdnSnljcElDc2dLSE5sYldsamIyeHZiaUEvSUNjN0p5QTZJQ2NuS1Z4dUlDQWdJQ0FnZEdocGN5NWlkV2xzWkdWeUtHNWhiV1VnS3lCd1lYSmhiWE1nS3lCbGJtUXNJRzV2WkdVcFhHNGdJQ0FnZlZ4dUlDQjlYRzVjYmlBZ1ltOWtlU0FvYm05a1pTa2dlMXh1SUNBZ0lHeGxkQ0JzWVhOMElEMGdibTlrWlM1dWIyUmxjeTVzWlc1bmRHZ2dMU0F4WEc0Z0lDQWdkMmhwYkdVZ0tHeGhjM1FnUGlBd0tTQjdYRzRnSUNBZ0lDQnBaaUFvYm05a1pTNXViMlJsYzF0c1lYTjBYUzUwZVhCbElDRTlQU0FuWTI5dGJXVnVkQ2NwSUdKeVpXRnJYRzRnSUNBZ0lDQnNZWE4wSUMwOUlERmNiaUFnSUNCOVhHNWNiaUFnSUNCc1pYUWdjMlZ0YVdOdmJHOXVJRDBnZEdocGN5NXlZWGNvYm05a1pTd2dKM05sYldsamIyeHZiaWNwWEc0Z0lDQWdabTl5SUNoc1pYUWdhU0E5SURBN0lHa2dQQ0J1YjJSbExtNXZaR1Z6TG14bGJtZDBhRHNnYVNzcktTQjdYRzRnSUNBZ0lDQnNaWFFnWTJocGJHUWdQU0J1YjJSbExtNXZaR1Z6VzJsZFhHNGdJQ0FnSUNCc1pYUWdZbVZtYjNKbElEMGdkR2hwY3k1eVlYY29ZMmhwYkdRc0lDZGlaV1p2Y21VbktWeHVJQ0FnSUNBZ2FXWWdLR0psWm05eVpTa2dkR2hwY3k1aWRXbHNaR1Z5S0dKbFptOXlaU2xjYmlBZ0lDQWdJSFJvYVhNdWMzUnlhVzVuYVdaNUtHTm9hV3hrTENCc1lYTjBJQ0U5UFNCcElIeDhJSE5sYldsamIyeHZiaWxjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JpYkc5amF5QW9ibTlrWlN3Z2MzUmhjblFwSUh0Y2JpQWdJQ0JzWlhRZ1ltVjBkMlZsYmlBOUlIUm9hWE11Y21GM0tHNXZaR1VzSUNkaVpYUjNaV1Z1Snl3Z0oySmxabTl5WlU5d1pXNG5LVnh1SUNBZ0lIUm9hWE11WW5WcGJHUmxjaWh6ZEdGeWRDQXJJR0psZEhkbFpXNGdLeUFuZXljc0lHNXZaR1VzSUNkemRHRnlkQ2NwWEc1Y2JpQWdJQ0JzWlhRZ1lXWjBaWEpjYmlBZ0lDQnBaaUFvYm05a1pTNXViMlJsY3lBbUppQnViMlJsTG01dlpHVnpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdkR2hwY3k1aWIyUjVLRzV2WkdVcFhHNGdJQ0FnSUNCaFpuUmxjaUE5SUhSb2FYTXVjbUYzS0c1dlpHVXNJQ2RoWm5SbGNpY3BYRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUdGbWRHVnlJRDBnZEdocGN5NXlZWGNvYm05a1pTd2dKMkZtZEdWeUp5d2dKMlZ0Y0hSNVFtOWtlU2NwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dGbWRHVnlLU0IwYUdsekxtSjFhV3hrWlhJb1lXWjBaWElwWEc0Z0lDQWdkR2hwY3k1aWRXbHNaR1Z5S0NkOUp5d2dibTlrWlN3Z0oyVnVaQ2NwWEc0Z0lIMWNibHh1SUNCeVlYY2dLRzV2WkdVc0lHOTNiaXdnWkdWMFpXTjBLU0I3WEc0Z0lDQWdiR1YwSUhaaGJIVmxYRzRnSUNBZ2FXWWdLQ0ZrWlhSbFkzUXBJR1JsZEdWamRDQTlJRzkzYmx4dVhHNGdJQ0FnTHk4Z1FXeHlaV0ZrZVNCb1lXUmNiaUFnSUNCcFppQW9iM2R1S1NCN1hHNGdJQ0FnSUNCMllXeDFaU0E5SUc1dlpHVXVjbUYzYzF0dmQyNWRYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JSFpoYkhWbElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2NtVjBkWEp1SUhaaGJIVmxYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2JHVjBJSEJoY21WdWRDQTlJRzV2WkdVdWNHRnlaVzUwWEc1Y2JpQWdJQ0F2THlCSVlXTnJJR1p2Y2lCbWFYSnpkQ0J5ZFd4bElHbHVJRU5UVTF4dUlDQWdJR2xtSUNoa1pYUmxZM1FnUFQwOUlDZGlaV1p2Y21VbktTQjdYRzRnSUNBZ0lDQnBaaUFvSVhCaGNtVnVkQ0I4ZkNBb2NHRnlaVzUwTG5SNWNHVWdQVDA5SUNkeWIyOTBKeUFtSmlCd1lYSmxiblF1Wm1seWMzUWdQVDA5SUc1dlpHVXBLU0I3WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUFuSjF4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmx4dUlDQWdJQzh2SUVac2IyRjBhVzVuSUdOb2FXeGtJSGRwZEdodmRYUWdjR0Z5Wlc1MFhHNGdJQ0FnYVdZZ0tDRndZWEpsYm5RcElISmxkSFZ5YmlCRVJVWkJWVXhVWDFKQlYxdGtaWFJsWTNSZFhHNWNiaUFnSUNBdkx5QkVaWFJsWTNRZ2MzUjViR1VnWW5rZ2IzUm9aWElnYm05a1pYTmNiaUFnSUNCc1pYUWdjbTl2ZENBOUlHNXZaR1V1Y205dmRDZ3BYRzRnSUNBZ2FXWWdLQ0Z5YjI5MExuSmhkME5oWTJobEtTQnliMjkwTG5KaGQwTmhZMmhsSUQwZ2V5QjlYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQnliMjkwTG5KaGQwTmhZMmhsVzJSbGRHVmpkRjBnSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbTl2ZEM1eVlYZERZV05vWlZ0a1pYUmxZM1JkWEc0Z0lDQWdmVnh1WEc0Z0lDQWdhV1lnS0dSbGRHVmpkQ0E5UFQwZ0oySmxabTl5WlNjZ2ZId2daR1YwWldOMElEMDlQU0FuWVdaMFpYSW5LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1aVpXWnZjbVZCWm5SbGNpaHViMlJsTENCa1pYUmxZM1FwWEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHeGxkQ0J0WlhSb2IyUWdQU0FuY21GM0p5QXJJR05oY0dsMFlXeHBlbVVvWkdWMFpXTjBLVnh1SUNBZ0lDQWdhV1lnS0hSb2FYTmJiV1YwYUc5a1hTa2dlMXh1SUNBZ0lDQWdJQ0IyWVd4MVpTQTlJSFJvYVhOYmJXVjBhRzlrWFNoeWIyOTBMQ0J1YjJSbEtWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2NtOXZkQzUzWVd4cktHa2dQVDRnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ2FTNXlZWGR6VzI5M2JsMWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhaaGJIVmxJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2djbVYwZFhKdUlHWmhiSE5sWEc0Z0lDQWdJQ0FnSUgwcFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCMllXeDFaU0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSFpoYkhWbElEMGdSRVZHUVZWTVZGOVNRVmRiWkdWMFpXTjBYVnh1WEc0Z0lDQWdjbTl2ZEM1eVlYZERZV05vWlZ0a1pYUmxZM1JkSUQwZ2RtRnNkV1ZjYmlBZ0lDQnlaWFIxY200Z2RtRnNkV1ZjYmlBZ2ZWeHVYRzRnSUhKaGQxTmxiV2xqYjJ4dmJpQW9jbTl2ZENrZ2UxeHVJQ0FnSUd4bGRDQjJZV3gxWlZ4dUlDQWdJSEp2YjNRdWQyRnNheWhwSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2hwTG01dlpHVnpJQ1ltSUdrdWJtOWtaWE11YkdWdVozUm9JQ1ltSUdrdWJHRnpkQzUwZVhCbElEMDlQU0FuWkdWamJDY3BJSHRjYmlBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0JwTG5KaGQzTXVjMlZ0YVdOdmJHOXVYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnZG1Gc2RXVWdJVDA5SUNkMWJtUmxabWx1WldRbktTQnlaWFIxY200Z1ptRnNjMlZjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlLVnh1SUNBZ0lISmxkSFZ5YmlCMllXeDFaVnh1SUNCOVhHNWNiaUFnY21GM1JXMXdkSGxDYjJSNUlDaHliMjkwS1NCN1hHNGdJQ0FnYkdWMElIWmhiSFZsWEc0Z0lDQWdjbTl2ZEM1M1lXeHJLR2tnUFQ0Z2UxeHVJQ0FnSUNBZ2FXWWdLR2t1Ym05a1pYTWdKaVlnYVM1dWIyUmxjeTVzWlc1bmRHZ2dQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdkbUZzZFdVZ1BTQnBMbkpoZDNNdVlXWjBaWEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUjVjR1Z2WmlCMllXeDFaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSEpsZEhWeWJpQm1ZV3h6WlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwWEc0Z0lDQWdjbVYwZFhKdUlIWmhiSFZsWEc0Z0lIMWNibHh1SUNCeVlYZEpibVJsYm5RZ0tISnZiM1FwSUh0Y2JpQWdJQ0JwWmlBb2NtOXZkQzV5WVhkekxtbHVaR1Z1ZENrZ2NtVjBkWEp1SUhKdmIzUXVjbUYzY3k1cGJtUmxiblJjYmlBZ0lDQnNaWFFnZG1Gc2RXVmNiaUFnSUNCeWIyOTBMbmRoYkdzb2FTQTlQaUI3WEc0Z0lDQWdJQ0JzWlhRZ2NDQTlJR2t1Y0dGeVpXNTBYRzRnSUNBZ0lDQnBaaUFvY0NBbUppQndJQ0U5UFNCeWIyOTBJQ1ltSUhBdWNHRnlaVzUwSUNZbUlIQXVjR0Z5Wlc1MElEMDlQU0J5YjI5MEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYVM1eVlYZHpMbUpsWm05eVpTQWhQVDBnSjNWdVpHVm1hVzVsWkNjcElIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2NHRnlkSE1nUFNCcExuSmhkM011WW1WbWIzSmxMbk53YkdsMEtDZGNYRzRuS1Z4dUlDQWdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ2NHRnlkSE5iY0dGeWRITXViR1Z1WjNSb0lDMGdNVjFjYmlBZ0lDQWdJQ0FnSUNCMllXeDFaU0E5SUhaaGJIVmxMbkpsY0d4aFkyVW9MMXRlWEZ4elhTOW5MQ0FuSnlsY2JpQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptRnNjMlZjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwWEc0Z0lDQWdjbVYwZFhKdUlIWmhiSFZsWEc0Z0lIMWNibHh1SUNCeVlYZENaV1p2Y21WRGIyMXRaVzUwSUNoeWIyOTBMQ0J1YjJSbEtTQjdYRzRnSUNBZ2JHVjBJSFpoYkhWbFhHNGdJQ0FnY205dmRDNTNZV3hyUTI5dGJXVnVkSE1vYVNBOVBpQjdYRzRnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR2t1Y21GM2N5NWlaV1p2Y21VZ0lUMDlJQ2QxYm1SbFptbHVaV1FuS1NCN1hHNGdJQ0FnSUNBZ0lIWmhiSFZsSUQwZ2FTNXlZWGR6TG1KbFptOXlaVnh1SUNBZ0lDQWdJQ0JwWmlBb2RtRnNkV1V1YVc1a1pYaFBaaWduWEZ4dUp5a2dJVDA5SUMweEtTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0IyWVd4MVpTNXlaWEJzWVdObEtDOWJYbHhjYmwwckpDOHNJQ2NuS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMHBYRzRnSUNBZ2FXWWdLSFI1Y0dWdlppQjJZV3gxWlNBOVBUMGdKM1Z1WkdWbWFXNWxaQ2NwSUh0Y2JpQWdJQ0FnSUhaaGJIVmxJRDBnZEdocGN5NXlZWGNvYm05a1pTd2diblZzYkN3Z0oySmxabTl5WlVSbFkyd25LVnh1SUNBZ0lIMGdaV3h6WlNCcFppQW9kbUZzZFdVcElIdGNiaUFnSUNBZ0lIWmhiSFZsSUQwZ2RtRnNkV1V1Y21Wd2JHRmpaU2d2VzE1Y1hITmRMMmNzSUNjbktWeHVJQ0FnSUgxY2JpQWdJQ0J5WlhSMWNtNGdkbUZzZFdWY2JpQWdmVnh1WEc0Z0lISmhkMEpsWm05eVpVUmxZMndnS0hKdmIzUXNJRzV2WkdVcElIdGNiaUFnSUNCc1pYUWdkbUZzZFdWY2JpQWdJQ0J5YjI5MExuZGhiR3RFWldOc2N5aHBJRDArSUh0Y2JpQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2FTNXlZWGR6TG1KbFptOXlaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0JwTG5KaGQzTXVZbVZtYjNKbFhHNGdJQ0FnSUNBZ0lHbG1JQ2gyWVd4MVpTNXBibVJsZUU5bUtDZGNYRzRuS1NBaFBUMGdMVEVwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjJZV3gxWlNBOUlIWmhiSFZsTG5KbGNHeGhZMlVvTDF0ZVhGeHVYU3NrTHl3Z0p5Y3BYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1poYkhObFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNsY2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhaaGJIVmxJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdkbUZzZFdVZ1BTQjBhR2x6TG5KaGR5aHViMlJsTENCdWRXeHNMQ0FuWW1WbWIzSmxVblZzWlNjcFhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMllXeDFaU2tnZTF4dUlDQWdJQ0FnZG1Gc2RXVWdQU0IyWVd4MVpTNXlaWEJzWVdObEtDOWJYbHhjYzEwdlp5d2dKeWNwWEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMllXeDFaVnh1SUNCOVhHNWNiaUFnY21GM1FtVm1iM0psVW5Wc1pTQW9jbTl2ZENrZ2UxeHVJQ0FnSUd4bGRDQjJZV3gxWlZ4dUlDQWdJSEp2YjNRdWQyRnNheWhwSUQwK0lIdGNiaUFnSUNBZ0lHbG1JQ2hwTG01dlpHVnpJQ1ltSUNocExuQmhjbVZ1ZENBaFBUMGdjbTl2ZENCOGZDQnliMjkwTG1acGNuTjBJQ0U5UFNCcEtTa2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdrdWNtRjNjeTVpWldadmNtVWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0JwTG5KaGQzTXVZbVZtYjNKbFhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0haaGJIVmxMbWx1WkdWNFQyWW9KMXhjYmljcElDRTlQU0F0TVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0IyWVd4MVpTNXlaWEJzWVdObEtDOWJYbHhjYmwwckpDOHNJQ2NuS1Z4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJWY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcFhHNGdJQ0FnYVdZZ0tIWmhiSFZsS1NCMllXeDFaU0E5SUhaaGJIVmxMbkpsY0d4aFkyVW9MMXRlWEZ4elhTOW5MQ0FuSnlsY2JpQWdJQ0J5WlhSMWNtNGdkbUZzZFdWY2JpQWdmVnh1WEc0Z0lISmhkMEpsWm05eVpVTnNiM05sSUNoeWIyOTBLU0I3WEc0Z0lDQWdiR1YwSUhaaGJIVmxYRzRnSUNBZ2NtOXZkQzUzWVd4cktHa2dQVDRnZTF4dUlDQWdJQ0FnYVdZZ0tHa3VibTlrWlhNZ0ppWWdhUzV1YjJSbGN5NXNaVzVuZEdnZ1BpQXdLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ2FTNXlZWGR6TG1GbWRHVnlJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhaaGJIVmxJRDBnYVM1eVlYZHpMbUZtZEdWeVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0haaGJIVmxMbWx1WkdWNFQyWW9KMXhjYmljcElDRTlQU0F0TVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZG1Gc2RXVWdQU0IyWVd4MVpTNXlaWEJzWVdObEtDOWJYbHhjYmwwckpDOHNJQ2NuS1Z4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJWY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcFhHNGdJQ0FnYVdZZ0tIWmhiSFZsS1NCMllXeDFaU0E5SUhaaGJIVmxMbkpsY0d4aFkyVW9MMXRlWEZ4elhTOW5MQ0FuSnlsY2JpQWdJQ0J5WlhSMWNtNGdkbUZzZFdWY2JpQWdmVnh1WEc0Z0lISmhkMEpsWm05eVpVOXdaVzRnS0hKdmIzUXBJSHRjYmlBZ0lDQnNaWFFnZG1Gc2RXVmNiaUFnSUNCeWIyOTBMbmRoYkdzb2FTQTlQaUI3WEc0Z0lDQWdJQ0JwWmlBb2FTNTBlWEJsSUNFOVBTQW5aR1ZqYkNjcElIdGNiaUFnSUNBZ0lDQWdkbUZzZFdVZ1BTQnBMbkpoZDNNdVltVjBkMlZsYmx4dUlDQWdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIWmhiSFZsSUNFOVBTQW5kVzVrWldacGJtVmtKeWtnY21WMGRYSnVJR1poYkhObFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNsY2JpQWdJQ0J5WlhSMWNtNGdkbUZzZFdWY2JpQWdmVnh1WEc0Z0lISmhkME52Ykc5dUlDaHliMjkwS1NCN1hHNGdJQ0FnYkdWMElIWmhiSFZsWEc0Z0lDQWdjbTl2ZEM1M1lXeHJSR1ZqYkhNb2FTQTlQaUI3WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdrdWNtRjNjeTVpWlhSM1pXVnVJQ0U5UFNBbmRXNWtaV1pwYm1Wa0p5a2dlMXh1SUNBZ0lDQWdJQ0IyWVd4MVpTQTlJR2t1Y21GM2N5NWlaWFIzWldWdUxuSmxjR3hoWTJVb0wxdGVYRnh6T2wwdlp5d2dKeWNwWEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwcFhHNGdJQ0FnY21WMGRYSnVJSFpoYkhWbFhHNGdJSDFjYmx4dUlDQmlaV1p2Y21WQlpuUmxjaUFvYm05a1pTd2daR1YwWldOMEtTQjdYRzRnSUNBZ2JHVjBJSFpoYkhWbFhHNGdJQ0FnYVdZZ0tHNXZaR1V1ZEhsd1pTQTlQVDBnSjJSbFkyd25LU0I3WEc0Z0lDQWdJQ0IyWVd4MVpTQTlJSFJvYVhNdWNtRjNLRzV2WkdVc0lHNTFiR3dzSUNkaVpXWnZjbVZFWldOc0p5bGNiaUFnSUNCOUlHVnNjMlVnYVdZZ0tHNXZaR1V1ZEhsd1pTQTlQVDBnSjJOdmJXMWxiblFuS1NCN1hHNGdJQ0FnSUNCMllXeDFaU0E5SUhSb2FYTXVjbUYzS0c1dlpHVXNJRzUxYkd3c0lDZGlaV1p2Y21WRGIyMXRaVzUwSnlsY2JpQWdJQ0I5SUdWc2MyVWdhV1lnS0dSbGRHVmpkQ0E5UFQwZ0oySmxabTl5WlNjcElIdGNiaUFnSUNBZ0lIWmhiSFZsSUQwZ2RHaHBjeTV5WVhjb2JtOWtaU3dnYm5Wc2JDd2dKMkpsWm05eVpWSjFiR1VuS1Z4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQjJZV3gxWlNBOUlIUm9hWE11Y21GM0tHNXZaR1VzSUc1MWJHd3NJQ2RpWldadmNtVkRiRzl6WlNjcFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYkdWMElHSjFaaUE5SUc1dlpHVXVjR0Z5Wlc1MFhHNGdJQ0FnYkdWMElHUmxjSFJvSUQwZ01GeHVJQ0FnSUhkb2FXeGxJQ2hpZFdZZ0ppWWdZblZtTG5SNWNHVWdJVDA5SUNkeWIyOTBKeWtnZTF4dUlDQWdJQ0FnWkdWd2RHZ2dLejBnTVZ4dUlDQWdJQ0FnWW5WbUlEMGdZblZtTG5CaGNtVnVkRnh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2gyWVd4MVpTNXBibVJsZUU5bUtDZGNYRzRuS1NBaFBUMGdMVEVwSUh0Y2JpQWdJQ0FnSUd4bGRDQnBibVJsYm5RZ1BTQjBhR2x6TG5KaGR5aHViMlJsTENCdWRXeHNMQ0FuYVc1a1pXNTBKeWxjYmlBZ0lDQWdJR2xtSUNocGJtUmxiblF1YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0FnSUdadmNpQW9iR1YwSUhOMFpYQWdQU0F3T3lCemRHVndJRHdnWkdWd2RHZzdJSE4wWlhBckt5a2dkbUZzZFdVZ0t6MGdhVzVrWlc1MFhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSFpoYkhWbFhHNGdJSDFjYmx4dUlDQnlZWGRXWVd4MVpTQW9ibTlrWlN3Z2NISnZjQ2tnZTF4dUlDQWdJR3hsZENCMllXeDFaU0E5SUc1dlpHVmJjSEp2Y0YxY2JpQWdJQ0JzWlhRZ2NtRjNJRDBnYm05a1pTNXlZWGR6VzNCeWIzQmRYRzRnSUNBZ2FXWWdLSEpoZHlBbUppQnlZWGN1ZG1Gc2RXVWdQVDA5SUhaaGJIVmxLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdjbUYzTG5KaGQxeHVJQ0FnSUgxY2JseHVJQ0FnSUhKbGRIVnliaUIyWVd4MVpWeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElGTjBjbWx1WjJsbWFXVnlYRzRpWFN3aVptbHNaU0k2SW5OMGNtbHVaMmxtYVdWeUxtcHpJbjA9XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9sYXp5UmVzdWx0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9sYXp5LXJlc3VsdFwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogQ29udGFpbnMgcGx1Z2lucyB0byBwcm9jZXNzIENTUy4gQ3JlYXRlIG9uZSBgUHJvY2Vzc29yYCBpbnN0YW5jZSxcbiAqIGluaXRpYWxpemUgaXRzIHBsdWdpbnMsIGFuZCB0aGVuIHVzZSB0aGF0IGluc3RhbmNlIG9uIG51bWVyb3VzIENTUyBmaWxlcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgcHJvY2Vzc29yID0gcG9zdGNzcyhbYXV0b3ByZWZpeGVyLCBwcmVjc3NdKVxuICogcHJvY2Vzc29yLnByb2Nlc3MoY3NzMSkudGhlbihyZXN1bHQgPT4gY29uc29sZS5sb2cocmVzdWx0LmNzcykpXG4gKiBwcm9jZXNzb3IucHJvY2Vzcyhjc3MyKS50aGVuKHJlc3VsdCA9PiBjb25zb2xlLmxvZyhyZXN1bHQuY3NzKSlcbiAqL1xudmFyIFByb2Nlc3NvciA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge0FycmF5LjxQbHVnaW58cGx1Z2luRnVuY3Rpb24+fFByb2Nlc3Nvcn0gcGx1Z2lucyBQb3N0Q1NTIHBsdWdpbnMuXG4gICAqICAgICAgICBTZWUge0BsaW5rIFByb2Nlc3NvciN1c2V9IGZvciBwbHVnaW4gZm9ybWF0LlxuICAgKi9cbiAgZnVuY3Rpb24gUHJvY2Vzc29yKHBsdWdpbnMpIHtcbiAgICBpZiAocGx1Z2lucyA9PT0gdm9pZCAwKSB7XG4gICAgICBwbHVnaW5zID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3VycmVudCBQb3N0Q1NTIHZlcnNpb24uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBpZiAocmVzdWx0LnByb2Nlc3Nvci52ZXJzaW9uLnNwbGl0KCcuJylbMF0gIT09ICc2Jykge1xuICAgICAqICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIHBsdWdpbiB3b3JrcyBvbmx5IHdpdGggUG9zdENTUyA2JylcbiAgICAgKiB9XG4gICAgICovXG4gICAgdGhpcy52ZXJzaW9uID0gJzcuMC4zMic7XG4gICAgLyoqXG4gICAgICogUGx1Z2lucyBhZGRlZCB0byB0aGlzIHByb2Nlc3Nvci5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtwbHVnaW5GdW5jdGlvbltdfVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBjb25zdCBwcm9jZXNzb3IgPSBwb3N0Y3NzKFthdXRvcHJlZml4ZXIsIHByZWNzc10pXG4gICAgICogcHJvY2Vzc29yLnBsdWdpbnMubGVuZ3RoIC8vPT4gMlxuICAgICAqL1xuXG4gICAgdGhpcy5wbHVnaW5zID0gdGhpcy5ub3JtYWxpemUocGx1Z2lucyk7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYSBwbHVnaW4gdG8gYmUgdXNlZCBhcyBhIENTUyBwcm9jZXNzb3IuXG4gICAqXG4gICAqIFBvc3RDU1MgcGx1Z2luIGNhbiBiZSBpbiA0IGZvcm1hdHM6XG4gICAqICogQSBwbHVnaW4gY3JlYXRlZCBieSB7QGxpbmsgcG9zdGNzcy5wbHVnaW59IG1ldGhvZC5cbiAgICogKiBBIGZ1bmN0aW9uLiBQb3N0Q1NTIHdpbGwgcGFzcyB0aGUgZnVuY3Rpb24gYSBAe2xpbmsgUm9vdH1cbiAgICogICBhcyB0aGUgZmlyc3QgYXJndW1lbnQgYW5kIGN1cnJlbnQge0BsaW5rIFJlc3VsdH0gaW5zdGFuY2VcbiAgICogICBhcyB0aGUgc2Vjb25kLlxuICAgKiAqIEFuIG9iamVjdCB3aXRoIGEgYHBvc3Rjc3NgIG1ldGhvZC4gUG9zdENTUyB3aWxsIHVzZSB0aGF0IG1ldGhvZFxuICAgKiAgIGFzIGRlc2NyaWJlZCBpbiAjMi5cbiAgICogKiBBbm90aGVyIHtAbGluayBQcm9jZXNzb3J9IGluc3RhbmNlLiBQb3N0Q1NTIHdpbGwgY29weSBwbHVnaW5zXG4gICAqICAgZnJvbSB0aGF0IGluc3RhbmNlIGludG8gdGhpcyBvbmUuXG4gICAqXG4gICAqIFBsdWdpbnMgY2FuIGFsc28gYmUgYWRkZWQgYnkgcGFzc2luZyB0aGVtIGFzIGFyZ3VtZW50cyB3aGVuIGNyZWF0aW5nXG4gICAqIGEgYHBvc3Rjc3NgIGluc3RhbmNlIChzZWUgW2Bwb3N0Y3NzKHBsdWdpbnMpYF0pLlxuICAgKlxuICAgKiBBc3luY2hyb25vdXMgcGx1Z2lucyBzaG91bGQgcmV0dXJuIGEgYFByb21pc2VgIGluc3RhbmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge1BsdWdpbnxwbHVnaW5GdW5jdGlvbnxQcm9jZXNzb3J9IHBsdWdpbiBQb3N0Q1NTIHBsdWdpblxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvciB7QGxpbmsgUHJvY2Vzc29yfVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHBsdWdpbnMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IHByb2Nlc3NvciA9IHBvc3Rjc3MoKVxuICAgKiAgIC51c2UoYXV0b3ByZWZpeGVyKVxuICAgKiAgIC51c2UocHJlY3NzKVxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9jZXNzZXN9IEN1cnJlbnQgcHJvY2Vzc29yIHRvIG1ha2UgbWV0aG9kcyBjaGFpbi5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gUHJvY2Vzc29yLnByb3RvdHlwZTtcblxuICBfcHJvdG8udXNlID0gZnVuY3Rpb24gdXNlKHBsdWdpbikge1xuICAgIHRoaXMucGx1Z2lucyA9IHRoaXMucGx1Z2lucy5jb25jYXQodGhpcy5ub3JtYWxpemUoW3BsdWdpbl0pKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuICAvKipcbiAgICogUGFyc2VzIHNvdXJjZSBDU1MgYW5kIHJldHVybnMgYSB7QGxpbmsgTGF6eVJlc3VsdH0gUHJvbWlzZSBwcm94eS5cbiAgICogQmVjYXVzZSBzb21lIHBsdWdpbnMgY2FuIGJlIGFzeW5jaHJvbm91cyBpdCBkb2VzbuKAmXQgbWFrZVxuICAgKiBhbnkgdHJhbnNmb3JtYXRpb25zLiBUcmFuc2Zvcm1hdGlvbnMgd2lsbCBiZSBhcHBsaWVkXG4gICAqIGluIHRoZSB7QGxpbmsgTGF6eVJlc3VsdH0gbWV0aG9kcy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd8dG9TdHJpbmd8UmVzdWx0fSBjc3MgU3RyaW5nIHdpdGggaW5wdXQgQ1NTIG9yIGFueSBvYmplY3RcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBhIGB0b1N0cmluZygpYCBtZXRob2QsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpa2UgYSBCdWZmZXIuIE9wdGlvbmFsbHksIHNlbmRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYSB7QGxpbmsgUmVzdWx0fSBpbnN0YW5jZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmQgdGhlIHByb2Nlc3NvciB3aWxsIHRha2VcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIHtAbGluayBSb290fSBmcm9tIGl0LlxuICAgKiBAcGFyYW0ge3Byb2Nlc3NPcHRpb25zfSBbb3B0c10gICAgICBPcHRpb25zLlxuICAgKlxuICAgKiBAcmV0dXJuIHtMYXp5UmVzdWx0fSBQcm9taXNlIHByb3h5LlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBwcm9jZXNzb3IucHJvY2Vzcyhjc3MsIHsgZnJvbTogJ2EuY3NzJywgdG86ICdhLm91dC5jc3MnIH0pXG4gICAqICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICogICAgICBjb25zb2xlLmxvZyhyZXN1bHQuY3NzKVxuICAgKiAgIH0pXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnByb2Nlc3MgPSBmdW5jdGlvbiAoX3Byb2Nlc3MpIHtcbiAgICBmdW5jdGlvbiBwcm9jZXNzKF94KSB7XG4gICAgICByZXR1cm4gX3Byb2Nlc3MuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICBwcm9jZXNzLnRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIF9wcm9jZXNzLnRvU3RyaW5nKCk7XG4gICAgfTtcblxuICAgIHJldHVybiBwcm9jZXNzO1xuICB9KGZ1bmN0aW9uIChjc3MsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucGx1Z2lucy5sZW5ndGggPT09IDAgJiYgb3B0cy5wYXJzZXIgPT09IG9wdHMuc3RyaW5naWZpZXIpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKCdZb3UgZGlkIG5vdCBzZXQgYW55IHBsdWdpbnMsIHBhcnNlciwgb3Igc3RyaW5naWZpZXIuICcgKyAnUmlnaHQgbm93LCBQb3N0Q1NTIGRvZXMgbm90aGluZy4gUGljayBwbHVnaW5zIGZvciB5b3VyIGNhc2UgJyArICdvbiBodHRwczovL3d3dy5wb3N0Y3NzLnBhcnRzLyBhbmQgdXNlIHRoZW0gaW4gcG9zdGNzcy5jb25maWcuanMuJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IF9sYXp5UmVzdWx0LmRlZmF1bHQodGhpcywgY3NzLCBvcHRzKTtcbiAgfSk7XG5cbiAgX3Byb3RvLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIG5vcm1hbGl6ZShwbHVnaW5zKSB7XG4gICAgdmFyIG5vcm1hbGl6ZWQgPSBbXTtcblxuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IHBsdWdpbnMsIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheShfaXRlcmF0b3IpLCBfaSA9IDAsIF9pdGVyYXRvciA9IF9pc0FycmF5ID8gX2l0ZXJhdG9yIDogX2l0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0oKTs7KSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgaWYgKF9pc0FycmF5KSB7XG4gICAgICAgIGlmIChfaSA+PSBfaXRlcmF0b3IubGVuZ3RoKSBicmVhaztcbiAgICAgICAgX3JlZiA9IF9pdGVyYXRvcltfaSsrXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9pID0gX2l0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgaWYgKF9pLmRvbmUpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2kudmFsdWU7XG4gICAgICB9XG5cbiAgICAgIHZhciBpID0gX3JlZjtcbiAgICAgIGlmIChpLnBvc3Rjc3MpIGkgPSBpLnBvc3Rjc3M7XG5cbiAgICAgIGlmICh0eXBlb2YgaSA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheShpLnBsdWdpbnMpKSB7XG4gICAgICAgIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVkLmNvbmNhdChpLnBsdWdpbnMpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBub3JtYWxpemVkLnB1c2goaSk7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpID09PSAnb2JqZWN0JyAmJiAoaS5wYXJzZSB8fCBpLnN0cmluZ2lmeSkpIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Bvc3RDU1Mgc3ludGF4ZXMgY2Fubm90IGJlIHVzZWQgYXMgcGx1Z2lucy4gSW5zdGVhZCwgcGxlYXNlIHVzZSAnICsgJ29uZSBvZiB0aGUgc3ludGF4L3BhcnNlci9zdHJpbmdpZmllciBvcHRpb25zIGFzIG91dGxpbmVkICcgKyAnaW4geW91ciBQb3N0Q1NTIHJ1bm5lciBkb2N1bWVudGF0aW9uLicpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoaSArICcgaXMgbm90IGEgUG9zdENTUyBwbHVnaW4nKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbm9ybWFsaXplZDtcbiAgfTtcblxuICByZXR1cm4gUHJvY2Vzc29yO1xufSgpO1xuXG52YXIgX2RlZmF1bHQgPSBQcm9jZXNzb3I7XG4vKipcbiAqIEBjYWxsYmFjayBidWlsZGVyXG4gKiBAcGFyYW0ge3N0cmluZ30gcGFydCAgICAgICAgICBQYXJ0IG9mIGdlbmVyYXRlZCBDU1MgY29ubmVjdGVkIHRvIHRoaXMgbm9kZS5cbiAqIEBwYXJhbSB7Tm9kZX0gICBub2RlICAgICAgICAgIEFTVCBub2RlLlxuICogQHBhcmFtIHtcInN0YXJ0XCJ8XCJlbmRcIn0gW3R5cGVdIE5vZGXigJlzIHBhcnQgdHlwZS5cbiAqL1xuXG4vKipcbiAqIEBjYWxsYmFjayBwYXJzZXJcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ3x0b1N0cmluZ30gY3NzICAgU3RyaW5nIHdpdGggaW5wdXQgQ1NTIG9yIGFueSBvYmplY3RcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHRvU3RyaW5nKCkgbWV0aG9kLCBsaWtlIGEgQnVmZmVyLlxuICogQHBhcmFtIHtwcm9jZXNzT3B0aW9uc30gW29wdHNdIE9wdGlvbnMgd2l0aCBvbmx5IGBmcm9tYCBhbmQgYG1hcGAga2V5cy5cbiAqXG4gKiBAcmV0dXJuIHtSb290fSBQb3N0Q1NTIEFTVFxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIHN0cmluZ2lmaWVyXG4gKlxuICogQHBhcmFtIHtOb2RlfSBub2RlICAgICAgIFN0YXJ0IG5vZGUgZm9yIHN0cmluZ2lmaW5nLiBVc3VhbGx5IHtAbGluayBSb290fS5cbiAqIEBwYXJhbSB7YnVpbGRlcn0gYnVpbGRlciBGdW5jdGlvbiB0byBjb25jYXRlbmF0ZSBDU1MgZnJvbSBub2Rl4oCZcyBwYXJ0c1xuICogICAgICAgICAgICAgICAgICAgICAgICAgIG9yIGdlbmVyYXRlIHN0cmluZyBhbmQgc291cmNlIG1hcC5cbiAqXG4gKiBAcmV0dXJuIHt2b2lkfVxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gc3ludGF4XG4gKiBAcHJvcGVydHkge3BhcnNlcn0gcGFyc2UgICAgICAgICAgRnVuY3Rpb24gdG8gZ2VuZXJhdGUgQVNUIGJ5IHN0cmluZy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5naWZpZXJ9IHN0cmluZ2lmeSBGdW5jdGlvbiB0byBnZW5lcmF0ZSBzdHJpbmcgYnkgQVNULlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gdG9TdHJpbmdcbiAqIEBwcm9wZXJ0eSB7ZnVuY3Rpb259IHRvU3RyaW5nXG4gKi9cblxuLyoqXG4gKiBAY2FsbGJhY2sgcGx1Z2luRnVuY3Rpb25cbiAqIEBwYXJhbSB7Um9vdH0gcm9vdCAgICAgUGFyc2VkIGlucHV0IENTUy5cbiAqIEBwYXJhbSB7UmVzdWx0fSByZXN1bHQgUmVzdWx0IHRvIHNldCB3YXJuaW5ncyBvciBjaGVjayBvdGhlciBwbHVnaW5zLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gUGx1Z2luXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBwb3N0Y3NzIFBvc3RDU1MgcGx1Z2luIGZ1bmN0aW9uLlxuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gcHJvY2Vzc09wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBmcm9tICAgICAgICAgICAgIFRoZSBwYXRoIG9mIHRoZSBDU1Mgc291cmNlIGZpbGUuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBZb3Ugc2hvdWxkIGFsd2F5cyBzZXQgYGZyb21gLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmVjYXVzZSBpdCBpcyB1c2VkIGluIHNvdXJjZSBtYXBcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRpb24gYW5kIHN5bnRheCBlcnJvciBtZXNzYWdlcy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0byAgICAgICAgICAgICAgIFRoZSBwYXRoIHdoZXJlIHlvdeKAmWxsIHB1dCB0aGUgb3V0cHV0XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDU1MgZmlsZS4gWW91IHNob3VsZCBhbHdheXMgc2V0IGB0b2BcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGdlbmVyYXRlIGNvcnJlY3Qgc291cmNlIG1hcHMuXG4gKiBAcHJvcGVydHkge3BhcnNlcn0gcGFyc2VyICAgICAgICAgICBGdW5jdGlvbiB0byBnZW5lcmF0ZSBBU1QgYnkgc3RyaW5nLlxuICogQHByb3BlcnR5IHtzdHJpbmdpZmllcn0gc3RyaW5naWZpZXIgQ2xhc3MgdG8gZ2VuZXJhdGUgc3RyaW5nIGJ5IEFTVC5cbiAqIEBwcm9wZXJ0eSB7c3ludGF4fSBzeW50YXggICAgICAgICAgIE9iamVjdCB3aXRoIGBwYXJzZWAgYW5kIGBzdHJpbmdpZnlgLlxuICogQHByb3BlcnR5IHtvYmplY3R9IG1hcCAgICAgICAgICAgICAgU291cmNlIG1hcCBvcHRpb25zLlxuICogQHByb3BlcnR5IHtib29sZWFufSBtYXAuaW5saW5lICAgICAgICAgICAgICAgICAgICBEb2VzIHNvdXJjZSBtYXAgc2hvdWxkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlIGVtYmVkZGVkIGluIHRoZSBvdXRwdXRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ1NTIGFzIGEgYmFzZTY0LWVuY29kZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tbWVudC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfG9iamVjdHxmYWxzZXxmdW5jdGlvbn0gbWFwLnByZXYgU291cmNlIG1hcCBjb250ZW50XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb20gYSBwcmV2aW91c1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9jZXNzaW5nIHN0ZXBcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZvciBleGFtcGxlLCBTYXNzKS5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUG9zdENTUyB3aWxsIHRyeSB0byBmaW5kXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXZpb3VzIG1hcCBhdXRvbWF0aWNhbGx5LFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbyB5b3UgY291bGQgZGlzYWJsZSBpdCBieVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgZmFsc2VgIHZhbHVlLlxuICogQHByb3BlcnR5IHtib29sZWFufSBtYXAuc291cmNlc0NvbnRlbnQgICAgICAgICAgICBEb2VzIFBvc3RDU1Mgc2hvdWxkIHNldFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgb3JpZ2luIGNvbnRlbnQgdG8gbWFwLlxuICogQHByb3BlcnR5IHtzdHJpbmd8ZmFsc2V9IG1hcC5hbm5vdGF0aW9uICAgICAgICAgICBEb2VzIFBvc3RDU1Mgc2hvdWxkIHNldFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbm5vdGF0aW9uIGNvbW1lbnQgdG8gbWFwLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IG1hcC5mcm9tICAgICAgICAgICAgICAgICAgICAgICBPdmVycmlkZSBgZnJvbWAgaW4gbWFw4oCZc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VzYC5cbiAqL1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbkJ5YjJObGMzTnZjaTVsY3pZaVhTd2libUZ0WlhNaU9sc2lVSEp2WTJWemMyOXlJaXdpY0d4MVoybHVjeUlzSW5abGNuTnBiMjRpTENKdWIzSnRZV3hwZW1VaUxDSjFjMlVpTENKd2JIVm5hVzRpTENKamIyNWpZWFFpTENKd2NtOWpaWE56SWl3aVkzTnpJaXdpYjNCMGN5SXNJbXhsYm1kMGFDSXNJbkJoY25ObGNpSXNJbk4wY21sdVoybG1hV1Z5SWl3aVpXNTJJaXdpVGs5RVJWOUZUbFlpTENKamIyNXpiMnhsSWl3aWQyRnliaUlzSWt4aGVubFNaWE4xYkhRaUxDSnViM0p0WVd4cGVtVmtJaXdpYVNJc0luQnZjM1JqYzNNaUxDSkJjbkpoZVNJc0ltbHpRWEp5WVhraUxDSndkWE5vSWl3aWNHRnljMlVpTENKemRISnBibWRwWm5raUxDSkZjbkp2Y2lKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN1FVRkJRVHM3T3p0QlFVVkJPenM3T3pzN096czdTVUZUVFVFc1V6czdPMEZCUTBvN096czdRVUZKUVN4eFFrRkJZVU1zVDBGQllpeEZRVUV5UWp0QlFVRkJMRkZCUVdSQkxFOUJRV003UVVGQlpFRXNUVUZCUVVFc1QwRkJZeXhIUVVGS0xFVkJRVWs3UVVGQlFUczdRVUZEZWtJN096czdPenM3T3pzN1FVRlZRU3hUUVVGTFF5eFBRVUZNTEVkQlFXVXNVVUZCWmp0QlFVTkJPenM3T3pzN096czdPMEZCVTBFc1UwRkJTMFFzVDBGQlRDeEhRVUZsTEV0QlFVdEZMRk5CUVV3c1EwRkJaVVlzVDBGQlppeERRVUZtTzBGQlEwUTdRVUZGUkRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMU5CTmtKQlJ5eEhMRWRCUVVFc1lVRkJTME1zVFVGQlRDeEZRVUZoTzBGQlExZ3NVMEZCUzBvc1QwRkJUQ3hIUVVGbExFdEJRVXRCTEU5QlFVd3NRMEZCWVVzc1RVRkJZaXhEUVVGdlFpeExRVUZMU0N4VFFVRk1MRU5CUVdVc1EwRkJRMFVzVFVGQlJDeERRVUZtTEVOQlFYQkNMRU5CUVdZN1FVRkRRU3hYUVVGUExFbEJRVkE3UVVGRFJEdEJRVVZFT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdVMEZ6UWtGRkxFODdPenM3T3pzN096czdTVUZCUVN4VlFVRlRReXhIUVVGVUxFVkJRV05ETEVsQlFXUXNSVUZCTUVJN1FVRkJRU3hSUVVGYVFTeEpRVUZaTzBGQlFWcEJMRTFCUVVGQkxFbEJRVmtzUjBGQlRDeEZRVUZMTzBGQlFVRTdPMEZCUTNoQ0xGRkJRVWtzUzBGQlMxSXNUMEZCVEN4RFFVRmhVeXhOUVVGaUxFdEJRWGRDTEVOQlFYaENMRWxCUVRaQ1JDeEpRVUZKTEVOQlFVTkZMRTFCUVV3c1MwRkJaMEpHTEVsQlFVa3NRMEZCUTBjc1YwRkJkRVFzUlVGQmJVVTdRVUZEYWtVc1ZVRkJTVXdzVDBGQlR5eERRVUZEVFN4SFFVRlNMRU5CUVZsRExGRkJRVm9zUzBGQmVVSXNXVUZCTjBJc1JVRkJNa003UVVGRGVrTXNXVUZCU1N4UFFVRlBReXhQUVVGUUxFdEJRVzFDTEZkQlFXNUNMRWxCUVd0RFFTeFBRVUZQTEVOQlFVTkRMRWxCUVRsRExFVkJRVzlFTzBGQlEyeEVSQ3hWUVVGQlFTeFBRVUZQTEVOQlFVTkRMRWxCUVZJc1EwRkRSU3d3UkVGRFFTdzRSRUZFUVN4SFFVVkJMR3RGUVVoR08wRkJTMFE3UVVGRFJqdEJRVU5HT3p0QlFVTkVMRmRCUVU4c1NVRkJTVU1zYlVKQlFVb3NRMEZCWlN4SlFVRm1MRVZCUVhGQ1ZDeEhRVUZ5UWl4RlFVRXdRa01zU1VGQk1VSXNRMEZCVUR0QlFVTkVMRWM3TzFOQlJVUk9MRk1zUjBGQlFTeHRRa0ZCVjBZc1QwRkJXQ3hGUVVGdlFqdEJRVU5zUWl4UlFVRkphVUlzVlVGQlZTeEhRVUZITEVWQlFXcENPenRCUVVOQkxIbENRVUZqYWtJc1QwRkJaQ3hyU0VGQmRVSTdRVUZCUVRzN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQkxGVkJRV1JyUWl4RFFVRmpPMEZCUTNKQ0xGVkJRVWxCTEVOQlFVTXNRMEZCUTBNc1QwRkJUaXhGUVVGbFJDeERRVUZETEVkQlFVZEJMRU5CUVVNc1EwRkJRME1zVDBGQlRqczdRVUZGWml4VlFVRkpMRTlCUVU5RUxFTkJRVkFzUzBGQllTeFJRVUZpTEVsQlFYbENSU3hMUVVGTExFTkJRVU5ETEU5QlFVNHNRMEZCWTBnc1EwRkJReXhEUVVGRGJFSXNUMEZCYUVJc1EwRkJOMElzUlVGQmRVUTdRVUZEY2tScFFpeFJRVUZCUVN4VlFVRlZMRWRCUVVkQkxGVkJRVlVzUTBGQlExb3NUVUZCV0N4RFFVRnJRbUVzUTBGQlF5eERRVUZEYkVJc1QwRkJjRUlzUTBGQllqdEJRVU5FTEU5QlJrUXNUVUZGVHl4SlFVRkpMRTlCUVU5clFpeERRVUZRTEV0QlFXRXNWVUZCYWtJc1JVRkJOa0k3UVVGRGJFTkVMRkZCUVVGQkxGVkJRVlVzUTBGQlEwc3NTVUZCV0N4RFFVRm5Ra29zUTBGQmFFSTdRVUZEUkN4UFFVWk5MRTFCUlVFc1NVRkJTU3hQUVVGUFFTeERRVUZRTEV0QlFXRXNVVUZCWWl4TFFVRXdRa0VzUTBGQlF5eERRVUZEU3l4TFFVRkdMRWxCUVZkTUxFTkJRVU1zUTBGQlEwMHNVMEZCZGtNc1EwRkJTaXhGUVVGMVJEdEJRVU0xUkN4WlFVRkpiRUlzVDBGQlR5eERRVUZEVFN4SFFVRlNMRU5CUVZsRExGRkJRVm9zUzBGQmVVSXNXVUZCTjBJc1JVRkJNa003UVVGRGVrTXNaMEpCUVUwc1NVRkJTVmtzUzBGQlNpeERRVU5LTEhGRlFVTkJMREpFUVVSQkxFZEJSVUVzZFVOQlNFa3NRMEZCVGp0QlFVdEVPMEZCUTBZc1QwRlNUU3hOUVZGQk8wRkJRMHdzWTBGQlRTeEpRVUZKUVN4TFFVRktMRU5CUVZWUUxFTkJRVU1zUjBGQlJ5d3dRa0ZCWkN4RFFVRk9PMEZCUTBRN1FVRkRSanM3UVVGRFJDeFhRVUZQUkN4VlFVRlFPMEZCUTBRc1J6czdPenM3WlVGSFdXeENMRk03UVVGRlpqczdPenM3T3p0QlFVOUJPenM3T3pzN096czdPMEZCVlVFN096czdPenM3T3pzN1FVRlZRVHM3T3pzN08wRkJUVUU3T3pzN08wRkJTMEU3T3pzN096dEJRVTFCT3pzN096dEJRVXRCSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWFXMXdiM0owSUV4aGVubFNaWE4xYkhRZ1puSnZiU0FuTGk5c1lYcDVMWEpsYzNWc2RDZGNibHh1THlvcVhHNGdLaUJEYjI1MFlXbHVjeUJ3YkhWbmFXNXpJSFJ2SUhCeWIyTmxjM01nUTFOVExpQkRjbVZoZEdVZ2IyNWxJR0JRY205alpYTnpiM0pnSUdsdWMzUmhibU5sTEZ4dUlDb2dhVzVwZEdsaGJHbDZaU0JwZEhNZ2NHeDFaMmx1Y3l3Z1lXNWtJSFJvWlc0Z2RYTmxJSFJvWVhRZ2FXNXpkR0Z1WTJVZ2IyNGdiblZ0WlhKdmRYTWdRMU5USUdacGJHVnpMbHh1SUNwY2JpQXFJRUJsZUdGdGNHeGxYRzRnS2lCamIyNXpkQ0J3Y205alpYTnpiM0lnUFNCd2IzTjBZM056S0Z0aGRYUnZjSEpsWm1sNFpYSXNJSEJ5WldOemMxMHBYRzRnS2lCd2NtOWpaWE56YjNJdWNISnZZMlZ6Y3loamMzTXhLUzUwYUdWdUtISmxjM1ZzZENBOVBpQmpiMjV6YjJ4bExteHZaeWh5WlhOMWJIUXVZM056S1NsY2JpQXFJSEJ5YjJObGMzTnZjaTV3Y205alpYTnpLR056Y3pJcExuUm9aVzRvY21WemRXeDBJRDArSUdOdmJuTnZiR1V1Ykc5bktISmxjM1ZzZEM1amMzTXBLVnh1SUNvdlhHNWpiR0Z6Y3lCUWNtOWpaWE56YjNJZ2UxeHVJQ0F2S2lwY2JpQWdJQ29nUUhCaGNtRnRJSHRCY25KaGVTNDhVR3gxWjJsdWZIQnNkV2RwYmtaMWJtTjBhVzl1UG54UWNtOWpaWE56YjNKOUlIQnNkV2RwYm5NZ1VHOXpkRU5UVXlCd2JIVm5hVzV6TGx4dUlDQWdLaUFnSUNBZ0lDQWdVMlZsSUh0QWJHbHVheUJRY205alpYTnpiM0lqZFhObGZTQm1iM0lnY0d4MVoybHVJR1p2Y20xaGRDNWNiaUFnSUNvdlhHNGdJR052Ym5OMGNuVmpkRzl5SUNod2JIVm5hVzV6SUQwZ1cxMHBJSHRjYmlBZ0lDQXZLaXBjYmlBZ0lDQWdLaUJEZFhKeVpXNTBJRkJ2YzNSRFUxTWdkbVZ5YzJsdmJpNWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQjBlWEJsSUh0emRISnBibWQ5WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBWlhoaGJYQnNaVnh1SUNBZ0lDQXFJR2xtSUNoeVpYTjFiSFF1Y0hKdlkyVnpjMjl5TG5abGNuTnBiMjR1YzNCc2FYUW9KeTRuS1Zzd1hTQWhQVDBnSnpZbktTQjdYRzRnSUNBZ0lDb2dJQ0IwYUhKdmR5QnVaWGNnUlhKeWIzSW9KMVJvYVhNZ2NHeDFaMmx1SUhkdmNtdHpJRzl1YkhrZ2QybDBhQ0JRYjNOMFExTlRJRFluS1Z4dUlDQWdJQ0FxSUgxY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxuWmxjbk5wYjI0Z1BTQW5OeTR3TGpNeUoxeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlGQnNkV2RwYm5NZ1lXUmtaV1FnZEc4Z2RHaHBjeUJ3Y205alpYTnpiM0l1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBZEhsd1pTQjdjR3gxWjJsdVJuVnVZM1JwYjI1YlhYMWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FnSUNvZ1kyOXVjM1FnY0hKdlkyVnpjMjl5SUQwZ2NHOXpkR056Y3loYllYVjBiM0J5WldacGVHVnlMQ0J3Y21WamMzTmRLVnh1SUNBZ0lDQXFJSEJ5YjJObGMzTnZjaTV3YkhWbmFXNXpMbXhsYm1kMGFDQXZMejArSURKY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxuQnNkV2RwYm5NZ1BTQjBhR2x6TG01dmNtMWhiR2w2WlNod2JIVm5hVzV6S1Z4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFRmtaSE1nWVNCd2JIVm5hVzRnZEc4Z1ltVWdkWE5sWkNCaGN5QmhJRU5UVXlCd2NtOWpaWE56YjNJdVhHNGdJQ0FxWEc0Z0lDQXFJRkJ2YzNSRFUxTWdjR3gxWjJsdUlHTmhiaUJpWlNCcGJpQTBJR1p2Y20xaGRITTZYRzRnSUNBcUlDb2dRU0J3YkhWbmFXNGdZM0psWVhSbFpDQmllU0I3UUd4cGJtc2djRzl6ZEdOemN5NXdiSFZuYVc1OUlHMWxkR2h2WkM1Y2JpQWdJQ29nS2lCQklHWjFibU4wYVc5dUxpQlFiM04wUTFOVElIZHBiR3dnY0dGemN5QjBhR1VnWm5WdVkzUnBiMjRnWVNCQWUyeHBibXNnVW05dmRIMWNiaUFnSUNvZ0lDQmhjeUIwYUdVZ1ptbHljM1FnWVhKbmRXMWxiblFnWVc1a0lHTjFjbkpsYm5RZ2UwQnNhVzVySUZKbGMzVnNkSDBnYVc1emRHRnVZMlZjYmlBZ0lDb2dJQ0JoY3lCMGFHVWdjMlZqYjI1a0xseHVJQ0FnS2lBcUlFRnVJRzlpYW1WamRDQjNhWFJvSUdFZ1lIQnZjM1JqYzNOZ0lHMWxkR2h2WkM0Z1VHOXpkRU5UVXlCM2FXeHNJSFZ6WlNCMGFHRjBJRzFsZEdodlpGeHVJQ0FnS2lBZ0lHRnpJR1JsYzJOeWFXSmxaQ0JwYmlBak1pNWNiaUFnSUNvZ0tpQkJibTkwYUdWeUlIdEFiR2x1YXlCUWNtOWpaWE56YjNKOUlHbHVjM1JoYm1ObExpQlFiM04wUTFOVElIZHBiR3dnWTI5d2VTQndiSFZuYVc1elhHNGdJQ0FxSUNBZ1puSnZiU0IwYUdGMElHbHVjM1JoYm1ObElHbHVkRzhnZEdocGN5QnZibVV1WEc0Z0lDQXFYRzRnSUNBcUlGQnNkV2RwYm5NZ1kyRnVJR0ZzYzI4Z1ltVWdZV1JrWldRZ1lua2djR0Z6YzJsdVp5QjBhR1Z0SUdGeklHRnlaM1Z0Wlc1MGN5QjNhR1Z1SUdOeVpXRjBhVzVuWEc0Z0lDQXFJR0VnWUhCdmMzUmpjM05nSUdsdWMzUmhibU5sSUNoelpXVWdXMkJ3YjNOMFkzTnpLSEJzZFdkcGJuTXBZRjBwTGx4dUlDQWdLbHh1SUNBZ0tpQkJjM2x1WTJoeWIyNXZkWE1nY0d4MVoybHVjeUJ6YUc5MWJHUWdjbVYwZFhKdUlHRWdZRkJ5YjIxcGMyVmdJR2x1YzNSaGJtTmxMbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTFCc2RXZHBibnh3YkhWbmFXNUdkVzVqZEdsdmJueFFjbTlqWlhOemIzSjlJSEJzZFdkcGJpQlFiM04wUTFOVElIQnNkV2RwYmx4dUlDQWdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmNpQjdRR3hwYm1zZ1VISnZZMlZ6YzI5eWZWeHVJQ0FnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhWFJvSUhCc2RXZHBibk11WEc0Z0lDQXFYRzRnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FxSUdOdmJuTjBJSEJ5YjJObGMzTnZjaUE5SUhCdmMzUmpjM01vS1Z4dUlDQWdLaUFnSUM1MWMyVW9ZWFYwYjNCeVpXWnBlR1Z5S1Z4dUlDQWdLaUFnSUM1MWMyVW9jSEpsWTNOektWeHVJQ0FnS2x4dUlDQWdLaUJBY21WMGRYSnVJSHRRY205alpYTnpaWE45SUVOMWNuSmxiblFnY0hKdlkyVnpjMjl5SUhSdklHMWhhMlVnYldWMGFHOWtjeUJqYUdGcGJpNWNiaUFnSUNvdlhHNGdJSFZ6WlNBb2NHeDFaMmx1S1NCN1hHNGdJQ0FnZEdocGN5NXdiSFZuYVc1eklEMGdkR2hwY3k1d2JIVm5hVzV6TG1OdmJtTmhkQ2gwYUdsekxtNXZjbTFoYkdsNlpTaGJjR3gxWjJsdVhTa3BYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTmNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJRWVhKelpYTWdjMjkxY21ObElFTlRVeUJoYm1RZ2NtVjBkWEp1Y3lCaElIdEFiR2x1YXlCTVlYcDVVbVZ6ZFd4MGZTQlFjbTl0YVhObElIQnliM2g1TGx4dUlDQWdLaUJDWldOaGRYTmxJSE52YldVZ2NHeDFaMmx1Y3lCallXNGdZbVVnWVhONWJtTm9jbTl1YjNWeklHbDBJR1J2WlhOdTRvQ1pkQ0J0WVd0bFhHNGdJQ0FxSUdGdWVTQjBjbUZ1YzJadmNtMWhkR2x2Ym5NdUlGUnlZVzV6Wm05eWJXRjBhVzl1Y3lCM2FXeHNJR0psSUdGd2NHeHBaV1JjYmlBZ0lDb2dhVzRnZEdobElIdEFiR2x1YXlCTVlYcDVVbVZ6ZFd4MGZTQnRaWFJvYjJSekxseHVJQ0FnS2x4dUlDQWdLaUJBY0dGeVlXMGdlM04wY21sdVozeDBiMU4wY21sdVozeFNaWE4xYkhSOUlHTnpjeUJUZEhKcGJtY2dkMmwwYUNCcGJuQjFkQ0JEVTFNZ2IzSWdZVzU1SUc5aWFtVmpkRnh1SUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjNhWFJvSUdFZ1lIUnZVM1J5YVc1bktDbGdJRzFsZEdodlpDeGNiaUFnSUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2JHbHJaU0JoSUVKMVptWmxjaTRnVDNCMGFXOXVZV3hzZVN3Z2MyVnVaRnh1SUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmhJSHRBYkdsdWF5QlNaWE4xYkhSOUlHbHVjM1JoYm1ObFhHNGdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGdVpDQjBhR1VnY0hKdlkyVnpjMjl5SUhkcGJHd2dkR0ZyWlZ4dUlDQWdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdVZ2UwQnNhVzVySUZKdmIzUjlJR1p5YjIwZ2FYUXVYRzRnSUNBcUlFQndZWEpoYlNCN2NISnZZMlZ6YzA5d2RHbHZibk45SUZ0dmNIUnpYU0FnSUNBZ0lFOXdkR2x2Ym5NdVhHNGdJQ0FxWEc0Z0lDQXFJRUJ5WlhSMWNtNGdlMHhoZW5sU1pYTjFiSFI5SUZCeWIyMXBjMlVnY0hKdmVIa3VYRzRnSUNBcVhHNGdJQ0FxSUVCbGVHRnRjR3hsWEc0Z0lDQXFJSEJ5YjJObGMzTnZjaTV3Y205alpYTnpLR056Y3l3Z2V5Qm1jbTl0T2lBbllTNWpjM01uTENCMGJ6b2dKMkV1YjNWMExtTnpjeWNnZlNsY2JpQWdJQ29nSUNBdWRHaGxiaWh5WlhOMWJIUWdQVDRnZTF4dUlDQWdLaUFnSUNBZ0lHTnZibk52YkdVdWJHOW5LSEpsYzNWc2RDNWpjM01wWEc0Z0lDQXFJQ0FnZlNsY2JpQWdJQ292WEc0Z0lIQnliMk5sYzNNZ0tHTnpjeXdnYjNCMGN5QTlJSHNnZlNrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG5Cc2RXZHBibk11YkdWdVozUm9JRDA5UFNBd0lDWW1JRzl3ZEhNdWNHRnljMlZ5SUQwOVBTQnZjSFJ6TG5OMGNtbHVaMmxtYVdWeUtTQjdYRzRnSUNBZ0lDQnBaaUFvY0hKdlkyVnpjeTVsYm5ZdVRrOUVSVjlGVGxZZ0lUMDlJQ2R3Y205a2RXTjBhVzl1SnlrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR052Ym5OdmJHVWdJVDA5SUNkMWJtUmxabWx1WldRbklDWW1JR052Ym5OdmJHVXVkMkZ5YmlrZ2UxeHVJQ0FnSUNBZ0lDQWdJR052Ym5OdmJHVXVkMkZ5YmloY2JpQWdJQ0FnSUNBZ0lDQWdJQ2RaYjNVZ1pHbGtJRzV2ZENCelpYUWdZVzU1SUhCc2RXZHBibk1zSUhCaGNuTmxjaXdnYjNJZ2MzUnlhVzVuYVdacFpYSXVJQ2NnSzF4dUlDQWdJQ0FnSUNBZ0lDQWdKMUpwWjJoMElHNXZkeXdnVUc5emRFTlRVeUJrYjJWeklHNXZkR2hwYm1jdUlGQnBZMnNnY0d4MVoybHVjeUJtYjNJZ2VXOTFjaUJqWVhObElDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNBZ0oyOXVJR2gwZEhCek9pOHZkM2QzTG5CdmMzUmpjM011Y0dGeWRITXZJR0Z1WkNCMWMyVWdkR2hsYlNCcGJpQndiM04wWTNOekxtTnZibVpwWnk1cWN5NG5YRzRnSUNBZ0lDQWdJQ0FnS1Z4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnVaWGNnVEdGNmVWSmxjM1ZzZENoMGFHbHpMQ0JqYzNNc0lHOXdkSE1wWEc0Z0lIMWNibHh1SUNCdWIzSnRZV3hwZW1VZ0tIQnNkV2RwYm5NcElIdGNiaUFnSUNCc1pYUWdibTl5YldGc2FYcGxaQ0E5SUZ0ZFhHNGdJQ0FnWm05eUlDaHNaWFFnYVNCdlppQndiSFZuYVc1ektTQjdYRzRnSUNBZ0lDQnBaaUFvYVM1d2IzTjBZM056S1NCcElEMGdhUzV3YjNOMFkzTnpYRzVjYmlBZ0lDQWdJR2xtSUNoMGVYQmxiMllnYVNBOVBUMGdKMjlpYW1WamRDY2dKaVlnUVhKeVlYa3VhWE5CY25KaGVTaHBMbkJzZFdkcGJuTXBLU0I3WEc0Z0lDQWdJQ0FnSUc1dmNtMWhiR2w2WldRZ1BTQnViM0p0WVd4cGVtVmtMbU52Ym1OaGRDaHBMbkJzZFdkcGJuTXBYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFI1Y0dWdlppQnBJRDA5UFNBblpuVnVZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJRzV2Y20xaGJHbDZaV1F1Y0hWemFDaHBLVnh1SUNBZ0lDQWdmU0JsYkhObElHbG1JQ2gwZVhCbGIyWWdhU0E5UFQwZ0oyOWlhbVZqZENjZ0ppWWdLR2t1Y0dGeWMyVWdmSHdnYVM1emRISnBibWRwWm5rcEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNod2NtOWpaWE56TG1WdWRpNU9UMFJGWDBWT1ZpQWhQVDBnSjNCeWIyUjFZM1JwYjI0bktTQjdYRzRnSUNBZ0lDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLRnh1SUNBZ0lDQWdJQ0FnSUNBZ0oxQnZjM1JEVTFNZ2MzbHVkR0Y0WlhNZ1kyRnVibTkwSUdKbElIVnpaV1FnWVhNZ2NHeDFaMmx1Y3k0Z1NXNXpkR1ZoWkN3Z2NHeGxZWE5sSUhWelpTQW5JQ3RjYmlBZ0lDQWdJQ0FnSUNBZ0lDZHZibVVnYjJZZ2RHaGxJSE41Ym5SaGVDOXdZWEp6WlhJdmMzUnlhVzVuYVdacFpYSWdiM0IwYVc5dWN5QmhjeUJ2ZFhSc2FXNWxaQ0FuSUN0Y2JpQWdJQ0FnSUNBZ0lDQWdJQ2RwYmlCNWIzVnlJRkJ2YzNSRFUxTWdjblZ1Ym1WeUlHUnZZM1Z0Wlc1MFlYUnBiMjR1SjF4dUlDQWdJQ0FnSUNBZ0lDbGNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkR2h5YjNjZ2JtVjNJRVZ5Y205eUtHa2dLeUFuSUdseklHNXZkQ0JoSUZCdmMzUkRVMU1nY0d4MVoybHVKeWxjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUc1dmNtMWhiR2w2WldSY2JpQWdmVnh1ZlZ4dVhHNWxlSEJ2Y25RZ1pHVm1ZWFZzZENCUWNtOWpaWE56YjNKY2JseHVMeW9xWEc0Z0tpQkFZMkZzYkdKaFkyc2dZblZwYkdSbGNseHVJQ29nUUhCaGNtRnRJSHR6ZEhKcGJtZDlJSEJoY25RZ0lDQWdJQ0FnSUNBZ1VHRnlkQ0J2WmlCblpXNWxjbUYwWldRZ1ExTlRJR052Ym01bFkzUmxaQ0IwYnlCMGFHbHpJRzV2WkdVdVhHNGdLaUJBY0dGeVlXMGdlMDV2WkdWOUlDQWdibTlrWlNBZ0lDQWdJQ0FnSUNCQlUxUWdibTlrWlM1Y2JpQXFJRUJ3WVhKaGJTQjdYQ0p6ZEdGeWRGd2lmRndpWlc1a1hDSjlJRnQwZVhCbFhTQk9iMlJsNG9DWmN5QndZWEowSUhSNWNHVXVYRzRnS2k5Y2JseHVMeW9xWEc0Z0tpQkFZMkZzYkdKaFkyc2djR0Z5YzJWeVhHNGdLbHh1SUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ4ZEc5VGRISnBibWQ5SUdOemN5QWdJRk4wY21sdVp5QjNhWFJvSUdsdWNIVjBJRU5UVXlCdmNpQmhibmtnYjJKcVpXTjBYRzRnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkMmwwYUNCMGIxTjBjbWx1WnlncElHMWxkR2h2WkN3Z2JHbHJaU0JoSUVKMVptWmxjaTVjYmlBcUlFQndZWEpoYlNCN2NISnZZMlZ6YzA5d2RHbHZibk45SUZ0dmNIUnpYU0JQY0hScGIyNXpJSGRwZEdnZ2IyNXNlU0JnWm5KdmJXQWdZVzVrSUdCdFlYQmdJR3RsZVhNdVhHNGdLbHh1SUNvZ1FISmxkSFZ5YmlCN1VtOXZkSDBnVUc5emRFTlRVeUJCVTFSY2JpQXFMMXh1WEc0dktpcGNiaUFxSUVCallXeHNZbUZqYXlCemRISnBibWRwWm1sbGNseHVJQ3BjYmlBcUlFQndZWEpoYlNCN1RtOWtaWDBnYm05a1pTQWdJQ0FnSUNCVGRHRnlkQ0J1YjJSbElHWnZjaUJ6ZEhKcGJtZHBabWx1Wnk0Z1ZYTjFZV3hzZVNCN1FHeHBibXNnVW05dmRIMHVYRzRnS2lCQWNHRnlZVzBnZTJKMWFXeGtaWEo5SUdKMWFXeGtaWElnUm5WdVkzUnBiMjRnZEc4Z1kyOXVZMkYwWlc1aGRHVWdRMU5USUdaeWIyMGdibTlrWmVLQW1YTWdjR0Z5ZEhOY2JpQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjaUJuWlc1bGNtRjBaU0J6ZEhKcGJtY2dZVzVrSUhOdmRYSmpaU0J0WVhBdVhHNGdLbHh1SUNvZ1FISmxkSFZ5YmlCN2RtOXBaSDFjYmlBcUwxeHVYRzR2S2lwY2JpQXFJRUIwZVhCbFpHVm1JSHR2WW1wbFkzUjlJSE41Ym5SaGVGeHVJQ29nUUhCeWIzQmxjblI1SUh0d1lYSnpaWEo5SUhCaGNuTmxJQ0FnSUNBZ0lDQWdJRVoxYm1OMGFXOXVJSFJ2SUdkbGJtVnlZWFJsSUVGVFZDQmllU0J6ZEhKcGJtY3VYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UzTjBjbWx1WjJsbWFXVnlmU0J6ZEhKcGJtZHBabmtnUm5WdVkzUnBiMjRnZEc4Z1oyVnVaWEpoZEdVZ2MzUnlhVzVuSUdKNUlFRlRWQzVjYmlBcUwxeHVYRzR2S2lwY2JpQXFJRUIwZVhCbFpHVm1JSHR2WW1wbFkzUjlJSFJ2VTNSeWFXNW5YRzRnS2lCQWNISnZjR1Z5ZEhrZ2UyWjFibU4wYVc5dWZTQjBiMU4wY21sdVoxeHVJQ292WEc1Y2JpOHFLbHh1SUNvZ1FHTmhiR3hpWVdOcklIQnNkV2RwYmtaMWJtTjBhVzl1WEc0Z0tpQkFjR0Z5WVcwZ2UxSnZiM1I5SUhKdmIzUWdJQ0FnSUZCaGNuTmxaQ0JwYm5CMWRDQkRVMU11WEc0Z0tpQkFjR0Z5WVcwZ2UxSmxjM1ZzZEgwZ2NtVnpkV3gwSUZKbGMzVnNkQ0IwYnlCelpYUWdkMkZ5Ym1sdVozTWdiM0lnWTJobFkyc2diM1JvWlhJZ2NHeDFaMmx1Y3k1Y2JpQXFMMXh1WEc0dktpcGNiaUFxSUVCMGVYQmxaR1ZtSUh0dlltcGxZM1I5SUZCc2RXZHBibHh1SUNvZ1FIQnliM0JsY25SNUlIdG1kVzVqZEdsdmJuMGdjRzl6ZEdOemN5QlFiM04wUTFOVElIQnNkV2RwYmlCbWRXNWpkR2x2Ymk1Y2JpQXFMMXh1WEc0dktpcGNiaUFxSUVCMGVYQmxaR1ZtSUh0dlltcGxZM1I5SUhCeWIyTmxjM05QY0hScGIyNXpYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UzTjBjbWx1WjMwZ1puSnZiU0FnSUNBZ0lDQWdJQ0FnSUNCVWFHVWdjR0YwYUNCdlppQjBhR1VnUTFOVElITnZkWEpqWlNCbWFXeGxMbHh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1dXOTFJSE5vYjNWc1pDQmhiSGRoZVhNZ2MyVjBJR0JtY205dFlDeGNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdKbFkyRjFjMlVnYVhRZ2FYTWdkWE5sWkNCcGJpQnpiM1Z5WTJVZ2JXRndYRzRnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCblpXNWxjbUYwYVc5dUlHRnVaQ0J6ZVc1MFlYZ2daWEp5YjNJZ2JXVnpjMkZuWlhNdVhHNGdLaUJBY0hKdmNHVnlkSGtnZTNOMGNtbHVaMzBnZEc4Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0JVYUdVZ2NHRjBhQ0IzYUdWeVpTQjViM1hpZ0psc2JDQndkWFFnZEdobElHOTFkSEIxZEZ4dUlDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdRMU5USUdacGJHVXVJRmx2ZFNCemFHOTFiR1FnWVd4M1lYbHpJSE5sZENCZ2RHOWdYRzRnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGJ5Qm5aVzVsY21GMFpTQmpiM0p5WldOMElITnZkWEpqWlNCdFlYQnpMbHh1SUNvZ1FIQnliM0JsY25SNUlIdHdZWEp6WlhKOUlIQmhjbk5sY2lBZ0lDQWdJQ0FnSUNBZ1JuVnVZM1JwYjI0Z2RHOGdaMlZ1WlhKaGRHVWdRVk5VSUdKNUlITjBjbWx1Wnk1Y2JpQXFJRUJ3Y205d1pYSjBlU0I3YzNSeWFXNW5hV1pwWlhKOUlITjBjbWx1WjJsbWFXVnlJRU5zWVhOeklIUnZJR2RsYm1WeVlYUmxJSE4wY21sdVp5QmllU0JCVTFRdVhHNGdLaUJBY0hKdmNHVnlkSGtnZTNONWJuUmhlSDBnYzNsdWRHRjRJQ0FnSUNBZ0lDQWdJQ0JQWW1wbFkzUWdkMmwwYUNCZ2NHRnljMlZnSUdGdVpDQmdjM1J5YVc1bmFXWjVZQzVjYmlBcUlFQndjbTl3WlhKMGVTQjdiMkpxWldOMGZTQnRZWEFnSUNBZ0lDQWdJQ0FnSUNBZ0lGTnZkWEpqWlNCdFlYQWdiM0IwYVc5dWN5NWNiaUFxSUVCd2NtOXdaWEowZVNCN1ltOXZiR1ZoYm4wZ2JXRndMbWx1YkdsdVpTQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdSRzlsY3lCemIzVnlZMlVnYldGd0lITm9iM1ZzWkZ4dUlDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaVpTQmxiV0psWkdSbFpDQnBiaUIwYUdVZ2IzVjBjSFYwWEc0Z0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVOVFV5QmhjeUJoSUdKaGMyVTJOQzFsYm1OdlpHVmtYRzRnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052YlcxbGJuUXVYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UzTjBjbWx1WjN4dlltcGxZM1I4Wm1Gc2MyVjhablZ1WTNScGIyNTlJRzFoY0M1d2NtVjJJRk52ZFhKalpTQnRZWEFnWTI5dWRHVnVkRnh1SUNvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JtY205dElHRWdjSEpsZG1sdmRYTmNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjSEp2WTJWemMybHVaeUJ6ZEdWd1hHNGdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDaG1iM0lnWlhoaGJYQnNaU3dnVTJGemN5a3VYRzRnS2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRkJ2YzNSRFUxTWdkMmxzYkNCMGNua2dkRzhnWm1sdVpGeHVJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQndjbVYyYVc5MWN5QnRZWEFnWVhWMGIyMWhkR2xqWVd4c2VTeGNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMjhnZVc5MUlHTnZkV3hrSUdScGMyRmliR1VnYVhRZ1lubGNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZR1poYkhObFlDQjJZV3gxWlM1Y2JpQXFJRUJ3Y205d1pYSjBlU0I3WW05dmJHVmhibjBnYldGd0xuTnZkWEpqWlhORGIyNTBaVzUwSUNBZ0lDQWdJQ0FnSUNBZ1JHOWxjeUJRYjNOMFExTlRJSE5vYjNWc1pDQnpaWFJjYmlBcUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdobElHOXlhV2RwYmlCamIyNTBaVzUwSUhSdklHMWhjQzVjYmlBcUlFQndjbTl3WlhKMGVTQjdjM1J5YVc1bmZHWmhiSE5sZlNCdFlYQXVZVzV1YjNSaGRHbHZiaUFnSUNBZ0lDQWdJQ0FnUkc5bGN5QlFiM04wUTFOVElITm9iM1ZzWkNCelpYUmNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZVzV1YjNSaGRHbHZiaUJqYjIxdFpXNTBJSFJ2SUcxaGNDNWNiaUFxSUVCd2NtOXdaWEowZVNCN2MzUnlhVzVuZlNCdFlYQXVabkp2YlNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdUM1psY25KcFpHVWdZR1p5YjIxZ0lHbHVJRzFoY09LQW1YTmNiaUFxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMjkxY21ObGMyQXVYRzRnS2k5Y2JpSmRMQ0ptYVd4bElqb2ljSEp2WTJWemMyOXlMbXB6SW4wPVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfbWFwR2VuZXJhdG9yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9tYXAtZ2VuZXJhdG9yXCIpKTtcblxudmFyIF9zdHJpbmdpZnkyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9zdHJpbmdpZnlcIikpO1xuXG52YXIgX3dhcm5PbmNlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi93YXJuLW9uY2VcIikpO1xuXG52YXIgX3Jlc3VsdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcmVzdWx0XCIpKTtcblxudmFyIF9wYXJzZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vcGFyc2VcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbmZ1bmN0aW9uIGlzUHJvbWlzZShvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmoudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8qKlxuICogQSBQcm9taXNlIHByb3h5IGZvciB0aGUgcmVzdWx0IG9mIFBvc3RDU1MgdHJhbnNmb3JtYXRpb25zLlxuICpcbiAqIEEgYExhenlSZXN1bHRgIGluc3RhbmNlIGlzIHJldHVybmVkIGJ5IHtAbGluayBQcm9jZXNzb3IjcHJvY2Vzc30uXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IGxhenkgPSBwb3N0Y3NzKFthdXRvcHJlZml4ZXJdKS5wcm9jZXNzKGNzcylcbiAqL1xuXG5cbnZhciBMYXp5UmVzdWx0ID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTGF6eVJlc3VsdChwcm9jZXNzb3IsIGNzcywgb3B0cykge1xuICAgIHRoaXMuc3RyaW5naWZpZWQgPSBmYWxzZTtcbiAgICB0aGlzLnByb2Nlc3NlZCA9IGZhbHNlO1xuICAgIHZhciByb290O1xuXG4gICAgaWYgKHR5cGVvZiBjc3MgPT09ICdvYmplY3QnICYmIGNzcyAhPT0gbnVsbCAmJiBjc3MudHlwZSA9PT0gJ3Jvb3QnKSB7XG4gICAgICByb290ID0gY3NzO1xuICAgIH0gZWxzZSBpZiAoY3NzIGluc3RhbmNlb2YgTGF6eVJlc3VsdCB8fCBjc3MgaW5zdGFuY2VvZiBfcmVzdWx0LmRlZmF1bHQpIHtcbiAgICAgIHJvb3QgPSBjc3Mucm9vdDtcblxuICAgICAgaWYgKGNzcy5tYXApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRzLm1hcCA9PT0gJ3VuZGVmaW5lZCcpIG9wdHMubWFwID0ge307XG4gICAgICAgIGlmICghb3B0cy5tYXAuaW5saW5lKSBvcHRzLm1hcC5pbmxpbmUgPSBmYWxzZTtcbiAgICAgICAgb3B0cy5tYXAucHJldiA9IGNzcy5tYXA7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwYXJzZXIgPSBfcGFyc2UuZGVmYXVsdDtcbiAgICAgIGlmIChvcHRzLnN5bnRheCkgcGFyc2VyID0gb3B0cy5zeW50YXgucGFyc2U7XG4gICAgICBpZiAob3B0cy5wYXJzZXIpIHBhcnNlciA9IG9wdHMucGFyc2VyO1xuICAgICAgaWYgKHBhcnNlci5wYXJzZSkgcGFyc2VyID0gcGFyc2VyLnBhcnNlO1xuXG4gICAgICB0cnkge1xuICAgICAgICByb290ID0gcGFyc2VyKGNzcywgb3B0cyk7XG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICB0aGlzLmVycm9yID0gZXJyb3I7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5yZXN1bHQgPSBuZXcgX3Jlc3VsdC5kZWZhdWx0KHByb2Nlc3Nvciwgcm9vdCwgb3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSB7QGxpbmsgUHJvY2Vzc29yfSBpbnN0YW5jZSwgd2hpY2ggd2lsbCBiZSB1c2VkXG4gICAqIGZvciBDU1MgdHJhbnNmb3JtYXRpb25zLlxuICAgKlxuICAgKiBAdHlwZSB7UHJvY2Vzc29yfVxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBMYXp5UmVzdWx0LnByb3RvdHlwZTtcblxuICAvKipcbiAgICogUHJvY2Vzc2VzIGlucHV0IENTUyB0aHJvdWdoIHN5bmNocm9ub3VzIHBsdWdpbnNcbiAgICogYW5kIGNhbGxzIHtAbGluayBSZXN1bHQjd2FybmluZ3MoKX0uXG4gICAqXG4gICAqIEByZXR1cm4ge1dhcm5pbmdbXX0gV2FybmluZ3MgZnJvbSBwbHVnaW5zLlxuICAgKi9cbiAgX3Byb3RvLndhcm5pbmdzID0gZnVuY3Rpb24gd2FybmluZ3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3luYygpLndhcm5pbmdzKCk7XG4gIH1cbiAgLyoqXG4gICAqIEFsaWFzIGZvciB0aGUge0BsaW5rIExhenlSZXN1bHQjY3NzfSBwcm9wZXJ0eS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogbGF6eSArICcnID09PSBsYXp5LmNzc1xuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IE91dHB1dCBDU1MuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3NzO1xuICB9XG4gIC8qKlxuICAgKiBQcm9jZXNzZXMgaW5wdXQgQ1NTIHRocm91Z2ggc3luY2hyb25vdXMgYW5kIGFzeW5jaHJvbm91cyBwbHVnaW5zXG4gICAqIGFuZCBjYWxscyBgb25GdWxmaWxsZWRgIHdpdGggYSBSZXN1bHQgaW5zdGFuY2UuIElmIGEgcGx1Z2luIHRocm93c1xuICAgKiBhbiBlcnJvciwgdGhlIGBvblJlamVjdGVkYCBjYWxsYmFjayB3aWxsIGJlIGV4ZWN1dGVkLlxuICAgKlxuICAgKiBJdCBpbXBsZW1lbnRzIHN0YW5kYXJkIFByb21pc2UgQVBJLlxuICAgKlxuICAgKiBAcGFyYW0ge29uRnVsZmlsbGVkfSBvbkZ1bGZpbGxlZCBDYWxsYmFjayB3aWxsIGJlIGV4ZWN1dGVkXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gYWxsIHBsdWdpbnMgd2lsbCBmaW5pc2ggd29yay5cbiAgICogQHBhcmFtIHtvblJlamVjdGVkfSAgb25SZWplY3RlZCAgQ2FsbGJhY2sgd2lsbCBiZSBleGVjdXRlZCBvbiBhbnkgZXJyb3IuXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IFByb21pc2UgQVBJIHRvIG1ha2UgcXVldWUuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHBvc3Rjc3MoW2F1dG9wcmVmaXhlcl0pLnByb2Nlc3MoY3NzLCB7IGZyb206IGNzc1BhdGggfSkudGhlbihyZXN1bHQgPT4ge1xuICAgKiAgIGNvbnNvbGUubG9nKHJlc3VsdC5jc3MpXG4gICAqIH0pXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLnRoZW4gPSBmdW5jdGlvbiB0aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKSB7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICghKCdmcm9tJyBpbiB0aGlzLm9wdHMpKSB7XG4gICAgICAgICgwLCBfd2Fybk9uY2UuZGVmYXVsdCkoJ1dpdGhvdXQgYGZyb21gIG9wdGlvbiBQb3N0Q1NTIGNvdWxkIGdlbmVyYXRlIHdyb25nIHNvdXJjZSBtYXAgJyArICdhbmQgd2lsbCBub3QgZmluZCBCcm93c2Vyc2xpc3QgY29uZmlnLiBTZXQgaXQgdG8gQ1NTIGZpbGUgcGF0aCAnICsgJ29yIHRvIGB1bmRlZmluZWRgIHRvIHByZXZlbnQgdGhpcyB3YXJuaW5nLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmFzeW5jKCkudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCk7XG4gIH1cbiAgLyoqXG4gICAqIFByb2Nlc3NlcyBpbnB1dCBDU1MgdGhyb3VnaCBzeW5jaHJvbm91cyBhbmQgYXN5bmNocm9ub3VzIHBsdWdpbnNcbiAgICogYW5kIGNhbGxzIG9uUmVqZWN0ZWQgZm9yIGVhY2ggZXJyb3IgdGhyb3duIGluIGFueSBwbHVnaW4uXG4gICAqXG4gICAqIEl0IGltcGxlbWVudHMgc3RhbmRhcmQgUHJvbWlzZSBBUEkuXG4gICAqXG4gICAqIEBwYXJhbSB7b25SZWplY3RlZH0gb25SZWplY3RlZCBDYWxsYmFjayB3aWxsIGJlIGV4ZWN1dGVkIG9uIGFueSBlcnJvci5cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZX0gUHJvbWlzZSBBUEkgdG8gbWFrZSBxdWV1ZS5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogcG9zdGNzcyhbYXV0b3ByZWZpeGVyXSkucHJvY2Vzcyhjc3MpLnRoZW4ocmVzdWx0ID0+IHtcbiAgICogICBjb25zb2xlLmxvZyhyZXN1bHQuY3NzKVxuICAgKiB9KS5jYXRjaChlcnJvciA9PiB7XG4gICAqICAgY29uc29sZS5lcnJvcihlcnJvcilcbiAgICogfSlcbiAgICovXG4gIDtcblxuICBfcHJvdG8uY2F0Y2ggPSBmdW5jdGlvbiBfY2F0Y2gob25SZWplY3RlZCkge1xuICAgIHJldHVybiB0aGlzLmFzeW5jKCkuY2F0Y2gob25SZWplY3RlZCk7XG4gIH1cbiAgLyoqXG4gICAqIFByb2Nlc3NlcyBpbnB1dCBDU1MgdGhyb3VnaCBzeW5jaHJvbm91cyBhbmQgYXN5bmNocm9ub3VzIHBsdWdpbnNcbiAgICogYW5kIGNhbGxzIG9uRmluYWxseSBvbiBhbnkgZXJyb3Igb3Igd2hlbiBhbGwgcGx1Z2lucyB3aWxsIGZpbmlzaCB3b3JrLlxuICAgKlxuICAgKiBJdCBpbXBsZW1lbnRzIHN0YW5kYXJkIFByb21pc2UgQVBJLlxuICAgKlxuICAgKiBAcGFyYW0ge29uRmluYWxseX0gb25GaW5hbGx5IENhbGxiYWNrIHdpbGwgYmUgZXhlY3V0ZWQgb24gYW55IGVycm9yIG9yXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiBhbGwgcGx1Z2lucyB3aWxsIGZpbmlzaCB3b3JrLlxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSBQcm9taXNlIEFQSSB0byBtYWtlIHF1ZXVlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBwb3N0Y3NzKFthdXRvcHJlZml4ZXJdKS5wcm9jZXNzKGNzcykuZmluYWxseSgoKSA9PiB7XG4gICAqICAgY29uc29sZS5sb2coJ3Byb2Nlc3NpbmcgZW5kZWQnKVxuICAgKiB9KVxuICAgKi9cbiAgO1xuXG4gIF9wcm90by5maW5hbGx5ID0gZnVuY3Rpb24gX2ZpbmFsbHkob25GaW5hbGx5KSB7XG4gICAgcmV0dXJuIHRoaXMuYXN5bmMoKS50aGVuKG9uRmluYWxseSwgb25GaW5hbGx5KTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlRXJyb3IgPSBmdW5jdGlvbiBoYW5kbGVFcnJvcihlcnJvciwgcGx1Z2luKSB7XG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZXJyb3IgPSBlcnJvcjtcblxuICAgICAgaWYgKGVycm9yLm5hbWUgPT09ICdDc3NTeW50YXhFcnJvcicgJiYgIWVycm9yLnBsdWdpbikge1xuICAgICAgICBlcnJvci5wbHVnaW4gPSBwbHVnaW4ucG9zdGNzc1BsdWdpbjtcbiAgICAgICAgZXJyb3Iuc2V0TWVzc2FnZSgpO1xuICAgICAgfSBlbHNlIGlmIChwbHVnaW4ucG9zdGNzc1ZlcnNpb24pIHtcbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICB2YXIgcGx1Z2luTmFtZSA9IHBsdWdpbi5wb3N0Y3NzUGx1Z2luO1xuICAgICAgICAgIHZhciBwbHVnaW5WZXIgPSBwbHVnaW4ucG9zdGNzc1ZlcnNpb247XG4gICAgICAgICAgdmFyIHJ1bnRpbWVWZXIgPSB0aGlzLnJlc3VsdC5wcm9jZXNzb3IudmVyc2lvbjtcbiAgICAgICAgICB2YXIgYSA9IHBsdWdpblZlci5zcGxpdCgnLicpO1xuICAgICAgICAgIHZhciBiID0gcnVudGltZVZlci5zcGxpdCgnLicpO1xuXG4gICAgICAgICAgaWYgKGFbMF0gIT09IGJbMF0gfHwgcGFyc2VJbnQoYVsxXSkgPiBwYXJzZUludChiWzFdKSkge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5rbm93biBlcnJvciBmcm9tIFBvc3RDU1MgcGx1Z2luLiBZb3VyIGN1cnJlbnQgUG9zdENTUyAnICsgJ3ZlcnNpb24gaXMgJyArIHJ1bnRpbWVWZXIgKyAnLCBidXQgJyArIHBsdWdpbk5hbWUgKyAnIHVzZXMgJyArIHBsdWdpblZlciArICcuIFBlcmhhcHMgdGhpcyBpcyB0aGUgc291cmNlIG9mIHRoZSBlcnJvciBiZWxvdy4nKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IpIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmFzeW5jVGljayA9IGZ1bmN0aW9uIGFzeW5jVGljayhyZXNvbHZlLCByZWplY3QpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMucGx1Z2luID49IHRoaXMucHJvY2Vzc29yLnBsdWdpbnMubGVuZ3RoKSB7XG4gICAgICB0aGlzLnByb2Nlc3NlZCA9IHRydWU7XG4gICAgICByZXR1cm4gcmVzb2x2ZSgpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB2YXIgcGx1Z2luID0gdGhpcy5wcm9jZXNzb3IucGx1Z2luc1t0aGlzLnBsdWdpbl07XG4gICAgICB2YXIgcHJvbWlzZSA9IHRoaXMucnVuKHBsdWdpbik7XG4gICAgICB0aGlzLnBsdWdpbiArPSAxO1xuXG4gICAgICBpZiAoaXNQcm9taXNlKHByb21pc2UpKSB7XG4gICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMuYXN5bmNUaWNrKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgIF90aGlzLmhhbmRsZUVycm9yKGVycm9yLCBwbHVnaW4pO1xuXG4gICAgICAgICAgX3RoaXMucHJvY2Vzc2VkID0gdHJ1ZTtcbiAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYXN5bmNUaWNrKHJlc29sdmUsIHJlamVjdCk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMucHJvY2Vzc2VkID0gdHJ1ZTtcbiAgICAgIHJlamVjdChlcnJvcik7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5hc3luYyA9IGZ1bmN0aW9uIGFzeW5jKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMucHJvY2Vzc2VkKSB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBpZiAoX3RoaXMyLmVycm9yKSB7XG4gICAgICAgICAgcmVqZWN0KF90aGlzMi5lcnJvcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVzb2x2ZShfdGhpczIuc3RyaW5naWZ5KCkpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcm9jZXNzaW5nKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9jZXNzaW5nO1xuICAgIH1cblxuICAgIHRoaXMucHJvY2Vzc2luZyA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGlmIChfdGhpczIuZXJyb3IpIHJldHVybiByZWplY3QoX3RoaXMyLmVycm9yKTtcbiAgICAgIF90aGlzMi5wbHVnaW4gPSAwO1xuXG4gICAgICBfdGhpczIuYXN5bmNUaWNrKHJlc29sdmUsIHJlamVjdCk7XG4gICAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICBfdGhpczIucHJvY2Vzc2VkID0gdHJ1ZTtcbiAgICAgIHJldHVybiBfdGhpczIuc3RyaW5naWZ5KCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzc2luZztcbiAgfTtcblxuICBfcHJvdG8uc3luYyA9IGZ1bmN0aW9uIHN5bmMoKSB7XG4gICAgaWYgKHRoaXMucHJvY2Vzc2VkKSByZXR1cm4gdGhpcy5yZXN1bHQ7XG4gICAgdGhpcy5wcm9jZXNzZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMucHJvY2Vzc2luZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2UgcHJvY2Vzcyhjc3MpLnRoZW4oY2IpIHRvIHdvcmsgd2l0aCBhc3luYyBwbHVnaW5zJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZXJyb3IpIHRocm93IHRoaXMuZXJyb3I7XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSB0aGlzLnJlc3VsdC5wcm9jZXNzb3IucGx1Z2lucywgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHBsdWdpbiA9IF9yZWY7XG4gICAgICB2YXIgcHJvbWlzZSA9IHRoaXMucnVuKHBsdWdpbik7XG5cbiAgICAgIGlmIChpc1Byb21pc2UocHJvbWlzZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVc2UgcHJvY2Vzcyhjc3MpLnRoZW4oY2IpIHRvIHdvcmsgd2l0aCBhc3luYyBwbHVnaW5zJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucmVzdWx0O1xuICB9O1xuXG4gIF9wcm90by5ydW4gPSBmdW5jdGlvbiBydW4ocGx1Z2luKSB7XG4gICAgdGhpcy5yZXN1bHQubGFzdFBsdWdpbiA9IHBsdWdpbjtcblxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gcGx1Z2luKHRoaXMucmVzdWx0LnJvb3QsIHRoaXMucmVzdWx0KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5oYW5kbGVFcnJvcihlcnJvciwgcGx1Z2luKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uc3RyaW5naWZ5ID0gZnVuY3Rpb24gc3RyaW5naWZ5KCkge1xuICAgIGlmICh0aGlzLnN0cmluZ2lmaWVkKSByZXR1cm4gdGhpcy5yZXN1bHQ7XG4gICAgdGhpcy5zdHJpbmdpZmllZCA9IHRydWU7XG4gICAgdGhpcy5zeW5jKCk7XG4gICAgdmFyIG9wdHMgPSB0aGlzLnJlc3VsdC5vcHRzO1xuICAgIHZhciBzdHIgPSBfc3RyaW5naWZ5Mi5kZWZhdWx0O1xuICAgIGlmIChvcHRzLnN5bnRheCkgc3RyID0gb3B0cy5zeW50YXguc3RyaW5naWZ5O1xuICAgIGlmIChvcHRzLnN0cmluZ2lmaWVyKSBzdHIgPSBvcHRzLnN0cmluZ2lmaWVyO1xuICAgIGlmIChzdHIuc3RyaW5naWZ5KSBzdHIgPSBzdHIuc3RyaW5naWZ5O1xuICAgIHZhciBtYXAgPSBuZXcgX21hcEdlbmVyYXRvci5kZWZhdWx0KHN0ciwgdGhpcy5yZXN1bHQucm9vdCwgdGhpcy5yZXN1bHQub3B0cyk7XG4gICAgdmFyIGRhdGEgPSBtYXAuZ2VuZXJhdGUoKTtcbiAgICB0aGlzLnJlc3VsdC5jc3MgPSBkYXRhWzBdO1xuICAgIHRoaXMucmVzdWx0Lm1hcCA9IGRhdGFbMV07XG4gICAgcmV0dXJuIHRoaXMucmVzdWx0O1xuICB9O1xuXG4gIF9jcmVhdGVDbGFzcyhMYXp5UmVzdWx0LCBbe1xuICAgIGtleTogXCJwcm9jZXNzb3JcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlc3VsdC5wcm9jZXNzb3I7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9wdGlvbnMgZnJvbSB0aGUge0BsaW5rIFByb2Nlc3NvciNwcm9jZXNzfSBjYWxsLlxuICAgICAqXG4gICAgICogQHR5cGUge3Byb2Nlc3NPcHRpb25zfVxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwib3B0c1wiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMucmVzdWx0Lm9wdHM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFByb2Nlc3NlcyBpbnB1dCBDU1MgdGhyb3VnaCBzeW5jaHJvbm91cyBwbHVnaW5zLCBjb252ZXJ0cyBgUm9vdGBcbiAgICAgKiB0byBhIENTUyBzdHJpbmcgYW5kIHJldHVybnMge0BsaW5rIFJlc3VsdCNjc3N9LlxuICAgICAqXG4gICAgICogVGhpcyBwcm9wZXJ0eSB3aWxsIG9ubHkgd29yayB3aXRoIHN5bmNocm9ub3VzIHBsdWdpbnMuXG4gICAgICogSWYgdGhlIHByb2Nlc3NvciBjb250YWlucyBhbnkgYXN5bmNocm9ub3VzIHBsdWdpbnNcbiAgICAgKiBpdCB3aWxsIHRocm93IGFuIGVycm9yLiBUaGlzIGlzIHdoeSB0aGlzIG1ldGhvZCBpcyBvbmx5XG4gICAgICogZm9yIGRlYnVnIHB1cnBvc2UsIHlvdSBzaG91bGQgYWx3YXlzIHVzZSB7QGxpbmsgTGF6eVJlc3VsdCN0aGVufS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHNlZSBSZXN1bHQjY3NzXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJjc3NcIixcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHJldHVybiB0aGlzLnN0cmluZ2lmeSgpLmNzcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQW4gYWxpYXMgZm9yIHRoZSBgY3NzYCBwcm9wZXJ0eS4gVXNlIGl0IHdpdGggc3ludGF4ZXNcbiAgICAgKiB0aGF0IGdlbmVyYXRlIG5vbi1DU1Mgb3V0cHV0LlxuICAgICAqXG4gICAgICogVGhpcyBwcm9wZXJ0eSB3aWxsIG9ubHkgd29yayB3aXRoIHN5bmNocm9ub3VzIHBsdWdpbnMuXG4gICAgICogSWYgdGhlIHByb2Nlc3NvciBjb250YWlucyBhbnkgYXN5bmNocm9ub3VzIHBsdWdpbnNcbiAgICAgKiBpdCB3aWxsIHRocm93IGFuIGVycm9yLiBUaGlzIGlzIHdoeSB0aGlzIG1ldGhvZCBpcyBvbmx5XG4gICAgICogZm9yIGRlYnVnIHB1cnBvc2UsIHlvdSBzaG91bGQgYWx3YXlzIHVzZSB7QGxpbmsgTGF6eVJlc3VsdCN0aGVufS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICogQHNlZSBSZXN1bHQjY29udGVudFxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6IFwiY29udGVudFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyaW5naWZ5KCkuY29udGVudDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvY2Vzc2VzIGlucHV0IENTUyB0aHJvdWdoIHN5bmNocm9ub3VzIHBsdWdpbnNcbiAgICAgKiBhbmQgcmV0dXJucyB7QGxpbmsgUmVzdWx0I21hcH0uXG4gICAgICpcbiAgICAgKiBUaGlzIHByb3BlcnR5IHdpbGwgb25seSB3b3JrIHdpdGggc3luY2hyb25vdXMgcGx1Z2lucy5cbiAgICAgKiBJZiB0aGUgcHJvY2Vzc29yIGNvbnRhaW5zIGFueSBhc3luY2hyb25vdXMgcGx1Z2luc1xuICAgICAqIGl0IHdpbGwgdGhyb3cgYW4gZXJyb3IuIFRoaXMgaXMgd2h5IHRoaXMgbWV0aG9kIGlzIG9ubHlcbiAgICAgKiBmb3IgZGVidWcgcHVycG9zZSwgeW91IHNob3VsZCBhbHdheXMgdXNlIHtAbGluayBMYXp5UmVzdWx0I3RoZW59LlxuICAgICAqXG4gICAgICogQHR5cGUge1NvdXJjZU1hcEdlbmVyYXRvcn1cbiAgICAgKiBAc2VlIFJlc3VsdCNtYXBcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm1hcFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuc3RyaW5naWZ5KCkubWFwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzZXMgaW5wdXQgQ1NTIHRocm91Z2ggc3luY2hyb25vdXMgcGx1Z2luc1xuICAgICAqIGFuZCByZXR1cm5zIHtAbGluayBSZXN1bHQjcm9vdH0uXG4gICAgICpcbiAgICAgKiBUaGlzIHByb3BlcnR5IHdpbGwgb25seSB3b3JrIHdpdGggc3luY2hyb25vdXMgcGx1Z2lucy4gSWYgdGhlIHByb2Nlc3NvclxuICAgICAqIGNvbnRhaW5zIGFueSBhc3luY2hyb25vdXMgcGx1Z2lucyBpdCB3aWxsIHRocm93IGFuIGVycm9yLlxuICAgICAqXG4gICAgICogVGhpcyBpcyB3aHkgdGhpcyBtZXRob2QgaXMgb25seSBmb3IgZGVidWcgcHVycG9zZSxcbiAgICAgKiB5b3Ugc2hvdWxkIGFsd2F5cyB1c2Uge0BsaW5rIExhenlSZXN1bHQjdGhlbn0uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Um9vdH1cbiAgICAgKiBAc2VlIFJlc3VsdCNyb290XG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJyb290XCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zeW5jKCkucm9vdDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvY2Vzc2VzIGlucHV0IENTUyB0aHJvdWdoIHN5bmNocm9ub3VzIHBsdWdpbnNcbiAgICAgKiBhbmQgcmV0dXJucyB7QGxpbmsgUmVzdWx0I21lc3NhZ2VzfS5cbiAgICAgKlxuICAgICAqIFRoaXMgcHJvcGVydHkgd2lsbCBvbmx5IHdvcmsgd2l0aCBzeW5jaHJvbm91cyBwbHVnaW5zLiBJZiB0aGUgcHJvY2Vzc29yXG4gICAgICogY29udGFpbnMgYW55IGFzeW5jaHJvbm91cyBwbHVnaW5zIGl0IHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgICpcbiAgICAgKiBUaGlzIGlzIHdoeSB0aGlzIG1ldGhvZCBpcyBvbmx5IGZvciBkZWJ1ZyBwdXJwb3NlLFxuICAgICAqIHlvdSBzaG91bGQgYWx3YXlzIHVzZSB7QGxpbmsgTGF6eVJlc3VsdCN0aGVufS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtNZXNzYWdlW119XG4gICAgICogQHNlZSBSZXN1bHQjbWVzc2FnZXNcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcIm1lc3NhZ2VzXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5zeW5jKCkubWVzc2FnZXM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIExhenlSZXN1bHQ7XG59KCk7XG5cbnZhciBfZGVmYXVsdCA9IExhenlSZXN1bHQ7XG4vKipcbiAqIEBjYWxsYmFjayBvbkZ1bGZpbGxlZFxuICogQHBhcmFtIHtSZXN1bHR9IHJlc3VsdFxuICovXG5cbi8qKlxuICogQGNhbGxiYWNrIG9uUmVqZWN0ZWRcbiAqIEBwYXJhbSB7RXJyb3J9IGVycm9yXG4gKi9cblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW14aGVua3RjbVZ6ZFd4MExtVnpOaUpkTENKdVlXMWxjeUk2V3lKcGMxQnliMjFwYzJVaUxDSnZZbW9pTENKMGFHVnVJaXdpVEdGNmVWSmxjM1ZzZENJc0luQnliMk5sYzNOdmNpSXNJbU56Y3lJc0ltOXdkSE1pTENKemRISnBibWRwWm1sbFpDSXNJbkJ5YjJObGMzTmxaQ0lzSW5KdmIzUWlMQ0owZVhCbElpd2lVbVZ6ZFd4MElpd2liV0Z3SWl3aWFXNXNhVzVsSWl3aWNISmxkaUlzSW5CaGNuTmxjaUlzSW5CaGNuTmxJaXdpYzNsdWRHRjRJaXdpWlhKeWIzSWlMQ0p5WlhOMWJIUWlMQ0ozWVhKdWFXNW5jeUlzSW5ONWJtTWlMQ0owYjFOMGNtbHVaeUlzSW05dVJuVnNabWxzYkdWa0lpd2liMjVTWldwbFkzUmxaQ0lzSW5CeWIyTmxjM01pTENKbGJuWWlMQ0pPVDBSRlgwVk9WaUlzSW1GemVXNWpJaXdpWTJGMFkyZ2lMQ0ptYVc1aGJHeDVJaXdpYjI1R2FXNWhiR3g1SWl3aWFHRnVaR3hsUlhKeWIzSWlMQ0p3YkhWbmFXNGlMQ0p1WVcxbElpd2ljRzl6ZEdOemMxQnNkV2RwYmlJc0luTmxkRTFsYzNOaFoyVWlMQ0p3YjNOMFkzTnpWbVZ5YzJsdmJpSXNJbkJzZFdkcGJrNWhiV1VpTENKd2JIVm5hVzVXWlhJaUxDSnlkVzUwYVcxbFZtVnlJaXdpZG1WeWMybHZiaUlzSW1FaUxDSnpjR3hwZENJc0ltSWlMQ0p3WVhKelpVbHVkQ0lzSW1OdmJuTnZiR1VpTENKbGNuSWlMQ0poYzNsdVkxUnBZMnNpTENKeVpYTnZiSFpsSWl3aWNtVnFaV04wSWl3aWNHeDFaMmx1Y3lJc0lteGxibWQwYUNJc0luQnliMjFwYzJVaUxDSnlkVzRpTENKUWNtOXRhWE5sSWl3aWMzUnlhVzVuYVdaNUlpd2ljSEp2WTJWemMybHVaeUlzSWtWeWNtOXlJaXdpYkdGemRGQnNkV2RwYmlJc0luTjBjaUlzSW5OMGNtbHVaMmxtYVdWeUlpd2lUV0Z3UjJWdVpYSmhkRzl5SWl3aVpHRjBZU0lzSW1kbGJtVnlZWFJsSWl3aVkyOXVkR1Z1ZENJc0ltMWxjM05oWjJWeklsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096dEJRVUZCT3p0QlFVTkJPenRCUVVOQk96dEJRVU5CT3p0QlFVTkJPenM3T3pzN096dEJRVVZCTEZOQlFWTkJMRk5CUVZRc1EwRkJiMEpETEVkQlFYQkNMRVZCUVhsQ08wRkJRM1pDTEZOQlFVOHNUMEZCVDBFc1IwRkJVQ3hMUVVGbExGRkJRV1lzU1VGQk1rSXNUMEZCVDBFc1IwRkJSeXhEUVVGRFF5eEpRVUZZTEV0QlFXOUNMRlZCUVhSRU8wRkJRMFE3UVVGRlJEczdPenM3T3pzN096dEpRVkZOUXl4Vk96czdRVUZEU2l4elFrRkJZVU1zVTBGQllpeEZRVUYzUWtNc1IwRkJlRUlzUlVGQk5rSkRMRWxCUVRkQ0xFVkJRVzFETzBGQlEycERMRk5CUVV0RExGZEJRVXdzUjBGQmJVSXNTMEZCYmtJN1FVRkRRU3hUUVVGTFF5eFRRVUZNTEVkQlFXbENMRXRCUVdwQ08wRkJSVUVzVVVGQlNVTXNTVUZCU2pzN1FVRkRRU3hSUVVGSkxFOUJRVTlLTEVkQlFWQXNTMEZCWlN4UlFVRm1MRWxCUVRKQ1FTeEhRVUZITEV0QlFVc3NTVUZCYmtNc1NVRkJNa05CTEVkQlFVY3NRMEZCUTBzc1NVRkJTaXhMUVVGaExFMUJRVFZFTEVWQlFXOUZPMEZCUTJ4RlJDeE5RVUZCUVN4SlFVRkpMRWRCUVVkS0xFZEJRVkE3UVVGRFJDeExRVVpFTEUxQlJVOHNTVUZCU1VFc1IwRkJSeXhaUVVGWlJpeFZRVUZtTEVsQlFUWkNSU3hIUVVGSExGbEJRVmxOTEdWQlFXaEVMRVZCUVhkRU8wRkJRemRFUml4TlFVRkJRU3hKUVVGSkxFZEJRVWRLTEVkQlFVY3NRMEZCUTBrc1NVRkJXRHM3UVVGRFFTeFZRVUZKU2l4SFFVRkhMRU5CUVVOUExFZEJRVklzUlVGQllUdEJRVU5ZTEZsQlFVa3NUMEZCVDA0c1NVRkJTU3hEUVVGRFRTeEhRVUZhTEV0QlFXOUNMRmRCUVhoQ0xFVkJRWEZEVGl4SlFVRkpMRU5CUVVOTkxFZEJRVXdzUjBGQlZ5eEZRVUZZTzBGQlEzSkRMRmxCUVVrc1EwRkJRMDRzU1VGQlNTeERRVUZEVFN4SFFVRk1MRU5CUVZORExFMUJRV1FzUlVGQmMwSlFMRWxCUVVrc1EwRkJRMDBzUjBGQlRDeERRVUZUUXl4TlFVRlVMRWRCUVd0Q0xFdEJRV3hDTzBGQlEzUkNVQ3hSUVVGQlFTeEpRVUZKTEVOQlFVTk5MRWRCUVV3c1EwRkJVMFVzU1VGQlZDeEhRVUZuUWxRc1IwRkJSeXhEUVVGRFR5eEhRVUZ3UWp0QlFVTkVPMEZCUTBZc1MwRlFUU3hOUVU5Qk8wRkJRMHdzVlVGQlNVY3NUVUZCVFN4SFFVRkhReXhqUVVGaU8wRkJRMEVzVlVGQlNWWXNTVUZCU1N4RFFVRkRWeXhOUVVGVUxFVkJRV2xDUml4TlFVRk5MRWRCUVVkVUxFbEJRVWtzUTBGQlExY3NUVUZCVEN4RFFVRlpSQ3hMUVVGeVFqdEJRVU5xUWl4VlFVRkpWaXhKUVVGSkxFTkJRVU5UTEUxQlFWUXNSVUZCYVVKQkxFMUJRVTBzUjBGQlIxUXNTVUZCU1N4RFFVRkRVeXhOUVVGa08wRkJRMnBDTEZWQlFVbEJMRTFCUVUwc1EwRkJRME1zUzBGQldDeEZRVUZyUWtRc1RVRkJUU3hIUVVGSFFTeE5RVUZOTEVOQlFVTkRMRXRCUVdoQ096dEJRVVZzUWl4VlFVRkpPMEZCUTBaUUxGRkJRVUZCTEVsQlFVa3NSMEZCUjAwc1RVRkJUU3hEUVVGRFZpeEhRVUZFTEVWQlFVMURMRWxCUVU0c1EwRkJZanRCUVVORUxFOUJSa1FzUTBGRlJTeFBRVUZQV1N4TFFVRlFMRVZCUVdNN1FVRkRaQ3hoUVVGTFFTeExRVUZNTEVkQlFXRkJMRXRCUVdJN1FVRkRSRHRCUVVOR096dEJRVVZFTEZOQlFVdERMRTFCUVV3c1IwRkJZeXhKUVVGSlVpeGxRVUZLTEVOQlFWZFFMRk5CUVZnc1JVRkJjMEpMTEVsQlFYUkNMRVZCUVRSQ1NDeEpRVUUxUWl4RFFVRmtPMEZCUTBRN1FVRkZSRHM3T3pzN096czdPenRCUVhGSFFUczdPenM3TzFOQlRVRmpMRkVzUjBGQlFTeHZRa0ZCV1R0QlFVTldMRmRCUVU4c1MwRkJTME1zU1VGQlRDeEhRVUZaUkN4UlFVRmFMRVZCUVZBN1FVRkRSRHRCUVVWRU96czdPenM3T3pzN08xTkJVVUZGTEZFc1IwRkJRU3h2UWtGQldUdEJRVU5XTEZkQlFVOHNTMEZCUzJwQ0xFZEJRVm83UVVGRFJEdEJRVVZFT3pzN096czdPenM3T3pzN096czdPenM3T3p0VFFXdENRVWdzU1N4SFFVRkJMR05CUVUxeFFpeFhRVUZPTEVWQlFXMUNReXhWUVVGdVFpeEZRVUVyUWp0QlFVTTNRaXhSUVVGSlF5eFBRVUZQTEVOQlFVTkRMRWRCUVZJc1EwRkJXVU1zVVVGQldpeExRVUY1UWl4WlFVRTNRaXhGUVVFeVF6dEJRVU42UXl4VlFVRkpMRVZCUVVVc1ZVRkJWU3hMUVVGTGNrSXNTVUZCYWtJc1EwRkJTaXhGUVVFMFFqdEJRVU14UWl3clFrRkRSU3h0UlVGRFFTeHBSVUZFUVN4SFFVVkJMRFJEUVVoR08wRkJTMFE3UVVGRFJqczdRVUZEUkN4WFFVRlBMRXRCUVV0elFpeExRVUZNTEVkQlFXRXhRaXhKUVVGaUxFTkJRV3RDY1VJc1YwRkJiRUlzUlVGQkswSkRMRlZCUVM5Q0xFTkJRVkE3UVVGRFJEdEJRVVZFT3pzN096czdPenM3T3pzN096czdPenM3TzFOQmFVSkJTeXhMTEVkQlFVRXNaMEpCUVU5TUxGVkJRVkFzUlVGQmJVSTdRVUZEYWtJc1YwRkJUeXhMUVVGTFNTeExRVUZNTEVkQlFXRkRMRXRCUVdJc1EwRkJiVUpNTEZWQlFXNUNMRU5CUVZBN1FVRkRSRHRCUVVORU96czdPenM3T3pzN096czdPenM3T3pzN1UwRm5Ra0ZOTEU4c1IwRkJRU3hyUWtGQlUwTXNVMEZCVkN4RlFVRnZRanRCUVVOc1FpeFhRVUZQTEV0QlFVdElMRXRCUVV3c1IwRkJZVEZDTEVsQlFXSXNRMEZCYTBJMlFpeFRRVUZzUWl4RlFVRTJRa0VzVTBGQk4wSXNRMEZCVUR0QlFVTkVMRWM3TzFOQlJVUkRMRmNzUjBGQlFTeHhRa0ZCWVdRc1MwRkJZaXhGUVVGdlFtVXNUVUZCY0VJc1JVRkJORUk3UVVGRE1VSXNVVUZCU1R0QlFVTkdMRmRCUVV0bUxFdEJRVXdzUjBGQllVRXNTMEZCWWpzN1FVRkRRU3hWUVVGSlFTeExRVUZMTEVOQlFVTm5RaXhKUVVGT0xFdEJRV1VzWjBKQlFXWXNTVUZCYlVNc1EwRkJRMmhDTEV0QlFVc3NRMEZCUTJVc1RVRkJPVU1zUlVGQmMwUTdRVUZEY0VSbUxGRkJRVUZCTEV0QlFVc3NRMEZCUTJVc1RVRkJUaXhIUVVGbFFTeE5RVUZOTEVOQlFVTkZMR0ZCUVhSQ08wRkJRMEZxUWl4UlFVRkJRU3hMUVVGTExFTkJRVU5yUWl4VlFVRk9PMEZCUTBRc1QwRklSQ3hOUVVkUExFbEJRVWxJTEUxQlFVMHNRMEZCUTBrc1kwRkJXQ3hGUVVFeVFqdEJRVU5vUXl4WlFVRkpXaXhQUVVGUExFTkJRVU5ETEVkQlFWSXNRMEZCV1VNc1VVRkJXaXhMUVVGNVFpeFpRVUUzUWl4RlFVRXlRenRCUVVONlF5eGpRVUZKVnl4VlFVRlZMRWRCUVVkTUxFMUJRVTBzUTBGQlEwVXNZVUZCZUVJN1FVRkRRU3hqUVVGSlNTeFRRVUZUTEVkQlFVZE9MRTFCUVUwc1EwRkJRMGtzWTBGQmRrSTdRVUZEUVN4alFVRkpSeXhWUVVGVkxFZEJRVWNzUzBGQlMzSkNMRTFCUVV3c1EwRkJXV1lzVTBGQldpeERRVUZ6UW5GRExFOUJRWFpETzBGQlEwRXNZMEZCU1VNc1EwRkJReXhIUVVGSFNDeFRRVUZUTEVOQlFVTkpMRXRCUVZZc1EwRkJaMElzUjBGQmFFSXNRMEZCVWp0QlFVTkJMR05CUVVsRExFTkJRVU1zUjBGQlIwb3NWVUZCVlN4RFFVRkRSeXhMUVVGWUxFTkJRV2xDTEVkQlFXcENMRU5CUVZJN08wRkJSVUVzWTBGQlNVUXNRMEZCUXl4RFFVRkRMRU5CUVVRc1EwRkJSQ3hMUVVGVFJTeERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRldMRWxCUVdsQ1F5eFJRVUZSTEVOQlFVTklMRU5CUVVNc1EwRkJReXhEUVVGRUxFTkJRVVlzUTBGQlVpeEhRVUZwUWtjc1VVRkJVU3hEUVVGRFJDeERRVUZETEVOQlFVTXNRMEZCUkN4RFFVRkdMRU5CUVRsRExFVkJRWE5FTzBGQlEzQkVSU3haUVVGQlFTeFBRVUZQTEVOQlFVTTFRaXhMUVVGU0xFTkJRMFVzTmtSQlEwRXNZVUZFUVN4SFFVTm5Rbk5DTEZWQlJHaENMRWRCUXpaQ0xGRkJSRGRDTEVkQlEzZERSaXhWUVVSNFF5eEhRVU54UkN4UlFVUnlSQ3hIUVVWQlF5eFRRVVpCTEVkQlJWa3NhMFJCU0dRN1FVRkxSRHRCUVVOR08wRkJRMFk3UVVGRFJpeExRWFJDUkN4RFFYTkNSU3hQUVVGUFVTeEhRVUZRTEVWQlFWazdRVUZEV2l4VlFVRkpSQ3hQUVVGUExFbEJRVWxCTEU5QlFVOHNRMEZCUXpWQ0xFdEJRWFpDTEVWQlFUaENORUlzVDBGQlR5eERRVUZETlVJc1MwRkJVaXhEUVVGak5rSXNSMEZCWkR0QlFVTXZRanRCUVVOR0xFYzdPMU5CUlVSRExGTXNSMEZCUVN4dFFrRkJWME1zVDBGQldDeEZRVUZ2UWtNc1RVRkJjRUlzUlVGQk5FSTdRVUZCUVRzN1FVRkRNVUlzVVVGQlNTeExRVUZMYWtJc1RVRkJUQ3hKUVVGbExFdEJRVXMzUWl4VFFVRk1MRU5CUVdVclF5eFBRVUZtTEVOQlFYVkNReXhOUVVFeFF5eEZRVUZyUkR0QlFVTm9SQ3hYUVVGTE5VTXNVMEZCVEN4SFFVRnBRaXhKUVVGcVFqdEJRVU5CTEdGQlFVOTVReXhQUVVGUExFVkJRV1E3UVVGRFJEczdRVUZGUkN4UlFVRkpPMEZCUTBZc1ZVRkJTV2hDTEUxQlFVMHNSMEZCUnl4TFFVRkxOMElzVTBGQlRDeERRVUZsSzBNc1QwRkJaaXhEUVVGMVFpeExRVUZMYkVJc1RVRkJOVUlzUTBGQllqdEJRVU5CTEZWQlFVbHZRaXhQUVVGUExFZEJRVWNzUzBGQlMwTXNSMEZCVEN4RFFVRlRja0lzVFVGQlZDeERRVUZrTzBGQlEwRXNWMEZCUzBFc1RVRkJUQ3hKUVVGbExFTkJRV1k3TzBGQlJVRXNWVUZCU1dwRExGTkJRVk1zUTBGQlEzRkVMRTlCUVVRc1EwRkJZaXhGUVVGM1FqdEJRVU4wUWtFc1VVRkJRVUVzVDBGQlR5eERRVUZEYmtRc1NVRkJVaXhEUVVGaExGbEJRVTA3UVVGRGFrSXNWVUZCUVN4TFFVRkpMRU5CUVVNNFF5eFRRVUZNTEVOQlFXVkRMRTlCUVdZc1JVRkJkMEpETEUxQlFYaENPMEZCUTBRc1UwRkdSQ3hGUVVWSGNrSXNTMEZHU0N4RFFVVlRMRlZCUVVGWUxFdEJRVXNzUlVGQlNUdEJRVU5vUWl4VlFVRkJMRXRCUVVrc1EwRkJRMk1zVjBGQlRDeERRVUZwUW1Rc1MwRkJha0lzUlVGQmQwSmxMRTFCUVhoQ096dEJRVU5CTEZWQlFVRXNTMEZCU1N4RFFVRkRla0lzVTBGQlRDeEhRVUZwUWl4SlFVRnFRanRCUVVOQk1FTXNWVUZCUVVFc1RVRkJUU3hEUVVGRGFFTXNTMEZCUkN4RFFVRk9PMEZCUTBRc1UwRk9SRHRCUVU5RUxFOUJVa1FzVFVGUlR6dEJRVU5NTEdGQlFVczRRaXhUUVVGTUxFTkJRV1ZETEU5QlFXWXNSVUZCZDBKRExFMUJRWGhDTzBGQlEwUTdRVUZEUml4TFFXaENSQ3hEUVdkQ1JTeFBRVUZQYUVNc1MwRkJVQ3hGUVVGak8wRkJRMlFzVjBGQlMxWXNVMEZCVEN4SFFVRnBRaXhKUVVGcVFqdEJRVU5CTUVNc1RVRkJRVUVzVFVGQlRTeERRVUZEYUVNc1MwRkJSQ3hEUVVGT08wRkJRMFE3UVVGRFJpeEhPenRUUVVWRVZTeExMRWRCUVVFc2FVSkJRVk03UVVGQlFUczdRVUZEVUN4UlFVRkpMRXRCUVV0d1FpeFRRVUZVTEVWQlFXOUNPMEZCUTJ4Q0xHRkJRVThzU1VGQlNTdERMRTlCUVVvc1EwRkJXU3hWUVVGRFRpeFBRVUZFTEVWQlFWVkRMRTFCUVZZc1JVRkJjVUk3UVVGRGRFTXNXVUZCU1N4TlFVRkpMRU5CUVVOb1F5eExRVUZVTEVWQlFXZENPMEZCUTJSblF5eFZRVUZCUVN4TlFVRk5MRU5CUVVNc1RVRkJTU3hEUVVGRGFFTXNTMEZCVGl4RFFVRk9PMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHdyUWl4VlFVRkJRU3hQUVVGUExFTkJRVU1zVFVGQlNTeERRVUZEVHl4VFFVRk1MRVZCUVVRc1EwRkJVRHRCUVVORU8wRkJRMFlzVDBGT1RTeERRVUZRTzBGQlQwUTdPMEZCUTBRc1VVRkJTU3hMUVVGTFF5eFZRVUZVTEVWQlFYRkNPMEZCUTI1Q0xHRkJRVThzUzBGQlMwRXNWVUZCV2p0QlFVTkVPenRCUVVWRUxGTkJRVXRCTEZWQlFVd3NSMEZCYTBJc1NVRkJTVVlzVDBGQlNpeERRVUZaTEZWQlFVTk9MRTlCUVVRc1JVRkJWVU1zVFVGQlZpeEZRVUZ4UWp0QlFVTnFSQ3hWUVVGSkxFMUJRVWtzUTBGQlEyaERMRXRCUVZRc1JVRkJaMElzVDBGQlQyZERMRTFCUVUwc1EwRkJReXhOUVVGSkxFTkJRVU5vUXl4TFFVRk9MRU5CUVdJN1FVRkRhRUlzVFVGQlFTeE5RVUZKTEVOQlFVTmxMRTFCUVV3c1IwRkJZeXhEUVVGa096dEJRVU5CTEUxQlFVRXNUVUZCU1N4RFFVRkRaU3hUUVVGTUxFTkJRV1ZETEU5QlFXWXNSVUZCZDBKRExFMUJRWGhDTzBGQlEwUXNTMEZLYVVJc1JVRkpabWhFTEVsQlNtVXNRMEZKVml4WlFVRk5PMEZCUTFvc1RVRkJRU3hOUVVGSkxFTkJRVU5OTEZOQlFVd3NSMEZCYVVJc1NVRkJha0k3UVVGRFFTeGhRVUZQTEUxQlFVa3NRMEZCUTJkRUxGTkJRVXdzUlVGQlVEdEJRVU5FTEV0QlVHbENMRU5CUVd4Q08wRkJVMEVzVjBGQlR5eExRVUZMUXl4VlFVRmFPMEZCUTBRc1J6czdVMEZGUkhCRExFa3NSMEZCUVN4blFrRkJVVHRCUVVOT0xGRkJRVWtzUzBGQlMySXNVMEZCVkN4RlFVRnZRaXhQUVVGUExFdEJRVXRYTEUxQlFWbzdRVUZEY0VJc1UwRkJTMWdzVTBGQlRDeEhRVUZwUWl4SlFVRnFRanM3UVVGRlFTeFJRVUZKTEV0QlFVdHBSQ3hWUVVGVUxFVkJRWEZDTzBGQlEyNUNMRmxCUVUwc1NVRkJTVU1zUzBGQlNpeERRVU5LTEhORVFVUkpMRU5CUVU0N1FVRkZSRHM3UVVGRlJDeFJRVUZKTEV0QlFVdDRReXhMUVVGVUxFVkJRV2RDTEUxQlFVMHNTMEZCUzBFc1MwRkJXRHM3UVVGRmFFSXNlVUpCUVcxQ0xFdEJRVXRETEUxQlFVd3NRMEZCV1dZc1UwRkJXaXhEUVVGelFpdERMRTlCUVhwRExHdElRVUZyUkR0QlFVRkJPenRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPMEZCUVVFN08wRkJRVUVzVlVGQmVrTnNRaXhOUVVGNVF6dEJRVU5vUkN4VlFVRkpiMElzVDBGQlR5eEhRVUZITEV0QlFVdERMRWRCUVV3c1EwRkJVM0pDTEUxQlFWUXNRMEZCWkRzN1FVRkRRU3hWUVVGSmFrTXNVMEZCVXl4RFFVRkRjVVFzVDBGQlJDeERRVUZpTEVWQlFYZENPMEZCUTNSQ0xHTkJRVTBzU1VGQlNVc3NTMEZCU2l4RFFVTktMSE5FUVVSSkxFTkJRVTQ3UVVGRlJEdEJRVU5HT3p0QlFVVkVMRmRCUVU4c1MwRkJTM1pETEUxQlFWbzdRVUZEUkN4SE96dFRRVVZFYlVNc1J5eEhRVUZCTEdGQlFVdHlRaXhOUVVGTUxFVkJRV0U3UVVGRFdDeFRRVUZMWkN4TlFVRk1MRU5CUVZsM1F5eFZRVUZhTEVkQlFYbENNVUlzVFVGQmVrSTdPMEZCUlVFc1VVRkJTVHRCUVVOR0xHRkJRVTlCTEUxQlFVMHNRMEZCUXl4TFFVRkxaQ3hOUVVGTUxFTkJRVmxXTEVsQlFXSXNSVUZCYlVJc1MwRkJTMVVzVFVGQmVFSXNRMEZCWWp0QlFVTkVMRXRCUmtRc1EwRkZSU3hQUVVGUFJDeExRVUZRTEVWQlFXTTdRVUZEWkN4WFFVRkxZeXhYUVVGTUxFTkJRV2xDWkN4TFFVRnFRaXhGUVVGM1FtVXNUVUZCZUVJN1FVRkRRU3haUVVGTlppeExRVUZPTzBGQlEwUTdRVUZEUml4SE96dFRRVVZFYzBNc1V5eEhRVUZCTEhGQ1FVRmhPMEZCUTFnc1VVRkJTU3hMUVVGTGFrUXNWMEZCVkN4RlFVRnpRaXhQUVVGUExFdEJRVXRaTEUxQlFWbzdRVUZEZEVJc1UwRkJTMW9zVjBGQlRDeEhRVUZ0UWl4SlFVRnVRanRCUVVWQkxGTkJRVXRqTEVsQlFVdzdRVUZGUVN4UlFVRkpaaXhKUVVGSkxFZEJRVWNzUzBGQlMyRXNUVUZCVEN4RFFVRlpZaXhKUVVGMlFqdEJRVU5CTEZGQlFVbHpSQ3hIUVVGSExFZEJRVWRLTEcxQ1FVRldPMEZCUTBFc1VVRkJTV3hFTEVsQlFVa3NRMEZCUTFjc1RVRkJWQ3hGUVVGcFFqSkRMRWRCUVVjc1IwRkJSM1JFTEVsQlFVa3NRMEZCUTFjc1RVRkJUQ3hEUVVGWmRVTXNVMEZCYkVJN1FVRkRha0lzVVVGQlNXeEVMRWxCUVVrc1EwRkJRM1ZFTEZkQlFWUXNSVUZCYzBKRUxFZEJRVWNzUjBGQlIzUkVMRWxCUVVrc1EwRkJRM1ZFTEZkQlFWZzdRVUZEZEVJc1VVRkJTVVFzUjBGQlJ5eERRVUZEU2l4VFFVRlNMRVZCUVcxQ1NTeEhRVUZITEVkQlFVZEJMRWRCUVVjc1EwRkJRMG9zVTBGQlZqdEJRVVZ1UWl4UlFVRkpOVU1zUjBGQlJ5eEhRVUZITEVsQlFVbHJSQ3h4UWtGQlNpeERRVUZwUWtZc1IwRkJha0lzUlVGQmMwSXNTMEZCUzNwRExFMUJRVXdzUTBGQldWWXNTVUZCYkVNc1JVRkJkME1zUzBGQlMxVXNUVUZCVEN4RFFVRlpZaXhKUVVGd1JDeERRVUZXTzBGQlEwRXNVVUZCU1hsRUxFbEJRVWtzUjBGQlIyNUVMRWRCUVVjc1EwRkJRMjlFTEZGQlFVb3NSVUZCV0R0QlFVTkJMRk5CUVVzM1F5eE5RVUZNTEVOQlFWbGtMRWRCUVZvc1IwRkJhMEl3UkN4SlFVRkpMRU5CUVVNc1EwRkJSQ3hEUVVGMFFqdEJRVU5CTEZOQlFVczFReXhOUVVGTUxFTkJRVmxRTEVkQlFWb3NSMEZCYTBKdFJDeEpRVUZKTEVOQlFVTXNRMEZCUkN4RFFVRjBRanRCUVVWQkxGZEJRVThzUzBGQlN6VkRMRTFCUVZvN1FVRkRSQ3hIT3pzN08zZENRV3BWWjBJN1FVRkRaaXhoUVVGUExFdEJRVXRCTEUxQlFVd3NRMEZCV1dZc1UwRkJia0k3UVVGRFJEdEJRVVZFT3pzN096czdPenQzUWtGTFdUdEJRVU5XTEdGQlFVOHNTMEZCUzJVc1RVRkJUQ3hEUVVGWllpeEpRVUZ1UWp0QlFVTkVPMEZCUlVRN096czdPenM3T3pzN096czdPenQzUWtGWlZ6dEJRVU5VTEdGQlFVOHNTMEZCUzJ0RUxGTkJRVXdzUjBGQmFVSnVSQ3hIUVVGNFFqdEJRVU5FTzBGQlJVUTdPenM3T3pzN096czdPenM3T3p0M1FrRlpaVHRCUVVOaUxHRkJRVThzUzBGQlMyMUVMRk5CUVV3c1IwRkJhVUpUTEU5QlFYaENPMEZCUTBRN1FVRkZSRHM3T3pzN096czdPenM3T3pzN08zZENRVmxYTzBGQlExUXNZVUZCVHl4TFFVRkxWQ3hUUVVGTUxFZEJRV2xDTlVNc1IwRkJlRUk3UVVGRFJEdEJRVVZFT3pzN096czdPenM3T3pzN096czdPM2RDUVdGWk8wRkJRMVlzWVVGQlR5eExRVUZMVXl4SlFVRk1MRWRCUVZsYUxFbEJRVzVDTzBGQlEwUTdRVUZGUkRzN096czdPenM3T3pzN096czdPenQzUWtGaFowSTdRVUZEWkN4aFFVRlBMRXRCUVV0WkxFbEJRVXdzUjBGQldUWkRMRkZCUVc1Q08wRkJRMFE3T3pzN096dGxRWFZQV1M5RUxGVTdRVUZGWmpzN096czdRVUZMUVNJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCTllYQkhaVzVsY21GMGIzSWdabkp2YlNBbkxpOXRZWEF0WjJWdVpYSmhkRzl5SjF4dWFXMXdiM0owSUhOMGNtbHVaMmxtZVNCbWNtOXRJQ2N1TDNOMGNtbHVaMmxtZVNkY2JtbHRjRzl5ZENCM1lYSnVUMjVqWlNCbWNtOXRJQ2N1TDNkaGNtNHRiMjVqWlNkY2JtbHRjRzl5ZENCU1pYTjFiSFFnWm5KdmJTQW5MaTl5WlhOMWJIUW5YRzVwYlhCdmNuUWdjR0Z5YzJVZ1puSnZiU0FuTGk5d1lYSnpaU2RjYmx4dVpuVnVZM1JwYjI0Z2FYTlFjbTl0YVhObElDaHZZbW9wSUh0Y2JpQWdjbVYwZFhKdUlIUjVjR1Z2WmlCdlltb2dQVDA5SUNkdlltcGxZM1FuSUNZbUlIUjVjR1Z2WmlCdlltb3VkR2hsYmlBOVBUMGdKMloxYm1OMGFXOXVKMXh1ZlZ4dVhHNHZLaXBjYmlBcUlFRWdVSEp2YldselpTQndjbTk0ZVNCbWIzSWdkR2hsSUhKbGMzVnNkQ0J2WmlCUWIzTjBRMU5USUhSeVlXNXpabTl5YldGMGFXOXVjeTVjYmlBcVhHNGdLaUJCSUdCTVlYcDVVbVZ6ZFd4MFlDQnBibk4wWVc1alpTQnBjeUJ5WlhSMWNtNWxaQ0JpZVNCN1FHeHBibXNnVUhKdlkyVnpjMjl5STNCeWIyTmxjM045TGx4dUlDcGNiaUFxSUVCbGVHRnRjR3hsWEc0Z0tpQmpiMjV6ZENCc1lYcDVJRDBnY0c5emRHTnpjeWhiWVhWMGIzQnlaV1pwZUdWeVhTa3VjSEp2WTJWemN5aGpjM01wWEc0Z0tpOWNibU5zWVhOeklFeGhlbmxTWlhOMWJIUWdlMXh1SUNCamIyNXpkSEoxWTNSdmNpQW9jSEp2WTJWemMyOXlMQ0JqYzNNc0lHOXdkSE1wSUh0Y2JpQWdJQ0IwYUdsekxuTjBjbWx1WjJsbWFXVmtJRDBnWm1Gc2MyVmNiaUFnSUNCMGFHbHpMbkJ5YjJObGMzTmxaQ0E5SUdaaGJITmxYRzVjYmlBZ0lDQnNaWFFnY205dmRGeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ1kzTnpJRDA5UFNBbmIySnFaV04wSnlBbUppQmpjM01nSVQwOUlHNTFiR3dnSmlZZ1kzTnpMblI1Y0dVZ1BUMDlJQ2R5YjI5MEp5a2dlMXh1SUNBZ0lDQWdjbTl2ZENBOUlHTnpjMXh1SUNBZ0lIMGdaV3h6WlNCcFppQW9ZM056SUdsdWMzUmhibU5sYjJZZ1RHRjZlVkpsYzNWc2RDQjhmQ0JqYzNNZ2FXNXpkR0Z1WTJWdlppQlNaWE4xYkhRcElIdGNiaUFnSUNBZ0lISnZiM1FnUFNCamMzTXVjbTl2ZEZ4dUlDQWdJQ0FnYVdZZ0tHTnpjeTV0WVhBcElIdGNiaUFnSUNBZ0lDQWdhV1lnS0hSNWNHVnZaaUJ2Y0hSekxtMWhjQ0E5UFQwZ0ozVnVaR1ZtYVc1bFpDY3BJRzl3ZEhNdWJXRndJRDBnZXlCOVhHNGdJQ0FnSUNBZ0lHbG1JQ2doYjNCMGN5NXRZWEF1YVc1c2FXNWxLU0J2Y0hSekxtMWhjQzVwYm14cGJtVWdQU0JtWVd4elpWeHVJQ0FnSUNBZ0lDQnZjSFJ6TG0xaGNDNXdjbVYySUQwZ1kzTnpMbTFoY0Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnNaWFFnY0dGeWMyVnlJRDBnY0dGeWMyVmNiaUFnSUNBZ0lHbG1JQ2h2Y0hSekxuTjViblJoZUNrZ2NHRnljMlZ5SUQwZ2IzQjBjeTV6ZVc1MFlYZ3VjR0Z5YzJWY2JpQWdJQ0FnSUdsbUlDaHZjSFJ6TG5CaGNuTmxjaWtnY0dGeWMyVnlJRDBnYjNCMGN5NXdZWEp6WlhKY2JpQWdJQ0FnSUdsbUlDaHdZWEp6WlhJdWNHRnljMlVwSUhCaGNuTmxjaUE5SUhCaGNuTmxjaTV3WVhKelpWeHVYRzRnSUNBZ0lDQjBjbmtnZTF4dUlDQWdJQ0FnSUNCeWIyOTBJRDBnY0dGeWMyVnlLR056Y3l3Z2IzQjBjeWxjYmlBZ0lDQWdJSDBnWTJGMFkyZ2dLR1Z5Y205eUtTQjdYRzRnSUNBZ0lDQWdJSFJvYVhNdVpYSnliM0lnUFNCbGNuSnZjbHh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lIUm9hWE11Y21WemRXeDBJRDBnYm1WM0lGSmxjM1ZzZENod2NtOWpaWE56YjNJc0lISnZiM1FzSUc5d2RITXBYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUJoSUh0QWJHbHVheUJRY205alpYTnpiM0o5SUdsdWMzUmhibU5sTENCM2FHbGphQ0IzYVd4c0lHSmxJSFZ6WldSY2JpQWdJQ29nWm05eUlFTlRVeUIwY21GdWMyWnZjbTFoZEdsdmJuTXVYRzRnSUNBcVhHNGdJQ0FxSUVCMGVYQmxJSHRRY205alpYTnpiM0o5WEc0Z0lDQXFMMXh1SUNCblpYUWdjSEp2WTJWemMyOXlJQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpYTjFiSFF1Y0hKdlkyVnpjMjl5WEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1QzQjBhVzl1Y3lCbWNtOXRJSFJvWlNCN1FHeHBibXNnVUhKdlkyVnpjMjl5STNCeWIyTmxjM045SUdOaGJHd3VYRzRnSUNBcVhHNGdJQ0FxSUVCMGVYQmxJSHR3Y205alpYTnpUM0IwYVc5dWMzMWNiaUFnSUNvdlhHNGdJR2RsZENCdmNIUnpJQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1eVpYTjFiSFF1YjNCMGMxeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkJ5YjJObGMzTmxjeUJwYm5CMWRDQkRVMU1nZEdoeWIzVm5hQ0J6ZVc1amFISnZibTkxY3lCd2JIVm5hVzV6TENCamIyNTJaWEowY3lCZ1VtOXZkR0JjYmlBZ0lDb2dkRzhnWVNCRFUxTWdjM1J5YVc1bklHRnVaQ0J5WlhSMWNtNXpJSHRBYkdsdWF5QlNaWE4xYkhRalkzTnpmUzVjYmlBZ0lDcGNiaUFnSUNvZ1ZHaHBjeUJ3Y205d1pYSjBlU0IzYVd4c0lHOXViSGtnZDI5eWF5QjNhWFJvSUhONWJtTm9jbTl1YjNWeklIQnNkV2RwYm5NdVhHNGdJQ0FxSUVsbUlIUm9aU0J3Y205alpYTnpiM0lnWTI5dWRHRnBibk1nWVc1NUlHRnplVzVqYUhKdmJtOTFjeUJ3YkhWbmFXNXpYRzRnSUNBcUlHbDBJSGRwYkd3Z2RHaHliM2NnWVc0Z1pYSnliM0l1SUZSb2FYTWdhWE1nZDJoNUlIUm9hWE1nYldWMGFHOWtJR2x6SUc5dWJIbGNiaUFnSUNvZ1ptOXlJR1JsWW5WbklIQjFjbkJ2YzJVc0lIbHZkU0J6YUc5MWJHUWdZV3gzWVhseklIVnpaU0I3UUd4cGJtc2dUR0Y2ZVZKbGMzVnNkQ04wYUdWdWZTNWNiaUFnSUNwY2JpQWdJQ29nUUhSNWNHVWdlM04wY21sdVozMWNiaUFnSUNvZ1FITmxaU0JTWlhOMWJIUWpZM056WEc0Z0lDQXFMMXh1SUNCblpYUWdZM056SUNncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXpkSEpwYm1kcFpua29LUzVqYzNOY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJiaUJoYkdsaGN5Qm1iM0lnZEdobElHQmpjM05nSUhCeWIzQmxjblI1TGlCVmMyVWdhWFFnZDJsMGFDQnplVzUwWVhobGMxeHVJQ0FnS2lCMGFHRjBJR2RsYm1WeVlYUmxJRzV2YmkxRFUxTWdiM1YwY0hWMExseHVJQ0FnS2x4dUlDQWdLaUJVYUdseklIQnliM0JsY25SNUlIZHBiR3dnYjI1c2VTQjNiM0pySUhkcGRHZ2djM2x1WTJoeWIyNXZkWE1nY0d4MVoybHVjeTVjYmlBZ0lDb2dTV1lnZEdobElIQnliMk5sYzNOdmNpQmpiMjUwWVdsdWN5QmhibmtnWVhONWJtTm9jbTl1YjNWeklIQnNkV2RwYm5OY2JpQWdJQ29nYVhRZ2QybHNiQ0IwYUhKdmR5QmhiaUJsY25KdmNpNGdWR2hwY3lCcGN5QjNhSGtnZEdocGN5QnRaWFJvYjJRZ2FYTWdiMjVzZVZ4dUlDQWdLaUJtYjNJZ1pHVmlkV2NnY0hWeWNHOXpaU3dnZVc5MUlITm9iM1ZzWkNCaGJIZGhlWE1nZFhObElIdEFiR2x1YXlCTVlYcDVVbVZ6ZFd4MEkzUm9aVzU5TGx4dUlDQWdLbHh1SUNBZ0tpQkFkSGx3WlNCN2MzUnlhVzVuZlZ4dUlDQWdLaUJBYzJWbElGSmxjM1ZzZENOamIyNTBaVzUwWEc0Z0lDQXFMMXh1SUNCblpYUWdZMjl1ZEdWdWRDQW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11YzNSeWFXNW5hV1o1S0NrdVkyOXVkR1Z1ZEZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGQnliMk5sYzNObGN5QnBibkIxZENCRFUxTWdkR2h5YjNWbmFDQnplVzVqYUhKdmJtOTFjeUJ3YkhWbmFXNXpYRzRnSUNBcUlHRnVaQ0J5WlhSMWNtNXpJSHRBYkdsdWF5QlNaWE4xYkhRamJXRndmUzVjYmlBZ0lDcGNiaUFnSUNvZ1ZHaHBjeUJ3Y205d1pYSjBlU0IzYVd4c0lHOXViSGtnZDI5eWF5QjNhWFJvSUhONWJtTm9jbTl1YjNWeklIQnNkV2RwYm5NdVhHNGdJQ0FxSUVsbUlIUm9aU0J3Y205alpYTnpiM0lnWTI5dWRHRnBibk1nWVc1NUlHRnplVzVqYUhKdmJtOTFjeUJ3YkhWbmFXNXpYRzRnSUNBcUlHbDBJSGRwYkd3Z2RHaHliM2NnWVc0Z1pYSnliM0l1SUZSb2FYTWdhWE1nZDJoNUlIUm9hWE1nYldWMGFHOWtJR2x6SUc5dWJIbGNiaUFnSUNvZ1ptOXlJR1JsWW5WbklIQjFjbkJ2YzJVc0lIbHZkU0J6YUc5MWJHUWdZV3gzWVhseklIVnpaU0I3UUd4cGJtc2dUR0Y2ZVZKbGMzVnNkQ04wYUdWdWZTNWNiaUFnSUNwY2JpQWdJQ29nUUhSNWNHVWdlMU52ZFhKalpVMWhjRWRsYm1WeVlYUnZjbjFjYmlBZ0lDb2dRSE5sWlNCU1pYTjFiSFFqYldGd1hHNGdJQ0FxTDF4dUlDQm5aWFFnYldGd0lDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6ZEhKcGJtZHBabmtvS1M1dFlYQmNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJRY205alpYTnpaWE1nYVc1d2RYUWdRMU5USUhSb2NtOTFaMmdnYzNsdVkyaHliMjV2ZFhNZ2NHeDFaMmx1YzF4dUlDQWdLaUJoYm1RZ2NtVjBkWEp1Y3lCN1FHeHBibXNnVW1WemRXeDBJM0p2YjNSOUxseHVJQ0FnS2x4dUlDQWdLaUJVYUdseklIQnliM0JsY25SNUlIZHBiR3dnYjI1c2VTQjNiM0pySUhkcGRHZ2djM2x1WTJoeWIyNXZkWE1nY0d4MVoybHVjeTRnU1dZZ2RHaGxJSEJ5YjJObGMzTnZjbHh1SUNBZ0tpQmpiMjUwWVdsdWN5QmhibmtnWVhONWJtTm9jbTl1YjNWeklIQnNkV2RwYm5NZ2FYUWdkMmxzYkNCMGFISnZkeUJoYmlCbGNuSnZjaTVjYmlBZ0lDcGNiaUFnSUNvZ1ZHaHBjeUJwY3lCM2FIa2dkR2hwY3lCdFpYUm9iMlFnYVhNZ2IyNXNlU0JtYjNJZ1pHVmlkV2NnY0hWeWNHOXpaU3hjYmlBZ0lDb2dlVzkxSUhOb2IzVnNaQ0JoYkhkaGVYTWdkWE5sSUh0QWJHbHVheUJNWVhwNVVtVnpkV3gwSTNSb1pXNTlMbHh1SUNBZ0tseHVJQ0FnS2lCQWRIbHdaU0I3VW05dmRIMWNiaUFnSUNvZ1FITmxaU0JTWlhOMWJIUWpjbTl2ZEZ4dUlDQWdLaTljYmlBZ1oyVjBJSEp2YjNRZ0tDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbk41Ym1Nb0tTNXliMjkwWEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VISnZZMlZ6YzJWeklHbHVjSFYwSUVOVFV5QjBhSEp2ZFdkb0lITjVibU5vY205dWIzVnpJSEJzZFdkcGJuTmNiaUFnSUNvZ1lXNWtJSEpsZEhWeWJuTWdlMEJzYVc1cklGSmxjM1ZzZENOdFpYTnpZV2RsYzMwdVhHNGdJQ0FxWEc0Z0lDQXFJRlJvYVhNZ2NISnZjR1Z5ZEhrZ2QybHNiQ0J2Ym14NUlIZHZjbXNnZDJsMGFDQnplVzVqYUhKdmJtOTFjeUJ3YkhWbmFXNXpMaUJKWmlCMGFHVWdjSEp2WTJWemMyOXlYRzRnSUNBcUlHTnZiblJoYVc1eklHRnVlU0JoYzNsdVkyaHliMjV2ZFhNZ2NHeDFaMmx1Y3lCcGRDQjNhV3hzSUhSb2NtOTNJR0Z1SUdWeWNtOXlMbHh1SUNBZ0tseHVJQ0FnS2lCVWFHbHpJR2x6SUhkb2VTQjBhR2x6SUcxbGRHaHZaQ0JwY3lCdmJteDVJR1p2Y2lCa1pXSjFaeUJ3ZFhKd2IzTmxMRnh1SUNBZ0tpQjViM1VnYzJodmRXeGtJR0ZzZDJGNWN5QjFjMlVnZTBCc2FXNXJJRXhoZW5sU1pYTjFiSFFqZEdobGJuMHVYRzRnSUNBcVhHNGdJQ0FxSUVCMGVYQmxJSHROWlhOellXZGxXMTE5WEc0Z0lDQXFJRUJ6WldVZ1VtVnpkV3gwSTIxbGMzTmhaMlZ6WEc0Z0lDQXFMMXh1SUNCblpYUWdiV1Z6YzJGblpYTWdLQ2tnZTF4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5ONWJtTW9LUzV0WlhOellXZGxjMXh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZCeWIyTmxjM05sY3lCcGJuQjFkQ0JEVTFNZ2RHaHliM1ZuYUNCemVXNWphSEp2Ym05MWN5QndiSFZuYVc1elhHNGdJQ0FxSUdGdVpDQmpZV3hzY3lCN1FHeHBibXNnVW1WemRXeDBJM2RoY201cGJtZHpLQ2w5TGx4dUlDQWdLbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdFhZWEp1YVc1blcxMTlJRmRoY201cGJtZHpJR1p5YjIwZ2NHeDFaMmx1Y3k1Y2JpQWdJQ292WEc0Z0lIZGhjbTVwYm1keklDZ3BJSHRjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTV6ZVc1aktDa3VkMkZ5Ym1sdVozTW9LVnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUVGc2FXRnpJR1p2Y2lCMGFHVWdlMEJzYVc1cklFeGhlbmxTWlhOMWJIUWpZM056ZlNCd2NtOXdaWEowZVM1Y2JpQWdJQ3BjYmlBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNvZ2JHRjZlU0FySUNjbklEMDlQU0JzWVhwNUxtTnpjMXh1SUNBZ0tseHVJQ0FnS2lCQWNtVjBkWEp1SUh0emRISnBibWQ5SUU5MWRIQjFkQ0JEVTFNdVhHNGdJQ0FxTDF4dUlDQjBiMU4wY21sdVp5QW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WTNOelhHNGdJSDFjYmx4dUlDQXZLaXBjYmlBZ0lDb2dVSEp2WTJWemMyVnpJR2x1Y0hWMElFTlRVeUIwYUhKdmRXZG9JSE41Ym1Ob2NtOXViM1Z6SUdGdVpDQmhjM2x1WTJoeWIyNXZkWE1nY0d4MVoybHVjMXh1SUNBZ0tpQmhibVFnWTJGc2JITWdZRzl1Um5Wc1ptbHNiR1ZrWUNCM2FYUm9JR0VnVW1WemRXeDBJR2x1YzNSaGJtTmxMaUJKWmlCaElIQnNkV2RwYmlCMGFISnZkM05jYmlBZ0lDb2dZVzRnWlhKeWIzSXNJSFJvWlNCZ2IyNVNaV3BsWTNSbFpHQWdZMkZzYkdKaFkyc2dkMmxzYkNCaVpTQmxlR1ZqZFhSbFpDNWNiaUFnSUNwY2JpQWdJQ29nU1hRZ2FXMXdiR1Z0Wlc1MGN5QnpkR0Z1WkdGeVpDQlFjbTl0YVhObElFRlFTUzVjYmlBZ0lDcGNiaUFnSUNvZ1FIQmhjbUZ0SUh0dmJrWjFiR1pwYkd4bFpIMGdiMjVHZFd4bWFXeHNaV1FnUTJGc2JHSmhZMnNnZDJsc2JDQmlaU0JsZUdWamRYUmxaRnh1SUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCM2FHVnVJR0ZzYkNCd2JIVm5hVzV6SUhkcGJHd2dabWx1YVhOb0lIZHZjbXN1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMjVTWldwbFkzUmxaSDBnSUc5dVVtVnFaV04wWldRZ0lFTmhiR3hpWVdOcklIZHBiR3dnWW1VZ1pYaGxZM1YwWldRZ2IyNGdZVzU1SUdWeWNtOXlMbHh1SUNBZ0tseHVJQ0FnS2lCQWNtVjBkWEp1SUh0UWNtOXRhWE5sZlNCUWNtOXRhWE5sSUVGUVNTQjBieUJ0WVd0bElIRjFaWFZsTGx4dUlDQWdLbHh1SUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnS2lCd2IzTjBZM056S0Z0aGRYUnZjSEpsWm1sNFpYSmRLUzV3Y205alpYTnpLR056Y3l3Z2V5Qm1jbTl0T2lCamMzTlFZWFJvSUgwcExuUm9aVzRvY21WemRXeDBJRDArSUh0Y2JpQWdJQ29nSUNCamIyNXpiMnhsTG14dlp5aHlaWE4xYkhRdVkzTnpLVnh1SUNBZ0tpQjlLVnh1SUNBZ0tpOWNiaUFnZEdobGJpQW9iMjVHZFd4bWFXeHNaV1FzSUc5dVVtVnFaV04wWldRcElIdGNiaUFnSUNCcFppQW9jSEp2WTJWemN5NWxibll1VGs5RVJWOUZUbFlnSVQwOUlDZHdjbTlrZFdOMGFXOXVKeWtnZTF4dUlDQWdJQ0FnYVdZZ0tDRW9KMlp5YjIwbklHbHVJSFJvYVhNdWIzQjBjeWtwSUh0Y2JpQWdJQ0FnSUNBZ2QyRnliazl1WTJVb1hHNGdJQ0FnSUNBZ0lDQWdKMWRwZEdodmRYUWdZR1p5YjIxZ0lHOXdkR2x2YmlCUWIzTjBRMU5USUdOdmRXeGtJR2RsYm1WeVlYUmxJSGR5YjI1bklITnZkWEpqWlNCdFlYQWdKeUFyWEc0Z0lDQWdJQ0FnSUNBZ0oyRnVaQ0IzYVd4c0lHNXZkQ0JtYVc1a0lFSnliM2R6WlhKemJHbHpkQ0JqYjI1bWFXY3VJRk5sZENCcGRDQjBieUJEVTFNZ1ptbHNaU0J3WVhSb0lDY2dLMXh1SUNBZ0lDQWdJQ0FnSUNkdmNpQjBieUJnZFc1a1pXWnBibVZrWUNCMGJ5QndjbVYyWlc1MElIUm9hWE1nZDJGeWJtbHVaeTRuWEc0Z0lDQWdJQ0FnSUNsY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIUm9hWE11WVhONWJtTW9LUzUwYUdWdUtHOXVSblZzWm1sc2JHVmtMQ0J2YmxKbGFtVmpkR1ZrS1Z4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGQnliMk5sYzNObGN5QnBibkIxZENCRFUxTWdkR2h5YjNWbmFDQnplVzVqYUhKdmJtOTFjeUJoYm1RZ1lYTjVibU5vY205dWIzVnpJSEJzZFdkcGJuTmNiaUFnSUNvZ1lXNWtJR05oYkd4eklHOXVVbVZxWldOMFpXUWdabTl5SUdWaFkyZ2daWEp5YjNJZ2RHaHliM2R1SUdsdUlHRnVlU0J3YkhWbmFXNHVYRzRnSUNBcVhHNGdJQ0FxSUVsMElHbHRjR3hsYldWdWRITWdjM1JoYm1SaGNtUWdVSEp2YldselpTQkJVRWt1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2IyNVNaV3BsWTNSbFpIMGdiMjVTWldwbFkzUmxaQ0JEWVd4c1ltRmpheUIzYVd4c0lHSmxJR1Y0WldOMWRHVmtJRzl1SUdGdWVTQmxjbkp2Y2k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJpQjdVSEp2YldselpYMGdVSEp2YldselpTQkJVRWtnZEc4Z2JXRnJaU0J4ZFdWMVpTNWNiaUFnSUNwY2JpQWdJQ29nUUdWNFlXMXdiR1ZjYmlBZ0lDb2djRzl6ZEdOemN5aGJZWFYwYjNCeVpXWnBlR1Z5WFNrdWNISnZZMlZ6Y3loamMzTXBMblJvWlc0b2NtVnpkV3gwSUQwK0lIdGNiaUFnSUNvZ0lDQmpiMjV6YjJ4bExteHZaeWh5WlhOMWJIUXVZM056S1Z4dUlDQWdLaUI5S1M1allYUmphQ2hsY25KdmNpQTlQaUI3WEc0Z0lDQXFJQ0FnWTI5dWMyOXNaUzVsY25KdmNpaGxjbkp2Y2lsY2JpQWdJQ29nZlNsY2JpQWdJQ292WEc0Z0lHTmhkR05vSUNodmJsSmxhbVZqZEdWa0tTQjdYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZWE41Ym1Nb0tTNWpZWFJqYUNodmJsSmxhbVZqZEdWa0tWeHVJQ0I5WEc0Z0lDOHFLbHh1SUNBZ0tpQlFjbTlqWlhOelpYTWdhVzV3ZFhRZ1ExTlRJSFJvY205MVoyZ2djM2x1WTJoeWIyNXZkWE1nWVc1a0lHRnplVzVqYUhKdmJtOTFjeUJ3YkhWbmFXNXpYRzRnSUNBcUlHRnVaQ0JqWVd4c2N5QnZia1pwYm1Gc2JIa2diMjRnWVc1NUlHVnljbTl5SUc5eUlIZG9aVzRnWVd4c0lIQnNkV2RwYm5NZ2QybHNiQ0JtYVc1cGMyZ2dkMjl5YXk1Y2JpQWdJQ3BjYmlBZ0lDb2dTWFFnYVcxd2JHVnRaVzUwY3lCemRHRnVaR0Z5WkNCUWNtOXRhWE5sSUVGUVNTNWNiaUFnSUNwY2JpQWdJQ29nUUhCaGNtRnRJSHR2YmtacGJtRnNiSGw5SUc5dVJtbHVZV3hzZVNCRFlXeHNZbUZqYXlCM2FXeHNJR0psSUdWNFpXTjFkR1ZrSUc5dUlHRnVlU0JsY25KdmNpQnZjbHh1SUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSGRvWlc0Z1lXeHNJSEJzZFdkcGJuTWdkMmxzYkNCbWFXNXBjMmdnZDI5eWF5NWNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnliaUI3VUhKdmJXbHpaWDBnVUhKdmJXbHpaU0JCVUVrZ2RHOGdiV0ZyWlNCeGRXVjFaUzVjYmlBZ0lDcGNiaUFnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ29nY0c5emRHTnpjeWhiWVhWMGIzQnlaV1pwZUdWeVhTa3VjSEp2WTJWemN5aGpjM01wTG1acGJtRnNiSGtvS0NrZ1BUNGdlMXh1SUNBZ0tpQWdJR052Ym5OdmJHVXViRzluS0Nkd2NtOWpaWE56YVc1bklHVnVaR1ZrSnlsY2JpQWdJQ29nZlNsY2JpQWdJQ292WEc0Z0lHWnBibUZzYkhrZ0tHOXVSbWx1WVd4c2VTa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbUZ6ZVc1aktDa3VkR2hsYmlodmJrWnBibUZzYkhrc0lHOXVSbWx1WVd4c2VTbGNiaUFnZlZ4dVhHNGdJR2hoYm1Sc1pVVnljbTl5SUNobGNuSnZjaXdnY0d4MVoybHVLU0I3WEc0Z0lDQWdkSEo1SUh0Y2JpQWdJQ0FnSUhSb2FYTXVaWEp5YjNJZ1BTQmxjbkp2Y2x4dUlDQWdJQ0FnYVdZZ0tHVnljbTl5TG01aGJXVWdQVDA5SUNkRGMzTlRlVzUwWVhoRmNuSnZjaWNnSmlZZ0lXVnljbTl5TG5Cc2RXZHBiaWtnZTF4dUlDQWdJQ0FnSUNCbGNuSnZjaTV3YkhWbmFXNGdQU0J3YkhWbmFXNHVjRzl6ZEdOemMxQnNkV2RwYmx4dUlDQWdJQ0FnSUNCbGNuSnZjaTV6WlhSTlpYTnpZV2RsS0NsY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2NHeDFaMmx1TG5CdmMzUmpjM05XWlhKemFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUdsbUlDaHdjbTlqWlhOekxtVnVkaTVPVDBSRlgwVk9WaUFoUFQwZ0ozQnliMlIxWTNScGIyNG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJSEJzZFdkcGJrNWhiV1VnUFNCd2JIVm5hVzR1Y0c5emRHTnpjMUJzZFdkcGJseHVJQ0FnSUNBZ0lDQWdJR3hsZENCd2JIVm5hVzVXWlhJZ1BTQndiSFZuYVc0dWNHOXpkR056YzFabGNuTnBiMjVjYmlBZ0lDQWdJQ0FnSUNCc1pYUWdjblZ1ZEdsdFpWWmxjaUE5SUhSb2FYTXVjbVZ6ZFd4MExuQnliMk5sYzNOdmNpNTJaWEp6YVc5dVhHNGdJQ0FnSUNBZ0lDQWdiR1YwSUdFZ1BTQndiSFZuYVc1V1pYSXVjM0JzYVhRb0p5NG5LVnh1SUNBZ0lDQWdJQ0FnSUd4bGRDQmlJRDBnY25WdWRHbHRaVlpsY2k1emNHeHBkQ2duTGljcFhHNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb1lWc3dYU0FoUFQwZ1lsc3dYU0I4ZkNCd1lYSnpaVWx1ZENoaFd6RmRLU0ErSUhCaGNuTmxTVzUwS0dKYk1WMHBLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpiMjV6YjJ4bExtVnljbTl5S0Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FuVlc1cmJtOTNiaUJsY25KdmNpQm1jbTl0SUZCdmMzUkRVMU1nY0d4MVoybHVMaUJaYjNWeUlHTjFjbkpsYm5RZ1VHOXpkRU5UVXlBbklDdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0ozWmxjbk5wYjI0Z2FYTWdKeUFySUhKMWJuUnBiV1ZXWlhJZ0t5QW5MQ0JpZFhRZ0p5QXJJSEJzZFdkcGJrNWhiV1VnS3lBbklIVnpaWE1nSnlBclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhCc2RXZHBibFpsY2lBcklDY3VJRkJsY21oaGNITWdkR2hwY3lCcGN5QjBhR1VnYzI5MWNtTmxJRzltSUhSb1pTQmxjbkp2Y2lCaVpXeHZkeTRuWEc0Z0lDQWdJQ0FnSUNBZ0lDQXBYRzRnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOVhHNGdJQ0FnZlNCallYUmphQ0FvWlhKeUtTQjdYRzRnSUNBZ0lDQnBaaUFvWTI5dWMyOXNaU0FtSmlCamIyNXpiMnhsTG1WeWNtOXlLU0JqYjI1emIyeGxMbVZ5Y205eUtHVnljaWxjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JoYzNsdVkxUnBZMnNnS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbkJzZFdkcGJpQStQU0IwYUdsekxuQnliMk5sYzNOdmNpNXdiSFZuYVc1ekxteGxibWQwYUNrZ2UxeHVJQ0FnSUNBZ2RHaHBjeTV3Y205alpYTnpaV1FnUFNCMGNuVmxYRzRnSUNBZ0lDQnlaWFIxY200Z2NtVnpiMngyWlNncFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnZEhKNUlIdGNiaUFnSUNBZ0lHeGxkQ0J3YkhWbmFXNGdQU0IwYUdsekxuQnliMk5sYzNOdmNpNXdiSFZuYVc1elczUm9hWE11Y0d4MVoybHVYVnh1SUNBZ0lDQWdiR1YwSUhCeWIyMXBjMlVnUFNCMGFHbHpMbkoxYmlod2JIVm5hVzRwWEc0Z0lDQWdJQ0IwYUdsekxuQnNkV2RwYmlBclBTQXhYRzVjYmlBZ0lDQWdJR2xtSUNocGMxQnliMjFwYzJVb2NISnZiV2x6WlNrcElIdGNiaUFnSUNBZ0lDQWdjSEp2YldselpTNTBhR1Z1S0NncElEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbUZ6ZVc1alZHbGpheWh5WlhOdmJIWmxMQ0J5WldwbFkzUXBYRzRnSUNBZ0lDQWdJSDBwTG1OaGRHTm9LR1Z5Y205eUlEMCtJSHRjYmlBZ0lDQWdJQ0FnSUNCMGFHbHpMbWhoYm1Sc1pVVnljbTl5S0dWeWNtOXlMQ0J3YkhWbmFXNHBYRzRnSUNBZ0lDQWdJQ0FnZEdocGN5NXdjbTlqWlhOelpXUWdQU0IwY25WbFhHNGdJQ0FnSUNBZ0lDQWdjbVZxWldOMEtHVnljbTl5S1Z4dUlDQWdJQ0FnSUNCOUtWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ2RHaHBjeTVoYzNsdVkxUnBZMnNvY21WemIyeDJaU3dnY21WcVpXTjBLVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMGdZMkYwWTJnZ0tHVnljbTl5S1NCN1hHNGdJQ0FnSUNCMGFHbHpMbkJ5YjJObGMzTmxaQ0E5SUhSeWRXVmNiaUFnSUNBZ0lISmxhbVZqZENobGNuSnZjaWxjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JoYzNsdVl5QW9LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVjSEp2WTJWemMyVmtLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdibVYzSUZCeWIyMXBjMlVvS0hKbGMyOXNkbVVzSUhKbGFtVmpkQ2tnUFQ0Z2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWxjbkp2Y2lrZ2UxeHVJQ0FnSUNBZ0lDQWdJSEpsYW1WamRDaDBhR2x6TG1WeWNtOXlLVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUhKbGMyOXNkbVVvZEdocGN5NXpkSEpwYm1kcFpua29LU2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNsY2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hSb2FYTXVjSEp2WTJWemMybHVaeWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNISnZZMlZ6YzJsdVoxeHVJQ0FnSUgxY2JseHVJQ0FnSUhSb2FYTXVjSEp2WTJWemMybHVaeUE5SUc1bGR5QlFjbTl0YVhObEtDaHlaWE52YkhabExDQnlaV3BsWTNRcElEMCtJSHRjYmlBZ0lDQWdJR2xtSUNoMGFHbHpMbVZ5Y205eUtTQnlaWFIxY200Z2NtVnFaV04wS0hSb2FYTXVaWEp5YjNJcFhHNGdJQ0FnSUNCMGFHbHpMbkJzZFdkcGJpQTlJREJjYmlBZ0lDQWdJSFJvYVhNdVlYTjVibU5VYVdOcktISmxjMjlzZG1Vc0lISmxhbVZqZENsY2JpQWdJQ0I5S1M1MGFHVnVLQ2dwSUQwK0lIdGNiaUFnSUNBZ0lIUm9hWE11Y0hKdlkyVnpjMlZrSUQwZ2RISjFaVnh1SUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11YzNSeWFXNW5hV1o1S0NsY2JpQWdJQ0I5S1Z4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWNISnZZMlZ6YzJsdVoxeHVJQ0I5WEc1Y2JpQWdjM2x1WXlBb0tTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWNISnZZMlZ6YzJWa0tTQnlaWFIxY200Z2RHaHBjeTV5WlhOMWJIUmNiaUFnSUNCMGFHbHpMbkJ5YjJObGMzTmxaQ0E5SUhSeWRXVmNibHh1SUNBZ0lHbG1JQ2gwYUdsekxuQnliMk5sYzNOcGJtY3BJSHRjYmlBZ0lDQWdJSFJvY205M0lHNWxkeUJGY25KdmNpaGNiaUFnSUNBZ0lDQWdKMVZ6WlNCd2NtOWpaWE56S0dOemN5a3VkR2hsYmloallpa2dkRzhnZDI5eWF5QjNhWFJvSUdGemVXNWpJSEJzZFdkcGJuTW5LVnh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2gwYUdsekxtVnljbTl5S1NCMGFISnZkeUIwYUdsekxtVnljbTl5WEc1Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0J3YkhWbmFXNGdiMllnZEdocGN5NXlaWE4xYkhRdWNISnZZMlZ6YzI5eUxuQnNkV2RwYm5NcElIdGNiaUFnSUNBZ0lHeGxkQ0J3Y205dGFYTmxJRDBnZEdocGN5NXlkVzRvY0d4MVoybHVLVnh1SUNBZ0lDQWdhV1lnS0dselVISnZiV2x6WlNod2NtOXRhWE5sS1NrZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lDQWdKMVZ6WlNCd2NtOWpaWE56S0dOemN5a3VkR2hsYmloallpa2dkRzhnZDI5eWF5QjNhWFJvSUdGemVXNWpJSEJzZFdkcGJuTW5LVnh1SUNBZ0lDQWdmVnh1SUNBZ0lIMWNibHh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkpsYzNWc2RGeHVJQ0I5WEc1Y2JpQWdjblZ1SUNod2JIVm5hVzRwSUh0Y2JpQWdJQ0IwYUdsekxuSmxjM1ZzZEM1c1lYTjBVR3gxWjJsdUlEMGdjR3gxWjJsdVhHNWNiaUFnSUNCMGNua2dlMXh1SUNBZ0lDQWdjbVYwZFhKdUlIQnNkV2RwYmloMGFHbHpMbkpsYzNWc2RDNXliMjkwTENCMGFHbHpMbkpsYzNWc2RDbGNiaUFnSUNCOUlHTmhkR05vSUNobGNuSnZjaWtnZTF4dUlDQWdJQ0FnZEdocGN5NW9ZVzVrYkdWRmNuSnZjaWhsY25KdmNpd2djR3gxWjJsdUtWeHVJQ0FnSUNBZ2RHaHliM2NnWlhKeWIzSmNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnpkSEpwYm1kcFpua2dLQ2tnZTF4dUlDQWdJR2xtSUNoMGFHbHpMbk4wY21sdVoybG1hV1ZrS1NCeVpYUjFjbTRnZEdocGN5NXlaWE4xYkhSY2JpQWdJQ0IwYUdsekxuTjBjbWx1WjJsbWFXVmtJRDBnZEhKMVpWeHVYRzRnSUNBZ2RHaHBjeTV6ZVc1aktDbGNibHh1SUNBZ0lHeGxkQ0J2Y0hSeklEMGdkR2hwY3k1eVpYTjFiSFF1YjNCMGMxeHVJQ0FnSUd4bGRDQnpkSElnUFNCemRISnBibWRwWm5sY2JpQWdJQ0JwWmlBb2IzQjBjeTV6ZVc1MFlYZ3BJSE4wY2lBOUlHOXdkSE11YzNsdWRHRjRMbk4wY21sdVoybG1lVnh1SUNBZ0lHbG1JQ2h2Y0hSekxuTjBjbWx1WjJsbWFXVnlLU0J6ZEhJZ1BTQnZjSFJ6TG5OMGNtbHVaMmxtYVdWeVhHNGdJQ0FnYVdZZ0tITjBjaTV6ZEhKcGJtZHBabmtwSUhOMGNpQTlJSE4wY2k1emRISnBibWRwWm5sY2JseHVJQ0FnSUd4bGRDQnRZWEFnUFNCdVpYY2dUV0Z3UjJWdVpYSmhkRzl5S0hOMGNpd2dkR2hwY3k1eVpYTjFiSFF1Y205dmRDd2dkR2hwY3k1eVpYTjFiSFF1YjNCMGN5bGNiaUFnSUNCc1pYUWdaR0YwWVNBOUlHMWhjQzVuWlc1bGNtRjBaU2dwWEc0Z0lDQWdkR2hwY3k1eVpYTjFiSFF1WTNOeklEMGdaR0YwWVZzd1hWeHVJQ0FnSUhSb2FYTXVjbVZ6ZFd4MExtMWhjQ0E5SUdSaGRHRmJNVjFjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbGMzVnNkRnh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRXhoZW5sU1pYTjFiSFJjYmx4dUx5b3FYRzRnS2lCQVkyRnNiR0poWTJzZ2IyNUdkV3htYVd4c1pXUmNiaUFxSUVCd1lYSmhiU0I3VW1WemRXeDBmU0J5WlhOMWJIUmNiaUFxTDF4dVhHNHZLaXBjYmlBcUlFQmpZV3hzWW1GamF5QnZibEpsYW1WamRHVmtYRzRnS2lCQWNHRnlZVzBnZTBWeWNtOXlmU0JsY25KdmNseHVJQ292WEc0aVhTd2labWxzWlNJNklteGhlbmt0Y21WemRXeDBMbXB6SW4wPVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cDovL2Zlcm9zcy5vcmc+XG4gKiBAbGljZW5zZSAgTUlUXG4gKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5cbid1c2Ugc3RyaWN0J1xuXG52YXIgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbnZhciBpZWVlNzU0ID0gcmVxdWlyZSgnaWVlZTc1NCcpXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG5leHBvcnRzLkJ1ZmZlciA9IEJ1ZmZlclxuZXhwb3J0cy5TbG93QnVmZmVyID0gU2xvd0J1ZmZlclxuZXhwb3J0cy5JTlNQRUNUX01BWF9CWVRFUyA9IDUwXG5cbi8qKlxuICogSWYgYEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUYDpcbiAqICAgPT09IHRydWUgICAgVXNlIFVpbnQ4QXJyYXkgaW1wbGVtZW50YXRpb24gKGZhc3Rlc3QpXG4gKiAgID09PSBmYWxzZSAgIFVzZSBPYmplY3QgaW1wbGVtZW50YXRpb24gKG1vc3QgY29tcGF0aWJsZSwgZXZlbiBJRTYpXG4gKlxuICogQnJvd3NlcnMgdGhhdCBzdXBwb3J0IHR5cGVkIGFycmF5cyBhcmUgSUUgMTArLCBGaXJlZm94IDQrLCBDaHJvbWUgNyssIFNhZmFyaSA1LjErLFxuICogT3BlcmEgMTEuNissIGlPUyA0LjIrLlxuICpcbiAqIER1ZSB0byB2YXJpb3VzIGJyb3dzZXIgYnVncywgc29tZXRpbWVzIHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24gd2lsbCBiZSB1c2VkIGV2ZW5cbiAqIHdoZW4gdGhlIGJyb3dzZXIgc3VwcG9ydHMgdHlwZWQgYXJyYXlzLlxuICpcbiAqIE5vdGU6XG4gKlxuICogICAtIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgIGluc3RhbmNlcyxcbiAqICAgICBTZWU6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY5NTQzOC5cbiAqXG4gKiAgIC0gQ2hyb21lIDktMTAgaXMgbWlzc2luZyB0aGUgYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbi5cbiAqXG4gKiAgIC0gSUUxMCBoYXMgYSBicm9rZW4gYFR5cGVkQXJyYXkucHJvdG90eXBlLnN1YmFycmF5YCBmdW5jdGlvbiB3aGljaCByZXR1cm5zIGFycmF5cyBvZlxuICogICAgIGluY29ycmVjdCBsZW5ndGggaW4gc29tZSBzaXR1YXRpb25zLlxuXG4gKiBXZSBkZXRlY3QgdGhlc2UgYnVnZ3kgYnJvd3NlcnMgYW5kIHNldCBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgIHRvIGBmYWxzZWAgc28gdGhleVxuICogZ2V0IHRoZSBPYmplY3QgaW1wbGVtZW50YXRpb24sIHdoaWNoIGlzIHNsb3dlciBidXQgYmVoYXZlcyBjb3JyZWN0bHkuXG4gKi9cbkJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUID0gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlQgIT09IHVuZGVmaW5lZFxuICA/IGdsb2JhbC5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gIDogdHlwZWRBcnJheVN1cHBvcnQoKVxuXG4vKlxuICogRXhwb3J0IGtNYXhMZW5ndGggYWZ0ZXIgdHlwZWQgYXJyYXkgc3VwcG9ydCBpcyBkZXRlcm1pbmVkLlxuICovXG5leHBvcnRzLmtNYXhMZW5ndGggPSBrTWF4TGVuZ3RoKClcblxuZnVuY3Rpb24gdHlwZWRBcnJheVN1cHBvcnQgKCkge1xuICB0cnkge1xuICAgIHZhciBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGFyci5fX3Byb3RvX18gPSB7X19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSwgZm9vOiBmdW5jdGlvbiAoKSB7IHJldHVybiA0MiB9fVxuICAgIHJldHVybiBhcnIuZm9vKCkgPT09IDQyICYmIC8vIHR5cGVkIGFycmF5IGluc3RhbmNlcyBjYW4gYmUgYXVnbWVudGVkXG4gICAgICAgIHR5cGVvZiBhcnIuc3ViYXJyYXkgPT09ICdmdW5jdGlvbicgJiYgLy8gY2hyb21lIDktMTAgbGFjayBgc3ViYXJyYXlgXG4gICAgICAgIGFyci5zdWJhcnJheSgxLCAxKS5ieXRlTGVuZ3RoID09PSAwIC8vIGllMTAgaGFzIGJyb2tlbiBgc3ViYXJyYXlgXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5mdW5jdGlvbiBrTWF4TGVuZ3RoICgpIHtcbiAgcmV0dXJuIEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUXG4gICAgPyAweDdmZmZmZmZmXG4gICAgOiAweDNmZmZmZmZmXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAodGhhdCwgbGVuZ3RoKSB7XG4gIGlmIChrTWF4TGVuZ3RoKCkgPCBsZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0eXBlZCBhcnJheSBsZW5ndGgnKVxuICB9XG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBuZXcgVWludDhBcnJheShsZW5ndGgpXG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIGlmICh0aGF0ID09PSBudWxsKSB7XG4gICAgICB0aGF0ID0gbmV3IEJ1ZmZlcihsZW5ndGgpXG4gICAgfVxuICAgIHRoYXQubGVuZ3RoID0gbGVuZ3RoXG4gIH1cblxuICByZXR1cm4gdGhhdFxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKCFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCAmJiAhKHRoaXMgaW5zdGFuY2VvZiBCdWZmZXIpKSB7XG4gICAgcmV0dXJuIG5ldyBCdWZmZXIoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBDb21tb24gY2FzZS5cbiAgaWYgKHR5cGVvZiBhcmcgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZ09yT2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSWYgZW5jb2RpbmcgaXMgc3BlY2lmaWVkIHRoZW4gdGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnXG4gICAgICApXG4gICAgfVxuICAgIHJldHVybiBhbGxvY1Vuc2FmZSh0aGlzLCBhcmcpXG4gIH1cbiAgcmV0dXJuIGZyb20odGhpcywgYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbkJ1ZmZlci5wb29sU2l6ZSA9IDgxOTIgLy8gbm90IHVzZWQgYnkgdGhpcyBpbXBsZW1lbnRhdGlvblxuXG4vLyBUT0RPOiBMZWdhY3ksIG5vdCBuZWVkZWQgYW55bW9yZS4gUmVtb3ZlIGluIG5leHQgbWFqb3IgdmVyc2lvbi5cbkJ1ZmZlci5fYXVnbWVudCA9IGZ1bmN0aW9uIChhcnIpIHtcbiAgYXJyLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiBmcm9tICh0aGF0LCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJ2YWx1ZVwiIGFyZ3VtZW50IG11c3Qgbm90IGJlIGEgbnVtYmVyJylcbiAgfVxuXG4gIGlmICh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBmcm9tU3RyaW5nKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0KVxuICB9XG5cbiAgcmV0dXJuIGZyb21PYmplY3QodGhhdCwgdmFsdWUpXG59XG5cbi8qKlxuICogRnVuY3Rpb25hbGx5IGVxdWl2YWxlbnQgdG8gQnVmZmVyKGFyZywgZW5jb2RpbmcpIGJ1dCB0aHJvd3MgYSBUeXBlRXJyb3JcbiAqIGlmIHZhbHVlIGlzIGEgbnVtYmVyLlxuICogQnVmZmVyLmZyb20oc3RyWywgZW5jb2RpbmddKVxuICogQnVmZmVyLmZyb20oYXJyYXkpXG4gKiBCdWZmZXIuZnJvbShidWZmZXIpXG4gKiBCdWZmZXIuZnJvbShhcnJheUJ1ZmZlclssIGJ5dGVPZmZzZXRbLCBsZW5ndGhdXSlcbiAqKi9cbkJ1ZmZlci5mcm9tID0gZnVuY3Rpb24gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGZyb20obnVsbCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gIEJ1ZmZlci5wcm90b3R5cGUuX19wcm90b19fID0gVWludDhBcnJheS5wcm90b3R5cGVcbiAgQnVmZmVyLl9fcHJvdG9fXyA9IFVpbnQ4QXJyYXlcbiAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC5zcGVjaWVzICYmXG4gICAgICBCdWZmZXJbU3ltYm9sLnNwZWNpZXNdID09PSBCdWZmZXIpIHtcbiAgICAvLyBGaXggc3ViYXJyYXkoKSBpbiBFUzIwMTYuIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvcHVsbC85N1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIsIFN5bWJvbC5zcGVjaWVzLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pXG4gIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0U2l6ZSAoc2l6ZSkge1xuICBpZiAodHlwZW9mIHNpemUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBiZSBhIG51bWJlcicpXG4gIH0gZWxzZSBpZiAoc2l6ZSA8IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJzaXplXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgbmVnYXRpdmUnKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jICh0aGF0LCBzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldHRlZCBhcyBhIHN0YXJ0IG9mZnNldC5cbiAgICByZXR1cm4gdHlwZW9mIGVuY29kaW5nID09PSAnc3RyaW5nJ1xuICAgICAgPyBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsLCBlbmNvZGluZylcbiAgICAgIDogY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpLmZpbGwoZmlsbClcbiAgfVxuICByZXR1cm4gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUpXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBmaWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogYWxsb2Moc2l6ZVssIGZpbGxbLCBlbmNvZGluZ11dKVxuICoqL1xuQnVmZmVyLmFsbG9jID0gZnVuY3Rpb24gKHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIHJldHVybiBhbGxvYyhudWxsLCBzaXplLCBmaWxsLCBlbmNvZGluZylcbn1cblxuZnVuY3Rpb24gYWxsb2NVbnNhZmUgKHRoYXQsIHNpemUpIHtcbiAgYXNzZXJ0U2l6ZShzaXplKVxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIHNpemUgPCAwID8gMCA6IGNoZWNrZWQoc2l6ZSkgfCAwKVxuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXplOyArK2kpIHtcbiAgICAgIHRoYXRbaV0gPSAwXG4gICAgfVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUobnVsbCwgc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAodGhhdCwgc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImVuY29kaW5nXCIgbXVzdCBiZSBhIHZhbGlkIHN0cmluZyBlbmNvZGluZycpXG4gIH1cblxuICB2YXIgbGVuZ3RoID0gYnl0ZUxlbmd0aChzdHJpbmcsIGVuY29kaW5nKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG5cbiAgdmFyIGFjdHVhbCA9IHRoYXQud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIHRoYXQgPSB0aGF0LnNsaWNlKDAsIGFjdHVhbClcbiAgfVxuXG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKHRoYXQsIGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGggPCAwID8gMCA6IGNoZWNrZWQoYXJyYXkubGVuZ3RoKSB8IDBcbiAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW5ndGgpXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0aGF0W2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tQXJyYXlCdWZmZXIgKHRoYXQsIGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcbiAgYXJyYXkuYnl0ZUxlbmd0aCAvLyB0aGlzIHRocm93cyBpZiBgYXJyYXlgIGlzIG5vdCBhIHZhbGlkIEFycmF5QnVmZmVyXG5cbiAgaWYgKGJ5dGVPZmZzZXQgPCAwIHx8IGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1xcJ29mZnNldFxcJyBpcyBvdXQgb2YgYm91bmRzJylcbiAgfVxuXG4gIGlmIChhcnJheS5ieXRlTGVuZ3RoIDwgYnl0ZU9mZnNldCArIChsZW5ndGggfHwgMCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnbGVuZ3RoXFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGJ5dGVPZmZzZXQgPT09IHVuZGVmaW5lZCAmJiBsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXkpXG4gIH0gZWxzZSBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBhcnJheSA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlLCBmb3IgYmVzdCBwZXJmb3JtYW5jZVxuICAgIHRoYXQgPSBhcnJheVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICB0aGF0ID0gZnJvbUFycmF5TGlrZSh0aGF0LCBhcnJheSlcbiAgfVxuICByZXR1cm4gdGhhdFxufVxuXG5mdW5jdGlvbiBmcm9tT2JqZWN0ICh0aGF0LCBvYmopIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmZ1bmN0aW9uIFNsb3dCdWZmZXIgKGxlbmd0aCkge1xuICBpZiAoK2xlbmd0aCAhPSBsZW5ndGgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBlcWVxZXFcbiAgICBsZW5ndGggPSAwXG4gIH1cbiAgcmV0dXJuIEJ1ZmZlci5hbGxvYygrbGVuZ3RoKVxufVxuXG5CdWZmZXIuaXNCdWZmZXIgPSBmdW5jdGlvbiBpc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYSkgfHwgIUJ1ZmZlci5pc0J1ZmZlcihiKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50cyBtdXN0IGJlIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGEgPT09IGIpIHJldHVybiAwXG5cbiAgdmFyIHggPSBhLmxlbmd0aFxuICB2YXIgeSA9IGIubGVuZ3RoXG5cbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IE1hdGgubWluKHgsIHkpOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAoYVtpXSAhPT0gYltpXSkge1xuICAgICAgeCA9IGFbaV1cbiAgICAgIHkgPSBiW2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuQnVmZmVyLmlzRW5jb2RpbmcgPSBmdW5jdGlvbiBpc0VuY29kaW5nIChlbmNvZGluZykge1xuICBzd2l0Y2ggKFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKSkge1xuICAgIGNhc2UgJ2hleCc6XG4gICAgY2FzZSAndXRmOCc6XG4gICAgY2FzZSAndXRmLTgnOlxuICAgIGNhc2UgJ2FzY2lpJzpcbiAgICBjYXNlICdsYXRpbjEnOlxuICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgY2FzZSAnYmFzZTY0JzpcbiAgICBjYXNlICd1Y3MyJzpcbiAgICBjYXNlICd1Y3MtMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgcmV0dXJuIHRydWVcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuQnVmZmVyLmNvbmNhdCA9IGZ1bmN0aW9uIGNvbmNhdCAobGlzdCwgbGVuZ3RoKSB7XG4gIGlmICghaXNBcnJheShsaXN0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gIH1cblxuICBpZiAobGlzdC5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gQnVmZmVyLmFsbG9jKDApXG4gIH1cblxuICB2YXIgaVxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBsZW5ndGggPSAwXG4gICAgZm9yIChpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxlbmd0aCArPSBsaXN0W2ldLmxlbmd0aFxuICAgIH1cbiAgfVxuXG4gIHZhciBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICB2YXIgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIHZhciBidWYgPSBsaXN0W2ldXG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKEJ1ZmZlci5pc0J1ZmZlcihzdHJpbmcpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5sZW5ndGhcbiAgfVxuICBpZiAodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAoQXJyYXlCdWZmZXIuaXNWaWV3KHN0cmluZykgfHwgc3RyaW5nIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgc3RyaW5nID0gJycgKyBzdHJpbmdcbiAgfVxuXG4gIHZhciBsZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChsZW4gPT09IDApIHJldHVybiAwXG5cbiAgLy8gVXNlIGEgZm9yIGxvb3AgdG8gYXZvaWQgcmVjdXJzaW9uXG4gIHZhciBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICBjYXNlICdsYXRpbjEnOlxuICAgICAgY2FzZSAnYmluYXJ5JzpcbiAgICAgICAgcmV0dXJuIGxlblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gbGVuICogMlxuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGxlbiA+Pj4gMVxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgcmV0dXJuIHV0ZjhUb0J5dGVzKHN0cmluZykubGVuZ3RoIC8vIGFzc3VtZSB1dGY4XG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5CdWZmZXIuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGhcblxuZnVuY3Rpb24gc2xvd1RvU3RyaW5nIChlbmNvZGluZywgc3RhcnQsIGVuZCkge1xuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuXG4gIC8vIE5vIG5lZWQgdG8gdmVyaWZ5IHRoYXQgXCJ0aGlzLmxlbmd0aCA8PSBNQVhfVUlOVDMyXCIgc2luY2UgaXQncyBhIHJlYWQtb25seVxuICAvLyBwcm9wZXJ0eSBvZiBhIHR5cGVkIGFycmF5LlxuXG4gIC8vIFRoaXMgYmVoYXZlcyBuZWl0aGVyIGxpa2UgU3RyaW5nIG5vciBVaW50OEFycmF5IGluIHRoYXQgd2Ugc2V0IHN0YXJ0L2VuZFxuICAvLyB0byB0aGVpciB1cHBlci9sb3dlciBib3VuZHMgaWYgdGhlIHZhbHVlIHBhc3NlZCBpcyBvdXQgb2YgcmFuZ2UuXG4gIC8vIHVuZGVmaW5lZCBpcyBoYW5kbGVkIHNwZWNpYWxseSBhcyBwZXIgRUNNQS0yNjIgNnRoIEVkaXRpb24sXG4gIC8vIFNlY3Rpb24gMTMuMy4zLjcgUnVudGltZSBTZW1hbnRpY3M6IEtleWVkQmluZGluZ0luaXRpYWxpemF0aW9uLlxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCB8fCBzdGFydCA8IDApIHtcbiAgICBzdGFydCA9IDBcbiAgfVxuICAvLyBSZXR1cm4gZWFybHkgaWYgc3RhcnQgPiB0aGlzLmxlbmd0aC4gRG9uZSBoZXJlIHRvIHByZXZlbnQgcG90ZW50aWFsIHVpbnQzMlxuICAvLyBjb2VyY2lvbiBmYWlsIGJlbG93LlxuICBpZiAoc3RhcnQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkIHx8IGVuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChlbmQgPD0gMCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgLy8gRm9yY2UgY29lcnNpb24gdG8gdWludDMyLiBUaGlzIHdpbGwgYWxzbyBjb2VyY2UgZmFsc2V5L05hTiB2YWx1ZXMgdG8gMC5cbiAgZW5kID4+Pj0gMFxuICBzdGFydCA+Pj49IDBcblxuICBpZiAoZW5kIDw9IHN0YXJ0KSB7XG4gICAgcmV0dXJuICcnXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0U2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHV0ZjE2bGVTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoZW5jb2RpbmcgKyAnJykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuLy8gVGhlIHByb3BlcnR5IGlzIHVzZWQgYnkgYEJ1ZmZlci5pc0J1ZmZlcmAgYW5kIGBpcy1idWZmZXJgIChpbiBTYWZhcmkgNS03KSB0byBkZXRlY3Rcbi8vIEJ1ZmZlciBpbnN0YW5jZXMuXG5CdWZmZXIucHJvdG90eXBlLl9pc0J1ZmZlciA9IHRydWVcblxuZnVuY3Rpb24gc3dhcCAoYiwgbiwgbSkge1xuICB2YXIgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDIgIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDE2LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDIpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyAxKVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDMyID0gZnVuY3Rpb24gc3dhcDMyICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSA0ICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzMi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSA0KSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMylcbiAgICBzd2FwKHRoaXMsIGkgKyAxLCBpICsgMilcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXA2NCA9IGZ1bmN0aW9uIHN3YXA2NCAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoIHwgMFxuICBpZiAobGVuZ3RoID09PSAwKSByZXR1cm4gJydcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB1dGY4U2xpY2UodGhpcywgMCwgbGVuZ3RoKVxuICByZXR1cm4gc2xvd1RvU3RyaW5nLmFwcGx5KHRoaXMsIGFyZ3VtZW50cylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5lcXVhbHMgPSBmdW5jdGlvbiBlcXVhbHMgKGIpIHtcbiAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoYikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXInKVxuICBpZiAodGhpcyA9PT0gYikgcmV0dXJuIHRydWVcbiAgcmV0dXJuIEJ1ZmZlci5jb21wYXJlKHRoaXMsIGIpID09PSAwXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5zcGVjdCA9IGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICB2YXIgc3RyID0gJydcbiAgdmFyIG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIHZhciB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICB2YXIgeSA9IGVuZCAtIHN0YXJ0XG4gIHZhciBsZW4gPSBNYXRoLm1pbih4LCB5KVxuXG4gIHZhciB0aGlzQ29weSA9IHRoaXMuc2xpY2UodGhpc1N0YXJ0LCB0aGlzRW5kKVxuICB2YXIgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgIC8vIENvZXJjZSB0byBOdW1iZXIuXG4gIGlmIChpc05hTihieXRlT2Zmc2V0KSkge1xuICAgIC8vIGJ5dGVPZmZzZXQ6IGl0IGl0J3MgdW5kZWZpbmVkLCBudWxsLCBOYU4sIFwiZm9vXCIsIGV0Yywgc2VhcmNoIHdob2xlIGJ1ZmZlclxuICAgIGJ5dGVPZmZzZXQgPSBkaXIgPyAwIDogKGJ1ZmZlci5sZW5ndGggLSAxKVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIGJ5dGVPZmZzZXQ6IG5lZ2F0aXZlIG9mZnNldHMgc3RhcnQgZnJvbSB0aGUgZW5kIG9mIHRoZSBidWZmZXJcbiAgaWYgKGJ5dGVPZmZzZXQgPCAwKSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCArIGJ5dGVPZmZzZXRcbiAgaWYgKGJ5dGVPZmZzZXQgPj0gYnVmZmVyLmxlbmd0aCkge1xuICAgIGlmIChkaXIpIHJldHVybiAtMVxuICAgIGVsc2UgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggLSAxXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IDApIHtcbiAgICBpZiAoZGlyKSBieXRlT2Zmc2V0ID0gMFxuICAgIGVsc2UgcmV0dXJuIC0xXG4gIH1cblxuICAvLyBOb3JtYWxpemUgdmFsXG4gIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xuICAgIHZhbCA9IEJ1ZmZlci5mcm9tKHZhbCwgZW5jb2RpbmcpXG4gIH1cblxuICAvLyBGaW5hbGx5LCBzZWFyY2ggZWl0aGVyIGluZGV4T2YgKGlmIGRpciBpcyB0cnVlKSBvciBsYXN0SW5kZXhPZlxuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHZhbCkpIHtcbiAgICAvLyBTcGVjaWFsIGNhc2U6IGxvb2tpbmcgZm9yIGVtcHR5IHN0cmluZy9idWZmZXIgYWx3YXlzIGZhaWxzXG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiAtMVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKVxuICB9IGVsc2UgaWYgKHR5cGVvZiB2YWwgPT09ICdudW1iZXInKSB7XG4gICAgdmFsID0gdmFsICYgMHhGRiAvLyBTZWFyY2ggZm9yIGEgYnl0ZSB2YWx1ZSBbMC0yNTVdXG4gICAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmXG4gICAgICAgIHR5cGVvZiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBpZiAoZGlyKSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gVWludDhBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5SW5kZXhPZihidWZmZXIsIFsgdmFsIF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIHZhciBpbmRleFNpemUgPSAxXG4gIHZhciBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIHZhciB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIHZhciBpXG4gIGlmIChkaXIpIHtcbiAgICB2YXIgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICB2YXIgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIHZhciByZW1haW5pbmcgPSBidWYubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmICghbGVuZ3RoKSB7XG4gICAgbGVuZ3RoID0gcmVtYWluaW5nXG4gIH0gZWxzZSB7XG4gICAgbGVuZ3RoID0gTnVtYmVyKGxlbmd0aClcbiAgICBpZiAobGVuZ3RoID4gcmVtYWluaW5nKSB7XG4gICAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgICB9XG4gIH1cblxuICAvLyBtdXN0IGJlIGFuIGV2ZW4gbnVtYmVyIG9mIGRpZ2l0c1xuICB2YXIgc3RyTGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAoc3RyTGVuICUgMiAhPT0gMCkgdGhyb3cgbmV3IFR5cGVFcnJvcignSW52YWxpZCBoZXggc3RyaW5nJylcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgdmFyIHBhcnNlZCA9IHBhcnNlSW50KHN0cmluZy5zdWJzdHIoaSAqIDIsIDIpLCAxNilcbiAgICBpZiAoaXNOYU4ocGFyc2VkKSkgcmV0dXJuIGlcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSBwYXJzZWRcbiAgfVxuICByZXR1cm4gaVxufVxuXG5mdW5jdGlvbiB1dGY4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGY4VG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBhc2NpaVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYXNjaWlUb0J5dGVzKHN0cmluZyksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGxhdGluMVdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGFzY2lpV3JpdGUoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgICBpZiAoaXNGaW5pdGUobGVuZ3RoKSkge1xuICAgICAgbGVuZ3RoID0gbGVuZ3RoIHwgMFxuICAgICAgaWYgKGVuY29kaW5nID09PSB1bmRlZmluZWQpIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgfSBlbHNlIHtcbiAgICAgIGVuY29kaW5nID0gbGVuZ3RoXG4gICAgICBsZW5ndGggPSB1bmRlZmluZWRcbiAgICB9XG4gIC8vIGxlZ2FjeSB3cml0ZShzdHJpbmcsIGVuY29kaW5nLCBvZmZzZXQsIGxlbmd0aCkgLSByZW1vdmUgaW4gdjAuMTNcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQnVmZmVyLndyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldFssIGxlbmd0aF0pIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQnXG4gICAgKVxuICB9XG5cbiAgdmFyIHJlbWFpbmluZyA9IHRoaXMubGVuZ3RoIC0gb2Zmc2V0XG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCB8fCBsZW5ndGggPiByZW1haW5pbmcpIGxlbmd0aCA9IHJlbWFpbmluZ1xuXG4gIGlmICgoc3RyaW5nLmxlbmd0aCA+IDAgJiYgKGxlbmd0aCA8IDAgfHwgb2Zmc2V0IDwgMCkpIHx8IG9mZnNldCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gd3JpdGUgb3V0c2lkZSBidWZmZXIgYm91bmRzJylcbiAgfVxuXG4gIGlmICghZW5jb2RpbmcpIGVuY29kaW5nID0gJ3V0ZjgnXG5cbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcbiAgZm9yICg7Oykge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgLy8gV2FybmluZzogbWF4TGVuZ3RoIG5vdCB0YWtlbiBpbnRvIGFjY291bnQgaW4gYmFzZTY0V3JpdGVcbiAgICAgICAgcmV0dXJuIGJhc2U2NFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1Y3MyV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKCcnICsgZW5jb2RpbmcpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OICgpIHtcbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnQnVmZmVyJyxcbiAgICBkYXRhOiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCh0aGlzLl9hcnIgfHwgdGhpcywgMClcbiAgfVxufVxuXG5mdW5jdGlvbiBiYXNlNjRTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGlmIChzdGFydCA9PT0gMCAmJiBlbmQgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYuc2xpY2Uoc3RhcnQsIGVuZCkpXG4gIH1cbn1cblxuZnVuY3Rpb24gdXRmOFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuICB2YXIgcmVzID0gW11cblxuICB2YXIgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgdmFyIGZpcnN0Qnl0ZSA9IGJ1ZltpXVxuICAgIHZhciBjb2RlUG9pbnQgPSBudWxsXG4gICAgdmFyIGJ5dGVzUGVyU2VxdWVuY2UgPSAoZmlyc3RCeXRlID4gMHhFRikgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKSA/IDNcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpID8gMlxuICAgICAgOiAxXG5cbiAgICBpZiAoaSArIGJ5dGVzUGVyU2VxdWVuY2UgPD0gZW5kKSB7XG4gICAgICB2YXIgc2Vjb25kQnl0ZSwgdGhpcmRCeXRlLCBmb3VydGhCeXRlLCB0ZW1wQ29kZVBvaW50XG5cbiAgICAgIHN3aXRjaCAoYnl0ZXNQZXJTZXF1ZW5jZSkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgaWYgKGZpcnN0Qnl0ZSA8IDB4ODApIHtcbiAgICAgICAgICAgIGNvZGVQb2ludCA9IGZpcnN0Qnl0ZVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweDFGKSA8PCAweDYgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4N0YpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgaWYgKChzZWNvbmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKHRoaXJkQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHhDIHwgKHNlY29uZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAodGhpcmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3RkYgJiYgKHRlbXBDb2RlUG9pbnQgPCAweEQ4MDAgfHwgdGVtcENvZGVQb2ludCA+IDB4REZGRikpIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgc2Vjb25kQnl0ZSA9IGJ1ZltpICsgMV1cbiAgICAgICAgICB0aGlyZEJ5dGUgPSBidWZbaSArIDJdXG4gICAgICAgICAgZm91cnRoQnl0ZSA9IGJ1ZltpICsgM11cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODAgJiYgKGZvdXJ0aEJ5dGUgJiAweEMwKSA9PT0gMHg4MCkge1xuICAgICAgICAgICAgdGVtcENvZGVQb2ludCA9IChmaXJzdEJ5dGUgJiAweEYpIDw8IDB4MTIgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4QyB8ICh0aGlyZEJ5dGUgJiAweDNGKSA8PCAweDYgfCAoZm91cnRoQnl0ZSAmIDB4M0YpXG4gICAgICAgICAgICBpZiAodGVtcENvZGVQb2ludCA+IDB4RkZGRiAmJiB0ZW1wQ29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgICAgICAgICAgY29kZVBvaW50ID0gdGVtcENvZGVQb2ludFxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY29kZVBvaW50ID09PSBudWxsKSB7XG4gICAgICAvLyB3ZSBkaWQgbm90IGdlbmVyYXRlIGEgdmFsaWQgY29kZVBvaW50IHNvIGluc2VydCBhXG4gICAgICAvLyByZXBsYWNlbWVudCBjaGFyIChVK0ZGRkQpIGFuZCBhZHZhbmNlIG9ubHkgMSBieXRlXG4gICAgICBjb2RlUG9pbnQgPSAweEZGRkRcbiAgICAgIGJ5dGVzUGVyU2VxdWVuY2UgPSAxXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPiAweEZGRkYpIHtcbiAgICAgIC8vIGVuY29kZSB0byB1dGYxNiAoc3Vycm9nYXRlIHBhaXIgZGFuY2UpXG4gICAgICBjb2RlUG9pbnQgLT0gMHgxMDAwMFxuICAgICAgcmVzLnB1c2goY29kZVBvaW50ID4+PiAxMCAmIDB4M0ZGIHwgMHhEODAwKVxuICAgICAgY29kZVBvaW50ID0gMHhEQzAwIHwgY29kZVBvaW50ICYgMHgzRkZcbiAgICB9XG5cbiAgICByZXMucHVzaChjb2RlUG9pbnQpXG4gICAgaSArPSBieXRlc1BlclNlcXVlbmNlXG4gIH1cblxuICByZXR1cm4gZGVjb2RlQ29kZVBvaW50c0FycmF5KHJlcylcbn1cblxuLy8gQmFzZWQgb24gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjI3NDcyNzIvNjgwNzQyLCB0aGUgYnJvd3NlciB3aXRoXG4vLyB0aGUgbG93ZXN0IGxpbWl0IGlzIENocm9tZSwgd2l0aCAweDEwMDAwIGFyZ3MuXG4vLyBXZSBnbyAxIG1hZ25pdHVkZSBsZXNzLCBmb3Igc2FmZXR5XG52YXIgTUFYX0FSR1VNRU5UU19MRU5HVEggPSAweDEwMDBcblxuZnVuY3Rpb24gZGVjb2RlQ29kZVBvaW50c0FycmF5IChjb2RlUG9pbnRzKSB7XG4gIHZhciBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIHZhciByZXMgPSAnJ1xuICB2YXIgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSBidWYubGVuZ3RoXG5cbiAgaWYgKCFzdGFydCB8fCBzdGFydCA8IDApIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCB8fCBlbmQgPCAwIHx8IGVuZCA+IGxlbikgZW5kID0gbGVuXG5cbiAgdmFyIG91dCA9ICcnXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgb3V0ICs9IHRvSGV4KGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gb3V0XG59XG5cbmZ1bmN0aW9uIHV0ZjE2bGVTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIHZhciBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICB2YXIgcmVzID0gJydcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgYnl0ZXNbaSArIDFdICogMjU2KVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zbGljZSA9IGZ1bmN0aW9uIHNsaWNlIChzdGFydCwgZW5kKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBzdGFydCA9IH5+c3RhcnRcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB+fmVuZFxuXG4gIGlmIChzdGFydCA8IDApIHtcbiAgICBzdGFydCArPSBsZW5cbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDBcbiAgfSBlbHNlIGlmIChzdGFydCA+IGxlbikge1xuICAgIHN0YXJ0ID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5cbiAgICBpZiAoZW5kIDwgMCkgZW5kID0gMFxuICB9IGVsc2UgaWYgKGVuZCA+IGxlbikge1xuICAgIGVuZCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIHZhciBuZXdCdWZcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgbmV3QnVmID0gdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKVxuICAgIG5ld0J1Zi5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgdmFyIHNsaWNlTGVuID0gZW5kIC0gc3RhcnRcbiAgICBuZXdCdWYgPSBuZXcgQnVmZmVyKHNsaWNlTGVuLCB1bmRlZmluZWQpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzbGljZUxlbjsgKytpKSB7XG4gICAgICBuZXdCdWZbaV0gPSB0aGlzW2kgKyBzdGFydF1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3QnVmXG59XG5cbi8qXG4gKiBOZWVkIHRvIG1ha2Ugc3VyZSB0aGF0IGJ1ZmZlciBpc24ndCB0cnlpbmcgdG8gd3JpdGUgb3V0IG9mIGJvdW5kcy5cbiAqL1xuZnVuY3Rpb24gY2hlY2tPZmZzZXQgKG9mZnNldCwgZXh0LCBsZW5ndGgpIHtcbiAgaWYgKChvZmZzZXQgJSAxKSAhPT0gMCB8fCBvZmZzZXQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignb2Zmc2V0IGlzIG5vdCB1aW50JylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGxlbmd0aCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1RyeWluZyB0byBhY2Nlc3MgYmV5b25kIGJ1ZmZlciBsZW5ndGgnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50TEUgPSBmdW5jdGlvbiByZWFkVUludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50QkUgPSBmdW5jdGlvbiByZWFkVUludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuICB9XG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1ieXRlTGVuZ3RoXVxuICB2YXIgbXVsID0gMVxuICB3aGlsZSAoYnl0ZUxlbmd0aCA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQ4ID0gZnVuY3Rpb24gcmVhZFVJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQxNkJFID0gZnVuY3Rpb24gcmVhZFVJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDgpIHwgdGhpc1tvZmZzZXQgKyAxXVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSAqIDB4MTAwMDAwMCkgK1xuICAgICgodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICB0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRMRSA9IGZ1bmN0aW9uIHJlYWRJbnRMRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF1cbiAgdmFyIG11bCA9IDFcbiAgdmFyIGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoIHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIHZhciBpID0gYnl0ZUxlbmd0aFxuICB2YXIgbXVsID0gMVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWldXG4gIHdoaWxlIChpID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0taV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQ4ID0gZnVuY3Rpb24gcmVhZEludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgaWYgKCEodGhpc1tvZmZzZXRdICYgMHg4MCkpIHJldHVybiAodGhpc1tvZmZzZXRdKVxuICByZXR1cm4gKCgweGZmIC0gdGhpc1tvZmZzZXRdICsgMSkgKiAtMSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDE2QkUgPSBmdW5jdGlvbiByZWFkSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAxXSB8ICh0aGlzW29mZnNldF0gPDwgOClcbiAgcmV0dXJuICh2YWwgJiAweDgwMDApID8gdmFsIHwgMHhGRkZGMDAwMCA6IHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkxFID0gZnVuY3Rpb24gcmVhZEludDMyTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSA8PCAyNCkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDNdKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdEJFID0gZnVuY3Rpb24gcmVhZEZsb2F0QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRG91YmxlTEUgPSBmdW5jdGlvbiByZWFkRG91YmxlTEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDUyLCA4KVxufVxuXG5mdW5jdGlvbiBjaGVja0ludCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gQnVmZmVyLmlzQnVmZmVyKHZhbClcbiAgICAgID8gdmFsXG4gICAgICA6IHV0ZjhUb0J5dGVzKG5ldyBCdWZmZXIodmFsLCBlbmNvZGluZykudG9TdHJpbmcoKSlcbiAgICB2YXIgbGVuID0gYnl0ZXMubGVuZ3RoXG4gICAgZm9yIChpID0gMDsgaSA8IGVuZCAtIHN0YXJ0OyArK2kpIHtcbiAgICAgIHRoaXNbaSArIHN0YXJ0XSA9IGJ5dGVzW2kgJSBsZW5dXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXNcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG52YXIgSU5WQUxJRF9CQVNFNjRfUkUgPSAvW14rXFwvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHN0cmlwcyBvdXQgaW52YWxpZCBjaGFyYWN0ZXJzIGxpa2UgXFxuIGFuZCBcXHQgZnJvbSB0aGUgc3RyaW5nLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgc3RyID0gc3RyaW5ndHJpbShzdHIpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHN0cmluZ3RyaW0gKHN0cikge1xuICBpZiAoc3RyLnRyaW0pIHJldHVybiBzdHIudHJpbSgpXG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyt8XFxzKyQvZywgJycpXG59XG5cbmZ1bmN0aW9uIHRvSGV4IChuKSB7XG4gIGlmIChuIDwgMTYpIHJldHVybiAnMCcgKyBuLnRvU3RyaW5nKDE2KVxuICByZXR1cm4gbi50b1N0cmluZygxNilcbn1cblxuZnVuY3Rpb24gdXRmOFRvQnl0ZXMgKHN0cmluZywgdW5pdHMpIHtcbiAgdW5pdHMgPSB1bml0cyB8fCBJbmZpbml0eVxuICB2YXIgY29kZVBvaW50XG4gIHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIHZhciBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICB2YXIgYnl0ZXMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb2RlUG9pbnQgPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuXG4gICAgLy8gaXMgc3Vycm9nYXRlIGNvbXBvbmVudFxuICAgIGlmIChjb2RlUG9pbnQgPiAweEQ3RkYgJiYgY29kZVBvaW50IDwgMHhFMDAwKSB7XG4gICAgICAvLyBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCFsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAgIC8vIG5vIGxlYWQgeWV0XG4gICAgICAgIGlmIChjb2RlUG9pbnQgPiAweERCRkYpIHtcbiAgICAgICAgICAvLyB1bmV4cGVjdGVkIHRyYWlsXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmIChpICsgMSA9PT0gbGVuZ3RoKSB7XG4gICAgICAgICAgLy8gdW5wYWlyZWQgbGVhZFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH1cblxuICAgICAgICAvLyB2YWxpZCBsZWFkXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyAyIGxlYWRzIGluIGEgcm93XG4gICAgICBpZiAoY29kZVBvaW50IDwgMHhEQzAwKSB7XG4gICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIHZhbGlkIHN1cnJvZ2F0ZSBwYWlyXG4gICAgICBjb2RlUG9pbnQgPSAobGVhZFN1cnJvZ2F0ZSAtIDB4RDgwMCA8PCAxMCB8IGNvZGVQb2ludCAtIDB4REMwMCkgKyAweDEwMDAwXG4gICAgfSBlbHNlIGlmIChsZWFkU3Vycm9nYXRlKSB7XG4gICAgICAvLyB2YWxpZCBibXAgY2hhciwgYnV0IGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICB9XG5cbiAgICBsZWFkU3Vycm9nYXRlID0gbnVsbFxuXG4gICAgLy8gZW5jb2RlIHV0ZjhcbiAgICBpZiAoY29kZVBvaW50IDwgMHg4MCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAxKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKGNvZGVQb2ludClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4ODAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgfCAweEMwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAzKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDIHwgMHhFMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHgxMTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gNCkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4MTIgfCAweEYwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHhDICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNvZGUgcG9pbnQnKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBieXRlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVRvQnl0ZXMgKHN0cikge1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICAvLyBOb2RlJ3MgY29kZSBzZWVtcyB0byBiZSBkb2luZyB0aGlzIGFuZCBub3QgJiAweDdGLi5cbiAgICBieXRlQXJyYXkucHVzaChzdHIuY2hhckNvZGVBdChpKSAmIDB4RkYpXG4gIH1cbiAgcmV0dXJuIGJ5dGVBcnJheVxufVxuXG5mdW5jdGlvbiB1dGYxNmxlVG9CeXRlcyAoc3RyLCB1bml0cykge1xuICB2YXIgYywgaGksIGxvXG4gIHZhciBieXRlQXJyYXkgPSBbXVxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cbiIsIi8qXG4gKiBDb3B5cmlnaHQgMjAwOS0yMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRS50eHQgb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cbmV4cG9ydHMuU291cmNlTWFwR2VuZXJhdG9yID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW1hcC1nZW5lcmF0b3InKS5Tb3VyY2VNYXBHZW5lcmF0b3I7XG5leHBvcnRzLlNvdXJjZU1hcENvbnN1bWVyID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW1hcC1jb25zdW1lcicpLlNvdXJjZU1hcENvbnN1bWVyO1xuZXhwb3J0cy5Tb3VyY2VOb2RlID0gcmVxdWlyZSgnLi9saWIvc291cmNlLW5vZGUnKS5Tb3VyY2VOb2RlO1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgYmFzZTY0VkxRID0gcmVxdWlyZSgnLi9iYXNlNjQtdmxxJyk7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIEFycmF5U2V0ID0gcmVxdWlyZSgnLi9hcnJheS1zZXQnKS5BcnJheVNldDtcbnZhciBNYXBwaW5nTGlzdCA9IHJlcXVpcmUoJy4vbWFwcGluZy1saXN0JykuTWFwcGluZ0xpc3Q7XG5cbi8qKlxuICogQW4gaW5zdGFuY2Ugb2YgdGhlIFNvdXJjZU1hcEdlbmVyYXRvciByZXByZXNlbnRzIGEgc291cmNlIG1hcCB3aGljaCBpc1xuICogYmVpbmcgYnVpbHQgaW5jcmVtZW50YWxseS4gWW91IG1heSBwYXNzIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmdcbiAqIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGZpbGU6IFRoZSBmaWxlbmFtZSBvZiB0aGUgZ2VuZXJhdGVkIHNvdXJjZS5cbiAqICAgLSBzb3VyY2VSb290OiBBIHJvb3QgZm9yIGFsbCByZWxhdGl2ZSBVUkxzIGluIHRoaXMgc291cmNlIG1hcC5cbiAqL1xuZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yKGFBcmdzKSB7XG4gIGlmICghYUFyZ3MpIHtcbiAgICBhQXJncyA9IHt9O1xuICB9XG4gIHRoaXMuX2ZpbGUgPSB1dGlsLmdldEFyZyhhQXJncywgJ2ZpbGUnLCBudWxsKTtcbiAgdGhpcy5fc291cmNlUm9vdCA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlUm9vdCcsIG51bGwpO1xuICB0aGlzLl9za2lwVmFsaWRhdGlvbiA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc2tpcFZhbGlkYXRpb24nLCBmYWxzZSk7XG4gIHRoaXMuX3NvdXJjZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgdGhpcy5fbmFtZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgdGhpcy5fbWFwcGluZ3MgPSBuZXcgTWFwcGluZ0xpc3QoKTtcbiAgdGhpcy5fc291cmNlc0NvbnRlbnRzID0gbnVsbDtcbn1cblxuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fdmVyc2lvbiA9IDM7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBTb3VyY2VNYXBHZW5lcmF0b3IgYmFzZWQgb24gYSBTb3VyY2VNYXBDb25zdW1lclxuICpcbiAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIFNvdXJjZU1hcC5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLmZyb21Tb3VyY2VNYXAgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfZnJvbVNvdXJjZU1hcChhU291cmNlTWFwQ29uc3VtZXIpIHtcbiAgICB2YXIgc291cmNlUm9vdCA9IGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VSb290O1xuICAgIHZhciBnZW5lcmF0b3IgPSBuZXcgU291cmNlTWFwR2VuZXJhdG9yKHtcbiAgICAgIGZpbGU6IGFTb3VyY2VNYXBDb25zdW1lci5maWxlLFxuICAgICAgc291cmNlUm9vdDogc291cmNlUm9vdFxuICAgIH0pO1xuICAgIGFTb3VyY2VNYXBDb25zdW1lci5lYWNoTWFwcGluZyhmdW5jdGlvbiAobWFwcGluZykge1xuICAgICAgdmFyIG5ld01hcHBpbmcgPSB7XG4gICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgIGxpbmU6IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSxcbiAgICAgICAgICBjb2x1bW46IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uXG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSAhPSBudWxsKSB7XG4gICAgICAgIG5ld01hcHBpbmcuc291cmNlID0gbWFwcGluZy5zb3VyY2U7XG4gICAgICAgIGlmIChzb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgICAgICBuZXdNYXBwaW5nLnNvdXJjZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgbmV3TWFwcGluZy5zb3VyY2UpO1xuICAgICAgICB9XG5cbiAgICAgICAgbmV3TWFwcGluZy5vcmlnaW5hbCA9IHtcbiAgICAgICAgICBsaW5lOiBtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgICBjb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW5cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobWFwcGluZy5uYW1lICE9IG51bGwpIHtcbiAgICAgICAgICBuZXdNYXBwaW5nLm5hbWUgPSBtYXBwaW5nLm5hbWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZ2VuZXJhdG9yLmFkZE1hcHBpbmcobmV3TWFwcGluZyk7XG4gICAgfSk7XG4gICAgYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZXMuZm9yRWFjaChmdW5jdGlvbiAoc291cmNlRmlsZSkge1xuICAgICAgdmFyIHNvdXJjZVJlbGF0aXZlID0gc291cmNlRmlsZTtcbiAgICAgIGlmIChzb3VyY2VSb290ICE9PSBudWxsKSB7XG4gICAgICAgIHNvdXJjZVJlbGF0aXZlID0gdXRpbC5yZWxhdGl2ZShzb3VyY2VSb290LCBzb3VyY2VGaWxlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFnZW5lcmF0b3IuX3NvdXJjZXMuaGFzKHNvdXJjZVJlbGF0aXZlKSkge1xuICAgICAgICBnZW5lcmF0b3IuX3NvdXJjZXMuYWRkKHNvdXJjZVJlbGF0aXZlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGNvbnRlbnQgPSBhU291cmNlTWFwQ29uc3VtZXIuc291cmNlQ29udGVudEZvcihzb3VyY2VGaWxlKTtcbiAgICAgIGlmIChjb250ZW50ICE9IG51bGwpIHtcbiAgICAgICAgZ2VuZXJhdG9yLnNldFNvdXJjZUNvbnRlbnQoc291cmNlRmlsZSwgY29udGVudCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcbiAgfTtcblxuLyoqXG4gKiBBZGQgYSBzaW5nbGUgbWFwcGluZyBmcm9tIG9yaWdpbmFsIHNvdXJjZSBsaW5lIGFuZCBjb2x1bW4gdG8gdGhlIGdlbmVyYXRlZFxuICogc291cmNlJ3MgbGluZSBhbmQgY29sdW1uIGZvciB0aGlzIHNvdXJjZSBtYXAgYmVpbmcgY3JlYXRlZC4gVGhlIG1hcHBpbmdcbiAqIG9iamVjdCBzaG91bGQgaGF2ZSB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIGdlbmVyYXRlZDogQW4gb2JqZWN0IHdpdGggdGhlIGdlbmVyYXRlZCBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zLlxuICogICAtIG9yaWdpbmFsOiBBbiBvYmplY3Qgd2l0aCB0aGUgb3JpZ2luYWwgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucy5cbiAqICAgLSBzb3VyY2U6IFRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSAocmVsYXRpdmUgdG8gdGhlIHNvdXJjZVJvb3QpLlxuICogICAtIG5hbWU6IEFuIG9wdGlvbmFsIG9yaWdpbmFsIHRva2VuIG5hbWUgZm9yIHRoaXMgbWFwcGluZy5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5hZGRNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX2FkZE1hcHBpbmcoYUFyZ3MpIHtcbiAgICB2YXIgZ2VuZXJhdGVkID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdnZW5lcmF0ZWQnKTtcbiAgICB2YXIgb3JpZ2luYWwgPSB1dGlsLmdldEFyZyhhQXJncywgJ29yaWdpbmFsJywgbnVsbCk7XG4gICAgdmFyIHNvdXJjZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJywgbnVsbCk7XG4gICAgdmFyIG5hbWUgPSB1dGlsLmdldEFyZyhhQXJncywgJ25hbWUnLCBudWxsKTtcblxuICAgIGlmICghdGhpcy5fc2tpcFZhbGlkYXRpb24pIHtcbiAgICAgIHRoaXMuX3ZhbGlkYXRlTWFwcGluZyhnZW5lcmF0ZWQsIG9yaWdpbmFsLCBzb3VyY2UsIG5hbWUpO1xuICAgIH1cblxuICAgIGlmIChzb3VyY2UgIT0gbnVsbCkge1xuICAgICAgc291cmNlID0gU3RyaW5nKHNvdXJjZSk7XG4gICAgICBpZiAoIXRoaXMuX3NvdXJjZXMuaGFzKHNvdXJjZSkpIHtcbiAgICAgICAgdGhpcy5fc291cmNlcy5hZGQoc291cmNlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobmFtZSAhPSBudWxsKSB7XG4gICAgICBuYW1lID0gU3RyaW5nKG5hbWUpO1xuICAgICAgaWYgKCF0aGlzLl9uYW1lcy5oYXMobmFtZSkpIHtcbiAgICAgICAgdGhpcy5fbmFtZXMuYWRkKG5hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuX21hcHBpbmdzLmFkZCh7XG4gICAgICBnZW5lcmF0ZWRMaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgIGdlbmVyYXRlZENvbHVtbjogZ2VuZXJhdGVkLmNvbHVtbixcbiAgICAgIG9yaWdpbmFsTGluZTogb3JpZ2luYWwgIT0gbnVsbCAmJiBvcmlnaW5hbC5saW5lLFxuICAgICAgb3JpZ2luYWxDb2x1bW46IG9yaWdpbmFsICE9IG51bGwgJiYgb3JpZ2luYWwuY29sdW1uLFxuICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICBuYW1lOiBuYW1lXG4gICAgfSk7XG4gIH07XG5cbi8qKlxuICogU2V0IHRoZSBzb3VyY2UgY29udGVudCBmb3IgYSBzb3VyY2UgZmlsZS5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5zZXRTb3VyY2VDb250ZW50ID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3NldFNvdXJjZUNvbnRlbnQoYVNvdXJjZUZpbGUsIGFTb3VyY2VDb250ZW50KSB7XG4gICAgdmFyIHNvdXJjZSA9IGFTb3VyY2VGaWxlO1xuICAgIGlmICh0aGlzLl9zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIHNvdXJjZSA9IHV0aWwucmVsYXRpdmUodGhpcy5fc291cmNlUm9vdCwgc291cmNlKTtcbiAgICB9XG5cbiAgICBpZiAoYVNvdXJjZUNvbnRlbnQgIT0gbnVsbCkge1xuICAgICAgLy8gQWRkIHRoZSBzb3VyY2UgY29udGVudCB0byB0aGUgX3NvdXJjZXNDb250ZW50cyBtYXAuXG4gICAgICAvLyBDcmVhdGUgYSBuZXcgX3NvdXJjZXNDb250ZW50cyBtYXAgaWYgdGhlIHByb3BlcnR5IGlzIG51bGwuXG4gICAgICBpZiAoIXRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgICB0aGlzLl9zb3VyY2VzQ29udGVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgfVxuICAgICAgdGhpcy5fc291cmNlc0NvbnRlbnRzW3V0aWwudG9TZXRTdHJpbmcoc291cmNlKV0gPSBhU291cmNlQ29udGVudDtcbiAgICB9IGVsc2UgaWYgKHRoaXMuX3NvdXJjZXNDb250ZW50cykge1xuICAgICAgLy8gUmVtb3ZlIHRoZSBzb3VyY2UgZmlsZSBmcm9tIHRoZSBfc291cmNlc0NvbnRlbnRzIG1hcC5cbiAgICAgIC8vIElmIHRoZSBfc291cmNlc0NvbnRlbnRzIG1hcCBpcyBlbXB0eSwgc2V0IHRoZSBwcm9wZXJ0eSB0byBudWxsLlxuICAgICAgZGVsZXRlIHRoaXMuX3NvdXJjZXNDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKHNvdXJjZSldO1xuICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMuX3NvdXJjZXNDb250ZW50cykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuX3NvdXJjZXNDb250ZW50cyA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4vKipcbiAqIEFwcGxpZXMgdGhlIG1hcHBpbmdzIG9mIGEgc3ViLXNvdXJjZS1tYXAgZm9yIGEgc3BlY2lmaWMgc291cmNlIGZpbGUgdG8gdGhlXG4gKiBzb3VyY2UgbWFwIGJlaW5nIGdlbmVyYXRlZC4gRWFjaCBtYXBwaW5nIHRvIHRoZSBzdXBwbGllZCBzb3VyY2UgZmlsZSBpc1xuICogcmV3cml0dGVuIHVzaW5nIHRoZSBzdXBwbGllZCBzb3VyY2UgbWFwLiBOb3RlOiBUaGUgcmVzb2x1dGlvbiBmb3IgdGhlXG4gKiByZXN1bHRpbmcgbWFwcGluZ3MgaXMgdGhlIG1pbmltaXVtIG9mIHRoaXMgbWFwIGFuZCB0aGUgc3VwcGxpZWQgbWFwLlxuICpcbiAqIEBwYXJhbSBhU291cmNlTWFwQ29uc3VtZXIgVGhlIHNvdXJjZSBtYXAgdG8gYmUgYXBwbGllZC5cbiAqIEBwYXJhbSBhU291cmNlRmlsZSBPcHRpb25hbC4gVGhlIGZpbGVuYW1lIG9mIHRoZSBzb3VyY2UgZmlsZS5cbiAqICAgICAgICBJZiBvbWl0dGVkLCBTb3VyY2VNYXBDb25zdW1lcidzIGZpbGUgcHJvcGVydHkgd2lsbCBiZSB1c2VkLlxuICogQHBhcmFtIGFTb3VyY2VNYXBQYXRoIE9wdGlvbmFsLiBUaGUgZGlybmFtZSBvZiB0aGUgcGF0aCB0byB0aGUgc291cmNlIG1hcFxuICogICAgICAgIHRvIGJlIGFwcGxpZWQuIElmIHJlbGF0aXZlLCBpdCBpcyByZWxhdGl2ZSB0byB0aGUgU291cmNlTWFwQ29uc3VtZXIuXG4gKiAgICAgICAgVGhpcyBwYXJhbWV0ZXIgaXMgbmVlZGVkIHdoZW4gdGhlIHR3byBzb3VyY2UgbWFwcyBhcmVuJ3QgaW4gdGhlIHNhbWVcbiAqICAgICAgICBkaXJlY3RvcnksIGFuZCB0aGUgc291cmNlIG1hcCB0byBiZSBhcHBsaWVkIGNvbnRhaW5zIHJlbGF0aXZlIHNvdXJjZVxuICogICAgICAgIHBhdGhzLiBJZiBzbywgdGhvc2UgcmVsYXRpdmUgc291cmNlIHBhdGhzIG5lZWQgdG8gYmUgcmV3cml0dGVuXG4gKiAgICAgICAgcmVsYXRpdmUgdG8gdGhlIFNvdXJjZU1hcEdlbmVyYXRvci5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5hcHBseVNvdXJjZU1hcCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9hcHBseVNvdXJjZU1hcChhU291cmNlTWFwQ29uc3VtZXIsIGFTb3VyY2VGaWxlLCBhU291cmNlTWFwUGF0aCkge1xuICAgIHZhciBzb3VyY2VGaWxlID0gYVNvdXJjZUZpbGU7XG4gICAgLy8gSWYgYVNvdXJjZUZpbGUgaXMgb21pdHRlZCwgd2Ugd2lsbCB1c2UgdGhlIGZpbGUgcHJvcGVydHkgb2YgdGhlIFNvdXJjZU1hcFxuICAgIGlmIChhU291cmNlRmlsZSA9PSBudWxsKSB7XG4gICAgICBpZiAoYVNvdXJjZU1hcENvbnN1bWVyLmZpbGUgPT0gbnVsbCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ1NvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUuYXBwbHlTb3VyY2VNYXAgcmVxdWlyZXMgZWl0aGVyIGFuIGV4cGxpY2l0IHNvdXJjZSBmaWxlLCAnICtcbiAgICAgICAgICAnb3IgdGhlIHNvdXJjZSBtYXBcXCdzIFwiZmlsZVwiIHByb3BlcnR5LiBCb3RoIHdlcmUgb21pdHRlZC4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBzb3VyY2VGaWxlID0gYVNvdXJjZU1hcENvbnN1bWVyLmZpbGU7XG4gICAgfVxuICAgIHZhciBzb3VyY2VSb290ID0gdGhpcy5fc291cmNlUm9vdDtcbiAgICAvLyBNYWtlIFwic291cmNlRmlsZVwiIHJlbGF0aXZlIGlmIGFuIGFic29sdXRlIFVybCBpcyBwYXNzZWQuXG4gICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgc291cmNlRmlsZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc291cmNlRmlsZSk7XG4gICAgfVxuICAgIC8vIEFwcGx5aW5nIHRoZSBTb3VyY2VNYXAgY2FuIGFkZCBhbmQgcmVtb3ZlIGl0ZW1zIGZyb20gdGhlIHNvdXJjZXMgYW5kXG4gICAgLy8gdGhlIG5hbWVzIGFycmF5LlxuICAgIHZhciBuZXdTb3VyY2VzID0gbmV3IEFycmF5U2V0KCk7XG4gICAgdmFyIG5ld05hbWVzID0gbmV3IEFycmF5U2V0KCk7XG5cbiAgICAvLyBGaW5kIG1hcHBpbmdzIGZvciB0aGUgXCJzb3VyY2VGaWxlXCJcbiAgICB0aGlzLl9tYXBwaW5ncy51bnNvcnRlZEZvckVhY2goZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIGlmIChtYXBwaW5nLnNvdXJjZSA9PT0gc291cmNlRmlsZSAmJiBtYXBwaW5nLm9yaWdpbmFsTGluZSAhPSBudWxsKSB7XG4gICAgICAgIC8vIENoZWNrIGlmIGl0IGNhbiBiZSBtYXBwZWQgYnkgdGhlIHNvdXJjZSBtYXAsIHRoZW4gdXBkYXRlIHRoZSBtYXBwaW5nLlxuICAgICAgICB2YXIgb3JpZ2luYWwgPSBhU291cmNlTWFwQ29uc3VtZXIub3JpZ2luYWxQb3NpdGlvbkZvcih7XG4gICAgICAgICAgbGluZTogbWFwcGluZy5vcmlnaW5hbExpbmUsXG4gICAgICAgICAgY29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAob3JpZ2luYWwuc291cmNlICE9IG51bGwpIHtcbiAgICAgICAgICAvLyBDb3B5IG1hcHBpbmdcbiAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IG9yaWdpbmFsLnNvdXJjZTtcbiAgICAgICAgICBpZiAoYVNvdXJjZU1hcFBhdGggIT0gbnVsbCkge1xuICAgICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSB1dGlsLmpvaW4oYVNvdXJjZU1hcFBhdGgsIG1hcHBpbmcuc291cmNlKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXBwaW5nLnNvdXJjZSA9IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgbWFwcGluZy5zb3VyY2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSA9IG9yaWdpbmFsLmxpbmU7XG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbENvbHVtbiA9IG9yaWdpbmFsLmNvbHVtbjtcbiAgICAgICAgICBpZiAob3JpZ2luYWwubmFtZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBtYXBwaW5nLm5hbWUgPSBvcmlnaW5hbC5uYW1lO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB2YXIgc291cmNlID0gbWFwcGluZy5zb3VyY2U7XG4gICAgICBpZiAoc291cmNlICE9IG51bGwgJiYgIW5ld1NvdXJjZXMuaGFzKHNvdXJjZSkpIHtcbiAgICAgICAgbmV3U291cmNlcy5hZGQoc291cmNlKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG5hbWUgPSBtYXBwaW5nLm5hbWU7XG4gICAgICBpZiAobmFtZSAhPSBudWxsICYmICFuZXdOYW1lcy5oYXMobmFtZSkpIHtcbiAgICAgICAgbmV3TmFtZXMuYWRkKG5hbWUpO1xuICAgICAgfVxuXG4gICAgfSwgdGhpcyk7XG4gICAgdGhpcy5fc291cmNlcyA9IG5ld1NvdXJjZXM7XG4gICAgdGhpcy5fbmFtZXMgPSBuZXdOYW1lcztcblxuICAgIC8vIENvcHkgc291cmNlc0NvbnRlbnRzIG9mIGFwcGxpZWQgbWFwLlxuICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUZpbGUpIHtcbiAgICAgIHZhciBjb250ZW50ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3Ioc291cmNlRmlsZSk7XG4gICAgICBpZiAoY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChhU291cmNlTWFwUGF0aCAhPSBudWxsKSB7XG4gICAgICAgICAgc291cmNlRmlsZSA9IHV0aWwuam9pbihhU291cmNlTWFwUGF0aCwgc291cmNlRmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICAgIHNvdXJjZUZpbGUgPSB1dGlsLnJlbGF0aXZlKHNvdXJjZVJvb3QsIHNvdXJjZUZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBjb250ZW50KTtcbiAgICAgIH1cbiAgICB9LCB0aGlzKTtcbiAgfTtcblxuLyoqXG4gKiBBIG1hcHBpbmcgY2FuIGhhdmUgb25lIG9mIHRoZSB0aHJlZSBsZXZlbHMgb2YgZGF0YTpcbiAqXG4gKiAgIDEuIEp1c3QgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbi5cbiAqICAgMi4gVGhlIEdlbmVyYXRlZCBwb3NpdGlvbiwgb3JpZ2luYWwgcG9zaXRpb24sIGFuZCBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgIDMuIEdlbmVyYXRlZCBhbmQgb3JpZ2luYWwgcG9zaXRpb24sIG9yaWdpbmFsIHNvdXJjZSwgYXMgd2VsbCBhcyBhIG5hbWVcbiAqICAgICAgdG9rZW4uXG4gKlxuICogVG8gbWFpbnRhaW4gY29uc2lzdGVuY3ksIHdlIHZhbGlkYXRlIHRoYXQgYW55IG5ldyBtYXBwaW5nIGJlaW5nIGFkZGVkIGZhbGxzXG4gKiBpbiB0byBvbmUgb2YgdGhlc2UgY2F0ZWdvcmllcy5cbiAqL1xuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fdmFsaWRhdGVNYXBwaW5nID1cbiAgZnVuY3Rpb24gU291cmNlTWFwR2VuZXJhdG9yX3ZhbGlkYXRlTWFwcGluZyhhR2VuZXJhdGVkLCBhT3JpZ2luYWwsIGFTb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYU5hbWUpIHtcbiAgICAvLyBXaGVuIGFPcmlnaW5hbCBpcyB0cnV0aHkgYnV0IGhhcyBlbXB0eSB2YWx1ZXMgZm9yIC5saW5lIGFuZCAuY29sdW1uLFxuICAgIC8vIGl0IGlzIG1vc3QgbGlrZWx5IGEgcHJvZ3JhbW1lciBlcnJvci4gSW4gdGhpcyBjYXNlIHdlIHRocm93IGEgdmVyeVxuICAgIC8vIHNwZWNpZmljIGVycm9yIG1lc3NhZ2UgdG8gdHJ5IHRvIGd1aWRlIHRoZW0gdGhlIHJpZ2h0IHdheS5cbiAgICAvLyBGb3IgZXhhbXBsZTogaHR0cHM6Ly9naXRodWIuY29tL1BvbHltZXIvcG9seW1lci1idW5kbGVyL3B1bGwvNTE5XG4gICAgaWYgKGFPcmlnaW5hbCAmJiB0eXBlb2YgYU9yaWdpbmFsLmxpbmUgIT09ICdudW1iZXInICYmIHR5cGVvZiBhT3JpZ2luYWwuY29sdW1uICE9PSAnbnVtYmVyJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAnb3JpZ2luYWwubGluZSBhbmQgb3JpZ2luYWwuY29sdW1uIGFyZSBub3QgbnVtYmVycyAtLSB5b3UgcHJvYmFibHkgbWVhbnQgdG8gb21pdCAnICtcbiAgICAgICAgICAgICd0aGUgb3JpZ2luYWwgbWFwcGluZyBlbnRpcmVseSBhbmQgb25seSBtYXAgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbi4gSWYgc28sIHBhc3MgJyArXG4gICAgICAgICAgICAnbnVsbCBmb3IgdGhlIG9yaWdpbmFsIG1hcHBpbmcgaW5zdGVhZCBvZiBhbiBvYmplY3Qgd2l0aCBlbXB0eSBvciBudWxsIHZhbHVlcy4nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGFHZW5lcmF0ZWQgJiYgJ2xpbmUnIGluIGFHZW5lcmF0ZWQgJiYgJ2NvbHVtbicgaW4gYUdlbmVyYXRlZFxuICAgICAgICAmJiBhR2VuZXJhdGVkLmxpbmUgPiAwICYmIGFHZW5lcmF0ZWQuY29sdW1uID49IDBcbiAgICAgICAgJiYgIWFPcmlnaW5hbCAmJiAhYVNvdXJjZSAmJiAhYU5hbWUpIHtcbiAgICAgIC8vIENhc2UgMS5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxzZSBpZiAoYUdlbmVyYXRlZCAmJiAnbGluZScgaW4gYUdlbmVyYXRlZCAmJiAnY29sdW1uJyBpbiBhR2VuZXJhdGVkXG4gICAgICAgICAgICAgJiYgYU9yaWdpbmFsICYmICdsaW5lJyBpbiBhT3JpZ2luYWwgJiYgJ2NvbHVtbicgaW4gYU9yaWdpbmFsXG4gICAgICAgICAgICAgJiYgYUdlbmVyYXRlZC5saW5lID4gMCAmJiBhR2VuZXJhdGVkLmNvbHVtbiA+PSAwXG4gICAgICAgICAgICAgJiYgYU9yaWdpbmFsLmxpbmUgPiAwICYmIGFPcmlnaW5hbC5jb2x1bW4gPj0gMFxuICAgICAgICAgICAgICYmIGFTb3VyY2UpIHtcbiAgICAgIC8vIENhc2VzIDIgYW5kIDMuXG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1hcHBpbmc6ICcgKyBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGdlbmVyYXRlZDogYUdlbmVyYXRlZCxcbiAgICAgICAgc291cmNlOiBhU291cmNlLFxuICAgICAgICBvcmlnaW5hbDogYU9yaWdpbmFsLFxuICAgICAgICBuYW1lOiBhTmFtZVxuICAgICAgfSkpO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBTZXJpYWxpemUgdGhlIGFjY3VtdWxhdGVkIG1hcHBpbmdzIGluIHRvIHRoZSBzdHJlYW0gb2YgYmFzZSA2NCBWTFFzXG4gKiBzcGVjaWZpZWQgYnkgdGhlIHNvdXJjZSBtYXAgZm9ybWF0LlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLl9zZXJpYWxpemVNYXBwaW5ncyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9zZXJpYWxpemVNYXBwaW5ncygpIHtcbiAgICB2YXIgcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICAgIHZhciBwcmV2aW91c0dlbmVyYXRlZExpbmUgPSAxO1xuICAgIHZhciBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gMDtcbiAgICB2YXIgcHJldmlvdXNPcmlnaW5hbExpbmUgPSAwO1xuICAgIHZhciBwcmV2aW91c05hbWUgPSAwO1xuICAgIHZhciBwcmV2aW91c1NvdXJjZSA9IDA7XG4gICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgIHZhciBuZXh0O1xuICAgIHZhciBtYXBwaW5nO1xuICAgIHZhciBuYW1lSWR4O1xuICAgIHZhciBzb3VyY2VJZHg7XG5cbiAgICB2YXIgbWFwcGluZ3MgPSB0aGlzLl9tYXBwaW5ncy50b0FycmF5KCk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG1hcHBpbmdzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBtYXBwaW5nID0gbWFwcGluZ3NbaV07XG4gICAgICBuZXh0ID0gJydcblxuICAgICAgaWYgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSAhPT0gcHJldmlvdXNHZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgICAgd2hpbGUgKG1hcHBpbmcuZ2VuZXJhdGVkTGluZSAhPT0gcHJldmlvdXNHZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgbmV4dCArPSAnOyc7XG4gICAgICAgICAgcHJldmlvdXNHZW5lcmF0ZWRMaW5lKys7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoaSA+IDApIHtcbiAgICAgICAgICBpZiAoIXV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zSW5mbGF0ZWQobWFwcGluZywgbWFwcGluZ3NbaSAtIDFdKSkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIG5leHQgKz0gJywnO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLmdlbmVyYXRlZENvbHVtblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c0dlbmVyYXRlZENvbHVtbik7XG4gICAgICBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuXG4gICAgICBpZiAobWFwcGluZy5zb3VyY2UgIT0gbnVsbCkge1xuICAgICAgICBzb3VyY2VJZHggPSB0aGlzLl9zb3VyY2VzLmluZGV4T2YobWFwcGluZy5zb3VyY2UpO1xuICAgICAgICBuZXh0ICs9IGJhc2U2NFZMUS5lbmNvZGUoc291cmNlSWR4IC0gcHJldmlvdXNTb3VyY2UpO1xuICAgICAgICBwcmV2aW91c1NvdXJjZSA9IHNvdXJjZUlkeDtcblxuICAgICAgICAvLyBsaW5lcyBhcmUgc3RvcmVkIDAtYmFzZWQgaW4gU291cmNlTWFwIHNwZWMgdmVyc2lvbiAzXG4gICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLm9yaWdpbmFsTGluZSAtIDFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLSBwcmV2aW91c09yaWdpbmFsTGluZSk7XG4gICAgICAgIHByZXZpb3VzT3JpZ2luYWxMaW5lID0gbWFwcGluZy5vcmlnaW5hbExpbmUgLSAxO1xuXG4gICAgICAgIG5leHQgKz0gYmFzZTY0VkxRLmVuY29kZShtYXBwaW5nLm9yaWdpbmFsQ29sdW1uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0gcHJldmlvdXNPcmlnaW5hbENvbHVtbik7XG4gICAgICAgIHByZXZpb3VzT3JpZ2luYWxDb2x1bW4gPSBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgIGlmIChtYXBwaW5nLm5hbWUgIT0gbnVsbCkge1xuICAgICAgICAgIG5hbWVJZHggPSB0aGlzLl9uYW1lcy5pbmRleE9mKG1hcHBpbmcubmFtZSk7XG4gICAgICAgICAgbmV4dCArPSBiYXNlNjRWTFEuZW5jb2RlKG5hbWVJZHggLSBwcmV2aW91c05hbWUpO1xuICAgICAgICAgIHByZXZpb3VzTmFtZSA9IG5hbWVJZHg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVzdWx0ICs9IG5leHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuU291cmNlTWFwR2VuZXJhdG9yLnByb3RvdHlwZS5fZ2VuZXJhdGVTb3VyY2VzQ29udGVudCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl9nZW5lcmF0ZVNvdXJjZXNDb250ZW50KGFTb3VyY2VzLCBhU291cmNlUm9vdCkge1xuICAgIHJldHVybiBhU291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgaWYgKCF0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICBpZiAoYVNvdXJjZVJvb3QgIT0gbnVsbCkge1xuICAgICAgICBzb3VyY2UgPSB1dGlsLnJlbGF0aXZlKGFTb3VyY2VSb290LCBzb3VyY2UpO1xuICAgICAgfVxuICAgICAgdmFyIGtleSA9IHV0aWwudG9TZXRTdHJpbmcoc291cmNlKTtcbiAgICAgIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5fc291cmNlc0NvbnRlbnRzLCBrZXkpXG4gICAgICAgID8gdGhpcy5fc291cmNlc0NvbnRlbnRzW2tleV1cbiAgICAgICAgOiBudWxsO1xuICAgIH0sIHRoaXMpO1xuICB9O1xuXG4vKipcbiAqIEV4dGVybmFsaXplIHRoZSBzb3VyY2UgbWFwLlxuICovXG5Tb3VyY2VNYXBHZW5lcmF0b3IucHJvdG90eXBlLnRvSlNPTiA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcEdlbmVyYXRvcl90b0pTT04oKSB7XG4gICAgdmFyIG1hcCA9IHtcbiAgICAgIHZlcnNpb246IHRoaXMuX3ZlcnNpb24sXG4gICAgICBzb3VyY2VzOiB0aGlzLl9zb3VyY2VzLnRvQXJyYXkoKSxcbiAgICAgIG5hbWVzOiB0aGlzLl9uYW1lcy50b0FycmF5KCksXG4gICAgICBtYXBwaW5nczogdGhpcy5fc2VyaWFsaXplTWFwcGluZ3MoKVxuICAgIH07XG4gICAgaWYgKHRoaXMuX2ZpbGUgIT0gbnVsbCkge1xuICAgICAgbWFwLmZpbGUgPSB0aGlzLl9maWxlO1xuICAgIH1cbiAgICBpZiAodGhpcy5fc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgICBtYXAuc291cmNlUm9vdCA9IHRoaXMuX3NvdXJjZVJvb3Q7XG4gICAgfVxuICAgIGlmICh0aGlzLl9zb3VyY2VzQ29udGVudHMpIHtcbiAgICAgIG1hcC5zb3VyY2VzQ29udGVudCA9IHRoaXMuX2dlbmVyYXRlU291cmNlc0NvbnRlbnQobWFwLnNvdXJjZXMsIG1hcC5zb3VyY2VSb290KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbWFwO1xuICB9O1xuXG4vKipcbiAqIFJlbmRlciB0aGUgc291cmNlIG1hcCBiZWluZyBnZW5lcmF0ZWQgdG8gYSBzdHJpbmcuXG4gKi9cblNvdXJjZU1hcEdlbmVyYXRvci5wcm90b3R5cGUudG9TdHJpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBHZW5lcmF0b3JfdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHRoaXMudG9KU09OKCkpO1xuICB9O1xuXG5leHBvcnRzLlNvdXJjZU1hcEdlbmVyYXRvciA9IFNvdXJjZU1hcEdlbmVyYXRvcjtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKlxuICogQmFzZWQgb24gdGhlIEJhc2UgNjQgVkxRIGltcGxlbWVudGF0aW9uIGluIENsb3N1cmUgQ29tcGlsZXI6XG4gKiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL2Nsb3N1cmUtY29tcGlsZXIvc291cmNlL2Jyb3dzZS90cnVuay9zcmMvY29tL2dvb2dsZS9kZWJ1Z2dpbmcvc291cmNlbWFwL0Jhc2U2NFZMUS5qYXZhXG4gKlxuICogQ29weXJpZ2h0IDIwMTEgVGhlIENsb3N1cmUgQ29tcGlsZXIgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFJlZGlzdHJpYnV0aW9uIGFuZCB1c2UgaW4gc291cmNlIGFuZCBiaW5hcnkgZm9ybXMsIHdpdGggb3Igd2l0aG91dFxuICogbW9kaWZpY2F0aW9uLCBhcmUgcGVybWl0dGVkIHByb3ZpZGVkIHRoYXQgdGhlIGZvbGxvd2luZyBjb25kaXRpb25zIGFyZVxuICogbWV0OlxuICpcbiAqICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0XG4gKiAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIuXG4gKiAgKiBSZWRpc3RyaWJ1dGlvbnMgaW4gYmluYXJ5IGZvcm0gbXVzdCByZXByb2R1Y2UgdGhlIGFib3ZlXG4gKiAgICBjb3B5cmlnaHQgbm90aWNlLCB0aGlzIGxpc3Qgb2YgY29uZGl0aW9ucyBhbmQgdGhlIGZvbGxvd2luZ1xuICogICAgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkXG4gKiAgICB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gKiAgKiBOZWl0aGVyIHRoZSBuYW1lIG9mIEdvb2dsZSBJbmMuIG5vciB0aGUgbmFtZXMgb2YgaXRzXG4gKiAgICBjb250cmlidXRvcnMgbWF5IGJlIHVzZWQgdG8gZW5kb3JzZSBvciBwcm9tb3RlIHByb2R1Y3RzIGRlcml2ZWRcbiAqICAgIGZyb20gdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cbiAqXG4gKiBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTXG4gKiBcIkFTIElTXCIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UXG4gKiBMSU1JVEVEIFRPLCBUSEUgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSBBTkQgRklUTkVTUyBGT1JcbiAqIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUXG4gKiBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCxcbiAqIFNQRUNJQUwsIEVYRU1QTEFSWSwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIChJTkNMVURJTkcsIEJVVCBOT1RcbiAqIExJTUlURUQgVE8sIFBST0NVUkVNRU5UIE9GIFNVQlNUSVRVVEUgR09PRFMgT1IgU0VSVklDRVM7IExPU1MgT0YgVVNFLFxuICogREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZXG4gKiBUSEVPUlkgT0YgTElBQklMSVRZLCBXSEVUSEVSIElOIENPTlRSQUNULCBTVFJJQ1QgTElBQklMSVRZLCBPUiBUT1JUXG4gKiAoSU5DTFVESU5HIE5FR0xJR0VOQ0UgT1IgT1RIRVJXSVNFKSBBUklTSU5HIElOIEFOWSBXQVkgT1VUIE9GIFRIRSBVU0VcbiAqIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4gKi9cblxudmFyIGJhc2U2NCA9IHJlcXVpcmUoJy4vYmFzZTY0Jyk7XG5cbi8vIEEgc2luZ2xlIGJhc2UgNjQgZGlnaXQgY2FuIGNvbnRhaW4gNiBiaXRzIG9mIGRhdGEuIEZvciB0aGUgYmFzZSA2NCB2YXJpYWJsZVxuLy8gbGVuZ3RoIHF1YW50aXRpZXMgd2UgdXNlIGluIHRoZSBzb3VyY2UgbWFwIHNwZWMsIHRoZSBmaXJzdCBiaXQgaXMgdGhlIHNpZ24sXG4vLyB0aGUgbmV4dCBmb3VyIGJpdHMgYXJlIHRoZSBhY3R1YWwgdmFsdWUsIGFuZCB0aGUgNnRoIGJpdCBpcyB0aGVcbi8vIGNvbnRpbnVhdGlvbiBiaXQuIFRoZSBjb250aW51YXRpb24gYml0IHRlbGxzIHVzIHdoZXRoZXIgdGhlcmUgYXJlIG1vcmVcbi8vIGRpZ2l0cyBpbiB0aGlzIHZhbHVlIGZvbGxvd2luZyB0aGlzIGRpZ2l0LlxuLy9cbi8vICAgQ29udGludWF0aW9uXG4vLyAgIHwgICAgU2lnblxuLy8gICB8ICAgIHxcbi8vICAgViAgICBWXG4vLyAgIDEwMTAxMVxuXG52YXIgVkxRX0JBU0VfU0hJRlQgPSA1O1xuXG4vLyBiaW5hcnk6IDEwMDAwMFxudmFyIFZMUV9CQVNFID0gMSA8PCBWTFFfQkFTRV9TSElGVDtcblxuLy8gYmluYXJ5OiAwMTExMTFcbnZhciBWTFFfQkFTRV9NQVNLID0gVkxRX0JBU0UgLSAxO1xuXG4vLyBiaW5hcnk6IDEwMDAwMFxudmFyIFZMUV9DT05USU5VQVRJT05fQklUID0gVkxRX0JBU0U7XG5cbi8qKlxuICogQ29udmVydHMgZnJvbSBhIHR3by1jb21wbGVtZW50IHZhbHVlIHRvIGEgdmFsdWUgd2hlcmUgdGhlIHNpZ24gYml0IGlzXG4gKiBwbGFjZWQgaW4gdGhlIGxlYXN0IHNpZ25pZmljYW50IGJpdC4gIEZvciBleGFtcGxlLCBhcyBkZWNpbWFsczpcbiAqICAgMSBiZWNvbWVzIDIgKDEwIGJpbmFyeSksIC0xIGJlY29tZXMgMyAoMTEgYmluYXJ5KVxuICogICAyIGJlY29tZXMgNCAoMTAwIGJpbmFyeSksIC0yIGJlY29tZXMgNSAoMTAxIGJpbmFyeSlcbiAqL1xuZnVuY3Rpb24gdG9WTFFTaWduZWQoYVZhbHVlKSB7XG4gIHJldHVybiBhVmFsdWUgPCAwXG4gICAgPyAoKC1hVmFsdWUpIDw8IDEpICsgMVxuICAgIDogKGFWYWx1ZSA8PCAxKSArIDA7XG59XG5cbi8qKlxuICogQ29udmVydHMgdG8gYSB0d28tY29tcGxlbWVudCB2YWx1ZSBmcm9tIGEgdmFsdWUgd2hlcmUgdGhlIHNpZ24gYml0IGlzXG4gKiBwbGFjZWQgaW4gdGhlIGxlYXN0IHNpZ25pZmljYW50IGJpdC4gIEZvciBleGFtcGxlLCBhcyBkZWNpbWFsczpcbiAqICAgMiAoMTAgYmluYXJ5KSBiZWNvbWVzIDEsIDMgKDExIGJpbmFyeSkgYmVjb21lcyAtMVxuICogICA0ICgxMDAgYmluYXJ5KSBiZWNvbWVzIDIsIDUgKDEwMSBiaW5hcnkpIGJlY29tZXMgLTJcbiAqL1xuZnVuY3Rpb24gZnJvbVZMUVNpZ25lZChhVmFsdWUpIHtcbiAgdmFyIGlzTmVnYXRpdmUgPSAoYVZhbHVlICYgMSkgPT09IDE7XG4gIHZhciBzaGlmdGVkID0gYVZhbHVlID4+IDE7XG4gIHJldHVybiBpc05lZ2F0aXZlXG4gICAgPyAtc2hpZnRlZFxuICAgIDogc2hpZnRlZDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBiYXNlIDY0IFZMUSBlbmNvZGVkIHZhbHVlLlxuICovXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIGJhc2U2NFZMUV9lbmNvZGUoYVZhbHVlKSB7XG4gIHZhciBlbmNvZGVkID0gXCJcIjtcbiAgdmFyIGRpZ2l0O1xuXG4gIHZhciB2bHEgPSB0b1ZMUVNpZ25lZChhVmFsdWUpO1xuXG4gIGRvIHtcbiAgICBkaWdpdCA9IHZscSAmIFZMUV9CQVNFX01BU0s7XG4gICAgdmxxID4+Pj0gVkxRX0JBU0VfU0hJRlQ7XG4gICAgaWYgKHZscSA+IDApIHtcbiAgICAgIC8vIFRoZXJlIGFyZSBzdGlsbCBtb3JlIGRpZ2l0cyBpbiB0aGlzIHZhbHVlLCBzbyB3ZSBtdXN0IG1ha2Ugc3VyZSB0aGVcbiAgICAgIC8vIGNvbnRpbnVhdGlvbiBiaXQgaXMgbWFya2VkLlxuICAgICAgZGlnaXQgfD0gVkxRX0NPTlRJTlVBVElPTl9CSVQ7XG4gICAgfVxuICAgIGVuY29kZWQgKz0gYmFzZTY0LmVuY29kZShkaWdpdCk7XG4gIH0gd2hpbGUgKHZscSA+IDApO1xuXG4gIHJldHVybiBlbmNvZGVkO1xufTtcblxuLyoqXG4gKiBEZWNvZGVzIHRoZSBuZXh0IGJhc2UgNjQgVkxRIHZhbHVlIGZyb20gdGhlIGdpdmVuIHN0cmluZyBhbmQgcmV0dXJucyB0aGVcbiAqIHZhbHVlIGFuZCB0aGUgcmVzdCBvZiB0aGUgc3RyaW5nIHZpYSB0aGUgb3V0IHBhcmFtZXRlci5cbiAqL1xuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbiBiYXNlNjRWTFFfZGVjb2RlKGFTdHIsIGFJbmRleCwgYU91dFBhcmFtKSB7XG4gIHZhciBzdHJMZW4gPSBhU3RyLmxlbmd0aDtcbiAgdmFyIHJlc3VsdCA9IDA7XG4gIHZhciBzaGlmdCA9IDA7XG4gIHZhciBjb250aW51YXRpb24sIGRpZ2l0O1xuXG4gIGRvIHtcbiAgICBpZiAoYUluZGV4ID49IHN0ckxlbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXhwZWN0ZWQgbW9yZSBkaWdpdHMgaW4gYmFzZSA2NCBWTFEgdmFsdWUuXCIpO1xuICAgIH1cblxuICAgIGRpZ2l0ID0gYmFzZTY0LmRlY29kZShhU3RyLmNoYXJDb2RlQXQoYUluZGV4KyspKTtcbiAgICBpZiAoZGlnaXQgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGJhc2U2NCBkaWdpdDogXCIgKyBhU3RyLmNoYXJBdChhSW5kZXggLSAxKSk7XG4gICAgfVxuXG4gICAgY29udGludWF0aW9uID0gISEoZGlnaXQgJiBWTFFfQ09OVElOVUFUSU9OX0JJVCk7XG4gICAgZGlnaXQgJj0gVkxRX0JBU0VfTUFTSztcbiAgICByZXN1bHQgPSByZXN1bHQgKyAoZGlnaXQgPDwgc2hpZnQpO1xuICAgIHNoaWZ0ICs9IFZMUV9CQVNFX1NISUZUO1xuICB9IHdoaWxlIChjb250aW51YXRpb24pO1xuXG4gIGFPdXRQYXJhbS52YWx1ZSA9IGZyb21WTFFTaWduZWQocmVzdWx0KTtcbiAgYU91dFBhcmFtLnJlc3QgPSBhSW5kZXg7XG59O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xudmFyIGhhcyA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgaGFzTmF0aXZlTWFwID0gdHlwZW9mIE1hcCAhPT0gXCJ1bmRlZmluZWRcIjtcblxuLyoqXG4gKiBBIGRhdGEgc3RydWN0dXJlIHdoaWNoIGlzIGEgY29tYmluYXRpb24gb2YgYW4gYXJyYXkgYW5kIGEgc2V0LiBBZGRpbmcgYSBuZXdcbiAqIG1lbWJlciBpcyBPKDEpLCB0ZXN0aW5nIGZvciBtZW1iZXJzaGlwIGlzIE8oMSksIGFuZCBmaW5kaW5nIHRoZSBpbmRleCBvZiBhblxuICogZWxlbWVudCBpcyBPKDEpLiBSZW1vdmluZyBlbGVtZW50cyBmcm9tIHRoZSBzZXQgaXMgbm90IHN1cHBvcnRlZC4gT25seVxuICogc3RyaW5ncyBhcmUgc3VwcG9ydGVkIGZvciBtZW1iZXJzaGlwLlxuICovXG5mdW5jdGlvbiBBcnJheVNldCgpIHtcbiAgdGhpcy5fYXJyYXkgPSBbXTtcbiAgdGhpcy5fc2V0ID0gaGFzTmF0aXZlTWFwID8gbmV3IE1hcCgpIDogT2JqZWN0LmNyZWF0ZShudWxsKTtcbn1cblxuLyoqXG4gKiBTdGF0aWMgbWV0aG9kIGZvciBjcmVhdGluZyBBcnJheVNldCBpbnN0YW5jZXMgZnJvbSBhbiBleGlzdGluZyBhcnJheS5cbiAqL1xuQXJyYXlTZXQuZnJvbUFycmF5ID0gZnVuY3Rpb24gQXJyYXlTZXRfZnJvbUFycmF5KGFBcnJheSwgYUFsbG93RHVwbGljYXRlcykge1xuICB2YXIgc2V0ID0gbmV3IEFycmF5U2V0KCk7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhQXJyYXkubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICBzZXQuYWRkKGFBcnJheVtpXSwgYUFsbG93RHVwbGljYXRlcyk7XG4gIH1cbiAgcmV0dXJuIHNldDtcbn07XG5cbi8qKlxuICogUmV0dXJuIGhvdyBtYW55IHVuaXF1ZSBpdGVtcyBhcmUgaW4gdGhpcyBBcnJheVNldC4gSWYgZHVwbGljYXRlcyBoYXZlIGJlZW5cbiAqIGFkZGVkLCB0aGFuIHRob3NlIGRvIG5vdCBjb3VudCB0b3dhcmRzIHRoZSBzaXplLlxuICpcbiAqIEByZXR1cm5zIE51bWJlclxuICovXG5BcnJheVNldC5wcm90b3R5cGUuc2l6ZSA9IGZ1bmN0aW9uIEFycmF5U2V0X3NpemUoKSB7XG4gIHJldHVybiBoYXNOYXRpdmVNYXAgPyB0aGlzLl9zZXQuc2l6ZSA6IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMuX3NldCkubGVuZ3RoO1xufTtcblxuLyoqXG4gKiBBZGQgdGhlIGdpdmVuIHN0cmluZyB0byB0aGlzIHNldC5cbiAqXG4gKiBAcGFyYW0gU3RyaW5nIGFTdHJcbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIEFycmF5U2V0X2FkZChhU3RyLCBhQWxsb3dEdXBsaWNhdGVzKSB7XG4gIHZhciBzU3RyID0gaGFzTmF0aXZlTWFwID8gYVN0ciA6IHV0aWwudG9TZXRTdHJpbmcoYVN0cik7XG4gIHZhciBpc0R1cGxpY2F0ZSA9IGhhc05hdGl2ZU1hcCA/IHRoaXMuaGFzKGFTdHIpIDogaGFzLmNhbGwodGhpcy5fc2V0LCBzU3RyKTtcbiAgdmFyIGlkeCA9IHRoaXMuX2FycmF5Lmxlbmd0aDtcbiAgaWYgKCFpc0R1cGxpY2F0ZSB8fCBhQWxsb3dEdXBsaWNhdGVzKSB7XG4gICAgdGhpcy5fYXJyYXkucHVzaChhU3RyKTtcbiAgfVxuICBpZiAoIWlzRHVwbGljYXRlKSB7XG4gICAgaWYgKGhhc05hdGl2ZU1hcCkge1xuICAgICAgdGhpcy5fc2V0LnNldChhU3RyLCBpZHgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9zZXRbc1N0cl0gPSBpZHg7XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIElzIHRoZSBnaXZlbiBzdHJpbmcgYSBtZW1iZXIgb2YgdGhpcyBzZXQ/XG4gKlxuICogQHBhcmFtIFN0cmluZyBhU3RyXG4gKi9cbkFycmF5U2V0LnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiBBcnJheVNldF9oYXMoYVN0cikge1xuICBpZiAoaGFzTmF0aXZlTWFwKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NldC5oYXMoYVN0cik7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHNTdHIgPSB1dGlsLnRvU2V0U3RyaW5nKGFTdHIpO1xuICAgIHJldHVybiBoYXMuY2FsbCh0aGlzLl9zZXQsIHNTdHIpO1xuICB9XG59O1xuXG4vKipcbiAqIFdoYXQgaXMgdGhlIGluZGV4IG9mIHRoZSBnaXZlbiBzdHJpbmcgaW4gdGhlIGFycmF5P1xuICpcbiAqIEBwYXJhbSBTdHJpbmcgYVN0clxuICovXG5BcnJheVNldC5wcm90b3R5cGUuaW5kZXhPZiA9IGZ1bmN0aW9uIEFycmF5U2V0X2luZGV4T2YoYVN0cikge1xuICBpZiAoaGFzTmF0aXZlTWFwKSB7XG4gICAgdmFyIGlkeCA9IHRoaXMuX3NldC5nZXQoYVN0cik7XG4gICAgaWYgKGlkeCA+PSAwKSB7XG4gICAgICAgIHJldHVybiBpZHg7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciBzU3RyID0gdXRpbC50b1NldFN0cmluZyhhU3RyKTtcbiAgICBpZiAoaGFzLmNhbGwodGhpcy5fc2V0LCBzU3RyKSkge1xuICAgICAgcmV0dXJuIHRoaXMuX3NldFtzU3RyXTtcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGFTdHIgKyAnXCIgaXMgbm90IGluIHRoZSBzZXQuJyk7XG59O1xuXG4vKipcbiAqIFdoYXQgaXMgdGhlIGVsZW1lbnQgYXQgdGhlIGdpdmVuIGluZGV4P1xuICpcbiAqIEBwYXJhbSBOdW1iZXIgYUlkeFxuICovXG5BcnJheVNldC5wcm90b3R5cGUuYXQgPSBmdW5jdGlvbiBBcnJheVNldF9hdChhSWR4KSB7XG4gIGlmIChhSWR4ID49IDAgJiYgYUlkeCA8IHRoaXMuX2FycmF5Lmxlbmd0aCkge1xuICAgIHJldHVybiB0aGlzLl9hcnJheVthSWR4XTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoJ05vIGVsZW1lbnQgaW5kZXhlZCBieSAnICsgYUlkeCk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIGFycmF5IHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgc2V0ICh3aGljaCBoYXMgdGhlIHByb3BlciBpbmRpY2VzXG4gKiBpbmRpY2F0ZWQgYnkgaW5kZXhPZikuIE5vdGUgdGhhdCB0aGlzIGlzIGEgY29weSBvZiB0aGUgaW50ZXJuYWwgYXJyYXkgdXNlZFxuICogZm9yIHN0b3JpbmcgdGhlIG1lbWJlcnMgc28gdGhhdCBubyBvbmUgY2FuIG1lc3Mgd2l0aCBpbnRlcm5hbCBzdGF0ZS5cbiAqL1xuQXJyYXlTZXQucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiBBcnJheVNldF90b0FycmF5KCkge1xuICByZXR1cm4gdGhpcy5fYXJyYXkuc2xpY2UoKTtcbn07XG5cbmV4cG9ydHMuQXJyYXlTZXQgPSBBcnJheVNldDtcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG4vKipcbiAqIENvbnRhaW5zIGhlbHBlcnMgZm9yIHNhZmVseSBzcGxpdHRpbmcgbGlzdHMgb2YgQ1NTIHZhbHVlcyxcbiAqIHByZXNlcnZpbmcgcGFyZW50aGVzZXMgYW5kIHF1b3Rlcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogY29uc3QgbGlzdCA9IHBvc3Rjc3MubGlzdFxuICpcbiAqIEBuYW1lc3BhY2UgbGlzdFxuICovXG52YXIgbGlzdCA9IHtcbiAgc3BsaXQ6IGZ1bmN0aW9uIHNwbGl0KHN0cmluZywgc2VwYXJhdG9ycywgbGFzdCkge1xuICAgIHZhciBhcnJheSA9IFtdO1xuICAgIHZhciBjdXJyZW50ID0gJyc7XG4gICAgdmFyIHNwbGl0ID0gZmFsc2U7XG4gICAgdmFyIGZ1bmMgPSAwO1xuICAgIHZhciBxdW90ZSA9IGZhbHNlO1xuICAgIHZhciBlc2NhcGUgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGV0dGVyID0gc3RyaW5nW2ldO1xuXG4gICAgICBpZiAocXVvdGUpIHtcbiAgICAgICAgaWYgKGVzY2FwZSkge1xuICAgICAgICAgIGVzY2FwZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKGxldHRlciA9PT0gJ1xcXFwnKSB7XG4gICAgICAgICAgZXNjYXBlID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmIChsZXR0ZXIgPT09IHF1b3RlKSB7XG4gICAgICAgICAgcXVvdGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChsZXR0ZXIgPT09ICdcIicgfHwgbGV0dGVyID09PSAnXFwnJykge1xuICAgICAgICBxdW90ZSA9IGxldHRlcjtcbiAgICAgIH0gZWxzZSBpZiAobGV0dGVyID09PSAnKCcpIHtcbiAgICAgICAgZnVuYyArPSAxO1xuICAgICAgfSBlbHNlIGlmIChsZXR0ZXIgPT09ICcpJykge1xuICAgICAgICBpZiAoZnVuYyA+IDApIGZ1bmMgLT0gMTtcbiAgICAgIH0gZWxzZSBpZiAoZnVuYyA9PT0gMCkge1xuICAgICAgICBpZiAoc2VwYXJhdG9ycy5pbmRleE9mKGxldHRlcikgIT09IC0xKSBzcGxpdCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChzcGxpdCkge1xuICAgICAgICBpZiAoY3VycmVudCAhPT0gJycpIGFycmF5LnB1c2goY3VycmVudC50cmltKCkpO1xuICAgICAgICBjdXJyZW50ID0gJyc7XG4gICAgICAgIHNwbGl0ID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50ICs9IGxldHRlcjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobGFzdCB8fCBjdXJyZW50ICE9PSAnJykgYXJyYXkucHVzaChjdXJyZW50LnRyaW0oKSk7XG4gICAgcmV0dXJuIGFycmF5O1xuICB9LFxuXG4gIC8qKlxuICAgKiBTYWZlbHkgc3BsaXRzIHNwYWNlLXNlcGFyYXRlZCB2YWx1ZXMgKHN1Y2ggYXMgdGhvc2UgZm9yIGBiYWNrZ3JvdW5kYCxcbiAgICogYGJvcmRlci1yYWRpdXNgLCBhbmQgb3RoZXIgc2hvcnRoYW5kIHByb3BlcnRpZXMpLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFNwYWNlLXNlcGFyYXRlZCB2YWx1ZXMuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ1tdfSBTcGxpdCB2YWx1ZXMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHBvc3Rjc3MubGlzdC5zcGFjZSgnMXB4IGNhbGMoMTAlICsgMXB4KScpIC8vPT4gWycxcHgnLCAnY2FsYygxMCUgKyAxcHgpJ11cbiAgICovXG4gIHNwYWNlOiBmdW5jdGlvbiBzcGFjZShzdHJpbmcpIHtcbiAgICB2YXIgc3BhY2VzID0gWycgJywgJ1xcbicsICdcXHQnXTtcbiAgICByZXR1cm4gbGlzdC5zcGxpdChzdHJpbmcsIHNwYWNlcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNhZmVseSBzcGxpdHMgY29tbWEtc2VwYXJhdGVkIHZhbHVlcyAoc3VjaCBhcyB0aG9zZSBmb3IgYHRyYW5zaXRpb24tKmBcbiAgICogYW5kIGBiYWNrZ3JvdW5kYCBwcm9wZXJ0aWVzKS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBDb21tYS1zZXBhcmF0ZWQgdmFsdWVzLlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmdbXX0gU3BsaXQgdmFsdWVzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiBwb3N0Y3NzLmxpc3QuY29tbWEoJ2JsYWNrLCBsaW5lYXItZ3JhZGllbnQod2hpdGUsIGJsYWNrKScpXG4gICAqIC8vPT4gWydibGFjaycsICdsaW5lYXItZ3JhZGllbnQod2hpdGUsIGJsYWNrKSddXG4gICAqL1xuICBjb21tYTogZnVuY3Rpb24gY29tbWEoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGxpc3Quc3BsaXQoc3RyaW5nLCBbJywnXSwgdHJ1ZSk7XG4gIH1cbn07XG52YXIgX2RlZmF1bHQgPSBsaXN0O1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW14cGMzUXVaWE0ySWwwc0ltNWhiV1Z6SWpwYklteHBjM1FpTENKemNHeHBkQ0lzSW5OMGNtbHVaeUlzSW5ObGNHRnlZWFJ2Y25NaUxDSnNZWE4wSWl3aVlYSnlZWGtpTENKamRYSnlaVzUwSWl3aVpuVnVZeUlzSW5GMWIzUmxJaXdpWlhOallYQmxJaXdpYVNJc0lteGxibWQwYUNJc0lteGxkSFJsY2lJc0ltbHVaR1Y0VDJZaUxDSndkWE5vSWl3aWRISnBiU0lzSW5Od1lXTmxJaXdpYzNCaFkyVnpJaXdpWTI5dGJXRWlYU3dpYldGd2NHbHVaM01pT2lJN096czdPMEZCUVVFN096czdPenM3T3p0QlFWTkJMRWxCUVVsQkxFbEJRVWtzUjBGQlJ6dEJRVVZVUXl4RlFVRkJRU3hMUVVaVExHbENRVVZHUXl4TlFVWkZMRVZCUlUxRExGVkJSazRzUlVGRmEwSkRMRWxCUm14Q0xFVkJSWGRDTzBGQlF5OUNMRkZCUVVsRExFdEJRVXNzUjBGQlJ5eEZRVUZhTzBGQlEwRXNVVUZCU1VNc1QwRkJUeXhIUVVGSExFVkJRV1E3UVVGRFFTeFJRVUZKVEN4TFFVRkxMRWRCUVVjc1MwRkJXanRCUVVWQkxGRkJRVWxOTEVsQlFVa3NSMEZCUnl4RFFVRllPMEZCUTBFc1VVRkJTVU1zUzBGQlN5eEhRVUZITEV0QlFWbzdRVUZEUVN4UlFVRkpReXhOUVVGTkxFZEJRVWNzUzBGQllqczdRVUZGUVN4VFFVRkxMRWxCUVVsRExFTkJRVU1zUjBGQlJ5eERRVUZpTEVWQlFXZENRU3hEUVVGRExFZEJRVWRTTEUxQlFVMHNRMEZCUTFNc1RVRkJNMElzUlVGQmJVTkVMRU5CUVVNc1JVRkJjRU1zUlVGQmQwTTdRVUZEZEVNc1ZVRkJTVVVzVFVGQlRTeEhRVUZIVml4TlFVRk5MRU5CUVVOUkxFTkJRVVFzUTBGQmJrSTdPMEZCUlVFc1ZVRkJTVVlzUzBGQlNpeEZRVUZYTzBGQlExUXNXVUZCU1VNc1RVRkJTaXhGUVVGWk8wRkJRMVpCTEZWQlFVRkJMRTFCUVUwc1IwRkJSeXhMUVVGVU8wRkJRMFFzVTBGR1JDeE5RVVZQTEVsQlFVbEhMRTFCUVUwc1MwRkJTeXhKUVVGbUxFVkJRWEZDTzBGQlF6RkNTQ3hWUVVGQlFTeE5RVUZOTEVkQlFVY3NTVUZCVkR0QlFVTkVMRk5CUmswc1RVRkZRU3hKUVVGSlJ5eE5RVUZOTEV0QlFVdEtMRXRCUVdZc1JVRkJjMEk3UVVGRE0wSkJMRlZCUVVGQkxFdEJRVXNzUjBGQlJ5eExRVUZTTzBGQlEwUTdRVUZEUml4UFFWSkVMRTFCVVU4c1NVRkJTVWtzVFVGQlRTeExRVUZMTEVkQlFWZ3NTVUZCYTBKQkxFMUJRVTBzUzBGQlN5eEpRVUZxUXl4RlFVRjFRenRCUVVNMVEwb3NVVUZCUVVFc1MwRkJTeXhIUVVGSFNTeE5RVUZTTzBGQlEwUXNUMEZHVFN4TlFVVkJMRWxCUVVsQkxFMUJRVTBzUzBGQlN5eEhRVUZtTEVWQlFXOUNPMEZCUTNwQ1RDeFJRVUZCUVN4SlFVRkpMRWxCUVVrc1EwRkJVanRCUVVORUxFOUJSazBzVFVGRlFTeEpRVUZKU3l4TlFVRk5MRXRCUVVzc1IwRkJaaXhGUVVGdlFqdEJRVU42UWl4WlFVRkpUQ3hKUVVGSkxFZEJRVWNzUTBGQldDeEZRVUZqUVN4SlFVRkpMRWxCUVVrc1EwRkJVanRCUVVObUxFOUJSazBzVFVGRlFTeEpRVUZKUVN4SlFVRkpMRXRCUVVzc1EwRkJZaXhGUVVGblFqdEJRVU55UWl4WlFVRkpTaXhWUVVGVkxFTkJRVU5WTEU5QlFWZ3NRMEZCYlVKRUxFMUJRVzVDTEUxQlFTdENMRU5CUVVNc1EwRkJjRU1zUlVGQmRVTllMRXRCUVVzc1IwRkJSeXhKUVVGU08wRkJRM2hET3p0QlFVVkVMRlZCUVVsQkxFdEJRVW9zUlVGQlZ6dEJRVU5VTEZsQlFVbExMRTlCUVU4c1MwRkJTeXhGUVVGb1FpeEZRVUZ2UWtRc1MwRkJTeXhEUVVGRFV5eEpRVUZPTEVOQlFWZFNMRTlCUVU4c1EwRkJRMU1zU1VGQlVpeEZRVUZZTzBGQlEzQkNWQ3hSUVVGQlFTeFBRVUZQTEVkQlFVY3NSVUZCVmp0QlFVTkJUQ3hSUVVGQlFTeExRVUZMTEVkQlFVY3NTMEZCVWp0QlFVTkVMRTlCU2tRc1RVRkpUenRCUVVOTVN5eFJRVUZCUVN4UFFVRlBMRWxCUVVsTkxFMUJRVmc3UVVGRFJEdEJRVU5HT3p0QlFVVkVMRkZCUVVsU0xFbEJRVWtzU1VGQlNVVXNUMEZCVHl4TFFVRkxMRVZCUVhoQ0xFVkJRVFJDUkN4TFFVRkxMRU5CUVVOVExFbEJRVTRzUTBGQlYxSXNUMEZCVHl4RFFVRkRVeXhKUVVGU0xFVkJRVmc3UVVGRE5VSXNWMEZCVDFZc1MwRkJVRHRCUVVORUxFZEJNME5ST3p0QlFUWkRWRHM3T3pzN096czdPenM3UVVGWFFWY3NSVUZCUVVFc1MwRjRSRk1zYVVKQmQwUkdaQ3hOUVhoRVJTeEZRWGRFVFR0QlFVTmlMRkZCUVVsbExFMUJRVTBzUjBGQlJ5eERRVUZETEVkQlFVUXNSVUZCVFN4SlFVRk9MRVZCUVZrc1NVRkJXaXhEUVVGaU8wRkJRMEVzVjBGQlQycENMRWxCUVVrc1EwRkJRME1zUzBGQlRDeERRVUZYUXl4TlFVRllMRVZCUVcxQ1pTeE5RVUZ1UWl4RFFVRlFPMEZCUTBRc1IwRXpSRkU3TzBGQk5rUlVPenM3T3pzN096czdPenM3UVVGWlFVTXNSVUZCUVVFc1MwRjZSVk1zYVVKQmVVVkdhRUlzVFVGNlJVVXNSVUY1UlUwN1FVRkRZaXhYUVVGUFJpeEpRVUZKTEVOQlFVTkRMRXRCUVV3c1EwRkJWME1zVFVGQldDeEZRVUZ0UWl4RFFVRkRMRWRCUVVRc1EwRkJia0lzUlVGQk1FSXNTVUZCTVVJc1EwRkJVRHRCUVVORU8wRkJNMFZSTEVOQlFWZzdaVUVyUldWR0xFa2lMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lwY2JpQXFJRU52Ym5SaGFXNXpJR2hsYkhCbGNuTWdabTl5SUhOaFptVnNlU0J6Y0d4cGRIUnBibWNnYkdsemRITWdiMllnUTFOVElIWmhiSFZsY3l4Y2JpQXFJSEJ5WlhObGNuWnBibWNnY0dGeVpXNTBhR1Z6WlhNZ1lXNWtJSEYxYjNSbGN5NWNiaUFxWEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ29nWTI5dWMzUWdiR2x6ZENBOUlIQnZjM1JqYzNNdWJHbHpkRnh1SUNwY2JpQXFJRUJ1WVcxbGMzQmhZMlVnYkdsemRGeHVJQ292WEc1c1pYUWdiR2x6ZENBOUlIdGNibHh1SUNCemNHeHBkQ0FvYzNSeWFXNW5MQ0J6WlhCaGNtRjBiM0p6TENCc1lYTjBLU0I3WEc0Z0lDQWdiR1YwSUdGeWNtRjVJRDBnVzExY2JpQWdJQ0JzWlhRZ1kzVnljbVZ1ZENBOUlDY25YRzRnSUNBZ2JHVjBJSE53YkdsMElEMGdabUZzYzJWY2JseHVJQ0FnSUd4bGRDQm1kVzVqSUQwZ01GeHVJQ0FnSUd4bGRDQnhkVzkwWlNBOUlHWmhiSE5sWEc0Z0lDQWdiR1YwSUdWelkyRndaU0E5SUdaaGJITmxYRzVjYmlBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJSE4wY21sdVp5NXNaVzVuZEdnN0lHa3JLeWtnZTF4dUlDQWdJQ0FnYkdWMElHeGxkSFJsY2lBOUlITjBjbWx1WjF0cFhWeHVYRzRnSUNBZ0lDQnBaaUFvY1hWdmRHVXBJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnpZMkZ3WlNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR1Z6WTJGd1pTQTlJR1poYkhObFhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9iR1YwZEdWeUlEMDlQU0FuWEZ4Y1hDY3BJSHRjYmlBZ0lDQWdJQ0FnSUNCbGMyTmhjR1VnUFNCMGNuVmxYRzRnSUNBZ0lDQWdJSDBnWld4elpTQnBaaUFvYkdWMGRHVnlJRDA5UFNCeGRXOTBaU2tnZTF4dUlDQWdJQ0FnSUNBZ0lIRjFiM1JsSUQwZ1ptRnNjMlZjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoc1pYUjBaWElnUFQwOUlDZGNJaWNnZkh3Z2JHVjBkR1Z5SUQwOVBTQW5YRnduSnlrZ2UxeHVJQ0FnSUNBZ0lDQnhkVzkwWlNBOUlHeGxkSFJsY2x4dUlDQWdJQ0FnZlNCbGJITmxJR2xtSUNoc1pYUjBaWElnUFQwOUlDY29KeWtnZTF4dUlDQWdJQ0FnSUNCbWRXNWpJQ3M5SURGY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2JHVjBkR1Z5SUQwOVBTQW5LU2NwSUh0Y2JpQWdJQ0FnSUNBZ2FXWWdLR1oxYm1NZ1BpQXdLU0JtZFc1aklDMDlJREZjYmlBZ0lDQWdJSDBnWld4elpTQnBaaUFvWm5WdVl5QTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvYzJWd1lYSmhkRzl5Y3k1cGJtUmxlRTltS0d4bGRIUmxjaWtnSVQwOUlDMHhLU0J6Y0d4cGRDQTlJSFJ5ZFdWY2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2FXWWdLSE53YkdsMEtTQjdYRzRnSUNBZ0lDQWdJR2xtSUNoamRYSnlaVzUwSUNFOVBTQW5KeWtnWVhKeVlYa3VjSFZ6YUNoamRYSnlaVzUwTG5SeWFXMG9LU2xjYmlBZ0lDQWdJQ0FnWTNWeWNtVnVkQ0E5SUNjblhHNGdJQ0FnSUNBZ0lITndiR2wwSUQwZ1ptRnNjMlZjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR04xY25KbGJuUWdLejBnYkdWMGRHVnlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2FXWWdLR3hoYzNRZ2ZId2dZM1Z5Y21WdWRDQWhQVDBnSnljcElHRnljbUY1TG5CMWMyZ29ZM1Z5Y21WdWRDNTBjbWx0S0NrcFhHNGdJQ0FnY21WMGRYSnVJR0Z5Y21GNVhHNGdJSDBzWEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRk5oWm1Wc2VTQnpjR3hwZEhNZ2MzQmhZMlV0YzJWd1lYSmhkR1ZrSUhaaGJIVmxjeUFvYzNWamFDQmhjeUIwYUc5elpTQm1iM0lnWUdKaFkydG5jbTkxYm1SZ0xGeHVJQ0FnS2lCZ1ltOXlaR1Z5TFhKaFpHbDFjMkFzSUdGdVpDQnZkR2hsY2lCemFHOXlkR2hoYm1RZ2NISnZjR1Z5ZEdsbGN5a3VYRzRnSUNBcVhHNGdJQ0FxSUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J6ZEhKcGJtY2dVM0JoWTJVdGMyVndZWEpoZEdWa0lIWmhiSFZsY3k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJpQjdjM1J5YVc1blcxMTlJRk53YkdsMElIWmhiSFZsY3k1Y2JpQWdJQ3BjYmlBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNvZ2NHOXpkR056Y3k1c2FYTjBMbk53WVdObEtDY3hjSGdnWTJGc1l5Z3hNQ1VnS3lBeGNIZ3BKeWtnTHk4OVBpQmJKekZ3ZUNjc0lDZGpZV3hqS0RFd0pTQXJJREZ3ZUNrblhWeHVJQ0FnS2k5Y2JpQWdjM0JoWTJVZ0tITjBjbWx1WnlrZ2UxeHVJQ0FnSUd4bGRDQnpjR0ZqWlhNZ1BTQmJKeUFuTENBblhGeHVKeXdnSjF4Y2RDZGRYRzRnSUNBZ2NtVjBkWEp1SUd4cGMzUXVjM0JzYVhRb2MzUnlhVzVuTENCemNHRmpaWE1wWEc0Z0lIMHNYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGTmhabVZzZVNCemNHeHBkSE1nWTI5dGJXRXRjMlZ3WVhKaGRHVmtJSFpoYkhWbGN5QW9jM1ZqYUNCaGN5QjBhRzl6WlNCbWIzSWdZSFJ5WVc1emFYUnBiMjR0S21CY2JpQWdJQ29nWVc1a0lHQmlZV05yWjNKdmRXNWtZQ0J3Y205d1pYSjBhV1Z6S1M1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlITjBjbWx1WnlCRGIyMXRZUzF6WlhCaGNtRjBaV1FnZG1Gc2RXVnpMbHh1SUNBZ0tseHVJQ0FnS2lCQWNtVjBkWEp1SUh0emRISnBibWRiWFgwZ1UzQnNhWFFnZG1Gc2RXVnpMbHh1SUNBZ0tseHVJQ0FnS2lCQVpYaGhiWEJzWlZ4dUlDQWdLaUJ3YjNOMFkzTnpMbXhwYzNRdVkyOXRiV0VvSjJKc1lXTnJMQ0JzYVc1bFlYSXRaM0poWkdsbGJuUW9kMmhwZEdVc0lHSnNZV05yS1NjcFhHNGdJQ0FxSUM4dlBUNGdXeWRpYkdGamF5Y3NJQ2RzYVc1bFlYSXRaM0poWkdsbGJuUW9kMmhwZEdVc0lHSnNZV05yS1NkZFhHNGdJQ0FxTDF4dUlDQmpiMjF0WVNBb2MzUnlhVzVuS1NCN1hHNGdJQ0FnY21WMGRYSnVJR3hwYzNRdWMzQnNhWFFvYzNSeWFXNW5MQ0JiSnl3blhTd2dkSEoxWlNsY2JpQWdmVnh1WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElHeHBjM1JjYmlKZExDSm1hV3hsSWpvaWJHbHpkQzVxY3lKOVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfY29udGFpbmVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb250YWluZXJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTsgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgQ1NTIGZpbGUgYW5kIGNvbnRhaW5zIGFsbCBpdHMgcGFyc2VkIG5vZGVzLlxuICpcbiAqIEBleHRlbmRzIENvbnRhaW5lclxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCByb290ID0gcG9zdGNzcy5wYXJzZSgnYXtjb2xvcjpibGFja30gYnt6LWluZGV4OjJ9JylcbiAqIHJvb3QudHlwZSAgICAgICAgIC8vPT4gJ3Jvb3QnXG4gKiByb290Lm5vZGVzLmxlbmd0aCAvLz0+IDJcbiAqL1xudmFyIFJvb3QgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKF9Db250YWluZXIpIHtcbiAgX2luaGVyaXRzTG9vc2UoUm9vdCwgX0NvbnRhaW5lcik7XG5cbiAgZnVuY3Rpb24gUm9vdChkZWZhdWx0cykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX0NvbnRhaW5lci5jYWxsKHRoaXMsIGRlZmF1bHRzKSB8fCB0aGlzO1xuICAgIF90aGlzLnR5cGUgPSAncm9vdCc7XG4gICAgaWYgKCFfdGhpcy5ub2RlcykgX3RoaXMubm9kZXMgPSBbXTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUm9vdC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbW92ZUNoaWxkID0gZnVuY3Rpb24gcmVtb3ZlQ2hpbGQoY2hpbGQsIGlnbm9yZSkge1xuICAgIHZhciBpbmRleCA9IHRoaXMuaW5kZXgoY2hpbGQpO1xuXG4gICAgaWYgKCFpZ25vcmUgJiYgaW5kZXggPT09IDAgJiYgdGhpcy5ub2Rlcy5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLm5vZGVzWzFdLnJhd3MuYmVmb3JlID0gdGhpcy5ub2Rlc1tpbmRleF0ucmF3cy5iZWZvcmU7XG4gICAgfVxuXG4gICAgcmV0dXJuIF9Db250YWluZXIucHJvdG90eXBlLnJlbW92ZUNoaWxkLmNhbGwodGhpcywgY2hpbGQpO1xuICB9O1xuXG4gIF9wcm90by5ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUoY2hpbGQsIHNhbXBsZSwgdHlwZSkge1xuICAgIHZhciBub2RlcyA9IF9Db250YWluZXIucHJvdG90eXBlLm5vcm1hbGl6ZS5jYWxsKHRoaXMsIGNoaWxkKTtcblxuICAgIGlmIChzYW1wbGUpIHtcbiAgICAgIGlmICh0eXBlID09PSAncHJlcGVuZCcpIHtcbiAgICAgICAgaWYgKHRoaXMubm9kZXMubGVuZ3RoID4gMSkge1xuICAgICAgICAgIHNhbXBsZS5yYXdzLmJlZm9yZSA9IHRoaXMubm9kZXNbMV0ucmF3cy5iZWZvcmU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHNhbXBsZS5yYXdzLmJlZm9yZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0aGlzLmZpcnN0ICE9PSBzYW1wbGUpIHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gbm9kZXMsIF9pc0FycmF5ID0gQXJyYXkuaXNBcnJheShfaXRlcmF0b3IpLCBfaSA9IDAsIF9pdGVyYXRvciA9IF9pc0FycmF5ID8gX2l0ZXJhdG9yIDogX2l0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0oKTs7KSB7XG4gICAgICAgICAgdmFyIF9yZWY7XG5cbiAgICAgICAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgICAgICAgIGlmIChfaSA+PSBfaXRlcmF0b3IubGVuZ3RoKSBicmVhaztcbiAgICAgICAgICAgIF9yZWYgPSBfaXRlcmF0b3JbX2krK107XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF9pID0gX2l0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgICAgIGlmIChfaS5kb25lKSBicmVhaztcbiAgICAgICAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB2YXIgbm9kZSA9IF9yZWY7XG4gICAgICAgICAgbm9kZS5yYXdzLmJlZm9yZSA9IHNhbXBsZS5yYXdzLmJlZm9yZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBub2RlcztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHtAbGluayBSZXN1bHR9IGluc3RhbmNlIHJlcHJlc2VudGluZyB0aGUgcm9vdOKAmXMgQ1NTLlxuICAgKlxuICAgKiBAcGFyYW0ge3Byb2Nlc3NPcHRpb25zfSBbb3B0c10gT3B0aW9ucyB3aXRoIG9ubHkgYHRvYCBhbmQgYG1hcGAga2V5cy5cbiAgICpcbiAgICogQHJldHVybiB7UmVzdWx0fSBSZXN1bHQgd2l0aCBjdXJyZW50IHJvb3TigJlzIENTUy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3Qgcm9vdDEgPSBwb3N0Y3NzLnBhcnNlKGNzczEsIHsgZnJvbTogJ2EuY3NzJyB9KVxuICAgKiBjb25zdCByb290MiA9IHBvc3Rjc3MucGFyc2UoY3NzMiwgeyBmcm9tOiAnYi5jc3MnIH0pXG4gICAqIHJvb3QxLmFwcGVuZChyb290MilcbiAgICogY29uc3QgcmVzdWx0ID0gcm9vdDEudG9SZXN1bHQoeyB0bzogJ2FsbC5jc3MnLCBtYXA6IHRydWUgfSlcbiAgICovXG4gIDtcblxuICBfcHJvdG8udG9SZXN1bHQgPSBmdW5jdGlvbiB0b1Jlc3VsdChvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBMYXp5UmVzdWx0ID0gcmVxdWlyZSgnLi9sYXp5LXJlc3VsdCcpO1xuXG4gICAgdmFyIFByb2Nlc3NvciA9IHJlcXVpcmUoJy4vcHJvY2Vzc29yJyk7XG5cbiAgICB2YXIgbGF6eSA9IG5ldyBMYXp5UmVzdWx0KG5ldyBQcm9jZXNzb3IoKSwgdGhpcywgb3B0cyk7XG4gICAgcmV0dXJuIGxhenkuc3RyaW5naWZ5KCk7XG4gIH1cbiAgLyoqXG4gICAqIEBtZW1iZXJvZiBSb290I1xuICAgKiBAbWVtYmVyIHtvYmplY3R9IHJhd3MgSW5mb3JtYXRpb24gdG8gZ2VuZXJhdGUgYnl0ZS10by1ieXRlIGVxdWFsXG4gICAqICAgICAgICAgICAgICAgICAgICAgICBub2RlIHN0cmluZyBhcyBpdCB3YXMgaW4gdGhlIG9yaWdpbiBpbnB1dC5cbiAgICpcbiAgICogRXZlcnkgcGFyc2VyIHNhdmVzIGl0cyBvd24gcHJvcGVydGllcyxcbiAgICogYnV0IHRoZSBkZWZhdWx0IENTUyBwYXJzZXIgdXNlczpcbiAgICpcbiAgICogKiBgYWZ0ZXJgOiB0aGUgc3BhY2Ugc3ltYm9scyBhZnRlciB0aGUgbGFzdCBjaGlsZCB0byB0aGUgZW5kIG9mIGZpbGUuXG4gICAqICogYHNlbWljb2xvbmA6IGlzIHRoZSBsYXN0IGNoaWxkIGhhcyBhbiAob3B0aW9uYWwpIHNlbWljb2xvbi5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogcG9zdGNzcy5wYXJzZSgnYSB7fVxcbicpLnJhd3MgLy89PiB7IGFmdGVyOiAnXFxuJyB9XG4gICAqIHBvc3Rjc3MucGFyc2UoJ2Ege30nKS5yYXdzICAgLy89PiB7IGFmdGVyOiAnJyB9XG4gICAqL1xuICA7XG5cbiAgcmV0dXJuIFJvb3Q7XG59KF9jb250YWluZXIuZGVmYXVsdCk7XG5cbnZhciBfZGVmYXVsdCA9IFJvb3Q7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbkp2YjNRdVpYTTJJbDBzSW01aGJXVnpJanBiSWxKdmIzUWlMQ0prWldaaGRXeDBjeUlzSW5SNWNHVWlMQ0p1YjJSbGN5SXNJbkpsYlc5MlpVTm9hV3hrSWl3aVkyaHBiR1FpTENKcFoyNXZjbVVpTENKcGJtUmxlQ0lzSW14bGJtZDBhQ0lzSW5KaGQzTWlMQ0ppWldadmNtVWlMQ0p1YjNKdFlXeHBlbVVpTENKellXMXdiR1VpTENKbWFYSnpkQ0lzSW01dlpHVWlMQ0owYjFKbGMzVnNkQ0lzSW05d2RITWlMQ0pNWVhwNVVtVnpkV3gwSWl3aWNtVnhkV2x5WlNJc0lsQnliMk5sYzNOdmNpSXNJbXhoZW5raUxDSnpkSEpwYm1kcFpua2lMQ0pEYjI1MFlXbHVaWElpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3TzBGQlFVRTdPenM3T3p0QlFVVkJPenM3T3pzN096czdPMGxCVlUxQkxFazdPenM3TzBGQlEwb3NaMEpCUVdGRExGRkJRV0lzUlVGQmRVSTdRVUZCUVRzN1FVRkRja0lzYTBOQlFVMUJMRkZCUVU0N1FVRkRRU3hWUVVGTFF5eEpRVUZNTEVkQlFWa3NUVUZCV2p0QlFVTkJMRkZCUVVrc1EwRkJReXhOUVVGTFF5eExRVUZXTEVWQlFXbENMRTFCUVV0QkxFdEJRVXdzUjBGQllTeEZRVUZpTzBGQlNFazdRVUZKZEVJN096czdVMEZGUkVNc1Z5eEhRVUZCTEhGQ1FVRmhReXhMUVVGaUxFVkJRVzlDUXl4TlFVRndRaXhGUVVFMFFqdEJRVU14UWl4UlFVRkpReXhMUVVGTExFZEJRVWNzUzBGQlMwRXNTMEZCVEN4RFFVRlhSaXhMUVVGWUxFTkJRVm83TzBGQlJVRXNVVUZCU1N4RFFVRkRReXhOUVVGRUxFbEJRVmRETEV0QlFVc3NTMEZCU3l4RFFVRnlRaXhKUVVFd1FpeExRVUZMU2l4TFFVRk1MRU5CUVZkTExFMUJRVmdzUjBGQmIwSXNRMEZCYkVRc1JVRkJjVVE3UVVGRGJrUXNWMEZCUzB3c1MwRkJUQ3hEUVVGWExFTkJRVmdzUlVGQlkwMHNTVUZCWkN4RFFVRnRRa01zVFVGQmJrSXNSMEZCTkVJc1MwRkJTMUFzUzBGQlRDeERRVUZYU1N4TFFVRllMRVZCUVd0Q1JTeEpRVUZzUWl4RFFVRjFRa01zVFVGQmJrUTdRVUZEUkRzN1FVRkZSQ3huUTBGQllVNHNWMEZCWWl4WlFVRjVRa01zUzBGQmVrSTdRVUZEUkN4SE96dFRRVVZFVFN4VExFZEJRVUVzYlVKQlFWZE9MRXRCUVZnc1JVRkJhMEpQTEUxQlFXeENMRVZCUVRCQ1ZpeEpRVUV4UWl4RlFVRm5RenRCUVVNNVFpeFJRVUZKUXl4TFFVRkxMSGRDUVVGVFVTeFRRVUZVTEZsQlFXMUNUaXhMUVVGdVFpeERRVUZVT3p0QlFVVkJMRkZCUVVsUExFMUJRVW9zUlVGQldUdEJRVU5XTEZWQlFVbFdMRWxCUVVrc1MwRkJTeXhUUVVGaUxFVkJRWGRDTzBGQlEzUkNMRmxCUVVrc1MwRkJTME1zUzBGQlRDeERRVUZYU3l4TlFVRllMRWRCUVc5Q0xFTkJRWGhDTEVWQlFUSkNPMEZCUTNwQ1NTeFZRVUZCUVN4TlFVRk5MRU5CUVVOSUxFbEJRVkFzUTBGQldVTXNUVUZCV2l4SFFVRnhRaXhMUVVGTFVDeExRVUZNTEVOQlFWY3NRMEZCV0N4RlFVRmpUU3hKUVVGa0xFTkJRVzFDUXl4TlFVRjRRenRCUVVORUxGTkJSa1FzVFVGRlR6dEJRVU5NTEdsQ1FVRlBSU3hOUVVGTkxFTkJRVU5JTEVsQlFWQXNRMEZCV1VNc1RVRkJia0k3UVVGRFJEdEJRVU5HTEU5QlRrUXNUVUZOVHl4SlFVRkpMRXRCUVV0SExFdEJRVXdzUzBGQlpVUXNUVUZCYmtJc1JVRkJNa0k3UVVGRGFFTXNOa0pCUVdsQ1ZDeExRVUZxUWl4clNFRkJkMEk3UVVGQlFUczdRVUZCUVR0QlFVRkJPMEZCUVVFN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCT3p0QlFVRkJMR05CUVdaWExFbEJRV1U3UVVGRGRFSkJMRlZCUVVGQkxFbEJRVWtzUTBGQlEwd3NTVUZCVEN4RFFVRlZReXhOUVVGV0xFZEJRVzFDUlN4TlFVRk5MRU5CUVVOSUxFbEJRVkFzUTBGQldVTXNUVUZCTDBJN1FVRkRSRHRCUVVOR08wRkJRMFk3TzBGQlJVUXNWMEZCVDFBc1MwRkJVRHRCUVVORU8wRkJSVVE3T3pzN096czdPenM3T3pzN096dFRRV0ZCV1N4UkxFZEJRVUVzYTBKQlFWVkRMRWxCUVZZc1JVRkJjMEk3UVVGQlFTeFJRVUZhUVN4SlFVRlpPMEZCUVZwQkxFMUJRVUZCTEVsQlFWa3NSMEZCVEN4RlFVRkxPMEZCUVVFN08wRkJRM0JDTEZGQlFVbERMRlZCUVZVc1IwRkJSME1zVDBGQlR5eERRVUZETEdWQlFVUXNRMEZCZUVJN08wRkJRMEVzVVVGQlNVTXNVMEZCVXl4SFFVRkhSQ3hQUVVGUExFTkJRVU1zWVVGQlJDeERRVUYyUWpzN1FVRkZRU3hSUVVGSlJTeEpRVUZKTEVkQlFVY3NTVUZCU1Vnc1ZVRkJTaXhEUVVGbExFbEJRVWxGTEZOQlFVb3NSVUZCWml4RlFVRm5ReXhKUVVGb1F5eEZRVUZ6UTBnc1NVRkJkRU1zUTBGQldEdEJRVU5CTEZkQlFVOUpMRWxCUVVrc1EwRkJRME1zVTBGQlRDeEZRVUZRTzBGQlEwUTdRVUZGUkRzN096czdPenM3T3pzN096czdPenM3TzBWQk1VUnBRa01zYTBJN08yVkJNa1ZLZEVJc1NTSXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJbWx0Y0c5eWRDQkRiMjUwWVdsdVpYSWdabkp2YlNBbkxpOWpiMjUwWVdsdVpYSW5YRzVjYmk4cUtseHVJQ29nVW1Wd2NtVnpaVzUwY3lCaElFTlRVeUJtYVd4bElHRnVaQ0JqYjI1MFlXbHVjeUJoYkd3Z2FYUnpJSEJoY25ObFpDQnViMlJsY3k1Y2JpQXFYRzRnS2lCQVpYaDBaVzVrY3lCRGIyNTBZV2x1WlhKY2JpQXFYRzRnS2lCQVpYaGhiWEJzWlZ4dUlDb2dZMjl1YzNRZ2NtOXZkQ0E5SUhCdmMzUmpjM011Y0dGeWMyVW9KMkY3WTI5c2IzSTZZbXhoWTJ0OUlHSjdlaTFwYm1SbGVEb3lmU2NwWEc0Z0tpQnliMjkwTG5SNWNHVWdJQ0FnSUNBZ0lDQXZMejArSUNkeWIyOTBKMXh1SUNvZ2NtOXZkQzV1YjJSbGN5NXNaVzVuZEdnZ0x5ODlQaUF5WEc0Z0tpOWNibU5zWVhOeklGSnZiM1FnWlhoMFpXNWtjeUJEYjI1MFlXbHVaWElnZTF4dUlDQmpiMjV6ZEhKMVkzUnZjaUFvWkdWbVlYVnNkSE1wSUh0Y2JpQWdJQ0J6ZFhCbGNpaGtaV1poZFd4MGN5bGNiaUFnSUNCMGFHbHpMblI1Y0dVZ1BTQW5jbTl2ZENkY2JpQWdJQ0JwWmlBb0lYUm9hWE11Ym05a1pYTXBJSFJvYVhNdWJtOWtaWE1nUFNCYlhWeHVJQ0I5WEc1Y2JpQWdjbVZ0YjNabFEyaHBiR1FnS0dOb2FXeGtMQ0JwWjI1dmNtVXBJSHRjYmlBZ0lDQnNaWFFnYVc1a1pYZ2dQU0IwYUdsekxtbHVaR1Y0S0dOb2FXeGtLVnh1WEc0Z0lDQWdhV1lnS0NGcFoyNXZjbVVnSmlZZ2FXNWtaWGdnUFQwOUlEQWdKaVlnZEdocGN5NXViMlJsY3k1c1pXNW5kR2dnUGlBeEtTQjdYRzRnSUNBZ0lDQjBhR2x6TG01dlpHVnpXekZkTG5KaGQzTXVZbVZtYjNKbElEMGdkR2hwY3k1dWIyUmxjMXRwYm1SbGVGMHVjbUYzY3k1aVpXWnZjbVZjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z2MzVndaWEl1Y21WdGIzWmxRMmhwYkdRb1kyaHBiR1FwWEc0Z0lIMWNibHh1SUNCdWIzSnRZV3hwZW1VZ0tHTm9hV3hrTENCellXMXdiR1VzSUhSNWNHVXBJSHRjYmlBZ0lDQnNaWFFnYm05a1pYTWdQU0J6ZFhCbGNpNXViM0p0WVd4cGVtVW9ZMmhwYkdRcFhHNWNiaUFnSUNCcFppQW9jMkZ0Y0d4bEtTQjdYRzRnSUNBZ0lDQnBaaUFvZEhsd1pTQTlQVDBnSjNCeVpYQmxibVFuS1NCN1hHNGdJQ0FnSUNBZ0lHbG1JQ2gwYUdsekxtNXZaR1Z6TG14bGJtZDBhQ0ErSURFcElIdGNiaUFnSUNBZ0lDQWdJQ0J6WVcxd2JHVXVjbUYzY3k1aVpXWnZjbVVnUFNCMGFHbHpMbTV2WkdWeld6RmRMbkpoZDNNdVltVm1iM0psWEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ1pHVnNaWFJsSUhOaGJYQnNaUzV5WVhkekxtSmxabTl5WlZ4dUlDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11Wm1seWMzUWdJVDA5SUhOaGJYQnNaU2tnZTF4dUlDQWdJQ0FnSUNCbWIzSWdLR3hsZENCdWIyUmxJRzltSUc1dlpHVnpLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JtOWtaUzV5WVhkekxtSmxabTl5WlNBOUlITmhiWEJzWlM1eVlYZHpMbUpsWm05eVpWeHVJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQjlYRzRnSUNBZ2ZWeHVYRzRnSUNBZ2NtVjBkWEp1SUc1dlpHVnpYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nVW1WMGRYSnVjeUJoSUh0QWJHbHVheUJTWlhOMWJIUjlJR2x1YzNSaGJtTmxJSEpsY0hKbGMyVnVkR2x1WnlCMGFHVWdjbTl2ZE9LQW1YTWdRMU5UTGx4dUlDQWdLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzQnliMk5sYzNOUGNIUnBiMjV6ZlNCYmIzQjBjMTBnVDNCMGFXOXVjeUIzYVhSb0lHOXViSGtnWUhSdllDQmhibVFnWUcxaGNHQWdhMlY1Y3k1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEpsZEhWeWJpQjdVbVZ6ZFd4MGZTQlNaWE4xYkhRZ2QybDBhQ0JqZFhKeVpXNTBJSEp2YjNUaWdKbHpJRU5UVXk1Y2JpQWdJQ3BjYmlBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNvZ1kyOXVjM1FnY205dmRERWdQU0J3YjNOMFkzTnpMbkJoY25ObEtHTnpjekVzSUhzZ1puSnZiVG9nSjJFdVkzTnpKeUI5S1Z4dUlDQWdLaUJqYjI1emRDQnliMjkwTWlBOUlIQnZjM1JqYzNNdWNHRnljMlVvWTNOek1pd2dleUJtY205dE9pQW5ZaTVqYzNNbklIMHBYRzRnSUNBcUlISnZiM1F4TG1Gd2NHVnVaQ2h5YjI5ME1pbGNiaUFnSUNvZ1kyOXVjM1FnY21WemRXeDBJRDBnY205dmRERXVkRzlTWlhOMWJIUW9leUIwYnpvZ0oyRnNiQzVqYzNNbkxDQnRZWEE2SUhSeWRXVWdmU2xjYmlBZ0lDb3ZYRzRnSUhSdlVtVnpkV3gwSUNodmNIUnpJRDBnZXlCOUtTQjdYRzRnSUNBZ2JHVjBJRXhoZW5sU1pYTjFiSFFnUFNCeVpYRjFhWEpsS0NjdUwyeGhlbmt0Y21WemRXeDBKeWxjYmlBZ0lDQnNaWFFnVUhKdlkyVnpjMjl5SUQwZ2NtVnhkV2x5WlNnbkxpOXdjbTlqWlhOemIzSW5LVnh1WEc0Z0lDQWdiR1YwSUd4aGVua2dQU0J1WlhjZ1RHRjZlVkpsYzNWc2RDaHVaWGNnVUhKdlkyVnpjMjl5S0Nrc0lIUm9hWE1zSUc5d2RITXBYRzRnSUNBZ2NtVjBkWEp1SUd4aGVua3VjM1J5YVc1bmFXWjVLQ2xjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCQWJXVnRZbVZ5YjJZZ1VtOXZkQ05jYmlBZ0lDb2dRRzFsYldKbGNpQjdiMkpxWldOMGZTQnlZWGR6SUVsdVptOXliV0YwYVc5dUlIUnZJR2RsYm1WeVlYUmxJR0o1ZEdVdGRHOHRZbmwwWlNCbGNYVmhiRnh1SUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm05a1pTQnpkSEpwYm1jZ1lYTWdhWFFnZDJGeklHbHVJSFJvWlNCdmNtbG5hVzRnYVc1d2RYUXVYRzRnSUNBcVhHNGdJQ0FxSUVWMlpYSjVJSEJoY25ObGNpQnpZWFpsY3lCcGRITWdiM2R1SUhCeWIzQmxjblJwWlhNc1hHNGdJQ0FxSUdKMWRDQjBhR1VnWkdWbVlYVnNkQ0JEVTFNZ2NHRnljMlZ5SUhWelpYTTZYRzRnSUNBcVhHNGdJQ0FxSUNvZ1lHRm1kR1Z5WURvZ2RHaGxJSE53WVdObElITjViV0p2YkhNZ1lXWjBaWElnZEdobElHeGhjM1FnWTJocGJHUWdkRzhnZEdobElHVnVaQ0J2WmlCbWFXeGxMbHh1SUNBZ0tpQXFJR0J6WlcxcFkyOXNiMjVnT2lCcGN5QjBhR1VnYkdGemRDQmphR2xzWkNCb1lYTWdZVzRnS0c5d2RHbHZibUZzS1NCelpXMXBZMjlzYjI0dVhHNGdJQ0FxWEc0Z0lDQXFJRUJsZUdGdGNHeGxYRzRnSUNBcUlIQnZjM1JqYzNNdWNHRnljMlVvSjJFZ2UzMWNYRzRuS1M1eVlYZHpJQzh2UFQ0Z2V5QmhablJsY2pvZ0oxeGNiaWNnZlZ4dUlDQWdLaUJ3YjNOMFkzTnpMbkJoY25ObEtDZGhJSHQ5SnlrdWNtRjNjeUFnSUM4dlBUNGdleUJoWm5SbGNqb2dKeWNnZlZ4dUlDQWdLaTljYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1VtOXZkRnh1SWwwc0ltWnBiR1VpT2lKeWIyOTBMbXB6SW4wPVxuIiwidmFyIE1JTExJU0VDT05EU19JTl9NSU5VVEUgPSA2MDAwMDtcblxuZnVuY3Rpb24gZ2V0RGF0ZU1pbGxpc2Vjb25kc1BhcnQoZGF0ZSkge1xuICByZXR1cm4gZGF0ZS5nZXRUaW1lKCkgJSBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFO1xufVxuLyoqXG4gKiBHb29nbGUgQ2hyb21lIGFzIG9mIDY3LjAuMzM5Ni44NyBpbnRyb2R1Y2VkIHRpbWV6b25lcyB3aXRoIG9mZnNldCB0aGF0IGluY2x1ZGVzIHNlY29uZHMuXG4gKiBUaGV5IHVzdWFsbHkgYXBwZWFyIGZvciBkYXRlcyB0aGF0IGRlbm90ZSB0aW1lIGJlZm9yZSB0aGUgdGltZXpvbmVzIHdlcmUgaW50cm9kdWNlZFxuICogKGUuZy4gZm9yICdFdXJvcGUvUHJhZ3VlJyB0aW1lem9uZSB0aGUgb2Zmc2V0IGlzIEdNVCswMDo1Nzo0NCBiZWZvcmUgMSBPY3RvYmVyIDE4OTFcbiAqIGFuZCBHTVQrMDE6MDA6MDAgYWZ0ZXIgdGhhdCBkYXRlKVxuICpcbiAqIERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgYW5kIHdvdWxkIHJldHVybiA1NyBmb3IgdGhlIGV4YW1wbGUgYWJvdmUsXG4gKiB3aGljaCB3b3VsZCBsZWFkIHRvIGluY29ycmVjdCBjYWxjdWxhdGlvbnMuXG4gKlxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIHRoZSB0aW1lem9uZSBvZmZzZXQgaW4gbWlsbGlzZWNvbmRzIHRoYXQgdGFrZXMgc2Vjb25kcyBpbiBhY2NvdW50LlxuICovXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkaXJ0eURhdGUpIHtcbiAgdmFyIGRhdGUgPSBuZXcgRGF0ZShkaXJ0eURhdGUuZ2V0VGltZSgpKTtcbiAgdmFyIGJhc2VUaW1lem9uZU9mZnNldCA9IE1hdGguY2VpbChkYXRlLmdldFRpbWV6b25lT2Zmc2V0KCkpO1xuICBkYXRlLnNldFNlY29uZHMoMCwgMCk7XG4gIHZhciBoYXNOZWdhdGl2ZVVUQ09mZnNldCA9IGJhc2VUaW1lem9uZU9mZnNldCA+IDA7XG4gIHZhciBtaWxsaXNlY29uZHNQYXJ0T2ZUaW1lem9uZU9mZnNldCA9IGhhc05lZ2F0aXZlVVRDT2Zmc2V0ID8gKE1JTExJU0VDT05EU19JTl9NSU5VVEUgKyBnZXREYXRlTWlsbGlzZWNvbmRzUGFydChkYXRlKSkgJSBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFIDogZ2V0RGF0ZU1pbGxpc2Vjb25kc1BhcnQoZGF0ZSk7XG4gIHJldHVybiBiYXNlVGltZXpvbmVPZmZzZXQgKiBNSUxMSVNFQ09ORFNfSU5fTUlOVVRFICsgbWlsbGlzZWNvbmRzUGFydE9mVGltZXpvbmVPZmZzZXQ7XG59IiwidmFyIGZvcm1hdERpc3RhbmNlTG9jYWxlID0ge1xuICBsZXNzVGhhblhTZWNvbmRzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgeFNlY29uZHM6IHtcbiAgICBvbmU6ICcxIHNlY29uZCcsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gc2Vjb25kcydcbiAgfSxcbiAgaGFsZkFNaW51dGU6ICdoYWxmIGEgbWludXRlJyxcbiAgbGVzc1RoYW5YTWludXRlczoge1xuICAgIG9uZTogJ2xlc3MgdGhhbiBhIG1pbnV0ZScsXG4gICAgb3RoZXI6ICdsZXNzIHRoYW4ge3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIHhNaW51dGVzOiB7XG4gICAgb25lOiAnMSBtaW51dGUnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1pbnV0ZXMnXG4gIH0sXG4gIGFib3V0WEhvdXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSBob3VyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeEhvdXJzOiB7XG4gICAgb25lOiAnMSBob3VyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBob3VycydcbiAgfSxcbiAgeERheXM6IHtcbiAgICBvbmU6ICcxIGRheScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gZGF5cydcbiAgfSxcbiAgYWJvdXRYV2Vla3M6IHtcbiAgICBvbmU6ICdhYm91dCAxIHdlZWsnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICB4V2Vla3M6IHtcbiAgICBvbmU6ICcxIHdlZWsnLFxuICAgIG90aGVyOiAne3tjb3VudH19IHdlZWtzJ1xuICB9LFxuICBhYm91dFhNb250aHM6IHtcbiAgICBvbmU6ICdhYm91dCAxIG1vbnRoJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIHhNb250aHM6IHtcbiAgICBvbmU6ICcxIG1vbnRoJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBtb250aHMnXG4gIH0sXG4gIGFib3V0WFllYXJzOiB7XG4gICAgb25lOiAnYWJvdXQgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2Fib3V0IHt7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgeFllYXJzOiB7XG4gICAgb25lOiAnMSB5ZWFyJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSB5ZWFycydcbiAgfSxcbiAgb3ZlclhZZWFyczoge1xuICAgIG9uZTogJ292ZXIgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ292ZXIge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBhbG1vc3RYWWVhcnM6IHtcbiAgICBvbmU6ICdhbG1vc3QgMSB5ZWFyJyxcbiAgICBvdGhlcjogJ2FsbW9zdCB7e2NvdW50fX0geWVhcnMnXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXREaXN0YW5jZSh0b2tlbiwgY291bnQsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIHZhciByZXN1bHQ7XG5cbiAgaWYgKHR5cGVvZiBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0gPT09ICdzdHJpbmcnKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dO1xuICB9IGVsc2UgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgcmVzdWx0ID0gZm9ybWF0RGlzdGFuY2VMb2NhbGVbdG9rZW5dLm9uZTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub3RoZXIucmVwbGFjZSgne3tjb3VudH19JywgY291bnQpO1xuICB9XG5cbiAgaWYgKG9wdGlvbnMuYWRkU3VmZml4KSB7XG4gICAgaWYgKG9wdGlvbnMuY29tcGFyaXNvbiA+IDApIHtcbiAgICAgIHJldHVybiAnaW4gJyArIHJlc3VsdDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc3VsdCArICcgYWdvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRm9ybWF0TG9uZ0ZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChkaXJ0eU9wdGlvbnMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgdmFyIGZvcm1hdCA9IGFyZ3MuZm9ybWF0c1t3aWR0aF0gfHwgYXJncy5mb3JtYXRzW2FyZ3MuZGVmYXVsdFdpZHRoXTtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9O1xufSIsImltcG9ydCBidWlsZEZvcm1hdExvbmdGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkRm9ybWF0TG9uZ0ZuL2luZGV4LmpzJztcbnZhciBkYXRlRm9ybWF0cyA9IHtcbiAgZnVsbDogJ0VFRUUsIE1NTU0gZG8sIHknLFxuICBsb25nOiAnTU1NTSBkbywgeScsXG4gIG1lZGl1bTogJ01NTSBkLCB5JyxcbiAgc2hvcnQ6ICdNTS9kZC95eXl5J1xufTtcbnZhciB0aW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogJ2g6bW06c3MgYSB6enp6JyxcbiAgbG9uZzogJ2g6bW06c3MgYSB6JyxcbiAgbWVkaXVtOiAnaDptbTpzcyBhJyxcbiAgc2hvcnQ6ICdoOm1tIGEnXG59O1xudmFyIGRhdGVUaW1lRm9ybWF0cyA9IHtcbiAgZnVsbDogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIGxvbmc6IFwie3tkYXRlfX0gJ2F0JyB7e3RpbWV9fVwiLFxuICBtZWRpdW06ICd7e2RhdGV9fSwge3t0aW1lfX0nLFxuICBzaG9ydDogJ3t7ZGF0ZX19LCB7e3RpbWV9fSdcbn07XG52YXIgZm9ybWF0TG9uZyA9IHtcbiAgZGF0ZTogYnVpbGRGb3JtYXRMb25nRm4oe1xuICAgIGZvcm1hdHM6IGRhdGVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pLFxuICB0aW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogdGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIGRhdGVUaW1lOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZVRpbWVGb3JtYXRzLFxuICAgIGRlZmF1bHRXaWR0aDogJ2Z1bGwnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgZm9ybWF0TG9uZzsiLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5SW5kZXgsIGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciBjb250ZXh0ID0gb3B0aW9ucy5jb250ZXh0ID8gU3RyaW5nKG9wdGlvbnMuY29udGV4dCkgOiAnc3RhbmRhbG9uZSc7XG4gICAgdmFyIHZhbHVlc0FycmF5O1xuXG4gICAgaWYgKGNvbnRleHQgPT09ICdmb3JtYXR0aW5nJyAmJiBhcmdzLmZvcm1hdHRpbmdWYWx1ZXMpIHtcbiAgICAgIHZhciBkZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRGb3JtYXR0aW5nV2lkdGggfHwgYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogZGVmYXVsdFdpZHRoO1xuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1tkZWZhdWx0V2lkdGhdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2RlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YXIgX3dpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MudmFsdWVzW193aWR0aF0gfHwgYXJncy52YWx1ZXNbX2RlZmF1bHRXaWR0aF07XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gYXJncy5hcmd1bWVudENhbGxiYWNrID8gYXJncy5hcmd1bWVudENhbGxiYWNrKGRpcnR5SW5kZXgpIDogZGlydHlJbmRleDtcbiAgICByZXR1cm4gdmFsdWVzQXJyYXlbaW5kZXhdO1xuICB9O1xufSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hGbihhcmdzKSB7XG4gIHJldHVybiBmdW5jdGlvbiAoZGlydHlTdHJpbmcsIGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBzdHJpbmcgPSBTdHJpbmcoZGlydHlTdHJpbmcpO1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gICAgdmFyIG1hdGNoUGF0dGVybiA9IHdpZHRoICYmIGFyZ3MubWF0Y2hQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5tYXRjaFBhdHRlcm5zW2FyZ3MuZGVmYXVsdE1hdGNoV2lkdGhdO1xuICAgIHZhciBtYXRjaFJlc3VsdCA9IHN0cmluZy5tYXRjaChtYXRjaFBhdHRlcm4pO1xuXG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VQYXR0ZXJucyA9IHdpZHRoICYmIGFyZ3MucGFyc2VQYXR0ZXJuc1t3aWR0aF0gfHwgYXJncy5wYXJzZVBhdHRlcm5zW2FyZ3MuZGVmYXVsdFBhcnNlV2lkdGhdO1xuICAgIHZhciB2YWx1ZTtcblxuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwocGFyc2VQYXR0ZXJucykgPT09ICdbb2JqZWN0IEFycmF5XScpIHtcbiAgICAgIHZhbHVlID0gZmluZEluZGV4KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgPSBmaW5kS2V5KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICB2YWx1ZSA9IG9wdGlvbnMudmFsdWVDYWxsYmFjayA/IG9wdGlvbnMudmFsdWVDYWxsYmFjayh2YWx1ZSkgOiB2YWx1ZTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKVxuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBwcmVkaWNhdGUob2JqZWN0W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSkge1xuICBmb3IgKHZhciBrZXkgPSAwOyBrZXkgPCBhcnJheS5sZW5ndGg7IGtleSsrKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtrZXldKSkge1xuICAgICAgcmV0dXJuIGtleTtcbiAgICB9XG4gIH1cbn0iLCJpbXBvcnQgYnVpbGRNYXRjaFBhdHRlcm5GbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hQYXR0ZXJuRm4vaW5kZXguanMnO1xuaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tICcuLi8uLi8uLi9fbGliL2J1aWxkTWF0Y2hGbi9pbmRleC5qcyc7XG52YXIgbWF0Y2hPcmRpbmFsTnVtYmVyUGF0dGVybiA9IC9eKFxcZCspKHRofHN0fG5kfHJkKT8vaTtcbnZhciBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL1xcZCsvaTtcbnZhciBtYXRjaEVyYVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGJ8YSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKGJcXC4/XFxzP2NcXC4/fGJcXC4/XFxzP2NcXC4/XFxzP2VcXC4/fGFcXC4/XFxzP2RcXC4/fGNcXC4/XFxzP2VcXC4/KS9pLFxuICB3aWRlOiAvXihiZWZvcmUgY2hyaXN0fGJlZm9yZSBjb21tb24gZXJhfGFubm8gZG9taW5pfGNvbW1vbiBlcmEpL2lcbn07XG52YXIgcGFyc2VFcmFQYXR0ZXJucyA9IHtcbiAgYW55OiBbL15iL2ksIC9eKGF8YykvaV1cbn07XG52YXIgbWF0Y2hRdWFydGVyUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bMTIzNF0vaSxcbiAgYWJicmV2aWF0ZWQ6IC9ecVsxMjM0XS9pLFxuICB3aWRlOiAvXlsxMjM0XSh0aHxzdHxuZHxyZCk/IHF1YXJ0ZXIvaVxufTtcbnZhciBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgYW55OiBbLzEvaSwgLzIvaSwgLzMvaSwgLzQvaV1cbn07XG52YXIgbWF0Y2hNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW2pmbWFzb25kXS9pLFxuICBhYmJyZXZpYXRlZDogL14oamFufGZlYnxtYXJ8YXByfG1heXxqdW58anVsfGF1Z3xzZXB8b2N0fG5vdnxkZWMpL2ksXG4gIHdpZGU6IC9eKGphbnVhcnl8ZmVicnVhcnl8bWFyY2h8YXByaWx8bWF5fGp1bmV8anVseXxhdWd1c3R8c2VwdGVtYmVyfG9jdG9iZXJ8bm92ZW1iZXJ8ZGVjZW1iZXIpL2lcbn07XG52YXIgcGFyc2VNb250aFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IFsvXmovaSwgL15mL2ksIC9ebS9pLCAvXmEvaSwgL15tL2ksIC9eai9pLCAvXmovaSwgL15hL2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXSxcbiAgYW55OiBbL15qYS9pLCAvXmYvaSwgL15tYXIvaSwgL15hcC9pLCAvXm1heS9pLCAvXmp1bi9pLCAvXmp1bC9pLCAvXmF1L2ksIC9ecy9pLCAvXm8vaSwgL15uL2ksIC9eZC9pXVxufTtcbnZhciBtYXRjaERheVBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eW3NtdHdmXS9pLFxuICBzaG9ydDogL14oc3V8bW98dHV8d2V8dGh8ZnJ8c2EpL2ksXG4gIGFiYnJldmlhdGVkOiAvXihzdW58bW9ufHR1ZXx3ZWR8dGh1fGZyaXxzYXQpL2ksXG4gIHdpZGU6IC9eKHN1bmRheXxtb25kYXl8dHVlc2RheXx3ZWRuZXNkYXl8dGh1cnNkYXl8ZnJpZGF5fHNhdHVyZGF5KS9pXG59O1xudmFyIHBhcnNlRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9ecy9pLCAvXm0vaSwgL150L2ksIC9edy9pLCAvXnQvaSwgL15mL2ksIC9ecy9pXSxcbiAgYW55OiBbL15zdS9pLCAvXm0vaSwgL150dS9pLCAvXncvaSwgL150aC9pLCAvXmYvaSwgL15zYS9pXVxufTtcbnZhciBtYXRjaERheVBlcmlvZFBhdHRlcm5zID0ge1xuICBuYXJyb3c6IC9eKGF8cHxtaXxufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaSxcbiAgYW55OiAvXihbYXBdXFwuP1xccz9tXFwuP3xtaWRuaWdodHxub29ufChpbiB0aGV8YXQpIChtb3JuaW5nfGFmdGVybm9vbnxldmVuaW5nfG5pZ2h0KSkvaVxufTtcbnZhciBwYXJzZURheVBlcmlvZFBhdHRlcm5zID0ge1xuICBhbnk6IHtcbiAgICBhbTogL15hL2ksXG4gICAgcG06IC9ecC9pLFxuICAgIG1pZG5pZ2h0OiAvXm1pL2ksXG4gICAgbm9vbjogL15uby9pLFxuICAgIG1vcm5pbmc6IC9tb3JuaW5nL2ksXG4gICAgYWZ0ZXJub29uOiAvYWZ0ZXJub29uL2ksXG4gICAgZXZlbmluZzogL2V2ZW5pbmcvaSxcbiAgICBuaWdodDogL25pZ2h0L2lcbiAgfVxufTtcbnZhciBtYXRjaCA9IHtcbiAgb3JkaW5hbE51bWJlcjogYnVpbGRNYXRjaFBhdHRlcm5Gbih7XG4gICAgbWF0Y2hQYXR0ZXJuOiBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHBhcnNlUGF0dGVybjogcGFyc2VPcmRpbmFsTnVtYmVyUGF0dGVybixcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBwYXJzZUludCh2YWx1ZSwgMTApO1xuICAgIH1cbiAgfSksXG4gIGVyYTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaEVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VFcmFQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIHF1YXJ0ZXI6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hRdWFydGVyUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZVF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueScsXG4gICAgdmFsdWVDYWxsYmFjazogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICByZXR1cm4gaW5kZXggKyAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlTW9udGhQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheTogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VEYXlQYXR0ZXJucyxcbiAgICBkZWZhdWx0UGFyc2VXaWR0aDogJ2FueSdcbiAgfSksXG4gIGRheVBlcmlvZDogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaERheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnYW55JyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBlcmlvZFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KVxufTtcbmV4cG9ydCBkZWZhdWx0IG1hdGNoOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5U3RyaW5nLCBkaXJ0eU9wdGlvbnMpIHtcbiAgICB2YXIgc3RyaW5nID0gU3RyaW5nKGRpcnR5U3RyaW5nKTtcbiAgICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5tYXRjaFBhdHRlcm4pO1xuXG4gICAgaWYgKCFtYXRjaFJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIG1hdGNoZWRTdHJpbmcgPSBtYXRjaFJlc3VsdFswXTtcbiAgICB2YXIgcGFyc2VSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5wYXJzZVBhdHRlcm4pO1xuXG4gICAgaWYgKCFwYXJzZVJlc3VsdCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gYXJncy52YWx1ZUNhbGxiYWNrID8gYXJncy52YWx1ZUNhbGxiYWNrKHBhcnNlUmVzdWx0WzBdKSA6IHBhcnNlUmVzdWx0WzBdO1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpXG4gICAgfTtcbiAgfTtcbn0iLCJpbXBvcnQgZm9ybWF0RGlzdGFuY2UgZnJvbSAnLi9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gJy4vX2xpYi9mb3JtYXRMb25nL2luZGV4LmpzJztcbmltcG9ydCBmb3JtYXRSZWxhdGl2ZSBmcm9tICcuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMnO1xuaW1wb3J0IGxvY2FsaXplIGZyb20gJy4vX2xpYi9sb2NhbGl6ZS9pbmRleC5qcyc7XG5pbXBvcnQgbWF0Y2ggZnJvbSAnLi9fbGliL21hdGNoL2luZGV4LmpzJztcbi8qKlxuICogQHR5cGUge0xvY2FsZX1cbiAqIEBjYXRlZ29yeSBMb2NhbGVzXG4gKiBAc3VtbWFyeSBFbmdsaXNoIGxvY2FsZSAoVW5pdGVkIFN0YXRlcykuXG4gKiBAbGFuZ3VhZ2UgRW5nbGlzaFxuICogQGlzby02MzktMiBlbmdcbiAqIEBhdXRob3IgU2FzaGEgS29zcyBbQGtvc3Nub2NvcnBde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9rb3Nzbm9jb3JwfVxuICogQGF1dGhvciBMZXNoYSBLb3NzIFtAbGVzaGFrb3NzXXtAbGluayBodHRwczovL2dpdGh1Yi5jb20vbGVzaGFrb3NzfVxuICovXG5cbnZhciBsb2NhbGUgPSB7XG4gIGNvZGU6ICdlbi1VUycsXG4gIGZvcm1hdERpc3RhbmNlOiBmb3JtYXREaXN0YW5jZSxcbiAgZm9ybWF0TG9uZzogZm9ybWF0TG9uZyxcbiAgZm9ybWF0UmVsYXRpdmU6IGZvcm1hdFJlbGF0aXZlLFxuICBsb2NhbGl6ZTogbG9jYWxpemUsXG4gIG1hdGNoOiBtYXRjaCxcbiAgb3B0aW9uczoge1xuICAgIHdlZWtTdGFydHNPbjogMFxuICAgIC8qIFN1bmRheSAqL1xuICAgICxcbiAgICBmaXJzdFdlZWtDb250YWluc0RhdGU6IDFcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZTsiLCJpbXBvcnQgYnVpbGRMb2NhbGl6ZUZuIGZyb20gJy4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzJztcbnZhciBlcmFWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydCJywgJ0EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnQkMnLCAnQUQnXSxcbiAgd2lkZTogWydCZWZvcmUgQ2hyaXN0JywgJ0Fubm8gRG9taW5pJ11cbn07XG52YXIgcXVhcnRlclZhbHVlcyA9IHtcbiAgbmFycm93OiBbJzEnLCAnMicsICczJywgJzQnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnUTEnLCAnUTInLCAnUTMnLCAnUTQnXSxcbiAgd2lkZTogWycxc3QgcXVhcnRlcicsICcybmQgcXVhcnRlcicsICczcmQgcXVhcnRlcicsICc0dGggcXVhcnRlciddIC8vIE5vdGU6IGluIEVuZ2xpc2gsIHRoZSBuYW1lcyBvZiBkYXlzIG9mIHRoZSB3ZWVrIGFuZCBtb250aHMgYXJlIGNhcGl0YWxpemVkLlxuICAvLyBJZiB5b3UgYXJlIG1ha2luZyBhIG5ldyBsb2NhbGUgYmFzZWQgb24gdGhpcyBvbmUsIGNoZWNrIGlmIHRoZSBzYW1lIGlzIHRydWUgZm9yIHRoZSBsYW5ndWFnZSB5b3UncmUgd29ya2luZyBvbi5cbiAgLy8gR2VuZXJhbGx5LCBmb3JtYXR0ZWQgZGF0ZXMgc2hvdWxkIGxvb2sgbGlrZSB0aGV5IGFyZSBpbiB0aGUgbWlkZGxlIG9mIGEgc2VudGVuY2UsXG4gIC8vIGUuZy4gaW4gU3BhbmlzaCBsYW5ndWFnZSB0aGUgd2Vla2RheXMgYW5kIG1vbnRocyBzaG91bGQgYmUgaW4gdGhlIGxvd2VyY2FzZS5cblxufTtcbnZhciBtb250aFZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ0onLCAnRicsICdNJywgJ0EnLCAnTScsICdKJywgJ0onLCAnQScsICdTJywgJ08nLCAnTicsICdEJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ10sXG4gIHdpZGU6IFsnSmFudWFyeScsICdGZWJydWFyeScsICdNYXJjaCcsICdBcHJpbCcsICdNYXknLCAnSnVuZScsICdKdWx5JywgJ0F1Z3VzdCcsICdTZXB0ZW1iZXInLCAnT2N0b2JlcicsICdOb3ZlbWJlcicsICdEZWNlbWJlciddXG59O1xudmFyIGRheVZhbHVlcyA9IHtcbiAgbmFycm93OiBbJ1MnLCAnTScsICdUJywgJ1cnLCAnVCcsICdGJywgJ1MnXSxcbiAgc2hvcnQ6IFsnU3UnLCAnTW8nLCAnVHUnLCAnV2UnLCAnVGgnLCAnRnInLCAnU2EnXSxcbiAgYWJicmV2aWF0ZWQ6IFsnU3VuJywgJ01vbicsICdUdWUnLCAnV2VkJywgJ1RodScsICdGcmknLCAnU2F0J10sXG4gIHdpZGU6IFsnU3VuZGF5JywgJ01vbmRheScsICdUdWVzZGF5JywgJ1dlZG5lc2RheScsICdUaHVyc2RheScsICdGcmlkYXknLCAnU2F0dXJkYXknXVxufTtcbnZhciBkYXlQZXJpb2RWYWx1ZXMgPSB7XG4gIG5hcnJvdzoge1xuICAgIGFtOiAnYScsXG4gICAgcG06ICdwJyxcbiAgICBtaWRuaWdodDogJ21pJyxcbiAgICBub29uOiAnbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH0sXG4gIGFiYnJldmlhdGVkOiB7XG4gICAgYW06ICdBTScsXG4gICAgcG06ICdQTScsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICB3aWRlOiB7XG4gICAgYW06ICdhLm0uJyxcbiAgICBwbTogJ3AubS4nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfVxufTtcbnZhciBmb3JtYXR0aW5nRGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH1cbn07XG5cbmZ1bmN0aW9uIG9yZGluYWxOdW1iZXIoZGlydHlOdW1iZXIsIF9kaXJ0eU9wdGlvbnMpIHtcbiAgdmFyIG51bWJlciA9IE51bWJlcihkaXJ0eU51bWJlcik7IC8vIElmIG9yZGluYWwgbnVtYmVycyBkZXBlbmQgb24gY29udGV4dCwgZm9yIGV4YW1wbGUsXG4gIC8vIGlmIHRoZXkgYXJlIGRpZmZlcmVudCBmb3IgZGlmZmVyZW50IGdyYW1tYXRpY2FsIGdlbmRlcnMsXG4gIC8vIHVzZSBgb3B0aW9ucy51bml0YDpcbiAgLy9cbiAgLy8gICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fVxuICAvLyAgIHZhciB1bml0ID0gU3RyaW5nKG9wdGlvbnMudW5pdClcbiAgLy9cbiAgLy8gd2hlcmUgYHVuaXRgIGNhbiBiZSAneWVhcicsICdxdWFydGVyJywgJ21vbnRoJywgJ3dlZWsnLCAnZGF0ZScsICdkYXlPZlllYXInLFxuICAvLyAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCdcblxuICB2YXIgcmVtMTAwID0gbnVtYmVyICUgMTAwO1xuXG4gIGlmIChyZW0xMDAgPiAyMCB8fCByZW0xMDAgPCAxMCkge1xuICAgIHN3aXRjaCAocmVtMTAwICUgMTApIHtcbiAgICAgIGNhc2UgMTpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdzdCc7XG5cbiAgICAgIGNhc2UgMjpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICduZCc7XG5cbiAgICAgIGNhc2UgMzpcbiAgICAgICAgcmV0dXJuIG51bWJlciArICdyZCc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG51bWJlciArICd0aCc7XG59XG5cbnZhciBsb2NhbGl6ZSA9IHtcbiAgb3JkaW5hbE51bWJlcjogb3JkaW5hbE51bWJlcixcbiAgZXJhOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZXJhVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBxdWFydGVyOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogcXVhcnRlclZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJyxcbiAgICBhcmd1bWVudENhbGxiYWNrOiBmdW5jdGlvbiAocXVhcnRlcikge1xuICAgICAgcmV0dXJuIE51bWJlcihxdWFydGVyKSAtIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBtb250aFZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5OiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5VmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnXG4gIH0pLFxuICBkYXlQZXJpb2Q6IGJ1aWxkTG9jYWxpemVGbih7XG4gICAgdmFsdWVzOiBkYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgZm9ybWF0dGluZ1ZhbHVlczogZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyxcbiAgICBkZWZhdWx0Rm9ybWF0dGluZ1dpZHRoOiAnd2lkZSdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBsb2NhbGl6ZTsiLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuZXhwb3J0IHZhciBnZXRHb29nbGVEcml2ZVN5bmNNZXRhZGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuZ2V0KCdnb29nbGUtZHJpdmUtc3luYycsIGZ1bmN0aW9uIChpdGVtcykgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGl0ZW1zWydnb29nbGUtZHJpdmUtc3luYyddKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7IH0pO1xuICAgIH0pO1xufTtcbmV4cG9ydCB2YXIgc2V0R29vZ2xlRHJpdmVTeW5jTWV0YWRhdGEgPSBmdW5jdGlvbiAoZ29vZ2xlRHJpdmVTeW5jTWV0YWRhdGEpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHsgJ2dvb2dsZS1kcml2ZS1zeW5jJzogZ29vZ2xlRHJpdmVTeW5jTWV0YWRhdGEgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5leHBvcnQgdmFyIHNldEdvb2dsZURyaXZlU3luY0VuYWJsZWQgPSBmdW5jdGlvbiAoZW5hYmxlZCkge1xuICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLnNldCh7ICdnb29nbGUtZHJpdmUtc3luYy1lbmFibGVkJzogZW5hYmxlZCB9KTtcbn07XG5leHBvcnQgdmFyIGdldEdvb2dsZURyaXZlU3luY0VuYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIGNocm9tZS5zdG9yYWdlLmxvY2FsLmdldCgnZ29vZ2xlLWRyaXZlLXN5bmMtZW5hYmxlZCcsIGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgICAgICAgcmVzb2x2ZShpdGVtc1snZ29vZ2xlLWRyaXZlLXN5bmMtZW5hYmxlZCddIHx8IGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59O1xuZXhwb3J0IHZhciBnZXRMb2NhbFN0eWxlc01ldGFkYXRhID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoJ3N0eWxlcy1tZXRhZGF0YScsIGZ1bmN0aW9uIChpdGVtcykgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICByZXNvbHZlKGl0ZW1zWydzdHlsZXMtbWV0YWRhdGEnXSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pOyB9KTtcbiAgICB9KTtcbn07XG4iLCJ2YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWQgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcbiAgICByZXR1cm4gYXI7XG59O1xuaW1wb3J0IHsgd2l0aG91dCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyBjb21wYXJlQXNjIH0gZnJvbSAnZGF0ZS1mbnMnO1xudmFyIGNvbXBhcmVNb2RpZmllZFRpbWUgPSBmdW5jdGlvbiAodDEsIHQyKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVBc2MobmV3IERhdGUodDEpLCBuZXcgRGF0ZSh0MikpO1xufTtcbi8qKlxuICogTWVyZ2UgbG9jYWwgYW5kIHJlbW90ZSBzdHlsZXMgYnkgY29tcGFyaW5nIG1vZGlmaWVkVGltZSBmb3IgZWFjaCBzdHlsZS5cbiAqXG4gKiBBIGZldyBjYXZlYXRzOlxuICogLSBDb25mbGljdHMgaW4gY3NzIGZvciBhbiBpbmRpdmlkdWFsIHN0eWxlIGFyZSBub3QgaGFuZGxlZCB0byBrZWVwIGxvZ2ljIHNpbXBsZS5cbiAqIC0gSWYgYSBzdHlsZSBpcyByZW1vdmVkIGluIGVpdGhlciBsb2NhbCBvciByZW1vdGUsIGl0IGlzIHJldGFpbmVkIHNpbmNlIHdlIGRvbid0IHJlY29yZCBkZWxldGlvbiB0aW1lc3RhbXAuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAobG9jYWwsIHJlbW90ZSkge1xuICAgIHZhciBzdHlsZXMgPSB7fTtcbiAgICB2YXIgdXJscyA9IE9iamVjdC5rZXlzKGxvY2FsKTtcbiAgICB1cmxzLmZvckVhY2goZnVuY3Rpb24gKHVybCkge1xuICAgICAgICBpZiAocmVtb3RlW3VybF0gJiZcbiAgICAgICAgICAgIGNvbXBhcmVNb2RpZmllZFRpbWUocmVtb3RlW3VybF0ubW9kaWZpZWRUaW1lLCBsb2NhbFt1cmxdLm1vZGlmaWVkVGltZSkgPiAwKSB7XG4gICAgICAgICAgICBzdHlsZXNbdXJsXSA9IHJlbW90ZVt1cmxdO1xuICAgICAgICB9XG4gICAgICAgIHN0eWxlc1t1cmxdID0gbG9jYWxbdXJsXTtcbiAgICB9KTtcbiAgICB2YXIgcmVtYWluaW5nVXJscyA9IHdpdGhvdXQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZChbT2JqZWN0LmtleXMocmVtb3RlKV0sIHVybHMpKTtcbiAgICByZW1haW5pbmdVcmxzLmZvckVhY2goZnVuY3Rpb24gKHVybCkge1xuICAgICAgICBzdHlsZXNbdXJsXSA9IHJlbW90ZVt1cmxdO1xuICAgIH0pO1xuICAgIHJldHVybiBzdHlsZXM7XG59KTtcbiIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG52YXIgQ0xJRU5UX0lEID0gJzY2Mjk5ODA1MzIwOS1zNDl0cTU1aWMzdGQ4N20wOGdpOHZwanFtNXQ3cjlzdC5hcHBzLmdvb2dsZXVzZXJjb250ZW50LmNvbSc7XG52YXIgZXh0cmFjdEFjY2Vzc1Rva2VuID0gZnVuY3Rpb24gKHJlZGlyZWN0VXJpKSB7XG4gICAgdmFyIG0gPSByZWRpcmVjdFVyaS5tYXRjaCgvWyM/XSguKikvKTtcbiAgICBpZiAoIW0gfHwgbS5sZW5ndGggPCAxKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICB2YXIgcGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcyhtWzFdLnNwbGl0KCcjJylbMF0pO1xuICAgIHJldHVybiBwYXJhbXMuZ2V0KCdhY2Nlc3NfdG9rZW4nKTtcbn07XG4vKipcbiAqIFZhbGlkYXRlIHRoZSB0b2tlbiBjb250YWluZWQgaW4gcmVkaXJlY3RVUkwuXG4gKiBUaGlzIGZvbGxvd3MgZXNzZW50aWFsbHkgdGhlIHByb2Nlc3MgaGVyZTpcbiAqIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL2lkZW50aXR5L3Byb3RvY29scy9PQXV0aDJVc2VyQWdlbnQjdG9rZW5pbmZvLXZhbGlkYXRpb25cbiAqIC0gbWFrZSBhIEdFVCByZXF1ZXN0IHRvIHRoZSB2YWxpZGF0aW9uIFVSTCwgaW5jbHVkaW5nIHRoZSBhY2Nlc3MgdG9rZW5cbiAqIC0gaWYgdGhlIHJlc3BvbnNlIGlzIDIwMCwgYW5kIGNvbnRhaW5zIGFuIFwiYXVkXCIgcHJvcGVydHksIGFuZCB0aGF0IHByb3BlcnR5XG4gKiBtYXRjaGVzIHRoZSBjbGllbnRJRCwgdGhlbiB0aGUgcmVzcG9uc2UgaXMgdmFsaWRcbiAqIC0gb3RoZXJ3aXNlIGl0IGlzIG5vdCB2YWxpZFxuICogTm90ZSB0aGF0IHRoZSBHb29nbGUgcGFnZSB0YWxrcyBhYm91dCBhbiBcImF1ZGllbmNlXCIgcHJvcGVydHksIGJ1dCBpbiBmYWN0XG4gKiBpdCBzZWVtcyB0byBiZSBcImF1ZFwiLlxuICovXG52YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAocmVkaXJlY3RVUkwpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgUHJvbWlzZSwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBhY2Nlc3NUb2tlbiwgdmFsaWRhdGlvbkJhc2VVUkwsIHZhbGlkYXRpb25VUkwsIHZhbGlkYXRpb25SZXF1ZXN0LCBjaGVja1Jlc3BvbnNlLCByZXNwb25zZTtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBpZiAoIXJlZGlyZWN0VVJMKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93ICdBdXRob3JpemF0aW9uIGZhaWx1cmUnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhY2Nlc3NUb2tlbiA9IGV4dHJhY3RBY2Nlc3NUb2tlbihyZWRpcmVjdFVSTCk7XG4gICAgICAgICAgICAgICAgaWYgKCFhY2Nlc3NUb2tlbikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyAnQXV0aG9yaXphdGlvbiBmYWlsdXJlJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvbkJhc2VVUkwgPSAnaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vb2F1dGgyL3YzL3Rva2VuaW5mbyc7XG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvblVSTCA9IHZhbGlkYXRpb25CYXNlVVJMICsgXCI/YWNjZXNzX3Rva2VuPVwiICsgYWNjZXNzVG9rZW47XG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvblJlcXVlc3QgPSBuZXcgUmVxdWVzdCh2YWxpZGF0aW9uVVJMLCB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY2hlY2tSZXNwb25zZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyAhPSAyMDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoJ1Rva2VuIHZhbGlkYXRpb24gZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZS5qc29uKCkudGhlbihmdW5jdGlvbiAoanNvbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChqc29uLmF1ZCAmJiBqc29uLmF1ZCA9PT0gQ0xJRU5UX0lEKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYWNjZXNzVG9rZW4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KCdUb2tlbiB2YWxpZGF0aW9uIGVycm9yJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZmV0Y2godmFsaWRhdGlvblJlcXVlc3QpXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgY2hlY2tSZXNwb25zZShyZXNwb25zZSldO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfTtcbnZhciBhdXRob3JpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIGNvbnNvbGUuZGVidWcoJ0V4dGVuc2lvbiByZWRpcmVjdFVSTDonLCBjaHJvbWUuaWRlbnRpdHkuZ2V0UmVkaXJlY3RVUkwoKSk7XG4gICAgICAgIHZhciByZWRpcmVjdFVSTCA9IGNocm9tZS5pZGVudGl0eS5nZXRSZWRpcmVjdFVSTCgpO1xuICAgICAgICB2YXIgc2NvcGVzID0gWydodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL2RyaXZlLmZpbGUnXTtcbiAgICAgICAgdmFyIGF1dGhVUkwgPSAnaHR0cHM6Ly9hY2NvdW50cy5nb29nbGUuY29tL28vb2F1dGgyL2F1dGgnO1xuICAgICAgICBhdXRoVVJMICs9IFwiP2NsaWVudF9pZD1cIiArIENMSUVOVF9JRDtcbiAgICAgICAgYXV0aFVSTCArPSBcIiZyZXNwb25zZV90eXBlPXRva2VuXCI7XG4gICAgICAgIGF1dGhVUkwgKz0gXCImcmVkaXJlY3RfdXJpPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHJlZGlyZWN0VVJMKTtcbiAgICAgICAgYXV0aFVSTCArPSBcIiZzY29wZT1cIiArIGVuY29kZVVSSUNvbXBvbmVudChzY29wZXMuam9pbignICcpKTtcbiAgICAgICAgcmV0dXJuIGNocm9tZS5pZGVudGl0eS5sYXVuY2hXZWJBdXRoRmxvdyh7XG4gICAgICAgICAgICBpbnRlcmFjdGl2ZTogdHJ1ZSxcbiAgICAgICAgICAgIHVybDogYXV0aFVSTCxcbiAgICAgICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlVVJMKSB7IHJldHVybiByZXNvbHZlKHJlc3BvbnNlVVJMKTsgfSk7XG4gICAgfSk7XG59O1xuZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgUHJvbWlzZSwgZnVuY3Rpb24gKCkge1xuICAgIHZhciByZWRpcmVjdFVSTDtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgYXV0aG9yaXplKCldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJlZGlyZWN0VVJMID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB2YWxpZGF0ZShyZWRpcmVjdFVSTCldO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfSk7XG4iLCJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuaW1wb3J0IHsgZ2V0Q3VycmVudFRpbWVzdGFtcCB9IGZyb20gJ0BzdHlsZWJvdC91dGlscyc7XG52YXIgR09PR0xFX0RSSVZFX0ZJTEVfR0VUX0FQSSA9IFwiaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vZHJpdmUvdjMvZmlsZXNcIjtcbnZhciBHT09HTEVfRFJJVkVfRklMRV9VUExPQURfQVBJID0gXCJodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS91cGxvYWQvZHJpdmUvdjMvZmlsZXNcIjtcbnZhciBHT09HTEVfRFJJVkVfRklMRV9GSUVMRFMgPSBbXG4gICAgJ2lkJyxcbiAgICAnd2ViVmlld0xpbmsnLFxuICAgICdtb2RpZmllZFRpbWUnLFxuICAgICd3ZWJDb250ZW50TGluaycsXG5dLmpvaW4oJywnKTtcbnZhciBTWU5DX0ZPTERFUl9OQU1FID0gJ3N0eWxlYm90JztcbnZhciBTWU5DX0ZJTEVfTkFNRSA9ICdzdHlsZWJvdF92M19iYWNrdXAuanNvbic7XG52YXIgZ2V0QXV0aG9yaXphdGlvbkhlYWRlcnMgPSBmdW5jdGlvbiAoYWNjZXNzVG9rZW4pIHtcbiAgICByZXR1cm4gbmV3IEhlYWRlcnMoe1xuICAgICAgICBBdXRob3JpemF0aW9uOiBcIkJlYXJlciBcIiArIGFjY2Vzc1Rva2VuLFxuICAgIH0pO1xufTtcbmV4cG9ydCB2YXIgZ2V0RmlsZU1ldGFkYXRhID0gZnVuY3Rpb24gKGlkLCBhY2Nlc3NUb2tlbikgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCBQcm9taXNlLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHVybCwgcmVzcG9uc2U7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgdXJsID0gR09PR0xFX0RSSVZFX0ZJTEVfR0VUX0FQSSArIFwiL1wiICsgaWQgKyBcIj9maWVsZHM9XCIgKyBHT09HTEVfRFJJVkVfRklMRV9GSUVMRFM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZmV0Y2godXJsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogZ2V0QXV0aG9yaXphdGlvbkhlYWRlcnMoYWNjZXNzVG9rZW4pLFxuICAgICAgICAgICAgICAgICAgICB9KV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgcmVzcG9uc2UgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzcG9uc2UuanNvbigpXTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFsyIC8qcmV0dXJuKi8sIF9hLnNlbnQoKV07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9O1xudmFyIGNyZWF0ZUJhY2t1cEZvbGRlciA9IGZ1bmN0aW9uIChhY2Nlc3NUb2tlbikgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCBQcm9taXNlLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZvcm0sIG1ldGFkYXRhLCB1cmwsIHJlc3BvbnNlLCBpZDtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBmb3JtID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFNZTkNfRk9MREVSX05BTUUsXG4gICAgICAgICAgICAgICAgICAgIG1pbWVUeXBlOiAnYXBwbGljYXRpb24vdm5kLmdvb2dsZS1hcHBzLmZvbGRlcicsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBmb3JtLmFwcGVuZCgnbWV0YWRhdGEnLCBuZXcgQmxvYihbSlNPTi5zdHJpbmdpZnkobWV0YWRhdGEpXSwgeyB0eXBlOiAnYXBwbGljYXRpb24vanNvbicgfSkpO1xuICAgICAgICAgICAgICAgIHVybCA9IEdPT0dMRV9EUklWRV9GSUxFX1VQTE9BRF9BUEkgKyBcIj91cGxvYWRUeXBlPW11bHRpcGFydCZmaWVsZHM9XCIgKyBHT09HTEVfRFJJVkVfRklMRV9GSUVMRFM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZmV0Y2godXJsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGdldEF1dGhvcml6YXRpb25IZWFkZXJzKGFjY2Vzc1Rva2VuKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGZvcm0sXG4gICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXNwb25zZS5qc29uKCldO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGlkID0gKF9hLnNlbnQoKSkuaWQ7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIGlkXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH07XG52YXIgY3JlYXRlQmFja3VwID0gZnVuY3Rpb24gKGFjY2Vzc1Rva2VuLCBibG9iLCBmb2xkZXJJZCkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCBQcm9taXNlLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGZvcm0sIG1ldGFkYXRhLCBtZXRhZGF0YUJsb2IsIHVybCwgcmVzcG9uc2U7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgZm9ybSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICAgICAgICAgIG1ldGFkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBTWU5DX0ZJTEVfTkFNRSxcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50czogW2ZvbGRlcklkXSxcbiAgICAgICAgICAgICAgICAgICAgbWltZVR5cGU6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRUaW1lOiBnZXRDdXJyZW50VGltZXN0YW1wKCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBtZXRhZGF0YUJsb2IgPSBuZXcgQmxvYihbSlNPTi5zdHJpbmdpZnkobWV0YWRhdGEpXSwge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgZm9ybS5hcHBlbmQoJ21ldGFkYXRhJywgbWV0YWRhdGFCbG9iKTtcbiAgICAgICAgICAgICAgICBmb3JtLmFwcGVuZCgnZmlsZScsIGJsb2IpO1xuICAgICAgICAgICAgICAgIHVybCA9IEdPT0dMRV9EUklWRV9GSUxFX1VQTE9BRF9BUEkgKyBcIj91cGxvYWRUeXBlPW11bHRpcGFydCZmaWVsZHM9XCIgKyBHT09HTEVfRFJJVkVfRklMRV9GSUVMRFM7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZmV0Y2godXJsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGdldEF1dGhvcml6YXRpb25IZWFkZXJzKGFjY2Vzc1Rva2VuKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGZvcm0sXG4gICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXNwb25zZS5qc29uKCldO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Euc2VudCgpXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH07XG52YXIgcGF0Y2hCYWNrdXAgPSBmdW5jdGlvbiAoaWQsIGFjY2Vzc1Rva2VuLCBibG9iKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZm9ybSwgbWV0YWRhdGEsIG1ldGFkYXRhQmxvYiwgdXJsLCByZXNwb25zZTtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBmb3JtID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICAgICAgICAgICAgbWV0YWRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkVGltZTogZ2V0Q3VycmVudFRpbWVzdGFtcCgpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgbWV0YWRhdGFCbG9iID0gbmV3IEJsb2IoW0pTT04uc3RyaW5naWZ5KG1ldGFkYXRhKV0sIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGZvcm0uYXBwZW5kKCdtZXRhZGF0YScsIG1ldGFkYXRhQmxvYik7XG4gICAgICAgICAgICAgICAgZm9ybS5hcHBlbmQoJ2ZpbGUnLCBibG9iKTtcbiAgICAgICAgICAgICAgICB1cmwgPSBHT09HTEVfRFJJVkVfRklMRV9VUExPQURfQVBJICsgXCIvXCIgKyBpZCArIFwiP3VwbG9hZFR5cGU9bXVsdGlwYXJ0JmZpZWxkcz1cIiArIEdPT0dMRV9EUklWRV9GSUxFX0ZJRUxEUztcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBmZXRjaCh1cmwsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BBVENIJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGdldEF1dGhvcml6YXRpb25IZWFkZXJzKGFjY2Vzc1Rva2VuKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGZvcm0sXG4gICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXNwb25zZS5qc29uKCldO1xuICAgICAgICAgICAgY2FzZSAyOiByZXR1cm4gWzIgLypyZXR1cm4qLywgX2Euc2VudCgpXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH07XG4vKipcbiAqIFNlYXJjaCBmb3IgYmFja3VwIEpTT04gb24gR29vZ2xlIERyaXZlIGFuZCByZXR1cm4gaXQncyBtZXRhZGF0YVxuICogSWYgbm90IGZvdW5kLCByZXR1cm5zIG51bGxcbiAqL1xuZXhwb3J0IHZhciBnZXRTeW5jRmlsZU1ldGFkYXRhID0gZnVuY3Rpb24gKGFjY2Vzc1Rva2VuKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcXVlcnksIHVybCwgcmVzcG9uc2UsIGZpbGVzLCBzeW5jTWV0YWRhdGE7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgcXVlcnkgPSBcIm5hbWUgPSAnXCIgKyBTWU5DX0ZJTEVfTkFNRSArIFwiJ1wiO1xuICAgICAgICAgICAgICAgIHVybCA9IEdPT0dMRV9EUklWRV9GSUxFX0dFVF9BUEkgKyBcIj9xPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHF1ZXJ5KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBmZXRjaCh1cmwsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJzOiBnZXRBdXRob3JpemF0aW9uSGVhZGVycyhhY2Nlc3NUb2tlbiksXG4gICAgICAgICAgICAgICAgICAgIH0pXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXNwb25zZSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXNwb25zZS5qc29uKCldO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGZpbGVzID0gKF9hLnNlbnQoKSkuZmlsZXM7XG4gICAgICAgICAgICAgICAgaWYgKCFmaWxlcyB8fCBmaWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIG51bGxdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXRGaWxlTWV0YWRhdGEoZmlsZXNbMF0uaWQsIGFjY2Vzc1Rva2VuKV07XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgc3luY01ldGFkYXRhID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIGlmICghc3luY01ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBudWxsXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHN5bmNNZXRhZGF0YV07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9O1xuLyoqXG4gKiBEb3dubG9hZCBzdHlsZXMgSlNPTiBmcm9tIEdvb2dsZSBEcml2ZVxuICovXG5leHBvcnQgdmFyIGRvd25sb2FkU3luY0ZpbGUgPSBmdW5jdGlvbiAoYWNjZXNzVG9rZW4sIGlkKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgdXJsLCByZXNwb25zZTtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICB1cmwgPSBHT09HTEVfRFJJVkVfRklMRV9HRVRfQVBJICsgXCIvXCIgKyBpZCArIFwiP2FsdD1tZWRpYVwiO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGZldGNoKHVybCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGdldEF1dGhvcml6YXRpb25IZWFkZXJzKGFjY2Vzc1Rva2VuKSxcbiAgICAgICAgICAgICAgICAgICAgfSldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJlc3BvbnNlID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHJlc3BvbnNlLmpzb24oKV07XG4gICAgICAgICAgICBjYXNlIDI6IHJldHVybiBbMiAvKnJldHVybiovLCBfYS5zZW50KCldO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfTtcbi8qKlxuICogV3JpdGUgdG8gYmFja3VwIEpTT04gb24gR29vZ2xlIERyaXZlXG4gKi9cbmV4cG9ydCB2YXIgd3JpdGVTeW5jRmlsZSA9IGZ1bmN0aW9uIChhY2Nlc3NUb2tlbiwgYmxvYiwgZmlsZUlkKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3luY01ldGFkYXRhLCBmb2xkZXJJZDtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBpZiAoIWZpbGVJZCkgcmV0dXJuIFszIC8qYnJlYWsqLywgMl07XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcGF0Y2hCYWNrdXAoZmlsZUlkLCBhY2Nlc3NUb2tlbiwgYmxvYildO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHN5bmNNZXRhZGF0YSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzMgLypicmVhayovLCA1XTtcbiAgICAgICAgICAgIGNhc2UgMjogcmV0dXJuIFs0IC8qeWllbGQqLywgY3JlYXRlQmFja3VwRm9sZGVyKGFjY2Vzc1Rva2VuKV07XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgZm9sZGVySWQgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgY3JlYXRlQmFja3VwKGFjY2Vzc1Rva2VuLCBibG9iLCBmb2xkZXJJZCldO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHN5bmNNZXRhZGF0YSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBfYS5sYWJlbCA9IDU7XG4gICAgICAgICAgICBjYXNlIDU6IHJldHVybiBbMiAvKnJldHVybiovLCBzeW5jTWV0YWRhdGFdO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfTtcbiIsIi8qKlxuICogSGVscGVyIHV0aWxpdHkgZnVuY3Rpb25zIHVzZWQgYnkgdGhlIGJhY2tncm91bmQgcGFnZVxuICovXG52YXIgX19yZWFkID0gKHRoaXMgJiYgdGhpcy5fX3JlYWQpIHx8IGZ1bmN0aW9uIChvLCBuKSB7XG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICAgIGlmICghbSkgcmV0dXJuIG87XG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gICAgdHJ5IHtcbiAgICAgICAgd2hpbGUgKChuID09PSB2b2lkIDAgfHwgbi0tID4gMCkgJiYgIShyID0gaS5uZXh0KCkpLmRvbmUpIGFyLnB1c2goci52YWx1ZSk7XG4gICAgfVxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICAgIGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gICAgfVxuICAgIHJldHVybiBhcjtcbn07XG52YXIgX19zcHJlYWQgPSAodGhpcyAmJiB0aGlzLl9fc3ByZWFkKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcbiAgICByZXR1cm4gYXI7XG59O1xudmFyIEJhY2tncm91bmRQYWdlVXRpbHMgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmFja2dyb3VuZFBhZ2VVdGlscygpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYSBnaXZlbiBzdHJpbmcgaXMgYSB3aWxkY2FyZCBwYXR0ZXJuIChkZW5vdGVkIGJ5XG4gICAgICogd2lsZGNhcmQgY2hhcmFjdGVyICopXG4gICAgICovXG4gICAgQmFja2dyb3VuZFBhZ2VVdGlscy5pc1dpbGRjYXJkID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gc3RyLmluZGV4T2YoJyonKSA+PSAwO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYSBnaXZlbiBzdHJpbmcgaXMgYSByZWd1bGFyIGV4cHJlc3Npb24gKHN0YXJ0cyB3aXRoIF4pXG4gICAgICovXG4gICAgQmFja2dyb3VuZFBhZ2VVdGlscy5pc1JlZ2V4ID0gZnVuY3Rpb24gKHN0cikge1xuICAgICAgICByZXR1cm4gc3RyLmluZGV4T2YoJ14nKSA9PSAwO1xuICAgIH07XG4gICAgLyoqKlxuICAgICAqIEd1ZXNzIGlmIHRoZSBnaXZlbiBVUkwgaXMgdmFsaWQgSFRNTCBieSBjb21wYXJpbmcgVVJMIGV4dGVuc2lvblxuICAgICAqIGFnYWluc3QgYW4gZXh0ZW5zaW9uIGJsYWNrbGlzdFxuICAgICAqL1xuICAgIEJhY2tncm91bmRQYWdlVXRpbHMuaXNWYWxpZEhUTUwgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIHZhciBleHRlbnNpb24gPSB1cmwuc3BsaXQoJy4nKS5wb3AoKTtcbiAgICAgICAgaWYgKCFleHRlbnNpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbJ2pzb24nLCAncGRmJywgJ3htbCddLmluZGV4T2YoZXh0ZW5zaW9uKSA9PT0gLTE7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgcGFnZSB1cmwgbWF0Y2hlcyB3aXRoIGEgc2luZ2xlIHVybCBzdHJpbmcuXG4gICAgICovXG4gICAgQmFja2dyb3VuZFBhZ2VVdGlscy5tYXRjaGVzVXJsID0gZnVuY3Rpb24gKHBhZ2VVcmxTdHJpbmcsIHVybCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHZhciBleGFjdE1hdGNoUGFydHMgPSBbXG4gICAgICAgICAgICAndXNlcm5hbWUnLFxuICAgICAgICAgICAgJ3Bhc3N3b3JkJyxcbiAgICAgICAgICAgICdwb3J0JyxcbiAgICAgICAgICAgICdoYXNoJyxcbiAgICAgICAgXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHVybCA9IHVybC50cmltKCk7XG4gICAgICAgICAgICB2YXIgcHJvdG9jb2wgPSBudWxsO1xuICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSB1cmwubWF0Y2goL14oXFx3KzopXFwvXFwvKC4rKSQvKTtcbiAgICAgICAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgX2EgPSBfX3JlYWQobWF0Y2hlcy5zbGljZSgxKSwgMiksIHByb3RvY29sID0gX2FbMF0sIHVybCA9IF9hWzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHBhZ2VVcmxfMSA9IG5ldyBVUkwocGFnZVVybFN0cmluZyk7XG4gICAgICAgICAgICB2YXIgbWF0Y2hlclVybF8xID0gbmV3IFVSTCgocHJvdG9jb2wgIT09IG51bGwgJiYgcHJvdG9jb2wgIT09IHZvaWQgMCA/IHByb3RvY29sIDogJ2h0dHA6JykgKyBcIi8vXCIgKyB1cmwpO1xuICAgICAgICAgICAgdmFyIGhhc1BhdGhuYW1lID0gbWF0Y2hlclVybF8xLnBhdGhuYW1lLmxlbmd0aCA+IDE7XG4gICAgICAgICAgICB2YXIgc2hvdWxkTWF0Y2hIb3N0TG9vc2VseSA9ICFwcm90b2NvbCAmJiAhaGFzUGF0aG5hbWU7XG4gICAgICAgICAgICB2YXIgaG9zdE1hdGNoZXMgPSBzaG91bGRNYXRjaEhvc3RMb29zZWx5XG4gICAgICAgICAgICAgICAgPyAoJy4nICsgcGFnZVVybF8xLmhvc3RuYW1lKS5lbmRzV2l0aCgnLicgKyBtYXRjaGVyVXJsXzEuaG9zdG5hbWUpXG4gICAgICAgICAgICAgICAgOiBwYWdlVXJsXzEuaG9zdCA9PT0gbWF0Y2hlclVybF8xLmhvc3Q7XG4gICAgICAgICAgICByZXR1cm4gKGhvc3RNYXRjaGVzICYmXG4gICAgICAgICAgICAgICAgKCFoYXNQYXRobmFtZSB8fFxuICAgICAgICAgICAgICAgICAgICAocGFnZVVybF8xLnBhdGhuYW1lICsgJy8nKS5lbmRzV2l0aChtYXRjaGVyVXJsXzEucGF0aG5hbWUgKyAnLycpKSAmJlxuICAgICAgICAgICAgICAgICghcHJvdG9jb2wgfHwgcGFnZVVybF8xLnByb3RvY29sID09PSBtYXRjaGVyVXJsXzEucHJvdG9jb2wpICYmXG4gICAgICAgICAgICAgICAgZXhhY3RNYXRjaFBhcnRzLmV2ZXJ5KGZ1bmN0aW9uIChwYXJ0KSB7IHJldHVybiAhbWF0Y2hlclVybF8xW3BhcnRdIHx8IHBhZ2VVcmxfMVtwYXJ0XSA9PT0gbWF0Y2hlclVybF8xW3BhcnRdOyB9KSAmJlxuICAgICAgICAgICAgICAgIF9fc3ByZWFkKG1hdGNoZXJVcmxfMS5zZWFyY2hQYXJhbXMpLmV2ZXJ5KGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2IgPSBfX3JlYWQoX2EsIDIpLCBrID0gX2JbMF0sIHYgPSBfYlsxXTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhZ2VVcmxfMS5zZWFyY2hQYXJhbXMuZ2V0KGspID09PSB2O1xuICAgICAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoX2IpIHtcbiAgICAgICAgICAgIC8vIGZhbGwtdGhyb3VnaCBpbiBjYXNlIGB1cmxgIG9yIGBzdWJVcmxgIGFyZSBtYWxmb3JtZWRcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIHBhZ2UgdXJsIG1hdGNoZXMgd2l0aCB0aGUgdXJsIGNvbGxlY3Rpb25cbiAgICAgKi9cbiAgICBCYWNrZ3JvdW5kUGFnZVV0aWxzLm1hdGNoZXNVcmxDb2xsZWN0aW9uID0gZnVuY3Rpb24gKHBhZ2VVcmwsIHVybENvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHVybENvbGxlY3Rpb24uc3BsaXQoJywnKS5zb21lKGZ1bmN0aW9uICh1cmwpIHsgcmV0dXJuIF90aGlzLm1hdGNoZXNVcmwocGFnZVVybCwgdXJsKTsgfSk7XG4gICAgfTtcbiAgICAvKiBDaGVjayBpZiB0aGUgcGFnZSB1cmwgbWF0Y2hlcyB3aXRoIHRoZSBzdHlsZWJvdCBwYXR0ZXJuICovXG4gICAgQmFja2dyb3VuZFBhZ2VVdGlscy5tYXRjaGVzV2lsZGNhcmQgPSBmdW5jdGlvbiAocGFnZVVybCwgcGF0dGVybikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIGhhc0NvbW1hID0gfnBhdHRlcm4uaW5kZXhPZignLCcpO1xuICAgICAgICAgICAgcGF0dGVybiA9IHBhdHRlcm5cbiAgICAgICAgICAgICAgICAvKiBSZW1vdmVzIHdoaXRlIHNwYWNlcyAqL1xuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8gL2csICcnKVxuICAgICAgICAgICAgICAgIC8qIEVzY2FwZXMgLiA/IHwgKCApIFsgXSArICQgXiBcXCB7IH0gKi9cbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvKFxcLnxcXD98XFx8fFxcKHxcXCl8XFxbfFxcXXxcXCt8XFwkfFxcXnxcXFxcfFxce3xcXH0pL2csICdcXFxcJDEnKVxuICAgICAgICAgICAgICAgIC8qIEFsbG93cyBjb21tYXMgdG8gYmUgdXNlZCB0byBzZXBhcmF0ZSB1cmxzICovXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLywvZywgJ3wnKVxuICAgICAgICAgICAgICAgIC8qIEFsbG93cyB1c2Ugb2YgdGhlICoqIHdpbGRjYXJkLCBtYXRjaGVzIGFueXRoaW5nICovXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcKlxcKi9nLCAnLionKVxuICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICBBbGxvd3MgdXNlIG9mIHRoZSAqIHdpbGRjYXJkLCBtYXRjaGVzIGFueXRoaW5nIGJ1dCAvXG4gICAgICAgICAgICAgICAgICBCZWNhdXNlIHdlIHJlcGxhY2UgKiogd2l0aCAuKiwgd2UgaGF2ZSB0byBtYWtlIHN1cmUgd2VcbiAgICAgICAgICAgICAgICAgIGRvbid0IHJlcGxhY2UgYW4gLiogVGhlcmVmb3JlLCB3ZSBzaG91bGQgcmVwbGFjZSBhbiAqXG4gICAgICAgICAgICAgICAgICBpZiwgYW5kIG9ubHkgaWYgaXQgaXMgcHJlY2VkZWVkIGJ5IGFueXRoaW5nIGRpZmZlcmVudFxuICAgICAgICAgICAgICAgICAgZnJvbSBhIC4gZXhjZXB0IGZvciBcXC4gKG1heSBiZSB0aGUgYmVnaW5uaW5nIG9mIGEgbGluZVxuICAgICAgICAgICAgICAgICAgdG9vLCBpLmUuIHRoZSBeIHN5bWJvbClcbiAgICAgICAgICAgICAgICAgIE5vdGU6IElmIHdlIGFkZCBhbiAqIGJlZm9yZSBcXCogd2UgYXJlIGFkZGluZyBsYXp5bmVzc1xuICAgICAgICAgICAgICAgICAgdG8gdGhlIHJlZ2V4cCB3aGljaCBvbmx5IHJlZHVjZXMgaXRzIHBlcmZvcm1hbmNlLlxuICAgICAgICAgICAgICAgICAgVGhhdCdzIHdoeSBJIHJlcGxhY2VkIHRoZSAqIHdpdGggYW4gXiB0byBjaGVja1xuICAgICAgICAgICAgICAgICAgZm9yIHBhdHRlcm5zIG9mIHRoZSBmb3JtIGAqc29tZXRoaW5nYFxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLyhefFxcXFxcXC58W15cXC5dKVxcKi9nLCAnJDFbXi9dKicpO1xuICAgICAgICAgICAgLyogRW5jbG9zZSB0aGUgcGF0dGVybiBpbiAoICkgaWYgaXQgaGFzIHNldmVyYWwgdXJscyBzZXBhcmF0ZWQgYnkgLCAqL1xuICAgICAgICAgICAgcGF0dGVybiA9IGhhc0NvbW1hID8gJygnICsgcGF0dGVybiArICcpJyA6IHBhdHRlcm47XG4gICAgICAgICAgICB2YXIgcmVnZXhQYXR0ZXJuID0gbmV3IFJlZ0V4cChwYXR0ZXJuLCAnaScpO1xuICAgICAgICAgICAgcmV0dXJuIHJlZ2V4UGF0dGVybi50ZXN0KHBhZ2VVcmwpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnRXJyb3Igb2NjdXJlZCB3aGlsZSBydW5uaW5nIHN0eWxlYm90IHBhdHRlcm4gY2hlY2snLCBlKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGdpdmVuIHVybCBtYXRjaGVzIHdpdGggdGhlIHJlZ2V4XG4gICAgICovXG4gICAgQmFja2dyb3VuZFBhZ2VVdGlscy5tYXRjaGVzUmVnZXggPSBmdW5jdGlvbiAocGFnZVVybCwgcmVnZXgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAocmVnZXgpLnRlc3QocGFnZVVybCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB0aGUgVVJMIG1hdGNoZXMgdGhlIGdpdmVuIHBhdHRlcm5cbiAgICAgKi9cbiAgICBCYWNrZ3JvdW5kUGFnZVV0aWxzLm1hdGNoZXMgPSBmdW5jdGlvbiAocGFnZVVybCwgcGF0dGVybikge1xuICAgICAgICBpZiAodGhpcy5pc1JlZ2V4KHBhdHRlcm4pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXRjaGVzUmVnZXgocGFnZVVybCwgcGF0dGVybik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNXaWxkY2FyZChwYXR0ZXJuKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubWF0Y2hlc1dpbGRjYXJkKHBhZ2VVcmwsIHBhdHRlcm4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm1hdGNoZXNVcmxDb2xsZWN0aW9uKHBhZ2VVcmwsIHBhdHRlcm4pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgU3R5bGVib3Qgc2hvdWxkIHJ1biBvbiBhIFVSTC5cbiAgICAgKi9cbiAgICBCYWNrZ3JvdW5kUGFnZVV0aWxzLmlzVmFsaWRVcmwgPSBmdW5jdGlvbiAodXJsKSB7XG4gICAgICAgIGlmICh1cmwuaW5kZXhPZignY2hyb21lOi8vJykgIT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRIVE1MKHVybCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdXJsQmxhY2tsaXN0ID0gW1xuICAgICAgICAgICAgJ2h0dHBzOi8vY2hyb21lLmdvb2dsZS5jb20vd2Vic3RvcmUnLFxuICAgICAgICAgICAgJ2Nocm9tZS1leHRlbnNpb246Ly8nLFxuICAgICAgICBdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHVybEJsYWNrbGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHVybC5pbmRleE9mKHVybEJsYWNrbGlzdFtpXSkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG4gICAgcmV0dXJuIEJhY2tncm91bmRQYWdlVXRpbHM7XG59KCkpO1xuZXhwb3J0IGRlZmF1bHQgQmFja2dyb3VuZFBhZ2VVdGlscztcbiIsInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gICAgfSk7XG59O1xudmFyIF9fZ2VuZXJhdG9yID0gKHRoaXMgJiYgdGhpcy5fX2dlbmVyYXRvcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIGJvZHkpIHtcbiAgICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxuICAgIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcbiAgICAgICAgICAgIGlmIChmID0gMSwgeSAmJiAodCA9IG9wWzBdICYgMiA/IHlbXCJyZXR1cm5cIl0gOiBvcFswXSA/IHlbXCJ0aHJvd1wiXSB8fCAoKHQgPSB5W1wicmV0dXJuXCJdKSAmJiB0LmNhbGwoeSksIDApIDogeS5uZXh0KSAmJiAhKHQgPSB0LmNhbGwoeSwgb3BbMV0pKS5kb25lKSByZXR1cm4gdDtcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6IGNhc2UgMTogdCA9IG9wOyBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6IG9wID0gXy5vcHMucG9wKCk7IF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gMyAmJiAoIXQgfHwgKG9wWzFdID4gdFswXSAmJiBvcFsxXSA8IHRbM10pKSkgeyBfLmxhYmVsID0gb3BbMV07IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0WzJdKSBfLm9wcy5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG9wID0gYm9keS5jYWxsKHRoaXNBcmcsIF8pO1xuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICAgIH1cbn07XG5pbXBvcnQgKiBhcyBwb3N0Y3NzIGZyb20gJ3Bvc3Rjc3MnO1xuaW1wb3J0IHsgZ2V0Q3VycmVudFRpbWVzdGFtcCB9IGZyb20gJ0BzdHlsZWJvdC91dGlscyc7XG5pbXBvcnQgeyBhcHBlbmRJbXBvcnRhbnRUb0RlY2xhcmF0aW9ucyB9IGZyb20gJ0BzdHlsZWJvdC9jc3MnO1xuaW1wb3J0IEJhY2tncm91bmRQYWdlVXRpbHMgZnJvbSAnLi91dGlscyc7XG5leHBvcnQgdmFyIHVwZGF0ZUljb24gPSBmdW5jdGlvbiAodGFiLCBzdHlsZXMsIGRlZmF1bHRTdHlsZSkge1xuICAgIHZhciBlbmFibGVkU3R5bGVzID0gc3R5bGVzLmZpbHRlcihmdW5jdGlvbiAoc3R5bGUpIHsgcmV0dXJuIHN0eWxlLmVuYWJsZWQ7IH0pO1xuICAgIGlmIChkZWZhdWx0U3R5bGUgJiYgZGVmYXVsdFN0eWxlLnJlYWRhYmlsaXR5KSB7XG4gICAgICAgIGNocm9tZS5hY3Rpb24uc2V0QmFkZ2VUZXh0KHtcbiAgICAgICAgICAgIHRleHQ6IFwiUlwiLFxuICAgICAgICAgICAgdGFiSWQ6IHRhYi5pZCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGVuYWJsZWRTdHlsZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBjaHJvbWUuYWN0aW9uLnNldEJhZGdlVGV4dCh7XG4gICAgICAgICAgICB0ZXh0OiBcIlwiICsgZW5hYmxlZFN0eWxlcy5sZW5ndGgsXG4gICAgICAgICAgICB0YWJJZDogdGFiLmlkLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNocm9tZS5hY3Rpb24uc2V0QmFkZ2VUZXh0KHsgdGV4dDogJycsIHRhYklkOiB0YWIuaWQgfSk7XG4gICAgfVxufTtcbmV4cG9ydCB2YXIgYXBwbHlTdHlsZXNUb0FsbFRhYnMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYWxsU3R5bGVzO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXRBbGwoKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgYWxsU3R5bGVzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIGNocm9tZS50YWJzLnF1ZXJ5KHt9LCBmdW5jdGlvbiAodGFicykge1xuICAgICAgICAgICAgICAgICAgICB0YWJzLmZvckVhY2goZnVuY3Rpb24gKHRhYikge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhYiAmJiB0YWIudXJsICYmIHRhYi5pZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfYSA9IGdldFN0eWxlc0ZvclBhZ2UodGFiLnVybCwgYWxsU3R5bGVzKSwgc3R5bGVzID0gX2Euc3R5bGVzLCBkZWZhdWx0U3R5bGUgPSBfYS5kZWZhdWx0U3R5bGU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdBcHBseVN0eWxlc1RvVGFiJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFN0eWxlOiBkZWZhdWx0U3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hyb21lLnRhYnMuc2VuZE1lc3NhZ2UodGFiLmlkLCBtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFiLmFjdGl2ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVJY29uKHRhYiwgc3R5bGVzLCBkZWZhdWx0U3R5bGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfTtcbmV4cG9ydCB2YXIgZ2V0QWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBjaHJvbWUuc3RvcmFnZS5sb2NhbC5nZXQoJ3N0eWxlcycsIGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgICAgICAgaWYgKGl0ZW1zWydzdHlsZXMnXSkge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoaXRlbXNbJ3N0eWxlcyddKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc29sdmUoe30pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn07XG5leHBvcnQgdmFyIGdldCA9IGZ1bmN0aW9uICh1cmwpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgUHJvbWlzZSwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdHlsZXM7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGdldEFsbCgpXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBzdHlsZXMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHN0eWxlc1t1cmxdXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH07XG5leHBvcnQgdmFyIGdldFN0eWxlc0ZvclBhZ2UgPSBmdW5jdGlvbiAocGFnZVVybCwgYWxsU3R5bGVzLCBpbXBvcnRhbnQpIHtcbiAgICBpZiAoaW1wb3J0YW50ID09PSB2b2lkIDApIHsgaW1wb3J0YW50ID0gZmFsc2U7IH1cbiAgICBpZiAoIXBhZ2VVcmwpIHtcbiAgICAgICAgcmV0dXJuIHsgc3R5bGVzOiBbXSB9O1xuICAgIH1cbiAgICBpZiAoIUJhY2tncm91bmRQYWdlVXRpbHMuaXNWYWxpZEhUTUwocGFnZVVybCkpIHtcbiAgICAgICAgcmV0dXJuIHsgc3R5bGVzOiBbXSB9O1xuICAgIH1cbiAgICB2YXIgc3R5bGVzID0gW107XG4gICAgdmFyIGRlZmF1bHRTdHlsZTtcbiAgICBmb3IgKHZhciB1cmwgaW4gYWxsU3R5bGVzKSB7XG4gICAgICAgIHZhciBtYXRjaGVzID0gQmFja2dyb3VuZFBhZ2VVdGlscy5tYXRjaGVzKHBhZ2VVcmwsIHVybCk7XG4gICAgICAgIGlmIChtYXRjaGVzICYmIGFsbFN0eWxlc1t1cmxdKSB7XG4gICAgICAgICAgICB2YXIgY3NzID0gaW1wb3J0YW50XG4gICAgICAgICAgICAgICAgPyBhcHBlbmRJbXBvcnRhbnRUb0RlY2xhcmF0aW9ucyhhbGxTdHlsZXNbdXJsXS5jc3MpXG4gICAgICAgICAgICAgICAgOiBhbGxTdHlsZXNbdXJsXS5jc3M7XG4gICAgICAgICAgICB2YXIgX2EgPSBhbGxTdHlsZXNbdXJsXSwgZW5hYmxlZCA9IF9hLmVuYWJsZWQsIHJlYWRhYmlsaXR5ID0gX2EucmVhZGFiaWxpdHksIG1vZGlmaWVkVGltZSA9IF9hLm1vZGlmaWVkVGltZTtcbiAgICAgICAgICAgIHZhciBzdHlsZSA9IHsgdXJsOiB1cmwsIGNzczogY3NzLCBlbmFibGVkOiBlbmFibGVkLCByZWFkYWJpbGl0eTogcmVhZGFiaWxpdHksIG1vZGlmaWVkVGltZTogbW9kaWZpZWRUaW1lIH07XG4gICAgICAgICAgICBpZiAodXJsICE9PSAnKicpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRlZmF1bHRTdHlsZSB8fCB1cmwubGVuZ3RoID4gZGVmYXVsdFN0eWxlLnVybC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFN0eWxlID0gc3R5bGU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0eWxlLmNzcykge1xuICAgICAgICAgICAgICAgIHN0eWxlcy5wdXNoKHN0eWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4geyBzdHlsZXM6IHN0eWxlcywgZGVmYXVsdFN0eWxlOiBkZWZhdWx0U3R5bGUgfTtcbn07XG5leHBvcnQgdmFyIHNldEFsbCA9IGZ1bmN0aW9uIChzdHlsZXMpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgUHJvbWlzZSwgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgY2hyb21lLnN0b3JhZ2UubG9jYWwuc2V0KHtcbiAgICAgICAgICAgIHN0eWxlczogc3R5bGVzLFxuICAgICAgICAgICAgJ3N0eWxlcy1tZXRhZGF0YSc6IHtcbiAgICAgICAgICAgICAgICBtb2RpZmllZFRpbWU6IGdldEN1cnJlbnRUaW1lc3RhbXAoKSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgfSk7XG59KTsgfTtcbmV4cG9ydCB2YXIgc2V0ID0gZnVuY3Rpb24gKHVybCwgY3NzLCByZWFkYWJpbGl0eSkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCBQcm9taXNlLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0eWxlcztcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgZ2V0QWxsKCldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHN0eWxlcyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWNzcykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3R5bGVzW3VybF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZXNbdXJsXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzczogY3NzLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGFiaWxpdHk6IHJlYWRhYmlsaXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGlmaWVkVGltZTogZ2V0Q3VycmVudFRpbWVzdGFtcCgpLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgc2V0QWxsKHN0eWxlcyldO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfTtcbmV4cG9ydCB2YXIgZW5hYmxlID0gZnVuY3Rpb24gKHVybCkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCBQcm9taXNlLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0eWxlcztcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgZ2V0QWxsKCldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHN0eWxlcyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAoIXN0eWxlc1t1cmxdKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc3R5bGVzW3VybF0uZW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHNldEFsbChzdHlsZXMpXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH07XG5leHBvcnQgdmFyIGRpc2FibGUgPSBmdW5jdGlvbiAodXJsKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3R5bGVzO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXRBbGwoKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgc3R5bGVzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIGlmICghc3R5bGVzW3VybF0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi9dO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHlsZXNbdXJsXS5lbmFibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHNldEFsbChzdHlsZXMpXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH07XG5leHBvcnQgdmFyIHNldFJlYWRhYmlsaXR5ID0gZnVuY3Rpb24gKHVybCwgdmFsdWUpIHsgcmV0dXJuIF9fYXdhaXRlcih2b2lkIDAsIHZvaWQgMCwgUHJvbWlzZSwgZnVuY3Rpb24gKCkge1xuICAgIHZhciBzdHlsZXM7XG4gICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYSkge1xuICAgICAgICBzd2l0Y2ggKF9hLmxhYmVsKSB7XG4gICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGdldEFsbCgpXTtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBzdHlsZXMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgaWYgKHN0eWxlc1t1cmxdKSB7XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlc1t1cmxdLnJlYWRhYmlsaXR5ID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzdHlsZXNbdXJsXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNzczogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGFiaWxpdHk6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWRUaW1lOiBnZXRDdXJyZW50VGltZXN0YW1wKCksXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBzZXRBbGwoc3R5bGVzKV07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9O1xuZXhwb3J0IHZhciBtb3ZlID0gZnVuY3Rpb24gKHNyYywgZGVzdCkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCBQcm9taXNlLCBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN0eWxlcztcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgZ2V0QWxsKCldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHN0eWxlcyA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAoc3R5bGVzW3NyY10pIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGVzW2Rlc3RdID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzdHlsZXNbc3JjXSkpO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgc3R5bGVzW3NyY107XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBzZXRBbGwoc3R5bGVzKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH07XG5leHBvcnQgdmFyIGdldEltcG9ydENzcyA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHtcbiAgICAgICAgZmV0Y2godXJsKVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7IHJldHVybiByZXNwb25zZS50ZXh0KCk7IH0pXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAoY3NzKSB7XG4gICAgICAgICAgICBwb3N0Y3NzLnBhcnNlKGNzcyk7XG4gICAgICAgICAgICByZXNvbHZlKGNzcyk7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gaWYgY3NzIGlzIGludmFsaWQsIHJldHVybiBiYWNrIGVtcHR5IGNzc1xuICAgICAgICAgICAgcmVzb2x2ZSgnJyk7XG4gICAgICAgIH0pO1xuICAgIH0pO1xufTtcbiIsInZhciBfX2Fzc2lnbiA9ICh0aGlzICYmIHRoaXMuX19hc3NpZ24pIHx8IGZ1bmN0aW9uICgpIHtcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24odCkge1xuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpXG4gICAgICAgICAgICAgICAgdFtwXSA9IHNbcF07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHQ7XG4gICAgfTtcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn07XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbnZhciBfX2dlbmVyYXRvciA9ICh0aGlzICYmIHRoaXMuX19nZW5lcmF0b3IpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBib2R5KSB7XG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgICAgd2hpbGUgKF8pIHRyeSB7XG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XG4gICAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxuICAgICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgICB9XG59O1xuaW1wb3J0IHsgY29tcGFyZUFzYyB9IGZyb20gJ2RhdGUtZm5zJztcbmltcG9ydCB7IGdldEN1cnJlbnRUaW1lc3RhbXAgfSBmcm9tICdAc3R5bGVib3QvdXRpbHMnO1xuaW1wb3J0IG1lcmdlU3R5bGVzIGZyb20gJy4vbWVyZ2Utc3R5bGVzJztcbmltcG9ydCBnZXRBY2Nlc3NUb2tlbiBmcm9tICcuL2dldC1hY2Nlc3MtdG9rZW4nO1xuaW1wb3J0IHsgZ2V0R29vZ2xlRHJpdmVTeW5jTWV0YWRhdGEsIGdldExvY2FsU3R5bGVzTWV0YWRhdGEsIHNldEdvb2dsZURyaXZlU3luY01ldGFkYXRhLCB9IGZyb20gJy4vc3luYy1tZXRhZGF0YSc7XG5pbXBvcnQgeyBnZXRTeW5jRmlsZU1ldGFkYXRhLCBkb3dubG9hZFN5bmNGaWxlLCB3cml0ZVN5bmNGaWxlLCB9IGZyb20gJy4vc3luYy1maWxlJztcbmltcG9ydCB7IHNldEFsbCBhcyBzZXRBbGxTdHlsZXMsIGdldEFsbCBhcyBnZXRBbGxTdHlsZXMsIH0gZnJvbSAnLi4vLi4vYmFja2dyb3VuZC9zdHlsZXMnO1xudmFyIGdldFN0eWxlc0Jsb2IgPSBmdW5jdGlvbiAoc3R5bGVzKSB7XG4gICAgcmV0dXJuIG5ldyBCbG9iKFtKU09OLnN0cmluZ2lmeShzdHlsZXMpXSwgeyB0eXBlOiAnYXBwbGljYXRpb24vanNvbicgfSk7XG59O1xuLyoqXG4gKiBDb3B5IGxvY2FsIHN0eWxlcyB0byByZW1vdGUgYW5kIHVwZGF0ZSBzeW5jIG1ldGFkYXRhXG4gKi9cbnZhciB3cml0ZVRvUmVtb3RlID0gZnVuY3Rpb24gKGFjY2Vzc1Rva2VuLCBzeW5jTWV0YWRhdGEsIHN0eWxlcykgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYmxvYiwgdXBkYXRlZFN5bmNNZXRhZGF0YTtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICBibG9iID0gZ2V0U3R5bGVzQmxvYihzdHlsZXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHdyaXRlU3luY0ZpbGUoYWNjZXNzVG9rZW4sIGJsb2IsIHN5bmNNZXRhZGF0YS5pZCldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHVwZGF0ZWRTeW5jTWV0YWRhdGEgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHNldEdvb2dsZURyaXZlU3luY01ldGFkYXRhKHVwZGF0ZWRTeW5jTWV0YWRhdGEpXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH07XG4vKipcbiAqIENvcHkgcmVtb3RlIHN0eWxlcyB0byBsb2NhbCBhbmQgdXBkYXRlIHN5bmMgbWV0YWRhdGFcbiAqL1xudmFyIHdyaXRlVG9Mb2NhbCA9IGZ1bmN0aW9uIChzeW5jTWV0YWRhdGEsIHN0eWxlcykgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHN3aXRjaCAoX2EubGFiZWwpIHtcbiAgICAgICAgICAgIGNhc2UgMDogcmV0dXJuIFs0IC8qeWllbGQqLywgc2V0QWxsU3R5bGVzKHN0eWxlcyldO1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgc2V0R29vZ2xlRHJpdmVTeW5jTWV0YWRhdGEoX19hc3NpZ24oX19hc3NpZ24oe30sIHN5bmNNZXRhZGF0YSksIHsgbW9kaWZpZWRUaW1lOiBnZXRDdXJyZW50VGltZXN0YW1wKCkgfSkpXTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7IH07XG4vKipcbiAqIE1lcmdlIGFuZCB1cGRhdGUgYm90aCBsb2NhbCBhbmQgcmVtb3RlIHN0eWxlc1xuICovXG52YXIgbWVyZ2UgPSBmdW5jdGlvbiAoYWNjZXNzVG9rZW4sIHN5bmNNZXRhZGF0YSkgeyByZXR1cm4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgbG9jYWxTdHlsZXMsIHJlbW90ZVN0eWxlcywgbWVyZ2VkU3R5bGVzO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXRBbGxTdHlsZXMoKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgbG9jYWxTdHlsZXMgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZG93bmxvYWRTeW5jRmlsZShhY2Nlc3NUb2tlbiwgc3luY01ldGFkYXRhLmlkKV07XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmVtb3RlU3R5bGVzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIG1lcmdlZFN0eWxlcyA9IG1lcmdlU3R5bGVzKGxvY2FsU3R5bGVzLCByZW1vdGVTdHlsZXMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIHdyaXRlVG9Mb2NhbChzeW5jTWV0YWRhdGEsIG1lcmdlZFN0eWxlcyldO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCB3cml0ZVRvUmVtb3RlKGFjY2Vzc1Rva2VuLCBzeW5jTWV0YWRhdGEsIG1lcmdlZFN0eWxlcyldO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qL107XG4gICAgICAgIH1cbiAgICB9KTtcbn0pOyB9O1xuLyoqXG4gKiBSdW4gc3luYyBvbiBHb29nbGUgRHJpdmUuIFBlcmZvcm1zIHRoZSBmb2xsb3dpbmcgY2hlY2tzIGluIG9yZGVyOlxuICogMSkgSWYgbm8gYmFja3VwIGlzIGZvdW5kIG9uIGRyaXZlLCB3cml0ZSBsb2NhbCBzdHlsZXMgdG8gcmVtb3RlXG4gKiAyKSBJZiBubyBsb2NhbCBzeW5jIG1ldGFkYXRhIGlzIGZvdW5kLCBtZXJnZSBhbmQgdXBkYXRlIGJvdGggbG9jYWwgYW5kIHJlbW90ZSBzdHlsZXNcbiAqIDMpIElmIHRoZSByZW1vdGUgc3luYyB0aW1lc3RhbXAgPiBsb2NhbCBzeW5jIHRpbWVzdGFtcCxcbiAqICAgIC0gSWYgbG9jYWwgc3R5bGVzJyBtb2RpZmllZCB0aW1lc3RhbXAgPiByZW1vdGUgc3luYyB0aW1lc3RhbXAsIG1lcmdlIGFuZCB1cGRhdGUgYm90aCBsb2NhbCBhbmQgcmVtb3RlIHN0eWxlc1xuICogICAgLSBFbHNlLCB3cml0ZSByZW1vdGUgc3R5bGVzIHRvIGxvY2FsXG4gKiA0KSBJZiBsb2NhbCBzdHlsZXMnIG1vZGlmaWVkIHRpbWVzdGFtcCA+IHJlbW90ZSBzeW5jIHRpbWVzdGFtcCwgd3JpdGUgbG9jYWwgc3R5bGVzIHRvIHJlbW90ZS5cbiAqL1xuZXhwb3J0IHZhciBydW5Hb29nbGVEcml2ZVN5bmMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIFByb21pc2UsIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3R5bGVzLCBhY2Nlc3NUb2tlbiwgcmVtb3RlU3luY01ldGFkYXRhLCBibG9iLCByZW1vdGVTeW5jTWV0YWRhdGFfMSwgbG9jYWxTeW5jTWV0YWRhdGEsIGxvY2FsU3R5bGVzTWV0YWRhdGEsIGxvY2FsU3luY1RpbWUsIHJlbW90ZVN5bmNUaW1lLCBsb2NhbFN0eWxlc01vZGlmaWVkVGltZSwgcmVtb3RlU3R5bGVzO1xuICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgY2FzZSAwOiByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXRBbGxTdHlsZXMoKV07XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgc3R5bGVzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdldEFjY2Vzc1Rva2VuKCldO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGFjY2Vzc1Rva2VuID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbNCAvKnlpZWxkKi8sIGdldFN5bmNGaWxlTWV0YWRhdGEoYWNjZXNzVG9rZW4pXTtcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZW1vdGVTeW5jTWV0YWRhdGEgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1Zygnc3luY2luZyB3aXRoIGdvb2dsZSBkcml2ZS4uLicpO1xuICAgICAgICAgICAgICAgIGlmICghIXJlbW90ZVN5bmNNZXRhZGF0YSkgcmV0dXJuIFszIC8qYnJlYWsqLywgNV07XG4gICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnZGlkIG5vdCBmaW5kIHJlbW90ZSBzeW5jIGZpbGUsIHVwZGF0aW5nIHJlbW90ZS4uLicpO1xuICAgICAgICAgICAgICAgIGJsb2IgPSBnZXRTdHlsZXNCbG9iKHN0eWxlcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgd3JpdGVTeW5jRmlsZShhY2Nlc3NUb2tlbiwgYmxvYildO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIHJlbW90ZVN5bmNNZXRhZGF0YV8xID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBzZXRHb29nbGVEcml2ZVN5bmNNZXRhZGF0YShyZW1vdGVTeW5jTWV0YWRhdGFfMSldO1xuICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXRHb29nbGVEcml2ZVN5bmNNZXRhZGF0YSgpXTtcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBsb2NhbFN5bmNNZXRhZGF0YSA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWxvY2FsU3luY01ldGFkYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ25vIGxvY2FsIHN5bmMgbWV0YWRhdGEgZm91bmQuIG1lcmdpbmcgbG9jYWwgYW5kIHJlbW90ZS4uLicpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgbWVyZ2UoYWNjZXNzVG9rZW4sIHJlbW90ZVN5bmNNZXRhZGF0YSldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCBnZXRMb2NhbFN0eWxlc01ldGFkYXRhKCldO1xuICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIGxvY2FsU3R5bGVzTWV0YWRhdGEgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgbG9jYWxTeW5jVGltZSA9IG5ldyBEYXRlKGxvY2FsU3luY01ldGFkYXRhLm1vZGlmaWVkVGltZSk7XG4gICAgICAgICAgICAgICAgcmVtb3RlU3luY1RpbWUgPSBuZXcgRGF0ZShyZW1vdGVTeW5jTWV0YWRhdGEubW9kaWZpZWRUaW1lKTtcbiAgICAgICAgICAgICAgICBsb2NhbFN0eWxlc01vZGlmaWVkVGltZSA9IG5ldyBEYXRlKGxvY2FsU3R5bGVzTWV0YWRhdGEubW9kaWZpZWRUaW1lKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdzeW5jIGluZm8nLCB7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3luY1RpbWU6IGxvY2FsU3luY1RpbWUsXG4gICAgICAgICAgICAgICAgICAgIHJlbW90ZVN5bmNUaW1lOiByZW1vdGVTeW5jVGltZSxcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxTdHlsZXNNb2RpZmllZFRpbWU6IGxvY2FsU3R5bGVzTW9kaWZpZWRUaW1lLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGlmICghKGNvbXBhcmVBc2MocmVtb3RlU3luY1RpbWUsIGxvY2FsU3luY1RpbWUpID4gMCkpIHJldHVybiBbMyAvKmJyZWFrKi8sIDldO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGxvY2FsIHN0eWxlcyB3ZXJlIG1vZGlmaWVkIHYvcyByZW1vdGVcbiAgICAgICAgICAgICAgICBpZiAoY29tcGFyZUFzYyhsb2NhbFN0eWxlc01vZGlmaWVkVGltZSwgcmVtb3RlU3luY1RpbWUpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmRlYnVnKCdib3RoIGxvY2FsIGFuZCByZW1vdGUgd2VyZSB1cGRhdGVkIHNpbmNlIGxhc3Qgc3luYywgbWVyZ2luZyBsb2NhbCBhbmQgcmVtb3RlLi4uJyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBtZXJnZShhY2Nlc3NUb2tlbiwgcmVtb3RlU3luY01ldGFkYXRhKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZGVidWcoJ3JlbW90ZSB3YXMgdXBkYXRlZCBzaW5jZSBsYXN0IHN5bmMsIHVwZGF0aW5nIGxvY2FsLi4uJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZG93bmxvYWRTeW5jRmlsZShhY2Nlc3NUb2tlbiwgcmVtb3RlU3luY01ldGFkYXRhLmlkKV07XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgcmVtb3RlU3R5bGVzID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCB3cml0ZVRvTG9jYWwocmVtb3RlU3luY01ldGFkYXRhLCByZW1vdGVTdHlsZXMpXTtcbiAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAvLyBjaGVjayBpZiBsb2NhbCBzdHlsZXMgd2VyZSBtb2RpZmllZCB2L3MgcmVtb3RlXG4gICAgICAgICAgICAgICAgaWYgKGNvbXBhcmVBc2MobG9jYWxTdHlsZXNNb2RpZmllZFRpbWUsIHJlbW90ZVN5bmNUaW1lKSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5kZWJ1ZygnbG9jYWwgd2FzIHVwZGF0ZWQgc2luY2UgbGFzdCBzeW5jLCB1cGRhdGluZyByZW1vdGUuLi4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyIC8qcmV0dXJuKi8sIHdyaXRlVG9SZW1vdGUoYWNjZXNzVG9rZW4sIHJlbW90ZVN5bmNNZXRhZGF0YSwgc3R5bGVzKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovLCBzZXRHb29nbGVEcml2ZVN5bmNNZXRhZGF0YShfX2Fzc2lnbihfX2Fzc2lnbih7fSwgcmVtb3RlU3luY01ldGFkYXRhKSwgeyBtb2RpZmllZFRpbWU6IGdldEN1cnJlbnRUaW1lc3RhbXAoKSB9KSldO1xuICAgICAgICB9XG4gICAgfSk7XG59KTsgfTtcbiIsImltcG9ydCB0b0RhdGUgZnJvbSAnLi4vdG9EYXRlL2luZGV4LmpzJztcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSAnLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMnO1xuLyoqXG4gKiBAbmFtZSBjb21wYXJlQXNjXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbXBhcmUgdGhlIHR3byBkYXRlcyBhbmQgcmV0dXJuIC0xLCAwIG9yIDEuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb21wYXJlIHRoZSB0d28gZGF0ZXMgYW5kIHJldHVybiAxIGlmIHRoZSBmaXJzdCBkYXRlIGlzIGFmdGVyIHRoZSBzZWNvbmQsXG4gKiAtMSBpZiB0aGUgZmlyc3QgZGF0ZSBpcyBiZWZvcmUgdGhlIHNlY29uZCBvciAwIGlmIGRhdGVzIGFyZSBlcXVhbC5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGVMZWZ0IC0gdGhlIGZpcnN0IGRhdGUgdG8gY29tcGFyZVxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZVJpZ2h0IC0gdGhlIHNlY29uZCBkYXRlIHRvIGNvbXBhcmVcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSByZXN1bHQgb2YgdGhlIGNvbXBhcmlzb25cbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQ29tcGFyZSAxMSBGZWJydWFyeSAxOTg3IGFuZCAxMCBKdWx5IDE5ODk6XG4gKiB2YXIgcmVzdWx0ID0gY29tcGFyZUFzYyhuZXcgRGF0ZSgxOTg3LCAxLCAxMSksIG5ldyBEYXRlKDE5ODksIDYsIDEwKSlcbiAqIC8vPT4gLTFcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU29ydCB0aGUgYXJyYXkgb2YgZGF0ZXM6XG4gKiB2YXIgcmVzdWx0ID0gW1xuICogICBuZXcgRGF0ZSgxOTk1LCA2LCAyKSxcbiAqICAgbmV3IERhdGUoMTk4NywgMSwgMTEpLFxuICogICBuZXcgRGF0ZSgxOTg5LCA2LCAxMClcbiAqIF0uc29ydChjb21wYXJlQXNjKVxuICogLy89PiBbXG4gKiAvLyAgIFdlZCBGZWIgMTEgMTk4NyAwMDowMDowMCxcbiAqIC8vICAgTW9uIEp1bCAxMCAxOTg5IDAwOjAwOjAwLFxuICogLy8gICBTdW4gSnVsIDAyIDE5OTUgMDA6MDA6MDBcbiAqIC8vIF1cbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb21wYXJlQXNjKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZUxlZnQgPSB0b0RhdGUoZGlydHlEYXRlTGVmdCk7XG4gIHZhciBkYXRlUmlnaHQgPSB0b0RhdGUoZGlydHlEYXRlUmlnaHQpO1xuICB2YXIgZGlmZiA9IGRhdGVMZWZ0LmdldFRpbWUoKSAtIGRhdGVSaWdodC5nZXRUaW1lKCk7XG5cbiAgaWYgKGRpZmYgPCAwKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9IGVsc2UgaWYgKGRpZmYgPiAwKSB7XG4gICAgcmV0dXJuIDE7IC8vIFJldHVybiAwIGlmIGRpZmYgaXMgMDsgcmV0dXJuIE5hTiBpZiBkaWZmIGlzIE5hTlxuICB9IGVsc2Uge1xuICAgIHJldHVybiBkaWZmO1xuICB9XG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfc291cmNlTWFwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwic291cmNlLW1hcFwiKSk7XG5cbnZhciBfcGF0aCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInBhdGhcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgTWFwR2VuZXJhdG9yID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTWFwR2VuZXJhdG9yKHN0cmluZ2lmeSwgcm9vdCwgb3B0cykge1xuICAgIHRoaXMuc3RyaW5naWZ5ID0gc3RyaW5naWZ5O1xuICAgIHRoaXMubWFwT3B0cyA9IG9wdHMubWFwIHx8IHt9O1xuICAgIHRoaXMucm9vdCA9IHJvb3Q7XG4gICAgdGhpcy5vcHRzID0gb3B0cztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBNYXBHZW5lcmF0b3IucHJvdG90eXBlO1xuXG4gIF9wcm90by5pc01hcCA9IGZ1bmN0aW9uIGlzTWFwKCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5vcHRzLm1hcCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHJldHVybiAhIXRoaXMub3B0cy5tYXA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucHJldmlvdXMoKS5sZW5ndGggPiAwO1xuICB9O1xuXG4gIF9wcm90by5wcmV2aW91cyA9IGZ1bmN0aW9uIHByZXZpb3VzKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBpZiAoIXRoaXMucHJldmlvdXNNYXBzKSB7XG4gICAgICB0aGlzLnByZXZpb3VzTWFwcyA9IFtdO1xuICAgICAgdGhpcy5yb290LndhbGsoZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUuc291cmNlICYmIG5vZGUuc291cmNlLmlucHV0Lm1hcCkge1xuICAgICAgICAgIHZhciBtYXAgPSBub2RlLnNvdXJjZS5pbnB1dC5tYXA7XG5cbiAgICAgICAgICBpZiAoX3RoaXMucHJldmlvdXNNYXBzLmluZGV4T2YobWFwKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIF90aGlzLnByZXZpb3VzTWFwcy5wdXNoKG1hcCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5wcmV2aW91c01hcHM7XG4gIH07XG5cbiAgX3Byb3RvLmlzSW5saW5lID0gZnVuY3Rpb24gaXNJbmxpbmUoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLm1hcE9wdHMuaW5saW5lICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRoaXMubWFwT3B0cy5pbmxpbmU7XG4gICAgfVxuXG4gICAgdmFyIGFubm90YXRpb24gPSB0aGlzLm1hcE9wdHMuYW5ub3RhdGlvbjtcblxuICAgIGlmICh0eXBlb2YgYW5ub3RhdGlvbiAhPT0gJ3VuZGVmaW5lZCcgJiYgYW5ub3RhdGlvbiAhPT0gdHJ1ZSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByZXZpb3VzKCkubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcmV2aW91cygpLnNvbWUoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuIGkuaW5saW5lO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgX3Byb3RvLmlzU291cmNlc0NvbnRlbnQgPSBmdW5jdGlvbiBpc1NvdXJjZXNDb250ZW50KCkge1xuICAgIGlmICh0eXBlb2YgdGhpcy5tYXBPcHRzLnNvdXJjZXNDb250ZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRoaXMubWFwT3B0cy5zb3VyY2VzQ29udGVudDtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wcmV2aW91cygpLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRoaXMucHJldmlvdXMoKS5zb21lKGZ1bmN0aW9uIChpKSB7XG4gICAgICAgIHJldHVybiBpLndpdGhDb250ZW50KCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICBfcHJvdG8uY2xlYXJBbm5vdGF0aW9uID0gZnVuY3Rpb24gY2xlYXJBbm5vdGF0aW9uKCkge1xuICAgIGlmICh0aGlzLm1hcE9wdHMuYW5ub3RhdGlvbiA9PT0gZmFsc2UpIHJldHVybjtcbiAgICB2YXIgbm9kZTtcblxuICAgIGZvciAodmFyIGkgPSB0aGlzLnJvb3Qubm9kZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIG5vZGUgPSB0aGlzLnJvb3Qubm9kZXNbaV07XG4gICAgICBpZiAobm9kZS50eXBlICE9PSAnY29tbWVudCcpIGNvbnRpbnVlO1xuXG4gICAgICBpZiAobm9kZS50ZXh0LmluZGV4T2YoJyMgc291cmNlTWFwcGluZ1VSTD0nKSA9PT0gMCkge1xuICAgICAgICB0aGlzLnJvb3QucmVtb3ZlQ2hpbGQoaSk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5zZXRTb3VyY2VzQ29udGVudCA9IGZ1bmN0aW9uIHNldFNvdXJjZXNDb250ZW50KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIGFscmVhZHkgPSB7fTtcbiAgICB0aGlzLnJvb3Qud2FsayhmdW5jdGlvbiAobm9kZSkge1xuICAgICAgaWYgKG5vZGUuc291cmNlKSB7XG4gICAgICAgIHZhciBmcm9tID0gbm9kZS5zb3VyY2UuaW5wdXQuZnJvbTtcblxuICAgICAgICBpZiAoZnJvbSAmJiAhYWxyZWFkeVtmcm9tXSkge1xuICAgICAgICAgIGFscmVhZHlbZnJvbV0gPSB0cnVlO1xuXG4gICAgICAgICAgdmFyIHJlbGF0aXZlID0gX3RoaXMyLnJlbGF0aXZlKGZyb20pO1xuXG4gICAgICAgICAgX3RoaXMyLm1hcC5zZXRTb3VyY2VDb250ZW50KHJlbGF0aXZlLCBub2RlLnNvdXJjZS5pbnB1dC5jc3MpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgX3Byb3RvLmFwcGx5UHJldk1hcHMgPSBmdW5jdGlvbiBhcHBseVByZXZNYXBzKCkge1xuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IHRoaXMucHJldmlvdXMoKSwgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXYgPSBfcmVmO1xuICAgICAgdmFyIGZyb20gPSB0aGlzLnJlbGF0aXZlKHByZXYuZmlsZSk7XG5cbiAgICAgIHZhciByb290ID0gcHJldi5yb290IHx8IF9wYXRoLmRlZmF1bHQuZGlybmFtZShwcmV2LmZpbGUpO1xuXG4gICAgICB2YXIgbWFwID0gdm9pZCAwO1xuXG4gICAgICBpZiAodGhpcy5tYXBPcHRzLnNvdXJjZXNDb250ZW50ID09PSBmYWxzZSkge1xuICAgICAgICBtYXAgPSBuZXcgX3NvdXJjZU1hcC5kZWZhdWx0LlNvdXJjZU1hcENvbnN1bWVyKHByZXYudGV4dCk7XG5cbiAgICAgICAgaWYgKG1hcC5zb3VyY2VzQ29udGVudCkge1xuICAgICAgICAgIG1hcC5zb3VyY2VzQ29udGVudCA9IG1hcC5zb3VyY2VzQ29udGVudC5tYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1hcCA9IHByZXYuY29uc3VtZXIoKTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5tYXAuYXBwbHlTb3VyY2VNYXAobWFwLCBmcm9tLCB0aGlzLnJlbGF0aXZlKHJvb3QpKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmlzQW5ub3RhdGlvbiA9IGZ1bmN0aW9uIGlzQW5ub3RhdGlvbigpIHtcbiAgICBpZiAodGhpcy5pc0lubGluZSgpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIHRoaXMubWFwT3B0cy5hbm5vdGF0aW9uICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIHRoaXMubWFwT3B0cy5hbm5vdGF0aW9uO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByZXZpb3VzKCkubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcmV2aW91cygpLnNvbWUoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgcmV0dXJuIGkuYW5ub3RhdGlvbjtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIF9wcm90by50b0Jhc2U2NCA9IGZ1bmN0aW9uIHRvQmFzZTY0KHN0cikge1xuICAgIGlmIChCdWZmZXIpIHtcbiAgICAgIHJldHVybiBCdWZmZXIuZnJvbShzdHIpLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gd2luZG93LmJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KHN0cikpKTtcbiAgfTtcblxuICBfcHJvdG8uYWRkQW5ub3RhdGlvbiA9IGZ1bmN0aW9uIGFkZEFubm90YXRpb24oKSB7XG4gICAgdmFyIGNvbnRlbnQ7XG5cbiAgICBpZiAodGhpcy5pc0lubGluZSgpKSB7XG4gICAgICBjb250ZW50ID0gJ2RhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsJyArIHRoaXMudG9CYXNlNjQodGhpcy5tYXAudG9TdHJpbmcoKSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5tYXBPcHRzLmFubm90YXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb250ZW50ID0gdGhpcy5tYXBPcHRzLmFubm90YXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnRlbnQgPSB0aGlzLm91dHB1dEZpbGUoKSArICcubWFwJztcbiAgICB9XG5cbiAgICB2YXIgZW9sID0gJ1xcbic7XG4gICAgaWYgKHRoaXMuY3NzLmluZGV4T2YoJ1xcclxcbicpICE9PSAtMSkgZW9sID0gJ1xcclxcbic7XG4gICAgdGhpcy5jc3MgKz0gZW9sICsgJy8qIyBzb3VyY2VNYXBwaW5nVVJMPScgKyBjb250ZW50ICsgJyAqLyc7XG4gIH07XG5cbiAgX3Byb3RvLm91dHB1dEZpbGUgPSBmdW5jdGlvbiBvdXRwdXRGaWxlKCkge1xuICAgIGlmICh0aGlzLm9wdHMudG8pIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbGF0aXZlKHRoaXMub3B0cy50byk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMub3B0cy5mcm9tKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZWxhdGl2ZSh0aGlzLm9wdHMuZnJvbSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICd0by5jc3MnO1xuICB9O1xuXG4gIF9wcm90by5nZW5lcmF0ZU1hcCA9IGZ1bmN0aW9uIGdlbmVyYXRlTWFwKCkge1xuICAgIHRoaXMuZ2VuZXJhdGVTdHJpbmcoKTtcbiAgICBpZiAodGhpcy5pc1NvdXJjZXNDb250ZW50KCkpIHRoaXMuc2V0U291cmNlc0NvbnRlbnQoKTtcbiAgICBpZiAodGhpcy5wcmV2aW91cygpLmxlbmd0aCA+IDApIHRoaXMuYXBwbHlQcmV2TWFwcygpO1xuICAgIGlmICh0aGlzLmlzQW5ub3RhdGlvbigpKSB0aGlzLmFkZEFubm90YXRpb24oKTtcblxuICAgIGlmICh0aGlzLmlzSW5saW5lKCkpIHtcbiAgICAgIHJldHVybiBbdGhpcy5jc3NdO1xuICAgIH1cblxuICAgIHJldHVybiBbdGhpcy5jc3MsIHRoaXMubWFwXTtcbiAgfTtcblxuICBfcHJvdG8ucmVsYXRpdmUgPSBmdW5jdGlvbiByZWxhdGl2ZShmaWxlKSB7XG4gICAgaWYgKGZpbGUuaW5kZXhPZignPCcpID09PSAwKSByZXR1cm4gZmlsZTtcbiAgICBpZiAoL15cXHcrOlxcL1xcLy8udGVzdChmaWxlKSkgcmV0dXJuIGZpbGU7XG4gICAgdmFyIGZyb20gPSB0aGlzLm9wdHMudG8gPyBfcGF0aC5kZWZhdWx0LmRpcm5hbWUodGhpcy5vcHRzLnRvKSA6ICcuJztcblxuICAgIGlmICh0eXBlb2YgdGhpcy5tYXBPcHRzLmFubm90YXRpb24gPT09ICdzdHJpbmcnKSB7XG4gICAgICBmcm9tID0gX3BhdGguZGVmYXVsdC5kaXJuYW1lKF9wYXRoLmRlZmF1bHQucmVzb2x2ZShmcm9tLCB0aGlzLm1hcE9wdHMuYW5ub3RhdGlvbikpO1xuICAgIH1cblxuICAgIGZpbGUgPSBfcGF0aC5kZWZhdWx0LnJlbGF0aXZlKGZyb20sIGZpbGUpO1xuXG4gICAgaWYgKF9wYXRoLmRlZmF1bHQuc2VwID09PSAnXFxcXCcpIHtcbiAgICAgIHJldHVybiBmaWxlLnJlcGxhY2UoL1xcXFwvZywgJy8nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmlsZTtcbiAgfTtcblxuICBfcHJvdG8uc291cmNlUGF0aCA9IGZ1bmN0aW9uIHNvdXJjZVBhdGgobm9kZSkge1xuICAgIGlmICh0aGlzLm1hcE9wdHMuZnJvbSkge1xuICAgICAgcmV0dXJuIHRoaXMubWFwT3B0cy5mcm9tO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlbGF0aXZlKG5vZGUuc291cmNlLmlucHV0LmZyb20pO1xuICB9O1xuXG4gIF9wcm90by5nZW5lcmF0ZVN0cmluZyA9IGZ1bmN0aW9uIGdlbmVyYXRlU3RyaW5nKCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdGhpcy5jc3MgPSAnJztcbiAgICB0aGlzLm1hcCA9IG5ldyBfc291cmNlTWFwLmRlZmF1bHQuU291cmNlTWFwR2VuZXJhdG9yKHtcbiAgICAgIGZpbGU6IHRoaXMub3V0cHV0RmlsZSgpXG4gICAgfSk7XG4gICAgdmFyIGxpbmUgPSAxO1xuICAgIHZhciBjb2x1bW4gPSAxO1xuICAgIHZhciBsaW5lcywgbGFzdDtcbiAgICB0aGlzLnN0cmluZ2lmeSh0aGlzLnJvb3QsIGZ1bmN0aW9uIChzdHIsIG5vZGUsIHR5cGUpIHtcbiAgICAgIF90aGlzMy5jc3MgKz0gc3RyO1xuXG4gICAgICBpZiAobm9kZSAmJiB0eXBlICE9PSAnZW5kJykge1xuICAgICAgICBpZiAobm9kZS5zb3VyY2UgJiYgbm9kZS5zb3VyY2Uuc3RhcnQpIHtcbiAgICAgICAgICBfdGhpczMubWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgICAgc291cmNlOiBfdGhpczMuc291cmNlUGF0aChub2RlKSxcbiAgICAgICAgICAgIGdlbmVyYXRlZDoge1xuICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICBjb2x1bW46IGNvbHVtbiAtIDFcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcmlnaW5hbDoge1xuICAgICAgICAgICAgICBsaW5lOiBub2RlLnNvdXJjZS5zdGFydC5saW5lLFxuICAgICAgICAgICAgICBjb2x1bW46IG5vZGUuc291cmNlLnN0YXJ0LmNvbHVtbiAtIDFcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczMubWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgICAgc291cmNlOiAnPG5vIHNvdXJjZT4nLFxuICAgICAgICAgICAgb3JpZ2luYWw6IHtcbiAgICAgICAgICAgICAgbGluZTogMSxcbiAgICAgICAgICAgICAgY29sdW1uOiAwXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgICAgIGxpbmU6IGxpbmUsXG4gICAgICAgICAgICAgIGNvbHVtbjogY29sdW1uIC0gMVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpbmVzID0gc3RyLm1hdGNoKC9cXG4vZyk7XG5cbiAgICAgIGlmIChsaW5lcykge1xuICAgICAgICBsaW5lICs9IGxpbmVzLmxlbmd0aDtcbiAgICAgICAgbGFzdCA9IHN0ci5sYXN0SW5kZXhPZignXFxuJyk7XG4gICAgICAgIGNvbHVtbiA9IHN0ci5sZW5ndGggLSBsYXN0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29sdW1uICs9IHN0ci5sZW5ndGg7XG4gICAgICB9XG5cbiAgICAgIGlmIChub2RlICYmIHR5cGUgIT09ICdzdGFydCcpIHtcbiAgICAgICAgdmFyIHAgPSBub2RlLnBhcmVudCB8fCB7XG4gICAgICAgICAgcmF3czoge31cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAobm9kZS50eXBlICE9PSAnZGVjbCcgfHwgbm9kZSAhPT0gcC5sYXN0IHx8IHAucmF3cy5zZW1pY29sb24pIHtcbiAgICAgICAgICBpZiAobm9kZS5zb3VyY2UgJiYgbm9kZS5zb3VyY2UuZW5kKSB7XG4gICAgICAgICAgICBfdGhpczMubWFwLmFkZE1hcHBpbmcoe1xuICAgICAgICAgICAgICBzb3VyY2U6IF90aGlzMy5zb3VyY2VQYXRoKG5vZGUpLFxuICAgICAgICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogY29sdW1uIC0gMlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBvcmlnaW5hbDoge1xuICAgICAgICAgICAgICAgIGxpbmU6IG5vZGUuc291cmNlLmVuZC5saW5lLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogbm9kZS5zb3VyY2UuZW5kLmNvbHVtbiAtIDFcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzMy5tYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgICAgIHNvdXJjZTogJzxubyBzb3VyY2U+JyxcbiAgICAgICAgICAgICAgb3JpZ2luYWw6IHtcbiAgICAgICAgICAgICAgICBsaW5lOiAxLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogMFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBnZW5lcmF0ZWQ6IHtcbiAgICAgICAgICAgICAgICBsaW5lOiBsaW5lLFxuICAgICAgICAgICAgICAgIGNvbHVtbjogY29sdW1uIC0gMVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBfcHJvdG8uZ2VuZXJhdGUgPSBmdW5jdGlvbiBnZW5lcmF0ZSgpIHtcbiAgICB0aGlzLmNsZWFyQW5ub3RhdGlvbigpO1xuXG4gICAgaWYgKHRoaXMuaXNNYXAoKSkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVNYXAoKTtcbiAgICB9XG5cbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgdGhpcy5zdHJpbmdpZnkodGhpcy5yb290LCBmdW5jdGlvbiAoaSkge1xuICAgICAgcmVzdWx0ICs9IGk7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtyZXN1bHRdO1xuICB9O1xuXG4gIHJldHVybiBNYXBHZW5lcmF0b3I7XG59KCk7XG5cbnZhciBfZGVmYXVsdCA9IE1hcEdlbmVyYXRvcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltMWhjQzFuWlc1bGNtRjBiM0l1WlhNMklsMHNJbTVoYldWeklqcGJJazFoY0VkbGJtVnlZWFJ2Y2lJc0luTjBjbWx1WjJsbWVTSXNJbkp2YjNRaUxDSnZjSFJ6SWl3aWJXRndUM0IwY3lJc0ltMWhjQ0lzSW1selRXRndJaXdpY0hKbGRtbHZkWE1pTENKc1pXNW5kR2dpTENKd2NtVjJhVzkxYzAxaGNITWlMQ0ozWVd4cklpd2libTlrWlNJc0luTnZkWEpqWlNJc0ltbHVjSFYwSWl3aWFXNWtaWGhQWmlJc0luQjFjMmdpTENKcGMwbHViR2x1WlNJc0ltbHViR2x1WlNJc0ltRnVibTkwWVhScGIyNGlMQ0p6YjIxbElpd2lhU0lzSW1selUyOTFjbU5sYzBOdmJuUmxiblFpTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0lzSW5kcGRHaERiMjUwWlc1MElpd2lZMnhsWVhKQmJtNXZkR0YwYVc5dUlpd2libTlrWlhNaUxDSjBlWEJsSWl3aWRHVjRkQ0lzSW5KbGJXOTJaVU5vYVd4a0lpd2ljMlYwVTI5MWNtTmxjME52Ym5SbGJuUWlMQ0poYkhKbFlXUjVJaXdpWm5KdmJTSXNJbkpsYkdGMGFYWmxJaXdpYzJWMFUyOTFjbU5sUTI5dWRHVnVkQ0lzSW1OemN5SXNJbUZ3Y0d4NVVISmxkazFoY0hNaUxDSndjbVYySWl3aVptbHNaU0lzSW5CaGRHZ2lMQ0prYVhKdVlXMWxJaXdpYlc5NmFXeHNZU0lzSWxOdmRYSmpaVTFoY0VOdmJuTjFiV1Z5SWl3aVkyOXVjM1Z0WlhJaUxDSmhjSEJzZVZOdmRYSmpaVTFoY0NJc0ltbHpRVzV1YjNSaGRHbHZiaUlzSW5SdlFtRnpaVFkwSWl3aWMzUnlJaXdpUW5WbVptVnlJaXdpZEc5VGRISnBibWNpTENKM2FXNWtiM2NpTENKaWRHOWhJaXdpZFc1bGMyTmhjR1VpTENKbGJtTnZaR1ZWVWtsRGIyMXdiMjVsYm5RaUxDSmhaR1JCYm01dmRHRjBhVzl1SWl3aVkyOXVkR1Z1ZENJc0ltOTFkSEIxZEVacGJHVWlMQ0psYjJ3aUxDSjBieUlzSW1kbGJtVnlZWFJsVFdGd0lpd2laMlZ1WlhKaGRHVlRkSEpwYm1jaUxDSjBaWE4wSWl3aWNtVnpiMngyWlNJc0luTmxjQ0lzSW5KbGNHeGhZMlVpTENKemIzVnlZMlZRWVhSb0lpd2lVMjkxY21ObFRXRndSMlZ1WlhKaGRHOXlJaXdpYkdsdVpTSXNJbU52YkhWdGJpSXNJbXhwYm1Weklpd2liR0Z6ZENJc0luTjBZWEowSWl3aVlXUmtUV0Z3Y0dsdVp5SXNJbWRsYm1WeVlYUmxaQ0lzSW05eWFXZHBibUZzSWl3aWJXRjBZMmdpTENKc1lYTjBTVzVrWlhoUFppSXNJbkFpTENKd1lYSmxiblFpTENKeVlYZHpJaXdpYzJWdGFXTnZiRzl1SWl3aVpXNWtJaXdpWjJWdVpYSmhkR1VpTENKeVpYTjFiSFFpWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3TzBGQlFVRTdPMEZCUTBFN096czdTVUZGVFVFc1dUczdPMEZCUTBvc2QwSkJRV0ZETEZOQlFXSXNSVUZCZDBKRExFbEJRWGhDTEVWQlFUaENReXhKUVVFNVFpeEZRVUZ2UXp0QlFVTnNReXhUUVVGTFJpeFRRVUZNTEVkQlFXbENRU3hUUVVGcVFqdEJRVU5CTEZOQlFVdEhMRTlCUVV3c1IwRkJaVVFzU1VGQlNTeERRVUZEUlN4SFFVRk1MRWxCUVZrc1JVRkJNMEk3UVVGRFFTeFRRVUZMU0N4SlFVRk1MRWRCUVZsQkxFbEJRVm83UVVGRFFTeFRRVUZMUXl4SlFVRk1MRWRCUVZsQkxFbEJRVm83UVVGRFJEczdPenRUUVVWRVJ5eExMRWRCUVVFc2FVSkJRVk03UVVGRFVDeFJRVUZKTEU5QlFVOHNTMEZCUzBnc1NVRkJUQ3hEUVVGVlJTeEhRVUZxUWl4TFFVRjVRaXhYUVVFM1FpeEZRVUV3UXp0QlFVTjRReXhoUVVGUExFTkJRVU1zUTBGQlF5eExRVUZMUml4SlFVRk1MRU5CUVZWRkxFZEJRVzVDTzBGQlEwUTdPMEZCUTBRc1YwRkJUeXhMUVVGTFJTeFJRVUZNTEVkQlFXZENReXhOUVVGb1FpeEhRVUY1UWl4RFFVRm9RenRCUVVORUxFYzdPMU5CUlVSRUxGRXNSMEZCUVN4dlFrRkJXVHRCUVVGQk96dEJRVU5XTEZGQlFVa3NRMEZCUXl4TFFVRkxSU3haUVVGV0xFVkJRWGRDTzBGQlEzUkNMRmRCUVV0QkxGbEJRVXdzUjBGQmIwSXNSVUZCY0VJN1FVRkRRU3hYUVVGTFVDeEpRVUZNTEVOQlFWVlJMRWxCUVZZc1EwRkJaU3hWUVVGQlF5eEpRVUZKTEVWQlFVazdRVUZEY2tJc1dVRkJTVUVzU1VGQlNTeERRVUZEUXl4TlFVRk1MRWxCUVdWRUxFbEJRVWtzUTBGQlEwTXNUVUZCVEN4RFFVRlpReXhMUVVGYUxFTkJRV3RDVWl4SFFVRnlReXhGUVVFd1F6dEJRVU40UXl4alFVRkpRU3hIUVVGSExFZEJRVWROTEVsQlFVa3NRMEZCUTBNc1RVRkJUQ3hEUVVGWlF5eExRVUZhTEVOQlFXdENVaXhIUVVFMVFqczdRVUZEUVN4alFVRkpMRXRCUVVrc1EwRkJRMGtzV1VGQlRDeERRVUZyUWtzc1QwRkJiRUlzUTBGQk1FSlVMRWRCUVRGQ0xFMUJRVzFETEVOQlFVTXNRMEZCZUVNc1JVRkJNa003UVVGRGVrTXNXVUZCUVN4TFFVRkpMRU5CUVVOSkxGbEJRVXdzUTBGQmEwSk5MRWxCUVd4Q0xFTkJRWFZDVml4SFFVRjJRanRCUVVORU8wRkJRMFk3UVVGRFJpeFBRVkJFTzBGQlVVUTdPMEZCUlVRc1YwRkJUeXhMUVVGTFNTeFpRVUZhTzBGQlEwUXNSenM3VTBGRlJFOHNVU3hIUVVGQkxHOUNRVUZaTzBGQlExWXNVVUZCU1N4UFFVRlBMRXRCUVV0YUxFOUJRVXdzUTBGQllXRXNUVUZCY0VJc1MwRkJLMElzVjBGQmJrTXNSVUZCWjBRN1FVRkRPVU1zWVVGQlR5eExRVUZMWWl4UFFVRk1MRU5CUVdGaExFMUJRWEJDTzBGQlEwUTdPMEZCUlVRc1VVRkJTVU1zVlVGQlZTeEhRVUZITEV0QlFVdGtMRTlCUVV3c1EwRkJZV01zVlVGQk9VSTdPMEZCUTBFc1VVRkJTU3hQUVVGUFFTeFZRVUZRTEV0QlFYTkNMRmRCUVhSQ0xFbEJRWEZEUVN4VlFVRlZMRXRCUVVzc1NVRkJlRVFzUlVGQk9FUTdRVUZETlVRc1lVRkJUeXhMUVVGUU8wRkJRMFE3TzBGQlJVUXNVVUZCU1N4TFFVRkxXQ3hSUVVGTUxFZEJRV2RDUXl4TlFVRndRaXhGUVVFMFFqdEJRVU14UWl4aFFVRlBMRXRCUVV0RUxGRkJRVXdzUjBGQlowSlpMRWxCUVdoQ0xFTkJRWEZDTEZWQlFVRkRMRU5CUVVNN1FVRkJRU3hsUVVGSlFTeERRVUZETEVOQlFVTklMRTFCUVU0N1FVRkJRU3hQUVVGMFFpeERRVUZRTzBGQlEwUTdPMEZCUTBRc1YwRkJUeXhKUVVGUU8wRkJRMFFzUnpzN1UwRkZSRWtzWjBJc1IwRkJRU3cwUWtGQmIwSTdRVUZEYkVJc1VVRkJTU3hQUVVGUExFdEJRVXRxUWl4UFFVRk1MRU5CUVdGclFpeGpRVUZ3UWl4TFFVRjFReXhYUVVFelF5eEZRVUYzUkR0QlFVTjBSQ3hoUVVGUExFdEJRVXRzUWl4UFFVRk1MRU5CUVdGclFpeGpRVUZ3UWp0QlFVTkVPenRCUVVORUxGRkJRVWtzUzBGQlMyWXNVVUZCVEN4SFFVRm5Ra01zVFVGQmNFSXNSVUZCTkVJN1FVRkRNVUlzWVVGQlR5eExRVUZMUkN4UlFVRk1MRWRCUVdkQ1dTeEpRVUZvUWl4RFFVRnhRaXhWUVVGQlF5eERRVUZETzBGQlFVRXNaVUZCU1VFc1EwRkJReXhEUVVGRFJ5eFhRVUZHTEVWQlFVbzdRVUZCUVN4UFFVRjBRaXhEUVVGUU8wRkJRMFE3TzBGQlEwUXNWMEZCVHl4SlFVRlFPMEZCUTBRc1J6czdVMEZGUkVNc1pTeEhRVUZCTERKQ1FVRnRRanRCUVVOcVFpeFJRVUZKTEV0QlFVdHdRaXhQUVVGTUxFTkJRV0ZqTEZWQlFXSXNTMEZCTkVJc1MwRkJhRU1zUlVGQmRVTTdRVUZGZGtNc1VVRkJTVkFzU1VGQlNqczdRVUZEUVN4VFFVRkxMRWxCUVVsVExFTkJRVU1zUjBGQlJ5eExRVUZMYkVJc1NVRkJUQ3hEUVVGVmRVSXNTMEZCVml4RFFVRm5RbXBDTEUxQlFXaENMRWRCUVhsQ0xFTkJRWFJETEVWQlFYbERXU3hEUVVGRExFbEJRVWtzUTBGQk9VTXNSVUZCYVVSQkxFTkJRVU1zUlVGQmJFUXNSVUZCYzBRN1FVRkRjRVJVTEUxQlFVRkJMRWxCUVVrc1IwRkJSeXhMUVVGTFZDeEpRVUZNTEVOQlFWVjFRaXhMUVVGV0xFTkJRV2RDVEN4RFFVRm9RaXhEUVVGUU8wRkJRMEVzVlVGQlNWUXNTVUZCU1N4RFFVRkRaU3hKUVVGTUxFdEJRV01zVTBGQmJFSXNSVUZCTmtJN08wRkJRemRDTEZWQlFVbG1MRWxCUVVrc1EwRkJRMmRDTEVsQlFVd3NRMEZCVldJc1QwRkJWaXhEUVVGclFpeHhRa0ZCYkVJc1RVRkJOa01zUTBGQmFrUXNSVUZCYjBRN1FVRkRiRVFzWVVGQlMxb3NTVUZCVEN4RFFVRlZNRUlzVjBGQlZpeERRVUZ6UWxJc1EwRkJkRUk3UVVGRFJEdEJRVU5HTzBGQlEwWXNSenM3VTBGRlJGTXNhVUlzUjBGQlFTdzJRa0ZCY1VJN1FVRkJRVHM3UVVGRGJrSXNVVUZCU1VNc1QwRkJUeXhIUVVGSExFVkJRV1E3UVVGRFFTeFRRVUZMTlVJc1NVRkJUQ3hEUVVGVlVTeEpRVUZXTEVOQlFXVXNWVUZCUVVNc1NVRkJTU3hGUVVGSk8wRkJRM0pDTEZWQlFVbEJMRWxCUVVrc1EwRkJRME1zVFVGQlZDeEZRVUZwUWp0QlFVTm1MRmxCUVVsdFFpeEpRVUZKTEVkQlFVZHdRaXhKUVVGSkxFTkJRVU5ETEUxQlFVd3NRMEZCV1VNc1MwRkJXaXhEUVVGclFtdENMRWxCUVRkQ096dEJRVU5CTEZsQlFVbEJMRWxCUVVrc1NVRkJTU3hEUVVGRFJDeFBRVUZQTEVOQlFVTkRMRWxCUVVRc1EwRkJjRUlzUlVGQk5FSTdRVUZETVVKRUxGVkJRVUZCTEU5QlFVOHNRMEZCUTBNc1NVRkJSQ3hEUVVGUUxFZEJRV2RDTEVsQlFXaENPenRCUVVOQkxHTkJRVWxETEZGQlFWRXNSMEZCUnl4TlFVRkpMRU5CUVVOQkxGRkJRVXdzUTBGQlkwUXNTVUZCWkN4RFFVRm1PenRCUVVOQkxGVkJRVUVzVFVGQlNTeERRVUZETVVJc1IwRkJUQ3hEUVVGVE5FSXNaMEpCUVZRc1EwRkJNRUpFTEZGQlFURkNMRVZCUVc5RGNrSXNTVUZCU1N4RFFVRkRReXhOUVVGTUxFTkJRVmxETEV0QlFWb3NRMEZCYTBKeFFpeEhRVUYwUkR0QlFVTkVPMEZCUTBZN1FVRkRSaXhMUVZSRU8wRkJWVVFzUnpzN1UwRkZSRU1zWVN4SFFVRkJMSGxDUVVGcFFqdEJRVU5tTEhsQ1FVRnBRaXhMUVVGTE5VSXNVVUZCVEN4RlFVRnFRaXhyU0VGQmEwTTdRVUZCUVRzN1FVRkJRVHRCUVVGQk8wRkJRVUU3UVVGQlFUdEJRVUZCTzBGQlFVRTdRVUZCUVR0QlFVRkJPenRCUVVGQkxGVkJRWHBDTmtJc1NVRkJlVUk3UVVGRGFFTXNWVUZCU1V3c1NVRkJTU3hIUVVGSExFdEJRVXRETEZGQlFVd3NRMEZCWTBrc1NVRkJTU3hEUVVGRFF5eEpRVUZ1UWl4RFFVRllPenRCUVVOQkxGVkJRVWx1UXl4SlFVRkpMRWRCUVVkclF5eEpRVUZKTEVOQlFVTnNReXhKUVVGTUxFbEJRV0Z2UXl4alFVRkxReXhQUVVGTUxFTkJRV0ZJTEVsQlFVa3NRMEZCUTBNc1NVRkJiRUlzUTBGQmVFSTdPMEZCUTBFc1ZVRkJTV2hETEVkQlFVY3NVMEZCVURzN1FVRkZRU3hWUVVGSkxFdEJRVXRFTEU5QlFVd3NRMEZCWVd0Q0xHTkJRV0lzUzBGQlowTXNTMEZCY0VNc1JVRkJNa003UVVGRGVrTnFRaXhSUVVGQlFTeEhRVUZITEVkQlFVY3NTVUZCU1cxRExHMUNRVUZSUXl4cFFrRkJXaXhEUVVFNFFrd3NTVUZCU1N4RFFVRkRWQ3hKUVVGdVF5eERRVUZPT3p0QlFVTkJMRmxCUVVsMFFpeEhRVUZITEVOQlFVTnBRaXhqUVVGU0xFVkJRWGRDTzBGQlEzUkNha0lzVlVGQlFVRXNSMEZCUnl4RFFVRkRhVUlzWTBGQlNpeEhRVUZ4UW1wQ0xFZEJRVWNzUTBGQlEybENMR05CUVVvc1EwRkJiVUpxUWl4SFFVRnVRaXhEUVVGMVFqdEJRVUZCTEcxQ1FVRk5MRWxCUVU0N1FVRkJRU3hYUVVGMlFpeERRVUZ5UWp0QlFVTkVPMEZCUTBZc1QwRk1SQ3hOUVV0UE8wRkJRMHhCTEZGQlFVRkJMRWRCUVVjc1IwRkJSeXRDTEVsQlFVa3NRMEZCUTAwc1VVRkJUQ3hGUVVGT08wRkJRMFE3TzBGQlJVUXNWMEZCUzNKRExFZEJRVXdzUTBGQlUzTkRMR05CUVZRc1EwRkJkMEowUXl4SFFVRjRRaXhGUVVFMlFqQkNMRWxCUVRkQ0xFVkJRVzFETEV0QlFVdERMRkZCUVV3c1EwRkJZemxDTEVsQlFXUXNRMEZCYmtNN1FVRkRSRHRCUVVOR0xFYzdPMU5CUlVRd1F5eFpMRWRCUVVFc2QwSkJRV2RDTzBGQlEyUXNVVUZCU1N4TFFVRkxOVUlzVVVGQlRDeEZRVUZLTEVWQlFYRkNPMEZCUTI1Q0xHRkJRVThzU1VGQlVEdEJRVU5FT3p0QlFVTkVMRkZCUVVrc1QwRkJUeXhMUVVGTFdpeFBRVUZNTEVOQlFXRmpMRlZCUVhCQ0xFdEJRVzFETEZkQlFYWkRMRVZCUVc5RU8wRkJRMnhFTEdGQlFVOHNTMEZCUzJRc1QwRkJUQ3hEUVVGaFl5eFZRVUZ3UWp0QlFVTkVPenRCUVVORUxGRkJRVWtzUzBGQlMxZ3NVVUZCVEN4SFFVRm5Ra01zVFVGQmNFSXNSVUZCTkVJN1FVRkRNVUlzWVVGQlR5eExRVUZMUkN4UlFVRk1MRWRCUVdkQ1dTeEpRVUZvUWl4RFFVRnhRaXhWUVVGQlF5eERRVUZETzBGQlFVRXNaVUZCU1VFc1EwRkJReXhEUVVGRFJpeFZRVUZPTzBGQlFVRXNUMEZCZEVJc1EwRkJVRHRCUVVORU96dEJRVU5FTEZkQlFVOHNTVUZCVUR0QlFVTkVMRWM3TzFOQlJVUXlRaXhSTEVkQlFVRXNhMEpCUVZWRExFZEJRVllzUlVGQlpUdEJRVU5pTEZGQlFVbERMRTFCUVVvc1JVRkJXVHRCUVVOV0xHRkJRVTlCTEUxQlFVMHNRMEZCUTJoQ0xFbEJRVkFzUTBGQldXVXNSMEZCV2l4RlFVRnBRa1VzVVVGQmFrSXNRMEZCTUVJc1VVRkJNVUlzUTBGQlVEdEJRVU5FT3p0QlFVTkVMRmRCUVU5RExFMUJRVTBzUTBGQlEwTXNTVUZCVUN4RFFVRlpReXhSUVVGUkxFTkJRVU5ETEd0Q1FVRnJRaXhEUVVGRFRpeEhRVUZFTEVOQlFXNUNMRU5CUVhCQ0xFTkJRVkE3UVVGRFJDeEhPenRUUVVWRVR5eGhMRWRCUVVFc2VVSkJRV2xDTzBGQlEyWXNVVUZCU1VNc1QwRkJTanM3UVVGRlFTeFJRVUZKTEV0QlFVdDBReXhSUVVGTUxFVkJRVW9zUlVGQmNVSTdRVUZEYmtKelF5eE5RVUZCUVN4UFFVRlBMRWRCUVVjc2EwTkJRMEVzUzBGQlMxUXNVVUZCVEN4RFFVRmpMRXRCUVV0NFF5eEhRVUZNTEVOQlFWTXlReXhSUVVGVUxFVkJRV1FzUTBGRVZqdEJRVVZFTEV0QlNFUXNUVUZIVHl4SlFVRkpMRTlCUVU4c1MwRkJTelZETEU5QlFVd3NRMEZCWVdNc1ZVRkJjRUlzUzBGQmJVTXNVVUZCZGtNc1JVRkJhVVE3UVVGRGRFUnZReXhOUVVGQlFTeFBRVUZQTEVkQlFVY3NTMEZCUzJ4RUxFOUJRVXdzUTBGQllXTXNWVUZCZGtJN1FVRkRSQ3hMUVVaTkxFMUJSVUU3UVVGRFRHOURMRTFCUVVGQkxFOUJRVThzUjBGQlJ5eExRVUZMUXl4VlFVRk1MRXRCUVc5Q0xFMUJRVGxDTzBGQlEwUTdPMEZCUlVRc1VVRkJTVU1zUjBGQlJ5eEhRVUZITEVsQlFWWTdRVUZEUVN4UlFVRkpMRXRCUVV0MFFpeEhRVUZNTEVOQlFWTndRaXhQUVVGVUxFTkJRV2xDTEUxQlFXcENMRTFCUVRaQ0xFTkJRVU1zUTBGQmJFTXNSVUZCY1VNd1F5eEhRVUZITEVkQlFVY3NUVUZCVGp0QlFVVnlReXhUUVVGTGRFSXNSMEZCVEN4SlFVRlpjMElzUjBGQlJ5eEhRVUZITEhWQ1FVRk9MRWRCUVdkRFJpeFBRVUZvUXl4SFFVRXdReXhMUVVGMFJEdEJRVU5FTEVjN08xTkJSVVJETEZVc1IwRkJRU3h6UWtGQll6dEJRVU5hTEZGQlFVa3NTMEZCUzNCRUxFbEJRVXdzUTBGQlZYTkVMRVZCUVdRc1JVRkJhMEk3UVVGRGFFSXNZVUZCVHl4TFFVRkxla0lzVVVGQlRDeERRVUZqTEV0QlFVczNRaXhKUVVGTUxFTkJRVlZ6UkN4RlFVRjRRaXhEUVVGUU8wRkJRMFE3TzBGQlEwUXNVVUZCU1N4TFFVRkxkRVFzU1VGQlRDeERRVUZWTkVJc1NVRkJaQ3hGUVVGdlFqdEJRVU5zUWl4aFFVRlBMRXRCUVV0RExGRkJRVXdzUTBGQll5eExRVUZMTjBJc1NVRkJUQ3hEUVVGVk5FSXNTVUZCZUVJc1EwRkJVRHRCUVVORU96dEJRVU5FTEZkQlFVOHNVVUZCVUR0QlFVTkVMRWM3TzFOQlJVUXlRaXhYTEVkQlFVRXNkVUpCUVdVN1FVRkRZaXhUUVVGTFF5eGpRVUZNTzBGQlEwRXNVVUZCU1N4TFFVRkxkRU1zWjBKQlFVd3NSVUZCU2l4RlFVRTJRaXhMUVVGTFVTeHBRa0ZCVER0QlFVTTNRaXhSUVVGSkxFdEJRVXQwUWl4UlFVRk1MRWRCUVdkQ1F5eE5RVUZvUWl4SFFVRjVRaXhEUVVFM1FpeEZRVUZuUXl4TFFVRkxNa0lzWVVGQlREdEJRVU5vUXl4UlFVRkpMRXRCUVV0VExGbEJRVXdzUlVGQlNpeEZRVUY1UWl4TFFVRkxVeXhoUVVGTU96dEJRVVY2UWl4UlFVRkpMRXRCUVV0eVF5eFJRVUZNTEVWQlFVb3NSVUZCY1VJN1FVRkRia0lzWVVGQlR5eERRVUZETEV0QlFVdHJRaXhIUVVGT0xFTkJRVkE3UVVGRFJEczdRVUZEUkN4WFFVRlBMRU5CUVVNc1MwRkJTMEVzUjBGQlRpeEZRVUZYTEV0QlFVczNRaXhIUVVGb1FpeERRVUZRTzBGQlEwUXNSenM3VTBGRlJESkNMRkVzUjBGQlFTeHJRa0ZCVlVzc1NVRkJWaXhGUVVGblFqdEJRVU5rTEZGQlFVbEJMRWxCUVVrc1EwRkJRM1pDTEU5QlFVd3NRMEZCWVN4SFFVRmlMRTFCUVhOQ0xFTkJRVEZDTEVWQlFUWkNMRTlCUVU5MVFpeEpRVUZRTzBGQlF6ZENMRkZCUVVrc1dVRkJXWFZDTEVsQlFWb3NRMEZCYVVKMlFpeEpRVUZxUWl4RFFVRktMRVZCUVRSQ0xFOUJRVTlCTEVsQlFWQTdRVUZGTlVJc1VVRkJTVTRzU1VGQlNTeEhRVUZITEV0QlFVczFRaXhKUVVGTUxFTkJRVlZ6UkN4RlFVRldMRWRCUVdWdVFpeGpRVUZMUXl4UFFVRk1MRU5CUVdFc1MwRkJTM0JETEVsQlFVd3NRMEZCVlhORUxFVkJRWFpDTEVOQlFXWXNSMEZCTkVNc1IwRkJka1E3TzBGQlJVRXNVVUZCU1N4UFFVRlBMRXRCUVV0eVJDeFBRVUZNTEVOQlFXRmpMRlZCUVhCQ0xFdEJRVzFETEZGQlFYWkRMRVZCUVdsRU8wRkJReTlEWVN4TlFVRkJRU3hKUVVGSkxFZEJRVWRQTEdOQlFVdERMRTlCUVV3c1EwRkJZVVFzWTBGQlMzVkNMRTlCUVV3c1EwRkJZVGxDTEVsQlFXSXNSVUZCYlVJc1MwRkJTek5DTEU5QlFVd3NRMEZCWVdNc1ZVRkJhRU1zUTBGQllpeERRVUZRTzBGQlEwUTdPMEZCUlVSdFFpeEpRVUZCUVN4SlFVRkpMRWRCUVVkRExHTkJRVXRPTEZGQlFVd3NRMEZCWTBRc1NVRkJaQ3hGUVVGdlFrMHNTVUZCY0VJc1EwRkJVRHM3UVVGRFFTeFJRVUZKUXl4alFVRkxkMElzUjBGQlRDeExRVUZoTEVsQlFXcENMRVZCUVhWQ08wRkJRM0pDTEdGQlFVOTZRaXhKUVVGSkxFTkJRVU13UWl4UFFVRk1MRU5CUVdFc1MwRkJZaXhGUVVGdlFpeEhRVUZ3UWl4RFFVRlFPMEZCUTBRN08wRkJRMFFzVjBGQlR6RkNMRWxCUVZBN1FVRkRSQ3hIT3p0VFFVVkVNa0lzVlN4SFFVRkJMRzlDUVVGWmNrUXNTVUZCV2l4RlFVRnJRanRCUVVOb1FpeFJRVUZKTEV0QlFVdFFMRTlCUVV3c1EwRkJZVEpDTEVsQlFXcENMRVZCUVhWQ08wRkJRM0pDTEdGQlFVOHNTMEZCU3pOQ0xFOUJRVXdzUTBGQllUSkNMRWxCUVhCQ08wRkJRMFE3TzBGQlEwUXNWMEZCVHl4TFFVRkxReXhSUVVGTUxFTkJRV055UWl4SlFVRkpMRU5CUVVORExFMUJRVXdzUTBGQldVTXNTMEZCV2l4RFFVRnJRbXRDTEVsQlFXaERMRU5CUVZBN1FVRkRSQ3hIT3p0VFFVVkVORUlzWXl4SFFVRkJMREJDUVVGclFqdEJRVUZCT3p0QlFVTm9RaXhUUVVGTGVrSXNSMEZCVEN4SFFVRlhMRVZCUVZnN1FVRkRRU3hUUVVGTE4wSXNSMEZCVEN4SFFVRlhMRWxCUVVsdFF5eHRRa0ZCVVhsQ0xHdENRVUZhTEVOQlFTdENPMEZCUVVVMVFpeE5RVUZCUVN4SlFVRkpMRVZCUVVVc1MwRkJTMnRDTEZWQlFVdzdRVUZCVWl4TFFVRXZRaXhEUVVGWU8wRkJSVUVzVVVGQlNWY3NTVUZCU1N4SFFVRkhMRU5CUVZnN1FVRkRRU3hSUVVGSlF5eE5RVUZOTEVkQlFVY3NRMEZCWWp0QlFVVkJMRkZCUVVsRExFdEJRVW9zUlVGQlYwTXNTVUZCV0R0QlFVTkJMRk5CUVV0d1JTeFRRVUZNTEVOQlFXVXNTMEZCUzBNc1NVRkJjRUlzUlVGQk1FSXNWVUZCUXpSRExFZEJRVVFzUlVGQlRXNURMRWxCUVU0c1JVRkJXV1VzU1VGQldpeEZRVUZ4UWp0QlFVTTNReXhOUVVGQkxFMUJRVWtzUTBGQlExRXNSMEZCVEN4SlFVRlpXU3hIUVVGYU96dEJRVVZCTEZWQlFVbHVReXhKUVVGSkxFbEJRVWxsTEVsQlFVa3NTMEZCU3l4TFFVRnlRaXhGUVVFMFFqdEJRVU14UWl4WlFVRkpaaXhKUVVGSkxFTkJRVU5ETEUxQlFVd3NTVUZCWlVRc1NVRkJTU3hEUVVGRFF5eE5RVUZNTEVOQlFWa3dSQ3hMUVVFdlFpeEZRVUZ6UXp0QlFVTndReXhWUVVGQkxFMUJRVWtzUTBGQlEycEZMRWRCUVV3c1EwRkJVMnRGTEZWQlFWUXNRMEZCYjBJN1FVRkRiRUl6UkN4WlFVRkJRU3hOUVVGTkxFVkJRVVVzVFVGQlNTeERRVUZEYjBRc1ZVRkJUQ3hEUVVGblFuSkVMRWxCUVdoQ0xFTkJSRlU3UVVGRmJFSTJSQ3haUVVGQlFTeFRRVUZUTEVWQlFVVTdRVUZCUlU0c1kwRkJRVUVzU1VGQlNTeEZRVUZLUVN4SlFVRkdPMEZCUVZGRExHTkJRVUZCTEUxQlFVMHNSVUZCUlVFc1RVRkJUU3hIUVVGSE8wRkJRWHBDTEdGQlJrODdRVUZIYkVKTkxGbEJRVUZCTEZGQlFWRXNSVUZCUlR0QlFVTlNVQ3hqUVVGQlFTeEpRVUZKTEVWQlFVVjJSQ3hKUVVGSkxFTkJRVU5ETEUxQlFVd3NRMEZCV1RCRUxFdEJRVm9zUTBGQmEwSktMRWxCUkdoQ08wRkJSVkpETEdOQlFVRkJMRTFCUVUwc1JVRkJSWGhFTEVsQlFVa3NRMEZCUTBNc1RVRkJUQ3hEUVVGWk1FUXNTMEZCV2l4RFFVRnJRa2dzVFVGQmJFSXNSMEZCTWtJN1FVRkdNMEk3UVVGSVVTeFhRVUZ3UWp0QlFWRkVMRk5CVkVRc1RVRlRUenRCUVVOTUxGVkJRVUVzVFVGQlNTeERRVUZET1VRc1IwRkJUQ3hEUVVGVGEwVXNWVUZCVkN4RFFVRnZRanRCUVVOc1FqTkVMRmxCUVVGQkxFMUJRVTBzUlVGQlJTeGhRVVJWTzBGQlJXeENOa1FzV1VGQlFVRXNVVUZCVVN4RlFVRkZPMEZCUVVWUUxHTkJRVUZCTEVsQlFVa3NSVUZCUlN4RFFVRlNPMEZCUVZkRExHTkJRVUZCTEUxQlFVMHNSVUZCUlR0QlFVRnVRaXhoUVVaUk8wRkJSMnhDU3l4WlFVRkJRU3hUUVVGVExFVkJRVVU3UVVGQlJVNHNZMEZCUVVFc1NVRkJTU3hGUVVGS1FTeEpRVUZHTzBGQlFWRkRMR05CUVVGQkxFMUJRVTBzUlVGQlJVRXNUVUZCVFN4SFFVRkhPMEZCUVhwQ08wRkJTRThzVjBGQmNFSTdRVUZMUkR0QlFVTkdPenRCUVVWRVF5eE5RVUZCUVN4TFFVRkxMRWRCUVVkMFFpeEhRVUZITEVOQlFVTTBRaXhMUVVGS0xFTkJRVlVzUzBGQlZpeERRVUZTT3p0QlFVTkJMRlZCUVVsT0xFdEJRVW9zUlVGQlZ6dEJRVU5VUml4UlFVRkJRU3hKUVVGSkxFbEJRVWxGTEV0QlFVc3NRMEZCUXpWRUxFMUJRV1E3UVVGRFFUWkVMRkZCUVVGQkxFbEJRVWtzUjBGQlIzWkNMRWRCUVVjc1EwRkJRelpDTEZkQlFVb3NRMEZCWjBJc1NVRkJhRUlzUTBGQlVEdEJRVU5CVWl4UlFVRkJRU3hOUVVGTkxFZEJRVWR5UWl4SFFVRkhMRU5CUVVOMFF5eE5RVUZLTEVkQlFXRTJSQ3hKUVVGMFFqdEJRVU5FTEU5QlNrUXNUVUZKVHp0QlFVTk1SaXhSUVVGQlFTeE5RVUZOTEVsQlFVbHlRaXhIUVVGSExFTkJRVU4wUXl4TlFVRmtPMEZCUTBRN08wRkJSVVFzVlVGQlNVY3NTVUZCU1N4SlFVRkpaU3hKUVVGSkxFdEJRVXNzVDBGQmNrSXNSVUZCT0VJN1FVRkROVUlzV1VGQlNXdEVMRU5CUVVNc1IwRkJSMnBGTEVsQlFVa3NRMEZCUTJ0RkxFMUJRVXdzU1VGQlpUdEJRVUZGUXl4VlFVRkJRU3hKUVVGSkxFVkJRVVU3UVVGQlVpeFRRVUYyUWpzN1FVRkRRU3haUVVGSmJrVXNTVUZCU1N4RFFVRkRaU3hKUVVGTUxFdEJRV01zVFVGQlpDeEpRVUYzUW1Zc1NVRkJTU3hMUVVGTGFVVXNRMEZCUXl4RFFVRkRVQ3hKUVVGdVF5eEpRVUV5UTA4c1EwRkJReXhEUVVGRFJTeEpRVUZHTEVOQlFVOURMRk5CUVhSRUxFVkJRV2xGTzBGQlF5OUVMR05CUVVsd1JTeEpRVUZKTEVOQlFVTkRMRTFCUVV3c1NVRkJaVVFzU1VGQlNTeERRVUZEUXl4TlFVRk1MRU5CUVZsdlJTeEhRVUV2UWl4RlFVRnZRenRCUVVOc1F5eFpRVUZCTEUxQlFVa3NRMEZCUXpORkxFZEJRVXdzUTBGQlUydEZMRlZCUVZRc1EwRkJiMEk3UVVGRGJFSXpSQ3hqUVVGQlFTeE5RVUZOTEVWQlFVVXNUVUZCU1N4RFFVRkRiMFFzVlVGQlRDeERRVUZuUW5KRUxFbEJRV2hDTEVOQlJGVTdRVUZGYkVJMlJDeGpRVUZCUVN4VFFVRlRMRVZCUVVVN1FVRkJSVTRzWjBKQlFVRkJMRWxCUVVrc1JVRkJTa0VzU1VGQlJqdEJRVUZSUXl4blFrRkJRVUVzVFVGQlRTeEZRVUZGUVN4TlFVRk5MRWRCUVVjN1FVRkJla0lzWlVGR1R6dEJRVWRzUWswc1kwRkJRVUVzVVVGQlVTeEZRVUZGTzBGQlExSlFMR2RDUVVGQlFTeEpRVUZKTEVWQlFVVjJSQ3hKUVVGSkxFTkJRVU5ETEUxQlFVd3NRMEZCV1c5RkxFZEJRVm9zUTBGQlowSmtMRWxCUkdRN1FVRkZVa01zWjBKQlFVRkJMRTFCUVUwc1JVRkJSWGhFTEVsQlFVa3NRMEZCUTBNc1RVRkJUQ3hEUVVGWmIwVXNSMEZCV2l4RFFVRm5RbUlzVFVGQmFFSXNSMEZCZVVJN1FVRkdla0k3UVVGSVVTeGhRVUZ3UWp0QlFWRkVMRmRCVkVRc1RVRlRUenRCUVVOTUxGbEJRVUVzVFVGQlNTeERRVUZET1VRc1IwRkJUQ3hEUVVGVGEwVXNWVUZCVkN4RFFVRnZRanRCUVVOc1FqTkVMR05CUVVGQkxFMUJRVTBzUlVGQlJTeGhRVVJWTzBGQlJXeENOa1FzWTBGQlFVRXNVVUZCVVN4RlFVRkZPMEZCUVVWUUxHZENRVUZCUVN4SlFVRkpMRVZCUVVVc1EwRkJVanRCUVVGWFF5eG5Ra0ZCUVVFc1RVRkJUU3hGUVVGRk8wRkJRVzVDTEdWQlJsRTdRVUZIYkVKTExHTkJRVUZCTEZOQlFWTXNSVUZCUlR0QlFVRkZUaXhuUWtGQlFVRXNTVUZCU1N4RlFVRktRU3hKUVVGR08wRkJRVkZETEdkQ1FVRkJRU3hOUVVGTkxFVkJRVVZCTEUxQlFVMHNSMEZCUnp0QlFVRjZRanRCUVVoUExHRkJRWEJDTzBGQlMwUTdRVUZEUmp0QlFVTkdPMEZCUTBZc1MwRndSRVE3UVVGeFJFUXNSenM3VTBGRlJHTXNVU3hIUVVGQkxHOUNRVUZaTzBGQlExWXNVMEZCUzNwRUxHVkJRVXc3TzBGQlJVRXNVVUZCU1N4TFFVRkxiRUlzUzBGQlRDeEZRVUZLTEVWQlFXdENPMEZCUTJoQ0xHRkJRVThzUzBGQlMyOUVMRmRCUVV3c1JVRkJVRHRCUVVORU96dEJRVVZFTEZGQlFVbDNRaXhOUVVGTkxFZEJRVWNzUlVGQllqdEJRVU5CTEZOQlFVdHFSaXhUUVVGTUxFTkJRV1VzUzBGQlMwTXNTVUZCY0VJc1JVRkJNRUlzVlVGQlFXdENMRU5CUVVNc1JVRkJTVHRCUVVNM1FqaEVMRTFCUVVGQkxFMUJRVTBzU1VGQlNUbEVMRU5CUVZZN1FVRkRSQ3hMUVVaRU8wRkJSMEVzVjBGQlR5eERRVUZET0VRc1RVRkJSQ3hEUVVGUU8wRkJRMFFzUnpzN096czdaVUZIV1d4R0xGa2lMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUpwYlhCdmNuUWdiVzk2YVd4c1lTQm1jbTl0SUNkemIzVnlZMlV0YldGd0oxeHVhVzF3YjNKMElIQmhkR2dnWm5KdmJTQW5jR0YwYUNkY2JseHVZMnhoYzNNZ1RXRndSMlZ1WlhKaGRHOXlJSHRjYmlBZ1kyOXVjM1J5ZFdOMGIzSWdLSE4wY21sdVoybG1lU3dnY205dmRDd2diM0IwY3lrZ2UxeHVJQ0FnSUhSb2FYTXVjM1J5YVc1bmFXWjVJRDBnYzNSeWFXNW5hV1o1WEc0Z0lDQWdkR2hwY3k1dFlYQlBjSFJ6SUQwZ2IzQjBjeTV0WVhBZ2ZId2dleUI5WEc0Z0lDQWdkR2hwY3k1eWIyOTBJRDBnY205dmRGeHVJQ0FnSUhSb2FYTXViM0IwY3lBOUlHOXdkSE5jYmlBZ2ZWeHVYRzRnSUdselRXRndJQ2dwSUh0Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhSb2FYTXViM0IwY3k1dFlYQWdJVDA5SUNkMWJtUmxabWx1WldRbktTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z0lTRjBhR2x6TG05d2RITXViV0Z3WEc0Z0lDQWdmVnh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbkJ5WlhacGIzVnpLQ2t1YkdWdVozUm9JRDRnTUZ4dUlDQjlYRzVjYmlBZ2NISmxkbWx2ZFhNZ0tDa2dlMXh1SUNBZ0lHbG1JQ2doZEdocGN5NXdjbVYyYVc5MWMwMWhjSE1wSUh0Y2JpQWdJQ0FnSUhSb2FYTXVjSEpsZG1sdmRYTk5ZWEJ6SUQwZ1cxMWNiaUFnSUNBZ0lIUm9hWE11Y205dmRDNTNZV3hyS0c1dlpHVWdQVDRnZTF4dUlDQWdJQ0FnSUNCcFppQW9ibTlrWlM1emIzVnlZMlVnSmlZZ2JtOWtaUzV6YjNWeVkyVXVhVzV3ZFhRdWJXRndLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJRzFoY0NBOUlHNXZaR1V1YzI5MWNtTmxMbWx1Y0hWMExtMWhjRnh1SUNBZ0lDQWdJQ0FnSUdsbUlDaDBhR2x6TG5CeVpYWnBiM1Z6VFdGd2N5NXBibVJsZUU5bUtHMWhjQ2tnUFQwOUlDMHhLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5CeVpYWnBiM1Z6VFdGd2N5NXdkWE5vS0cxaGNDbGNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwcFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnY21WMGRYSnVJSFJvYVhNdWNISmxkbWx2ZFhOTllYQnpYRzRnSUgxY2JseHVJQ0JwYzBsdWJHbHVaU0FvS1NCN1hHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCMGFHbHpMbTFoY0U5d2RITXVhVzVzYVc1bElDRTlQU0FuZFc1a1pXWnBibVZrSnlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXViV0Z3VDNCMGN5NXBibXhwYm1WY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JzWlhRZ1lXNXViM1JoZEdsdmJpQTlJSFJvYVhNdWJXRndUM0IwY3k1aGJtNXZkR0YwYVc5dVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCaGJtNXZkR0YwYVc5dUlDRTlQU0FuZFc1a1pXWnBibVZrSnlBbUppQmhibTV2ZEdGMGFXOXVJQ0U5UFNCMGNuVmxLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJWY2JpQWdJQ0I5WEc1Y2JpQWdJQ0JwWmlBb2RHaHBjeTV3Y21WMmFXOTFjeWdwTG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNISmxkbWx2ZFhNb0tTNXpiMjFsS0drZ1BUNGdhUzVwYm14cGJtVXBYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwY25WbFhHNGdJSDFjYmx4dUlDQnBjMU52ZFhKalpYTkRiMjUwWlc1MElDZ3BJSHRjYmlBZ0lDQnBaaUFvZEhsd1pXOW1JSFJvYVhNdWJXRndUM0IwY3k1emIzVnlZMlZ6UTI5dWRHVnVkQ0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG0xaGNFOXdkSE11YzI5MWNtTmxjME52Ym5SbGJuUmNiaUFnSUNCOVhHNGdJQ0FnYVdZZ0tIUm9hWE11Y0hKbGRtbHZkWE1vS1M1c1pXNW5kR2dwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxuQnlaWFpwYjNWektDa3VjMjl0WlNocElEMCtJR2t1ZDJsMGFFTnZiblJsYm5Rb0tTbGNiaUFnSUNCOVhHNGdJQ0FnY21WMGRYSnVJSFJ5ZFdWY2JpQWdmVnh1WEc0Z0lHTnNaV0Z5UVc1dWIzUmhkR2x2YmlBb0tTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWJXRndUM0IwY3k1aGJtNXZkR0YwYVc5dUlEMDlQU0JtWVd4elpTa2djbVYwZFhKdVhHNWNiaUFnSUNCc1pYUWdibTlrWlZ4dUlDQWdJR1p2Y2lBb2JHVjBJR2tnUFNCMGFHbHpMbkp2YjNRdWJtOWtaWE11YkdWdVozUm9JQzBnTVRzZ2FTQStQU0F3T3lCcExTMHBJSHRjYmlBZ0lDQWdJRzV2WkdVZ1BTQjBhR2x6TG5KdmIzUXVibTlrWlhOYmFWMWNiaUFnSUNBZ0lHbG1JQ2h1YjJSbExuUjVjR1VnSVQwOUlDZGpiMjF0Wlc1MEp5a2dZMjl1ZEdsdWRXVmNiaUFnSUNBZ0lHbG1JQ2h1YjJSbExuUmxlSFF1YVc1a1pYaFBaaWduSXlCemIzVnlZMlZOWVhCd2FXNW5WVkpNUFNjcElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lIUm9hWE11Y205dmRDNXlaVzF2ZG1WRGFHbHNaQ2hwS1Z4dUlDQWdJQ0FnZlZ4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhObGRGTnZkWEpqWlhORGIyNTBaVzUwSUNncElIdGNiaUFnSUNCc1pYUWdZV3h5WldGa2VTQTlJSHNnZlZ4dUlDQWdJSFJvYVhNdWNtOXZkQzUzWVd4cktHNXZaR1VnUFQ0Z2UxeHVJQ0FnSUNBZ2FXWWdLRzV2WkdVdWMyOTFjbU5sS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0JtY205dElEMGdibTlrWlM1emIzVnlZMlV1YVc1d2RYUXVabkp2YlZ4dUlDQWdJQ0FnSUNCcFppQW9abkp2YlNBbUppQWhZV3h5WldGa2VWdG1jbTl0WFNrZ2UxeHVJQ0FnSUNBZ0lDQWdJR0ZzY21WaFpIbGJabkp2YlYwZ1BTQjBjblZsWEc0Z0lDQWdJQ0FnSUNBZ2JHVjBJSEpsYkdGMGFYWmxJRDBnZEdocGN5NXlaV3hoZEdsMlpTaG1jbTl0S1Z4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YldGd0xuTmxkRk52ZFhKalpVTnZiblJsYm5Rb2NtVnNZWFJwZG1Vc0lHNXZaR1V1YzI5MWNtTmxMbWx1Y0hWMExtTnpjeWxjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dUlDQWdJSDBwWEc0Z0lIMWNibHh1SUNCaGNIQnNlVkJ5WlhaTllYQnpJQ2dwSUh0Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0J3Y21WMklHOW1JSFJvYVhNdWNISmxkbWx2ZFhNb0tTa2dlMXh1SUNBZ0lDQWdiR1YwSUdaeWIyMGdQU0IwYUdsekxuSmxiR0YwYVhabEtIQnlaWFl1Wm1sc1pTbGNiaUFnSUNBZ0lHeGxkQ0J5YjI5MElEMGdjSEpsZGk1eWIyOTBJSHg4SUhCaGRHZ3VaR2x5Ym1GdFpTaHdjbVYyTG1acGJHVXBYRzRnSUNBZ0lDQnNaWFFnYldGd1hHNWNiaUFnSUNBZ0lHbG1JQ2gwYUdsekxtMWhjRTl3ZEhNdWMyOTFjbU5sYzBOdmJuUmxiblFnUFQwOUlHWmhiSE5sS1NCN1hHNGdJQ0FnSUNBZ0lHMWhjQ0E5SUc1bGR5QnRiM3BwYkd4aExsTnZkWEpqWlUxaGNFTnZibk4xYldWeUtIQnlaWFl1ZEdWNGRDbGNiaUFnSUNBZ0lDQWdhV1lnS0cxaGNDNXpiM1Z5WTJWelEyOXVkR1Z1ZENrZ2UxeHVJQ0FnSUNBZ0lDQWdJRzFoY0M1emIzVnlZMlZ6UTI5dWRHVnVkQ0E5SUcxaGNDNXpiM1Z5WTJWelEyOXVkR1Z1ZEM1dFlYQW9LQ2tnUFQ0Z2JuVnNiQ2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnYldGd0lEMGdjSEpsZGk1amIyNXpkVzFsY2lncFhHNGdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lIUm9hWE11YldGd0xtRndjR3g1VTI5MWNtTmxUV0Z3S0cxaGNDd2dabkp2YlN3Z2RHaHBjeTV5Wld4aGRHbDJaU2h5YjI5MEtTbGNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnBjMEZ1Ym05MFlYUnBiMjRnS0NrZ2UxeHVJQ0FnSUdsbUlDaDBhR2x6TG1selNXNXNhVzVsS0NrcElIdGNiaUFnSUNBZ0lISmxkSFZ5YmlCMGNuVmxYRzRnSUNBZ2ZWeHVJQ0FnSUdsbUlDaDBlWEJsYjJZZ2RHaHBjeTV0WVhCUGNIUnpMbUZ1Ym05MFlYUnBiMjRnSVQwOUlDZDFibVJsWm1sdVpXUW5LU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1dFlYQlBjSFJ6TG1GdWJtOTBZWFJwYjI1Y2JpQWdJQ0I5WEc0Z0lDQWdhV1lnS0hSb2FYTXVjSEpsZG1sdmRYTW9LUzVzWlc1bmRHZ3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5CeVpYWnBiM1Z6S0NrdWMyOXRaU2hwSUQwK0lHa3VZVzV1YjNSaGRHbHZiaWxjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhSeWRXVmNiaUFnZlZ4dVhHNGdJSFJ2UW1GelpUWTBJQ2h6ZEhJcElIdGNiaUFnSUNCcFppQW9RblZtWm1WeUtTQjdYRzRnSUNBZ0lDQnlaWFIxY200Z1FuVm1abVZ5TG1aeWIyMG9jM1J5S1M1MGIxTjBjbWx1WnlnblltRnpaVFkwSnlsY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlIZHBibVJ2ZHk1aWRHOWhLSFZ1WlhOallYQmxLR1Z1WTI5a1pWVlNTVU52YlhCdmJtVnVkQ2h6ZEhJcEtTbGNiaUFnZlZ4dVhHNGdJR0ZrWkVGdWJtOTBZWFJwYjI0Z0tDa2dlMXh1SUNBZ0lHeGxkQ0JqYjI1MFpXNTBYRzVjYmlBZ0lDQnBaaUFvZEdocGN5NXBjMGx1YkdsdVpTZ3BLU0I3WEc0Z0lDQWdJQ0JqYjI1MFpXNTBJRDBnSjJSaGRHRTZZWEJ3YkdsallYUnBiMjR2YW5OdmJqdGlZWE5sTmpRc0p5QXJYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MGIwSmhjMlUyTkNoMGFHbHpMbTFoY0M1MGIxTjBjbWx1WnlncEtWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUhSb2FYTXViV0Z3VDNCMGN5NWhibTV2ZEdGMGFXOXVJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ1kyOXVkR1Z1ZENBOUlIUm9hWE11YldGd1QzQjBjeTVoYm01dmRHRjBhVzl1WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHTnZiblJsYm5RZ1BTQjBhR2x6TG05MWRIQjFkRVpwYkdVb0tTQXJJQ2N1YldGd0oxeHVJQ0FnSUgxY2JseHVJQ0FnSUd4bGRDQmxiMndnUFNBblhGeHVKMXh1SUNBZ0lHbG1JQ2gwYUdsekxtTnpjeTVwYm1SbGVFOW1LQ2RjWEhKY1hHNG5LU0FoUFQwZ0xURXBJR1Z2YkNBOUlDZGNYSEpjWEc0blhHNWNiaUFnSUNCMGFHbHpMbU56Y3lBclBTQmxiMndnS3lBbkx5b2pJSE52ZFhKalpVMWhjSEJwYm1kVlVrdzlKeUFySUdOdmJuUmxiblFnS3lBbklDb3ZKMXh1SUNCOVhHNWNiaUFnYjNWMGNIVjBSbWxzWlNBb0tTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdWIzQjBjeTUwYnlrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjbVZzWVhScGRtVW9kR2hwY3k1dmNIUnpMblJ2S1Z4dUlDQWdJSDFjYmlBZ0lDQnBaaUFvZEdocGN5NXZjSFJ6TG1aeWIyMHBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG5KbGJHRjBhWFpsS0hSb2FYTXViM0IwY3k1bWNtOXRLVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnSjNSdkxtTnpjeWRjYmlBZ2ZWeHVYRzRnSUdkbGJtVnlZWFJsVFdGd0lDZ3BJSHRjYmlBZ0lDQjBhR2x6TG1kbGJtVnlZWFJsVTNSeWFXNW5LQ2xjYmlBZ0lDQnBaaUFvZEdocGN5NXBjMU52ZFhKalpYTkRiMjUwWlc1MEtDa3BJSFJvYVhNdWMyVjBVMjkxY21ObGMwTnZiblJsYm5Rb0tWeHVJQ0FnSUdsbUlDaDBhR2x6TG5CeVpYWnBiM1Z6S0NrdWJHVnVaM1JvSUQ0Z01Da2dkR2hwY3k1aGNIQnNlVkJ5WlhaTllYQnpLQ2xjYmlBZ0lDQnBaaUFvZEdocGN5NXBjMEZ1Ym05MFlYUnBiMjRvS1NrZ2RHaHBjeTVoWkdSQmJtNXZkR0YwYVc5dUtDbGNibHh1SUNBZ0lHbG1JQ2gwYUdsekxtbHpTVzVzYVc1bEtDa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmJkR2hwY3k1amMzTmRYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJiZEdocGN5NWpjM01zSUhSb2FYTXViV0Z3WFZ4dUlDQjlYRzVjYmlBZ2NtVnNZWFJwZG1VZ0tHWnBiR1VwSUh0Y2JpQWdJQ0JwWmlBb1ptbHNaUzVwYm1SbGVFOW1LQ2M4SnlrZ1BUMDlJREFwSUhKbGRIVnliaUJtYVd4bFhHNGdJQ0FnYVdZZ0tDOWVYRngzS3pwY1hDOWNYQzh2TG5SbGMzUW9abWxzWlNrcElISmxkSFZ5YmlCbWFXeGxYRzVjYmlBZ0lDQnNaWFFnWm5KdmJTQTlJSFJvYVhNdWIzQjBjeTUwYnlBL0lIQmhkR2d1WkdseWJtRnRaU2gwYUdsekxtOXdkSE11ZEc4cElEb2dKeTRuWEc1Y2JpQWdJQ0JwWmlBb2RIbHdaVzltSUhSb2FYTXViV0Z3VDNCMGN5NWhibTV2ZEdGMGFXOXVJRDA5UFNBbmMzUnlhVzVuSnlrZ2UxeHVJQ0FnSUNBZ1puSnZiU0E5SUhCaGRHZ3VaR2x5Ym1GdFpTaHdZWFJvTG5KbGMyOXNkbVVvWm5KdmJTd2dkR2hwY3k1dFlYQlBjSFJ6TG1GdWJtOTBZWFJwYjI0cEtWeHVJQ0FnSUgxY2JseHVJQ0FnSUdacGJHVWdQU0J3WVhSb0xuSmxiR0YwYVhabEtHWnliMjBzSUdacGJHVXBYRzRnSUNBZ2FXWWdLSEJoZEdndWMyVndJRDA5UFNBblhGeGNYQ2NwSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtYVd4bExuSmxjR3hoWTJVb0wxeGNYRnd2Wnl3Z0p5OG5LVnh1SUNBZ0lIMWNiaUFnSUNCeVpYUjFjbTRnWm1sc1pWeHVJQ0I5WEc1Y2JpQWdjMjkxY21ObFVHRjBhQ0FvYm05a1pTa2dlMXh1SUNBZ0lHbG1JQ2gwYUdsekxtMWhjRTl3ZEhNdVpuSnZiU2tnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWJXRndUM0IwY3k1bWNtOXRYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUIwYUdsekxuSmxiR0YwYVhabEtHNXZaR1V1YzI5MWNtTmxMbWx1Y0hWMExtWnliMjBwWEc0Z0lIMWNibHh1SUNCblpXNWxjbUYwWlZOMGNtbHVaeUFvS1NCN1hHNGdJQ0FnZEdocGN5NWpjM01nUFNBbkoxeHVJQ0FnSUhSb2FYTXViV0Z3SUQwZ2JtVjNJRzF2ZW1sc2JHRXVVMjkxY21ObFRXRndSMlZ1WlhKaGRHOXlLSHNnWm1sc1pUb2dkR2hwY3k1dmRYUndkWFJHYVd4bEtDa2dmU2xjYmx4dUlDQWdJR3hsZENCc2FXNWxJRDBnTVZ4dUlDQWdJR3hsZENCamIyeDFiVzRnUFNBeFhHNWNiaUFnSUNCc1pYUWdiR2x1WlhNc0lHeGhjM1JjYmlBZ0lDQjBhR2x6TG5OMGNtbHVaMmxtZVNoMGFHbHpMbkp2YjNRc0lDaHpkSElzSUc1dlpHVXNJSFI1Y0dVcElEMCtJSHRjYmlBZ0lDQWdJSFJvYVhNdVkzTnpJQ3M5SUhOMGNseHVYRzRnSUNBZ0lDQnBaaUFvYm05a1pTQW1KaUIwZVhCbElDRTlQU0FuWlc1a0p5a2dlMXh1SUNBZ0lDQWdJQ0JwWmlBb2JtOWtaUzV6YjNWeVkyVWdKaVlnYm05a1pTNXpiM1Z5WTJVdWMzUmhjblFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG0xaGNDNWhaR1JOWVhCd2FXNW5LSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lITnZkWEpqWlRvZ2RHaHBjeTV6YjNWeVkyVlFZWFJvS0c1dlpHVXBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ1oyVnVaWEpoZEdWa09pQjdJR3hwYm1Vc0lHTnZiSFZ0YmpvZ1kyOXNkVzF1SUMwZ01TQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2IzSnBaMmx1WVd3NklIdGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2JHbHVaVG9nYm05a1pTNXpiM1Z5WTJVdWMzUmhjblF1YkdsdVpTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1kyOXNkVzF1T2lCdWIyUmxMbk52ZFhKalpTNXpkR0Z5ZEM1amIyeDFiVzRnTFNBeFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZTbGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtMWhjQzVoWkdSTllYQndhVzVuS0h0Y2JpQWdJQ0FnSUNBZ0lDQWdJSE52ZFhKalpUb2dKenh1YnlCemIzVnlZMlUrSnl4Y2JpQWdJQ0FnSUNBZ0lDQWdJRzl5YVdkcGJtRnNPaUI3SUd4cGJtVTZJREVzSUdOdmJIVnRiam9nTUNCOUxGeHVJQ0FnSUNBZ0lDQWdJQ0FnWjJWdVpYSmhkR1ZrT2lCN0lHeHBibVVzSUdOdmJIVnRiam9nWTI5c2RXMXVJQzBnTVNCOVhHNGdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCc2FXNWxjeUE5SUhOMGNpNXRZWFJqYUNndlhGeHVMMmNwWEc0Z0lDQWdJQ0JwWmlBb2JHbHVaWE1wSUh0Y2JpQWdJQ0FnSUNBZ2JHbHVaU0FyUFNCc2FXNWxjeTVzWlc1bmRHaGNiaUFnSUNBZ0lDQWdiR0Z6ZENBOUlITjBjaTVzWVhOMFNXNWtaWGhQWmlnblhGeHVKeWxjYmlBZ0lDQWdJQ0FnWTI5c2RXMXVJRDBnYzNSeUxteGxibWQwYUNBdElHeGhjM1JjYmlBZ0lDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQWdJR052YkhWdGJpQXJQU0J6ZEhJdWJHVnVaM1JvWEc0Z0lDQWdJQ0I5WEc1Y2JpQWdJQ0FnSUdsbUlDaHViMlJsSUNZbUlIUjVjR1VnSVQwOUlDZHpkR0Z5ZENjcElIdGNiaUFnSUNBZ0lDQWdiR1YwSUhBZ1BTQnViMlJsTG5CaGNtVnVkQ0I4ZkNCN0lISmhkM002SUhzZ2ZTQjlYRzRnSUNBZ0lDQWdJR2xtSUNodWIyUmxMblI1Y0dVZ0lUMDlJQ2RrWldOc0p5QjhmQ0J1YjJSbElDRTlQU0J3TG14aGMzUWdmSHdnY0M1eVlYZHpMbk5sYldsamIyeHZiaWtnZTF4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h1YjJSbExuTnZkWEpqWlNBbUppQnViMlJsTG5OdmRYSmpaUzVsYm1RcElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXViV0Z3TG1Ga1pFMWhjSEJwYm1jb2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCemIzVnlZMlU2SUhSb2FYTXVjMjkxY21ObFVHRjBhQ2h1YjJSbEtTeGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ1oyVnVaWEpoZEdWa09pQjdJR3hwYm1Vc0lHTnZiSFZ0YmpvZ1kyOXNkVzF1SUMwZ01pQjlMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnZjbWxuYVc1aGJEb2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR3hwYm1VNklHNXZaR1V1YzI5MWNtTmxMbVZ1WkM1c2FXNWxMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR052YkhWdGJqb2dibTlrWlM1emIzVnlZMlV1Wlc1a0xtTnZiSFZ0YmlBdElERmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNsY2JpQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NXRZWEF1WVdSa1RXRndjR2x1WnloN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUhOdmRYSmpaVG9nSnp4dWJ5QnpiM1Z5WTJVK0p5eGNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ2IzSnBaMmx1WVd3NklIc2diR2x1WlRvZ01Td2dZMjlzZFcxdU9pQXdJSDBzWEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJR2RsYm1WeVlYUmxaRG9nZXlCc2FXNWxMQ0JqYjJ4MWJXNDZJR052YkhWdGJpQXRJREVnZlZ4dUlDQWdJQ0FnSUNBZ0lDQWdmU2xjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lIMWNiaUFnSUNCOUtWeHVJQ0I5WEc1Y2JpQWdaMlZ1WlhKaGRHVWdLQ2tnZTF4dUlDQWdJSFJvYVhNdVkyeGxZWEpCYm01dmRHRjBhVzl1S0NsY2JseHVJQ0FnSUdsbUlDaDBhR2x6TG1selRXRndLQ2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxtZGxibVZ5WVhSbFRXRndLQ2xjYmlBZ0lDQjlYRzVjYmlBZ0lDQnNaWFFnY21WemRXeDBJRDBnSnlkY2JpQWdJQ0IwYUdsekxuTjBjbWx1WjJsbWVTaDBhR2x6TG5KdmIzUXNJR2tnUFQ0Z2UxeHVJQ0FnSUNBZ2NtVnpkV3gwSUNzOUlHbGNiaUFnSUNCOUtWeHVJQ0FnSUhKbGRIVnliaUJiY21WemRXeDBYVnh1SUNCOVhHNTlYRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRTFoY0VkbGJtVnlZWFJ2Y2x4dUlsMHNJbVpwYkdVaU9pSnRZWEF0WjJWdVpYSmhkRzl5TG1wekluMD1cbiIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayhcbiAgICAgIHVpbnQ4LCBpLCAoaSArIG1heENodW5rTGVuZ3RoKSA+IGxlbjIgPyBsZW4yIDogKGkgKyBtYXhDaHVua0xlbmd0aClcbiAgICApKVxuICB9XG5cbiAgLy8gcGFkIHRoZSBlbmQgd2l0aCB6ZXJvcywgYnV0IG1ha2Ugc3VyZSB0byBub3QgZm9yZ2V0IHRoZSBleHRyYSBieXRlc1xuICBpZiAoZXh0cmFCeXRlcyA9PT0gMSkge1xuICAgIHRtcCA9IHVpbnQ4W2xlbiAtIDFdXG4gICAgcGFydHMucHVzaChcbiAgICAgIGxvb2t1cFt0bXAgPj4gMl0gK1xuICAgICAgbG9va3VwWyh0bXAgPDwgNCkgJiAweDNGXSArXG4gICAgICAnPT0nXG4gICAgKVxuICB9IGVsc2UgaWYgKGV4dHJhQnl0ZXMgPT09IDIpIHtcbiAgICB0bXAgPSAodWludDhbbGVuIC0gMl0gPDwgOCkgKyB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDEwXSArXG4gICAgICBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl0gK1xuICAgICAgJz0nXG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIHBhcnRzLmpvaW4oJycpXG59XG4iLCJleHBvcnRzLnJlYWQgPSBmdW5jdGlvbiAoYnVmZmVyLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbVxuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgbkJpdHMgPSAtN1xuICB2YXIgaSA9IGlzTEUgPyAobkJ5dGVzIC0gMSkgOiAwXG4gIHZhciBkID0gaXNMRSA/IC0xIDogMVxuICB2YXIgcyA9IGJ1ZmZlcltvZmZzZXQgKyBpXVxuXG4gIGkgKz0gZFxuXG4gIGUgPSBzICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIHMgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IGVMZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgZSA9IChlICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IChtICogMjU2KSArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIGlmIChlID09PSAwKSB7XG4gICAgZSA9IDEgLSBlQmlhc1xuICB9IGVsc2UgaWYgKGUgPT09IGVNYXgpIHtcbiAgICByZXR1cm4gbSA/IE5hTiA6ICgocyA/IC0xIDogMSkgKiBJbmZpbml0eSlcbiAgfSBlbHNlIHtcbiAgICBtID0gbSArIE1hdGgucG93KDIsIG1MZW4pXG4gICAgZSA9IGUgLSBlQmlhc1xuICB9XG4gIHJldHVybiAocyA/IC0xIDogMSkgKiBtICogTWF0aC5wb3coMiwgZSAtIG1MZW4pXG59XG5cbmV4cG9ydHMud3JpdGUgPSBmdW5jdGlvbiAoYnVmZmVyLCB2YWx1ZSwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG0sIGNcbiAgdmFyIGVMZW4gPSAobkJ5dGVzICogOCkgLSBtTGVuIC0gMVxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMVxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDFcbiAgdmFyIHJ0ID0gKG1MZW4gPT09IDIzID8gTWF0aC5wb3coMiwgLTI0KSAtIE1hdGgucG93KDIsIC03NykgOiAwKVxuICB2YXIgaSA9IGlzTEUgPyAwIDogKG5CeXRlcyAtIDEpXG4gIHZhciBkID0gaXNMRSA/IDEgOiAtMVxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCAodmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCkgPyAxIDogMFxuXG4gIHZhbHVlID0gTWF0aC5hYnModmFsdWUpXG5cbiAgaWYgKGlzTmFOKHZhbHVlKSB8fCB2YWx1ZSA9PT0gSW5maW5pdHkpIHtcbiAgICBtID0gaXNOYU4odmFsdWUpID8gMSA6IDBcbiAgICBlID0gZU1heFxuICB9IGVsc2Uge1xuICAgIGUgPSBNYXRoLmZsb29yKE1hdGgubG9nKHZhbHVlKSAvIE1hdGguTE4yKVxuICAgIGlmICh2YWx1ZSAqIChjID0gTWF0aC5wb3coMiwgLWUpKSA8IDEpIHtcbiAgICAgIGUtLVxuICAgICAgYyAqPSAyXG4gICAgfVxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xuICAgICAgdmFsdWUgKz0gcnQgLyBjXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhbHVlICs9IHJ0ICogTWF0aC5wb3coMiwgMSAtIGVCaWFzKVxuICAgIH1cbiAgICBpZiAodmFsdWUgKiBjID49IDIpIHtcbiAgICAgIGUrK1xuICAgICAgYyAvPSAyXG4gICAgfVxuXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XG4gICAgICBtID0gMFxuICAgICAgZSA9IGVNYXhcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICBtID0gKCh2YWx1ZSAqIGMpIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIGludFRvQ2hhck1hcCA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJy5zcGxpdCgnJyk7XG5cbi8qKlxuICogRW5jb2RlIGFuIGludGVnZXIgaW4gdGhlIHJhbmdlIG9mIDAgdG8gNjMgdG8gYSBzaW5nbGUgYmFzZSA2NCBkaWdpdC5cbiAqL1xuZXhwb3J0cy5lbmNvZGUgPSBmdW5jdGlvbiAobnVtYmVyKSB7XG4gIGlmICgwIDw9IG51bWJlciAmJiBudW1iZXIgPCBpbnRUb0NoYXJNYXAubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGludFRvQ2hhck1hcFtudW1iZXJdO1xuICB9XG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXCJNdXN0IGJlIGJldHdlZW4gMCBhbmQgNjM6IFwiICsgbnVtYmVyKTtcbn07XG5cbi8qKlxuICogRGVjb2RlIGEgc2luZ2xlIGJhc2UgNjQgY2hhcmFjdGVyIGNvZGUgZGlnaXQgdG8gYW4gaW50ZWdlci4gUmV0dXJucyAtMSBvblxuICogZmFpbHVyZS5cbiAqL1xuZXhwb3J0cy5kZWNvZGUgPSBmdW5jdGlvbiAoY2hhckNvZGUpIHtcbiAgdmFyIGJpZ0EgPSA2NTsgICAgIC8vICdBJ1xuICB2YXIgYmlnWiA9IDkwOyAgICAgLy8gJ1onXG5cbiAgdmFyIGxpdHRsZUEgPSA5NzsgIC8vICdhJ1xuICB2YXIgbGl0dGxlWiA9IDEyMjsgLy8gJ3onXG5cbiAgdmFyIHplcm8gPSA0ODsgICAgIC8vICcwJ1xuICB2YXIgbmluZSA9IDU3OyAgICAgLy8gJzknXG5cbiAgdmFyIHBsdXMgPSA0MzsgICAgIC8vICcrJ1xuICB2YXIgc2xhc2ggPSA0NzsgICAgLy8gJy8nXG5cbiAgdmFyIGxpdHRsZU9mZnNldCA9IDI2O1xuICB2YXIgbnVtYmVyT2Zmc2V0ID0gNTI7XG5cbiAgLy8gMCAtIDI1OiBBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWlxuICBpZiAoYmlnQSA8PSBjaGFyQ29kZSAmJiBjaGFyQ29kZSA8PSBiaWdaKSB7XG4gICAgcmV0dXJuIChjaGFyQ29kZSAtIGJpZ0EpO1xuICB9XG5cbiAgLy8gMjYgLSA1MTogYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcbiAgaWYgKGxpdHRsZUEgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gbGl0dGxlWikge1xuICAgIHJldHVybiAoY2hhckNvZGUgLSBsaXR0bGVBICsgbGl0dGxlT2Zmc2V0KTtcbiAgfVxuXG4gIC8vIDUyIC0gNjE6IDAxMjM0NTY3ODlcbiAgaWYgKHplcm8gPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gbmluZSkge1xuICAgIHJldHVybiAoY2hhckNvZGUgLSB6ZXJvICsgbnVtYmVyT2Zmc2V0KTtcbiAgfVxuXG4gIC8vIDYyOiArXG4gIGlmIChjaGFyQ29kZSA9PSBwbHVzKSB7XG4gICAgcmV0dXJuIDYyO1xuICB9XG5cbiAgLy8gNjM6IC9cbiAgaWYgKGNoYXJDb2RlID09IHNsYXNoKSB7XG4gICAgcmV0dXJuIDYzO1xuICB9XG5cbiAgLy8gSW52YWxpZCBiYXNlNjQgZGlnaXQuXG4gIHJldHVybiAtMTtcbn07XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTQgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG5cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgbWFwcGluZ0IgaXMgYWZ0ZXIgbWFwcGluZ0Egd2l0aCByZXNwZWN0IHRvIGdlbmVyYXRlZFxuICogcG9zaXRpb24uXG4gKi9cbmZ1bmN0aW9uIGdlbmVyYXRlZFBvc2l0aW9uQWZ0ZXIobWFwcGluZ0EsIG1hcHBpbmdCKSB7XG4gIC8vIE9wdGltaXplZCBmb3IgbW9zdCBjb21tb24gY2FzZVxuICB2YXIgbGluZUEgPSBtYXBwaW5nQS5nZW5lcmF0ZWRMaW5lO1xuICB2YXIgbGluZUIgPSBtYXBwaW5nQi5nZW5lcmF0ZWRMaW5lO1xuICB2YXIgY29sdW1uQSA9IG1hcHBpbmdBLmdlbmVyYXRlZENvbHVtbjtcbiAgdmFyIGNvbHVtbkIgPSBtYXBwaW5nQi5nZW5lcmF0ZWRDb2x1bW47XG4gIHJldHVybiBsaW5lQiA+IGxpbmVBIHx8IGxpbmVCID09IGxpbmVBICYmIGNvbHVtbkIgPj0gY29sdW1uQSB8fFxuICAgICAgICAgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZChtYXBwaW5nQSwgbWFwcGluZ0IpIDw9IDA7XG59XG5cbi8qKlxuICogQSBkYXRhIHN0cnVjdHVyZSB0byBwcm92aWRlIGEgc29ydGVkIHZpZXcgb2YgYWNjdW11bGF0ZWQgbWFwcGluZ3MgaW4gYVxuICogcGVyZm9ybWFuY2UgY29uc2Npb3VzIG1hbm5lci4gSXQgdHJhZGVzIGEgbmVnbGliYWJsZSBvdmVyaGVhZCBpbiBnZW5lcmFsXG4gKiBjYXNlIGZvciBhIGxhcmdlIHNwZWVkdXAgaW4gY2FzZSBvZiBtYXBwaW5ncyBiZWluZyBhZGRlZCBpbiBvcmRlci5cbiAqL1xuZnVuY3Rpb24gTWFwcGluZ0xpc3QoKSB7XG4gIHRoaXMuX2FycmF5ID0gW107XG4gIHRoaXMuX3NvcnRlZCA9IHRydWU7XG4gIC8vIFNlcnZlcyBhcyBpbmZpbXVtXG4gIHRoaXMuX2xhc3QgPSB7Z2VuZXJhdGVkTGluZTogLTEsIGdlbmVyYXRlZENvbHVtbjogMH07XG59XG5cbi8qKlxuICogSXRlcmF0ZSB0aHJvdWdoIGludGVybmFsIGl0ZW1zLiBUaGlzIG1ldGhvZCB0YWtlcyB0aGUgc2FtZSBhcmd1bWVudHMgdGhhdFxuICogYEFycmF5LnByb3RvdHlwZS5mb3JFYWNoYCB0YWtlcy5cbiAqXG4gKiBOT1RFOiBUaGUgb3JkZXIgb2YgdGhlIG1hcHBpbmdzIGlzIE5PVCBndWFyYW50ZWVkLlxuICovXG5NYXBwaW5nTGlzdC5wcm90b3R5cGUudW5zb3J0ZWRGb3JFYWNoID1cbiAgZnVuY3Rpb24gTWFwcGluZ0xpc3RfZm9yRWFjaChhQ2FsbGJhY2ssIGFUaGlzQXJnKSB7XG4gICAgdGhpcy5fYXJyYXkuZm9yRWFjaChhQ2FsbGJhY2ssIGFUaGlzQXJnKTtcbiAgfTtcblxuLyoqXG4gKiBBZGQgdGhlIGdpdmVuIHNvdXJjZSBtYXBwaW5nLlxuICpcbiAqIEBwYXJhbSBPYmplY3QgYU1hcHBpbmdcbiAqL1xuTWFwcGluZ0xpc3QucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uIE1hcHBpbmdMaXN0X2FkZChhTWFwcGluZykge1xuICBpZiAoZ2VuZXJhdGVkUG9zaXRpb25BZnRlcih0aGlzLl9sYXN0LCBhTWFwcGluZykpIHtcbiAgICB0aGlzLl9sYXN0ID0gYU1hcHBpbmc7XG4gICAgdGhpcy5fYXJyYXkucHVzaChhTWFwcGluZyk7XG4gIH0gZWxzZSB7XG4gICAgdGhpcy5fc29ydGVkID0gZmFsc2U7XG4gICAgdGhpcy5fYXJyYXkucHVzaChhTWFwcGluZyk7XG4gIH1cbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZmxhdCwgc29ydGVkIGFycmF5IG9mIG1hcHBpbmdzLiBUaGUgbWFwcGluZ3MgYXJlIHNvcnRlZCBieVxuICogZ2VuZXJhdGVkIHBvc2l0aW9uLlxuICpcbiAqIFdBUk5JTkc6IFRoaXMgbWV0aG9kIHJldHVybnMgaW50ZXJuYWwgZGF0YSB3aXRob3V0IGNvcHlpbmcsIGZvclxuICogcGVyZm9ybWFuY2UuIFRoZSByZXR1cm4gdmFsdWUgbXVzdCBOT1QgYmUgbXV0YXRlZCwgYW5kIHNob3VsZCBiZSB0cmVhdGVkIGFzXG4gKiBhbiBpbW11dGFibGUgYm9ycm93LiBJZiB5b3Ugd2FudCB0byB0YWtlIG93bmVyc2hpcCwgeW91IG11c3QgbWFrZSB5b3VyIG93blxuICogY29weS5cbiAqL1xuTWFwcGluZ0xpc3QucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbiBNYXBwaW5nTGlzdF90b0FycmF5KCkge1xuICBpZiAoIXRoaXMuX3NvcnRlZCkge1xuICAgIHRoaXMuX2FycmF5LnNvcnQodXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNJbmZsYXRlZCk7XG4gICAgdGhpcy5fc29ydGVkID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gdGhpcy5fYXJyYXk7XG59O1xuXG5leHBvcnRzLk1hcHBpbmdMaXN0ID0gTWFwcGluZ0xpc3Q7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciB1dGlsID0gcmVxdWlyZSgnLi91dGlsJyk7XG52YXIgYmluYXJ5U2VhcmNoID0gcmVxdWlyZSgnLi9iaW5hcnktc2VhcmNoJyk7XG52YXIgQXJyYXlTZXQgPSByZXF1aXJlKCcuL2FycmF5LXNldCcpLkFycmF5U2V0O1xudmFyIGJhc2U2NFZMUSA9IHJlcXVpcmUoJy4vYmFzZTY0LXZscScpO1xudmFyIHF1aWNrU29ydCA9IHJlcXVpcmUoJy4vcXVpY2stc29ydCcpLnF1aWNrU29ydDtcblxuZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXIoYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCkge1xuICB2YXIgc291cmNlTWFwID0gYVNvdXJjZU1hcDtcbiAgaWYgKHR5cGVvZiBhU291cmNlTWFwID09PSAnc3RyaW5nJykge1xuICAgIHNvdXJjZU1hcCA9IHV0aWwucGFyc2VTb3VyY2VNYXBJbnB1dChhU291cmNlTWFwKTtcbiAgfVxuXG4gIHJldHVybiBzb3VyY2VNYXAuc2VjdGlvbnMgIT0gbnVsbFxuICAgID8gbmV3IEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcihzb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpXG4gICAgOiBuZXcgQmFzaWNTb3VyY2VNYXBDb25zdW1lcihzb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpO1xufVxuXG5Tb3VyY2VNYXBDb25zdW1lci5mcm9tU291cmNlTWFwID0gZnVuY3Rpb24oYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCkge1xuICByZXR1cm4gQmFzaWNTb3VyY2VNYXBDb25zdW1lci5mcm9tU291cmNlTWFwKGFTb3VyY2VNYXAsIGFTb3VyY2VNYXBVUkwpO1xufVxuXG4vKipcbiAqIFRoZSB2ZXJzaW9uIG9mIHRoZSBzb3VyY2UgbWFwcGluZyBzcGVjIHRoYXQgd2UgYXJlIGNvbnN1bWluZy5cbiAqL1xuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl92ZXJzaW9uID0gMztcblxuLy8gYF9fZ2VuZXJhdGVkTWFwcGluZ3NgIGFuZCBgX19vcmlnaW5hbE1hcHBpbmdzYCBhcmUgYXJyYXlzIHRoYXQgaG9sZCB0aGVcbi8vIHBhcnNlZCBtYXBwaW5nIGNvb3JkaW5hdGVzIGZyb20gdGhlIHNvdXJjZSBtYXAncyBcIm1hcHBpbmdzXCIgYXR0cmlidXRlLiBUaGV5XG4vLyBhcmUgbGF6aWx5IGluc3RhbnRpYXRlZCwgYWNjZXNzZWQgdmlhIHRoZSBgX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbi8vIGBfb3JpZ2luYWxNYXBwaW5nc2AgZ2V0dGVycyByZXNwZWN0aXZlbHksIGFuZCB3ZSBvbmx5IHBhcnNlIHRoZSBtYXBwaW5nc1xuLy8gYW5kIGNyZWF0ZSB0aGVzZSBhcnJheXMgb25jZSBxdWVyaWVkIGZvciBhIHNvdXJjZSBsb2NhdGlvbi4gV2UganVtcCB0aHJvdWdoXG4vLyB0aGVzZSBob29wcyBiZWNhdXNlIHRoZXJlIGNhbiBiZSBtYW55IHRob3VzYW5kcyBvZiBtYXBwaW5ncywgYW5kIHBhcnNpbmdcbi8vIHRoZW0gaXMgZXhwZW5zaXZlLCBzbyB3ZSBvbmx5IHdhbnQgdG8gZG8gaXQgaWYgd2UgbXVzdC5cbi8vXG4vLyBFYWNoIG9iamVjdCBpbiB0aGUgYXJyYXlzIGlzIG9mIHRoZSBmb3JtOlxuLy9cbi8vICAgICB7XG4vLyAgICAgICBnZW5lcmF0ZWRMaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBjb2RlLFxuLy8gICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIGNvZGUsXG4vLyAgICAgICBzb3VyY2U6IFRoZSBwYXRoIHRvIHRoZSBvcmlnaW5hbCBzb3VyY2UgZmlsZSB0aGF0IGdlbmVyYXRlZCB0aGlzXG4vLyAgICAgICAgICAgICAgIGNodW5rIG9mIGNvZGUsXG4vLyAgICAgICBvcmlnaW5hbExpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlIHRoYXRcbi8vICAgICAgICAgICAgICAgICAgICAgY29ycmVzcG9uZHMgdG8gdGhpcyBjaHVuayBvZiBnZW5lcmF0ZWQgY29kZSxcbi8vICAgICAgIG9yaWdpbmFsQ29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlIHRoYXRcbi8vICAgICAgICAgICAgICAgICAgICAgICBjb3JyZXNwb25kcyB0byB0aGlzIGNodW5rIG9mIGdlbmVyYXRlZCBjb2RlLFxuLy8gICAgICAgbmFtZTogVGhlIG5hbWUgb2YgdGhlIG9yaWdpbmFsIHN5bWJvbCB3aGljaCBnZW5lcmF0ZWQgdGhpcyBjaHVuayBvZlxuLy8gICAgICAgICAgICAgY29kZS5cbi8vICAgICB9XG4vL1xuLy8gQWxsIHByb3BlcnRpZXMgZXhjZXB0IGZvciBgZ2VuZXJhdGVkTGluZWAgYW5kIGBnZW5lcmF0ZWRDb2x1bW5gIGNhbiBiZVxuLy8gYG51bGxgLlxuLy9cbi8vIGBfZ2VuZXJhdGVkTWFwcGluZ3NgIGlzIG9yZGVyZWQgYnkgdGhlIGdlbmVyYXRlZCBwb3NpdGlvbnMuXG4vL1xuLy8gYF9vcmlnaW5hbE1hcHBpbmdzYCBpcyBvcmRlcmVkIGJ5IHRoZSBvcmlnaW5hbCBwb3NpdGlvbnMuXG5cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fX2dlbmVyYXRlZE1hcHBpbmdzID0gbnVsbDtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdfZ2VuZXJhdGVkTWFwcGluZ3MnLCB7XG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MpIHtcbiAgICAgIHRoaXMuX3BhcnNlTWFwcGluZ3ModGhpcy5fbWFwcGluZ3MsIHRoaXMuc291cmNlUm9vdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncztcbiAgfVxufSk7XG5cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fX29yaWdpbmFsTWFwcGluZ3MgPSBudWxsO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ19vcmlnaW5hbE1hcHBpbmdzJywge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MpIHtcbiAgICAgIHRoaXMuX3BhcnNlTWFwcGluZ3ModGhpcy5fbWFwcGluZ3MsIHRoaXMuc291cmNlUm9vdCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzO1xuICB9XG59KTtcblxuU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9jaGFySXNNYXBwaW5nU2VwYXJhdG9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfY2hhcklzTWFwcGluZ1NlcGFyYXRvcihhU3RyLCBpbmRleCkge1xuICAgIHZhciBjID0gYVN0ci5jaGFyQXQoaW5kZXgpO1xuICAgIHJldHVybiBjID09PSBcIjtcIiB8fCBjID09PSBcIixcIjtcbiAgfTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgbWFwcGluZ3MgaW4gYSBzdHJpbmcgaW4gdG8gYSBkYXRhIHN0cnVjdHVyZSB3aGljaCB3ZSBjYW4gZWFzaWx5XG4gKiBxdWVyeSAodGhlIG9yZGVyZWQgYXJyYXlzIGluIHRoZSBgdGhpcy5fX2dlbmVyYXRlZE1hcHBpbmdzYCBhbmRcbiAqIGB0aGlzLl9fb3JpZ2luYWxNYXBwaW5nc2AgcHJvcGVydGllcykuXG4gKi9cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fcGFyc2VNYXBwaW5ncyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX3BhcnNlTWFwcGluZ3MoYVN0ciwgYVNvdXJjZVJvb3QpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJTdWJjbGFzc2VzIG11c3QgaW1wbGVtZW50IF9wYXJzZU1hcHBpbmdzXCIpO1xuICB9O1xuXG5Tb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVIgPSAxO1xuU291cmNlTWFwQ29uc3VtZXIuT1JJR0lOQUxfT1JERVIgPSAyO1xuXG5Tb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCA9IDE7XG5Tb3VyY2VNYXBDb25zdW1lci5MRUFTVF9VUFBFUl9CT1VORCA9IDI7XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGVhY2ggbWFwcGluZyBiZXR3ZWVuIGFuIG9yaWdpbmFsIHNvdXJjZS9saW5lL2NvbHVtbiBhbmQgYVxuICogZ2VuZXJhdGVkIGxpbmUvY29sdW1uIGluIHRoaXMgc291cmNlIG1hcC5cbiAqXG4gKiBAcGFyYW0gRnVuY3Rpb24gYUNhbGxiYWNrXG4gKiAgICAgICAgVGhlIGZ1bmN0aW9uIHRoYXQgaXMgY2FsbGVkIHdpdGggZWFjaCBtYXBwaW5nLlxuICogQHBhcmFtIE9iamVjdCBhQ29udGV4dFxuICogICAgICAgIE9wdGlvbmFsLiBJZiBzcGVjaWZpZWQsIHRoaXMgb2JqZWN0IHdpbGwgYmUgdGhlIHZhbHVlIG9mIGB0aGlzYCBldmVyeVxuICogICAgICAgIHRpbWUgdGhhdCBgYUNhbGxiYWNrYCBpcyBjYWxsZWQuXG4gKiBAcGFyYW0gYU9yZGVyXG4gKiAgICAgICAgRWl0aGVyIGBTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVJgIG9yXG4gKiAgICAgICAgYFNvdXJjZU1hcENvbnN1bWVyLk9SSUdJTkFMX09SREVSYC4gU3BlY2lmaWVzIHdoZXRoZXIgeW91IHdhbnQgdG9cbiAqICAgICAgICBpdGVyYXRlIG92ZXIgdGhlIG1hcHBpbmdzIHNvcnRlZCBieSB0aGUgZ2VuZXJhdGVkIGZpbGUncyBsaW5lL2NvbHVtblxuICogICAgICAgIG9yZGVyIG9yIHRoZSBvcmlnaW5hbCdzIHNvdXJjZS9saW5lL2NvbHVtbiBvcmRlciwgcmVzcGVjdGl2ZWx5LiBEZWZhdWx0cyB0b1xuICogICAgICAgIGBTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVJgLlxuICovXG5Tb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuZWFjaE1hcHBpbmcgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9lYWNoTWFwcGluZyhhQ2FsbGJhY2ssIGFDb250ZXh0LCBhT3JkZXIpIHtcbiAgICB2YXIgY29udGV4dCA9IGFDb250ZXh0IHx8IG51bGw7XG4gICAgdmFyIG9yZGVyID0gYU9yZGVyIHx8IFNvdXJjZU1hcENvbnN1bWVyLkdFTkVSQVRFRF9PUkRFUjtcblxuICAgIHZhciBtYXBwaW5ncztcbiAgICBzd2l0Y2ggKG9yZGVyKSB7XG4gICAgY2FzZSBTb3VyY2VNYXBDb25zdW1lci5HRU5FUkFURURfT1JERVI6XG4gICAgICBtYXBwaW5ncyA9IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSBTb3VyY2VNYXBDb25zdW1lci5PUklHSU5BTF9PUkRFUjpcbiAgICAgIG1hcHBpbmdzID0gdGhpcy5fb3JpZ2luYWxNYXBwaW5ncztcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbmtub3duIG9yZGVyIG9mIGl0ZXJhdGlvbi5cIik7XG4gICAgfVxuXG4gICAgdmFyIHNvdXJjZVJvb3QgPSB0aGlzLnNvdXJjZVJvb3Q7XG4gICAgbWFwcGluZ3MubWFwKGZ1bmN0aW9uIChtYXBwaW5nKSB7XG4gICAgICB2YXIgc291cmNlID0gbWFwcGluZy5zb3VyY2UgPT09IG51bGwgPyBudWxsIDogdGhpcy5fc291cmNlcy5hdChtYXBwaW5nLnNvdXJjZSk7XG4gICAgICBzb3VyY2UgPSB1dGlsLmNvbXB1dGVTb3VyY2VVUkwoc291cmNlUm9vdCwgc291cmNlLCB0aGlzLl9zb3VyY2VNYXBVUkwpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgIGdlbmVyYXRlZExpbmU6IG1hcHBpbmcuZ2VuZXJhdGVkTGluZSxcbiAgICAgICAgZ2VuZXJhdGVkQ29sdW1uOiBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbixcbiAgICAgICAgb3JpZ2luYWxMaW5lOiBtYXBwaW5nLm9yaWdpbmFsTGluZSxcbiAgICAgICAgb3JpZ2luYWxDb2x1bW46IG1hcHBpbmcub3JpZ2luYWxDb2x1bW4sXG4gICAgICAgIG5hbWU6IG1hcHBpbmcubmFtZSA9PT0gbnVsbCA/IG51bGwgOiB0aGlzLl9uYW1lcy5hdChtYXBwaW5nLm5hbWUpXG4gICAgICB9O1xuICAgIH0sIHRoaXMpLmZvckVhY2goYUNhbGxiYWNrLCBjb250ZXh0KTtcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIGFsbCBnZW5lcmF0ZWQgbGluZSBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgb3JpZ2luYWwgc291cmNlLFxuICogbGluZSwgYW5kIGNvbHVtbiBwcm92aWRlZC4gSWYgbm8gY29sdW1uIGlzIHByb3ZpZGVkLCByZXR1cm5zIGFsbCBtYXBwaW5nc1xuICogY29ycmVzcG9uZGluZyB0byBhIGVpdGhlciB0aGUgbGluZSB3ZSBhcmUgc2VhcmNoaW5nIGZvciBvciB0aGUgbmV4dFxuICogY2xvc2VzdCBsaW5lIHRoYXQgaGFzIGFueSBtYXBwaW5ncy4gT3RoZXJ3aXNlLCByZXR1cm5zIGFsbCBtYXBwaW5nc1xuICogY29ycmVzcG9uZGluZyB0byB0aGUgZ2l2ZW4gbGluZSBhbmQgZWl0aGVyIHRoZSBjb2x1bW4gd2UgYXJlIHNlYXJjaGluZyBmb3JcbiAqIG9yIHRoZSBuZXh0IGNsb3Nlc3QgY29sdW1uIHRoYXQgaGFzIGFueSBvZmZzZXRzLlxuICpcbiAqIFRoZSBvbmx5IGFyZ3VtZW50IGlzIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gc291cmNlOiBUaGUgZmlsZW5hbWUgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZS5cbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZS4gIFRoZSBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogT3B0aW9uYWwuIHRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuXG4gKiAgICBUaGUgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICpcbiAqIGFuZCBhbiBhcnJheSBvZiBvYmplY3RzIGlzIHJldHVybmVkLCBlYWNoIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgIGxpbmUgbnVtYmVyIGlzIDEtYmFzZWQuXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAqICAgIFRoZSBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKi9cblNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5hbGxHZW5lcmF0ZWRQb3NpdGlvbnNGb3IgPVxuICBmdW5jdGlvbiBTb3VyY2VNYXBDb25zdW1lcl9hbGxHZW5lcmF0ZWRQb3NpdGlvbnNGb3IoYUFyZ3MpIHtcbiAgICB2YXIgbGluZSA9IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbGluZScpO1xuXG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBleGFjdCBtYXRjaCwgQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2ZpbmRNYXBwaW5nXG4gICAgLy8gcmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGNsb3Nlc3QgbWFwcGluZyBsZXNzIHRoYW4gdGhlIG5lZWRsZS4gQnlcbiAgICAvLyBzZXR0aW5nIG5lZWRsZS5vcmlnaW5hbENvbHVtbiB0byAwLCB3ZSB0aHVzIGZpbmQgdGhlIGxhc3QgbWFwcGluZyBmb3JcbiAgICAvLyB0aGUgZ2l2ZW4gbGluZSwgcHJvdmlkZWQgc3VjaCBhIG1hcHBpbmcgZXhpc3RzLlxuICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICBzb3VyY2U6IHV0aWwuZ2V0QXJnKGFBcmdzLCAnc291cmNlJyksXG4gICAgICBvcmlnaW5hbExpbmU6IGxpbmUsXG4gICAgICBvcmlnaW5hbENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nLCAwKVxuICAgIH07XG5cbiAgICBuZWVkbGUuc291cmNlID0gdGhpcy5fZmluZFNvdXJjZUluZGV4KG5lZWRsZS5zb3VyY2UpO1xuICAgIGlmIChuZWVkbGUuc291cmNlIDwgMCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIHZhciBtYXBwaW5ncyA9IFtdO1xuXG4gICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZE1hcHBpbmcobmVlZGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29yaWdpbmFsTWFwcGluZ3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvcmlnaW5hbExpbmVcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9yaWdpbmFsQ29sdW1uXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5hcnlTZWFyY2guTEVBU1RfVVBQRVJfQk9VTkQpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICB2YXIgbWFwcGluZyA9IHRoaXMuX29yaWdpbmFsTWFwcGluZ3NbaW5kZXhdO1xuXG4gICAgICBpZiAoYUFyZ3MuY29sdW1uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIG9yaWdpbmFsTGluZSA9IG1hcHBpbmcub3JpZ2luYWxMaW5lO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgdW50aWwgZWl0aGVyIHdlIHJ1biBvdXQgb2YgbWFwcGluZ3MsIG9yIHdlIHJ1biBpbnRvXG4gICAgICAgIC8vIGEgbWFwcGluZyBmb3IgYSBkaWZmZXJlbnQgbGluZSB0aGFuIHRoZSBvbmUgd2UgZm91bmQuIFNpbmNlXG4gICAgICAgIC8vIG1hcHBpbmdzIGFyZSBzb3J0ZWQsIHRoaXMgaXMgZ3VhcmFudGVlZCB0byBmaW5kIGFsbCBtYXBwaW5ncyBmb3JcbiAgICAgICAgLy8gdGhlIGxpbmUgd2UgZm91bmQuXG4gICAgICAgIHdoaWxlIChtYXBwaW5nICYmIG1hcHBpbmcub3JpZ2luYWxMaW5lID09PSBvcmlnaW5hbExpbmUpIHtcbiAgICAgICAgICBtYXBwaW5ncy5wdXNoKHtcbiAgICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRMaW5lJywgbnVsbCksXG4gICAgICAgICAgICBjb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRDb2x1bW4nLCBudWxsKSxcbiAgICAgICAgICAgIGxhc3RDb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdsYXN0R2VuZXJhdGVkQ29sdW1uJywgbnVsbClcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIG1hcHBpbmcgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzWysraW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgb3JpZ2luYWxDb2x1bW4gPSBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uO1xuXG4gICAgICAgIC8vIEl0ZXJhdGUgdW50aWwgZWl0aGVyIHdlIHJ1biBvdXQgb2YgbWFwcGluZ3MsIG9yIHdlIHJ1biBpbnRvXG4gICAgICAgIC8vIGEgbWFwcGluZyBmb3IgYSBkaWZmZXJlbnQgbGluZSB0aGFuIHRoZSBvbmUgd2Ugd2VyZSBzZWFyY2hpbmcgZm9yLlxuICAgICAgICAvLyBTaW5jZSBtYXBwaW5ncyBhcmUgc29ydGVkLCB0aGlzIGlzIGd1YXJhbnRlZWQgdG8gZmluZCBhbGwgbWFwcGluZ3MgZm9yXG4gICAgICAgIC8vIHRoZSBsaW5lIHdlIGFyZSBzZWFyY2hpbmcgZm9yLlxuICAgICAgICB3aGlsZSAobWFwcGluZyAmJlxuICAgICAgICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgPT09IGxpbmUgJiZcbiAgICAgICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPT0gb3JpZ2luYWxDb2x1bW4pIHtcbiAgICAgICAgICBtYXBwaW5ncy5wdXNoKHtcbiAgICAgICAgICAgIGxpbmU6IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRMaW5lJywgbnVsbCksXG4gICAgICAgICAgICBjb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRDb2x1bW4nLCBudWxsKSxcbiAgICAgICAgICAgIGxhc3RDb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdsYXN0R2VuZXJhdGVkQ29sdW1uJywgbnVsbClcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIG1hcHBpbmcgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzWysraW5kZXhdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hcHBpbmdzO1xuICB9O1xuXG5leHBvcnRzLlNvdXJjZU1hcENvbnN1bWVyID0gU291cmNlTWFwQ29uc3VtZXI7XG5cbi8qKlxuICogQSBCYXNpY1NvdXJjZU1hcENvbnN1bWVyIGluc3RhbmNlIHJlcHJlc2VudHMgYSBwYXJzZWQgc291cmNlIG1hcCB3aGljaCB3ZSBjYW5cbiAqIHF1ZXJ5IGZvciBpbmZvcm1hdGlvbiBhYm91dCB0aGUgb3JpZ2luYWwgZmlsZSBwb3NpdGlvbnMgYnkgZ2l2aW5nIGl0IGEgZmlsZVxuICogcG9zaXRpb24gaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuXG4gKlxuICogVGhlIGZpcnN0IHBhcmFtZXRlciBpcyB0aGUgcmF3IHNvdXJjZSBtYXAgKGVpdGhlciBhcyBhIEpTT04gc3RyaW5nLCBvclxuICogYWxyZWFkeSBwYXJzZWQgdG8gYW4gb2JqZWN0KS4gQWNjb3JkaW5nIHRvIHRoZSBzcGVjLCBzb3VyY2UgbWFwcyBoYXZlIHRoZVxuICogZm9sbG93aW5nIGF0dHJpYnV0ZXM6XG4gKlxuICogICAtIHZlcnNpb246IFdoaWNoIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXAgc3BlYyB0aGlzIG1hcCBpcyBmb2xsb3dpbmcuXG4gKiAgIC0gc291cmNlczogQW4gYXJyYXkgb2YgVVJMcyB0byB0aGUgb3JpZ2luYWwgc291cmNlIGZpbGVzLlxuICogICAtIG5hbWVzOiBBbiBhcnJheSBvZiBpZGVudGlmaWVycyB3aGljaCBjYW4gYmUgcmVmZXJyZW5jZWQgYnkgaW5kaXZpZHVhbCBtYXBwaW5ncy5cbiAqICAgLSBzb3VyY2VSb290OiBPcHRpb25hbC4gVGhlIFVSTCByb290IGZyb20gd2hpY2ggYWxsIHNvdXJjZXMgYXJlIHJlbGF0aXZlLlxuICogICAtIHNvdXJjZXNDb250ZW50OiBPcHRpb25hbC4gQW4gYXJyYXkgb2YgY29udGVudHMgb2YgdGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlcy5cbiAqICAgLSBtYXBwaW5nczogQSBzdHJpbmcgb2YgYmFzZTY0IFZMUXMgd2hpY2ggY29udGFpbiB0aGUgYWN0dWFsIG1hcHBpbmdzLlxuICogICAtIGZpbGU6IE9wdGlvbmFsLiBUaGUgZ2VuZXJhdGVkIGZpbGUgdGhpcyBzb3VyY2UgbWFwIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAqXG4gKiBIZXJlIGlzIGFuIGV4YW1wbGUgc291cmNlIG1hcCwgdGFrZW4gZnJvbSB0aGUgc291cmNlIG1hcCBzcGVjWzBdOlxuICpcbiAqICAgICB7XG4gKiAgICAgICB2ZXJzaW9uIDogMyxcbiAqICAgICAgIGZpbGU6IFwib3V0LmpzXCIsXG4gKiAgICAgICBzb3VyY2VSb290IDogXCJcIixcbiAqICAgICAgIHNvdXJjZXM6IFtcImZvby5qc1wiLCBcImJhci5qc1wiXSxcbiAqICAgICAgIG5hbWVzOiBbXCJzcmNcIiwgXCJtYXBzXCIsIFwiYXJlXCIsIFwiZnVuXCJdLFxuICogICAgICAgbWFwcGluZ3M6IFwiQUEsQUI7O0FCQ0RFO1wiXG4gKiAgICAgfVxuICpcbiAqIFRoZSBzZWNvbmQgcGFyYW1ldGVyLCBpZiBnaXZlbiwgaXMgYSBzdHJpbmcgd2hvc2UgdmFsdWUgaXMgdGhlIFVSTFxuICogYXQgd2hpY2ggdGhlIHNvdXJjZSBtYXAgd2FzIGZvdW5kLiAgVGhpcyBVUkwgaXMgdXNlZCB0byBjb21wdXRlIHRoZVxuICogc291cmNlcyBhcnJheS5cbiAqXG4gKiBbMF06IGh0dHBzOi8vZG9jcy5nb29nbGUuY29tL2RvY3VtZW50L2QvMVUxUkdBZWhRd1J5cFVUb3ZGMUtSbHBpT0Z6ZTBiLV8yZ2M2ZkFIMEtZMGsvZWRpdD9wbGk9MSNcbiAqL1xuZnVuY3Rpb24gQmFzaWNTb3VyY2VNYXBDb25zdW1lcihhU291cmNlTWFwLCBhU291cmNlTWFwVVJMKSB7XG4gIHZhciBzb3VyY2VNYXAgPSBhU291cmNlTWFwO1xuICBpZiAodHlwZW9mIGFTb3VyY2VNYXAgPT09ICdzdHJpbmcnKSB7XG4gICAgc291cmNlTWFwID0gdXRpbC5wYXJzZVNvdXJjZU1hcElucHV0KGFTb3VyY2VNYXApO1xuICB9XG5cbiAgdmFyIHZlcnNpb24gPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICd2ZXJzaW9uJyk7XG4gIHZhciBzb3VyY2VzID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc291cmNlcycpO1xuICAvLyBTYXNzIDMuMyBsZWF2ZXMgb3V0IHRoZSAnbmFtZXMnIGFycmF5LCBzbyB3ZSBkZXZpYXRlIGZyb20gdGhlIHNwZWMgKHdoaWNoXG4gIC8vIHJlcXVpcmVzIHRoZSBhcnJheSkgdG8gcGxheSBuaWNlIGhlcmUuXG4gIHZhciBuYW1lcyA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ25hbWVzJywgW10pO1xuICB2YXIgc291cmNlUm9vdCA9IHV0aWwuZ2V0QXJnKHNvdXJjZU1hcCwgJ3NvdXJjZVJvb3QnLCBudWxsKTtcbiAgdmFyIHNvdXJjZXNDb250ZW50ID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnc291cmNlc0NvbnRlbnQnLCBudWxsKTtcbiAgdmFyIG1hcHBpbmdzID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAnbWFwcGluZ3MnKTtcbiAgdmFyIGZpbGUgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdmaWxlJywgbnVsbCk7XG5cbiAgLy8gT25jZSBhZ2FpbiwgU2FzcyBkZXZpYXRlcyBmcm9tIHRoZSBzcGVjIGFuZCBzdXBwbGllcyB0aGUgdmVyc2lvbiBhcyBhXG4gIC8vIHN0cmluZyByYXRoZXIgdGhhbiBhIG51bWJlciwgc28gd2UgdXNlIGxvb3NlIGVxdWFsaXR5IGNoZWNraW5nIGhlcmUuXG4gIGlmICh2ZXJzaW9uICE9IHRoaXMuX3ZlcnNpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHZlcnNpb246ICcgKyB2ZXJzaW9uKTtcbiAgfVxuXG4gIGlmIChzb3VyY2VSb290KSB7XG4gICAgc291cmNlUm9vdCA9IHV0aWwubm9ybWFsaXplKHNvdXJjZVJvb3QpO1xuICB9XG5cbiAgc291cmNlcyA9IHNvdXJjZXNcbiAgICAubWFwKFN0cmluZylcbiAgICAvLyBTb21lIHNvdXJjZSBtYXBzIHByb2R1Y2UgcmVsYXRpdmUgc291cmNlIHBhdGhzIGxpa2UgXCIuL2Zvby5qc1wiIGluc3RlYWQgb2ZcbiAgICAvLyBcImZvby5qc1wiLiAgTm9ybWFsaXplIHRoZXNlIGZpcnN0IHNvIHRoYXQgZnV0dXJlIGNvbXBhcmlzb25zIHdpbGwgc3VjY2VlZC5cbiAgICAvLyBTZWUgYnVnemlsLmxhLzEwOTA3NjguXG4gICAgLm1hcCh1dGlsLm5vcm1hbGl6ZSlcbiAgICAvLyBBbHdheXMgZW5zdXJlIHRoYXQgYWJzb2x1dGUgc291cmNlcyBhcmUgaW50ZXJuYWxseSBzdG9yZWQgcmVsYXRpdmUgdG9cbiAgICAvLyB0aGUgc291cmNlIHJvb3QsIGlmIHRoZSBzb3VyY2Ugcm9vdCBpcyBhYnNvbHV0ZS4gTm90IGRvaW5nIHRoaXMgd291bGRcbiAgICAvLyBiZSBwYXJ0aWN1bGFybHkgcHJvYmxlbWF0aWMgd2hlbiB0aGUgc291cmNlIHJvb3QgaXMgYSBwcmVmaXggb2YgdGhlXG4gICAgLy8gc291cmNlICh2YWxpZCwgYnV0IHdoeT8/KS4gU2VlIGdpdGh1YiBpc3N1ZSAjMTk5IGFuZCBidWd6aWwubGEvMTE4ODk4Mi5cbiAgICAubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBzb3VyY2VSb290ICYmIHV0aWwuaXNBYnNvbHV0ZShzb3VyY2VSb290KSAmJiB1dGlsLmlzQWJzb2x1dGUoc291cmNlKVxuICAgICAgICA/IHV0aWwucmVsYXRpdmUoc291cmNlUm9vdCwgc291cmNlKVxuICAgICAgICA6IHNvdXJjZTtcbiAgICB9KTtcblxuICAvLyBQYXNzIGB0cnVlYCBiZWxvdyB0byBhbGxvdyBkdXBsaWNhdGUgbmFtZXMgYW5kIHNvdXJjZXMuIFdoaWxlIHNvdXJjZSBtYXBzXG4gIC8vIGFyZSBpbnRlbmRlZCB0byBiZSBjb21wcmVzc2VkIGFuZCBkZWR1cGxpY2F0ZWQsIHRoZSBUeXBlU2NyaXB0IGNvbXBpbGVyXG4gIC8vIHNvbWV0aW1lcyBnZW5lcmF0ZXMgc291cmNlIG1hcHMgd2l0aCBkdXBsaWNhdGVzIGluIHRoZW0uIFNlZSBHaXRodWIgaXNzdWVcbiAgLy8gIzcyIGFuZCBidWd6aWwubGEvODg5NDkyLlxuICB0aGlzLl9uYW1lcyA9IEFycmF5U2V0LmZyb21BcnJheShuYW1lcy5tYXAoU3RyaW5nKSwgdHJ1ZSk7XG4gIHRoaXMuX3NvdXJjZXMgPSBBcnJheVNldC5mcm9tQXJyYXkoc291cmNlcywgdHJ1ZSk7XG5cbiAgdGhpcy5fYWJzb2x1dGVTb3VyY2VzID0gdGhpcy5fc291cmNlcy50b0FycmF5KCkubWFwKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHV0aWwuY29tcHV0ZVNvdXJjZVVSTChzb3VyY2VSb290LCBzLCBhU291cmNlTWFwVVJMKTtcbiAgfSk7XG5cbiAgdGhpcy5zb3VyY2VSb290ID0gc291cmNlUm9vdDtcbiAgdGhpcy5zb3VyY2VzQ29udGVudCA9IHNvdXJjZXNDb250ZW50O1xuICB0aGlzLl9tYXBwaW5ncyA9IG1hcHBpbmdzO1xuICB0aGlzLl9zb3VyY2VNYXBVUkwgPSBhU291cmNlTWFwVVJMO1xuICB0aGlzLmZpbGUgPSBmaWxlO1xufVxuXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlKTtcbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmNvbnN1bWVyID0gU291cmNlTWFwQ29uc3VtZXI7XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiB0byBmaW5kIHRoZSBpbmRleCBvZiBhIHNvdXJjZS4gIFJldHVybnMgLTEgaWYgbm90XG4gKiBmb3VuZC5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuX2ZpbmRTb3VyY2VJbmRleCA9IGZ1bmN0aW9uKGFTb3VyY2UpIHtcbiAgdmFyIHJlbGF0aXZlU291cmNlID0gYVNvdXJjZTtcbiAgaWYgKHRoaXMuc291cmNlUm9vdCAhPSBudWxsKSB7XG4gICAgcmVsYXRpdmVTb3VyY2UgPSB1dGlsLnJlbGF0aXZlKHRoaXMuc291cmNlUm9vdCwgcmVsYXRpdmVTb3VyY2UpO1xuICB9XG5cbiAgaWYgKHRoaXMuX3NvdXJjZXMuaGFzKHJlbGF0aXZlU291cmNlKSkge1xuICAgIHJldHVybiB0aGlzLl9zb3VyY2VzLmluZGV4T2YocmVsYXRpdmVTb3VyY2UpO1xuICB9XG5cbiAgLy8gTWF5YmUgYVNvdXJjZSBpcyBhbiBhYnNvbHV0ZSBVUkwgYXMgcmV0dXJuZWQgYnkgfHNvdXJjZXN8LiAgSW5cbiAgLy8gdGhpcyBjYXNlIHdlIGNhbid0IHNpbXBseSB1bmRvIHRoZSB0cmFuc2Zvcm0uXG4gIHZhciBpO1xuICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5fYWJzb2x1dGVTb3VyY2VzLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKHRoaXMuX2Fic29sdXRlU291cmNlc1tpXSA9PSBhU291cmNlKSB7XG4gICAgICByZXR1cm4gaTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gLTE7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBhIEJhc2ljU291cmNlTWFwQ29uc3VtZXIgZnJvbSBhIFNvdXJjZU1hcEdlbmVyYXRvci5cbiAqXG4gKiBAcGFyYW0gU291cmNlTWFwR2VuZXJhdG9yIGFTb3VyY2VNYXBcbiAqICAgICAgICBUaGUgc291cmNlIG1hcCB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG4gKiBAcGFyYW0gU3RyaW5nIGFTb3VyY2VNYXBVUkxcbiAqICAgICAgICBUaGUgVVJMIGF0IHdoaWNoIHRoZSBzb3VyY2UgbWFwIGNhbiBiZSBmb3VuZCAob3B0aW9uYWwpXG4gKiBAcmV0dXJucyBCYXNpY1NvdXJjZU1hcENvbnN1bWVyXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIuZnJvbVNvdXJjZU1hcCA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2Zyb21Tb3VyY2VNYXAoYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCkge1xuICAgIHZhciBzbWMgPSBPYmplY3QuY3JlYXRlKEJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlKTtcblxuICAgIHZhciBuYW1lcyA9IHNtYy5fbmFtZXMgPSBBcnJheVNldC5mcm9tQXJyYXkoYVNvdXJjZU1hcC5fbmFtZXMudG9BcnJheSgpLCB0cnVlKTtcbiAgICB2YXIgc291cmNlcyA9IHNtYy5fc291cmNlcyA9IEFycmF5U2V0LmZyb21BcnJheShhU291cmNlTWFwLl9zb3VyY2VzLnRvQXJyYXkoKSwgdHJ1ZSk7XG4gICAgc21jLnNvdXJjZVJvb3QgPSBhU291cmNlTWFwLl9zb3VyY2VSb290O1xuICAgIHNtYy5zb3VyY2VzQ29udGVudCA9IGFTb3VyY2VNYXAuX2dlbmVyYXRlU291cmNlc0NvbnRlbnQoc21jLl9zb3VyY2VzLnRvQXJyYXkoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNtYy5zb3VyY2VSb290KTtcbiAgICBzbWMuZmlsZSA9IGFTb3VyY2VNYXAuX2ZpbGU7XG4gICAgc21jLl9zb3VyY2VNYXBVUkwgPSBhU291cmNlTWFwVVJMO1xuICAgIHNtYy5fYWJzb2x1dGVTb3VyY2VzID0gc21jLl9zb3VyY2VzLnRvQXJyYXkoKS5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICAgIHJldHVybiB1dGlsLmNvbXB1dGVTb3VyY2VVUkwoc21jLnNvdXJjZVJvb3QsIHMsIGFTb3VyY2VNYXBVUkwpO1xuICAgIH0pO1xuXG4gICAgLy8gQmVjYXVzZSB3ZSBhcmUgbW9kaWZ5aW5nIHRoZSBlbnRyaWVzIChieSBjb252ZXJ0aW5nIHN0cmluZyBzb3VyY2VzIGFuZFxuICAgIC8vIG5hbWVzIHRvIGluZGljZXMgaW50byB0aGUgc291cmNlcyBhbmQgbmFtZXMgQXJyYXlTZXRzKSwgd2UgaGF2ZSB0byBtYWtlXG4gICAgLy8gYSBjb3B5IG9mIHRoZSBlbnRyeSBvciBlbHNlIGJhZCB0aGluZ3MgaGFwcGVuLiBTaGFyZWQgbXV0YWJsZSBzdGF0ZVxuICAgIC8vIHN0cmlrZXMgYWdhaW4hIFNlZSBnaXRodWIgaXNzdWUgIzE5MS5cblxuICAgIHZhciBnZW5lcmF0ZWRNYXBwaW5ncyA9IGFTb3VyY2VNYXAuX21hcHBpbmdzLnRvQXJyYXkoKS5zbGljZSgpO1xuICAgIHZhciBkZXN0R2VuZXJhdGVkTWFwcGluZ3MgPSBzbWMuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IFtdO1xuICAgIHZhciBkZXN0T3JpZ2luYWxNYXBwaW5ncyA9IHNtYy5fX29yaWdpbmFsTWFwcGluZ3MgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZW5lcmF0ZWRNYXBwaW5ncy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNyY01hcHBpbmcgPSBnZW5lcmF0ZWRNYXBwaW5nc1tpXTtcbiAgICAgIHZhciBkZXN0TWFwcGluZyA9IG5ldyBNYXBwaW5nO1xuICAgICAgZGVzdE1hcHBpbmcuZ2VuZXJhdGVkTGluZSA9IHNyY01hcHBpbmcuZ2VuZXJhdGVkTGluZTtcbiAgICAgIGRlc3RNYXBwaW5nLmdlbmVyYXRlZENvbHVtbiA9IHNyY01hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuXG4gICAgICBpZiAoc3JjTWFwcGluZy5zb3VyY2UpIHtcbiAgICAgICAgZGVzdE1hcHBpbmcuc291cmNlID0gc291cmNlcy5pbmRleE9mKHNyY01hcHBpbmcuc291cmNlKTtcbiAgICAgICAgZGVzdE1hcHBpbmcub3JpZ2luYWxMaW5lID0gc3JjTWFwcGluZy5vcmlnaW5hbExpbmU7XG4gICAgICAgIGRlc3RNYXBwaW5nLm9yaWdpbmFsQ29sdW1uID0gc3JjTWFwcGluZy5vcmlnaW5hbENvbHVtbjtcblxuICAgICAgICBpZiAoc3JjTWFwcGluZy5uYW1lKSB7XG4gICAgICAgICAgZGVzdE1hcHBpbmcubmFtZSA9IG5hbWVzLmluZGV4T2Yoc3JjTWFwcGluZy5uYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlc3RPcmlnaW5hbE1hcHBpbmdzLnB1c2goZGVzdE1hcHBpbmcpO1xuICAgICAgfVxuXG4gICAgICBkZXN0R2VuZXJhdGVkTWFwcGluZ3MucHVzaChkZXN0TWFwcGluZyk7XG4gICAgfVxuXG4gICAgcXVpY2tTb3J0KHNtYy5fX29yaWdpbmFsTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMpO1xuXG4gICAgcmV0dXJuIHNtYztcbiAgfTtcblxuLyoqXG4gKiBUaGUgdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcHBpbmcgc3BlYyB0aGF0IHdlIGFyZSBjb25zdW1pbmcuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl92ZXJzaW9uID0gMztcblxuLyoqXG4gKiBUaGUgbGlzdCBvZiBvcmlnaW5hbCBzb3VyY2VzLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUsICdzb3VyY2VzJywge1xuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWJzb2x1dGVTb3VyY2VzLnNsaWNlKCk7XG4gIH1cbn0pO1xuXG4vKipcbiAqIFByb3ZpZGUgdGhlIEpJVCB3aXRoIGEgbmljZSBzaGFwZSAvIGhpZGRlbiBjbGFzcy5cbiAqL1xuZnVuY3Rpb24gTWFwcGluZygpIHtcbiAgdGhpcy5nZW5lcmF0ZWRMaW5lID0gMDtcbiAgdGhpcy5nZW5lcmF0ZWRDb2x1bW4gPSAwO1xuICB0aGlzLnNvdXJjZSA9IG51bGw7XG4gIHRoaXMub3JpZ2luYWxMaW5lID0gbnVsbDtcbiAgdGhpcy5vcmlnaW5hbENvbHVtbiA9IG51bGw7XG4gIHRoaXMubmFtZSA9IG51bGw7XG59XG5cbi8qKlxuICogUGFyc2UgdGhlIG1hcHBpbmdzIGluIGEgc3RyaW5nIGluIHRvIGEgZGF0YSBzdHJ1Y3R1cmUgd2hpY2ggd2UgY2FuIGVhc2lseVxuICogcXVlcnkgKHRoZSBvcmRlcmVkIGFycmF5cyBpbiB0aGUgYHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kXG4gKiBgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3NgIHByb3BlcnRpZXMpLlxuICovXG5CYXNpY1NvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZS5fcGFyc2VNYXBwaW5ncyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX3BhcnNlTWFwcGluZ3MoYVN0ciwgYVNvdXJjZVJvb3QpIHtcbiAgICB2YXIgZ2VuZXJhdGVkTGluZSA9IDE7XG4gICAgdmFyIHByZXZpb3VzR2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICB2YXIgcHJldmlvdXNPcmlnaW5hbExpbmUgPSAwO1xuICAgIHZhciBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gMDtcbiAgICB2YXIgcHJldmlvdXNTb3VyY2UgPSAwO1xuICAgIHZhciBwcmV2aW91c05hbWUgPSAwO1xuICAgIHZhciBsZW5ndGggPSBhU3RyLmxlbmd0aDtcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBjYWNoZWRTZWdtZW50cyA9IHt9O1xuICAgIHZhciB0ZW1wID0ge307XG4gICAgdmFyIG9yaWdpbmFsTWFwcGluZ3MgPSBbXTtcbiAgICB2YXIgZ2VuZXJhdGVkTWFwcGluZ3MgPSBbXTtcbiAgICB2YXIgbWFwcGluZywgc3RyLCBzZWdtZW50LCBlbmQsIHZhbHVlO1xuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBpZiAoYVN0ci5jaGFyQXQoaW5kZXgpID09PSAnOycpIHtcbiAgICAgICAgZ2VuZXJhdGVkTGluZSsrO1xuICAgICAgICBpbmRleCsrO1xuICAgICAgICBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IDA7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChhU3RyLmNoYXJBdChpbmRleCkgPT09ICcsJykge1xuICAgICAgICBpbmRleCsrO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG1hcHBpbmcgPSBuZXcgTWFwcGluZygpO1xuICAgICAgICBtYXBwaW5nLmdlbmVyYXRlZExpbmUgPSBnZW5lcmF0ZWRMaW5lO1xuXG4gICAgICAgIC8vIEJlY2F1c2UgZWFjaCBvZmZzZXQgaXMgZW5jb2RlZCByZWxhdGl2ZSB0byB0aGUgcHJldmlvdXMgb25lLFxuICAgICAgICAvLyBtYW55IHNlZ21lbnRzIG9mdGVuIGhhdmUgdGhlIHNhbWUgZW5jb2RpbmcuIFdlIGNhbiBleHBsb2l0IHRoaXNcbiAgICAgICAgLy8gZmFjdCBieSBjYWNoaW5nIHRoZSBwYXJzZWQgdmFyaWFibGUgbGVuZ3RoIGZpZWxkcyBvZiBlYWNoIHNlZ21lbnQsXG4gICAgICAgIC8vIGFsbG93aW5nIHVzIHRvIGF2b2lkIGEgc2Vjb25kIHBhcnNlIGlmIHdlIGVuY291bnRlciB0aGUgc2FtZVxuICAgICAgICAvLyBzZWdtZW50IGFnYWluLlxuICAgICAgICBmb3IgKGVuZCA9IGluZGV4OyBlbmQgPCBsZW5ndGg7IGVuZCsrKSB7XG4gICAgICAgICAgaWYgKHRoaXMuX2NoYXJJc01hcHBpbmdTZXBhcmF0b3IoYVN0ciwgZW5kKSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHN0ciA9IGFTdHIuc2xpY2UoaW5kZXgsIGVuZCk7XG5cbiAgICAgICAgc2VnbWVudCA9IGNhY2hlZFNlZ21lbnRzW3N0cl07XG4gICAgICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgICAgaW5kZXggKz0gc3RyLmxlbmd0aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWdtZW50ID0gW107XG4gICAgICAgICAgd2hpbGUgKGluZGV4IDwgZW5kKSB7XG4gICAgICAgICAgICBiYXNlNjRWTFEuZGVjb2RlKGFTdHIsIGluZGV4LCB0ZW1wKTtcbiAgICAgICAgICAgIHZhbHVlID0gdGVtcC52YWx1ZTtcbiAgICAgICAgICAgIGluZGV4ID0gdGVtcC5yZXN0O1xuICAgICAgICAgICAgc2VnbWVudC5wdXNoKHZhbHVlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgYSBzb3VyY2UsIGJ1dCBubyBsaW5lIGFuZCBjb2x1bW4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoc2VnbWVudC5sZW5ndGggPT09IDMpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgYSBzb3VyY2UgYW5kIGxpbmUsIGJ1dCBubyBjb2x1bW4nKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjYWNoZWRTZWdtZW50c1tzdHJdID0gc2VnbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdlbmVyYXRlZCBjb2x1bW4uXG4gICAgICAgIG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uID0gcHJldmlvdXNHZW5lcmF0ZWRDb2x1bW4gKyBzZWdtZW50WzBdO1xuICAgICAgICBwcmV2aW91c0dlbmVyYXRlZENvbHVtbiA9IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uO1xuXG4gICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAvLyBPcmlnaW5hbCBzb3VyY2UuXG4gICAgICAgICAgbWFwcGluZy5zb3VyY2UgPSBwcmV2aW91c1NvdXJjZSArIHNlZ21lbnRbMV07XG4gICAgICAgICAgcHJldmlvdXNTb3VyY2UgKz0gc2VnbWVudFsxXTtcblxuICAgICAgICAgIC8vIE9yaWdpbmFsIGxpbmUuXG4gICAgICAgICAgbWFwcGluZy5vcmlnaW5hbExpbmUgPSBwcmV2aW91c09yaWdpbmFsTGluZSArIHNlZ21lbnRbMl07XG4gICAgICAgICAgcHJldmlvdXNPcmlnaW5hbExpbmUgPSBtYXBwaW5nLm9yaWdpbmFsTGluZTtcbiAgICAgICAgICAvLyBMaW5lcyBhcmUgc3RvcmVkIDAtYmFzZWRcbiAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsTGluZSArPSAxO1xuXG4gICAgICAgICAgLy8gT3JpZ2luYWwgY29sdW1uLlxuICAgICAgICAgIG1hcHBpbmcub3JpZ2luYWxDb2x1bW4gPSBwcmV2aW91c09yaWdpbmFsQ29sdW1uICsgc2VnbWVudFszXTtcbiAgICAgICAgICBwcmV2aW91c09yaWdpbmFsQ29sdW1uID0gbWFwcGluZy5vcmlnaW5hbENvbHVtbjtcblxuICAgICAgICAgIGlmIChzZWdtZW50Lmxlbmd0aCA+IDQpIHtcbiAgICAgICAgICAgIC8vIE9yaWdpbmFsIG5hbWUuXG4gICAgICAgICAgICBtYXBwaW5nLm5hbWUgPSBwcmV2aW91c05hbWUgKyBzZWdtZW50WzRdO1xuICAgICAgICAgICAgcHJldmlvdXNOYW1lICs9IHNlZ21lbnRbNF07XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZ2VuZXJhdGVkTWFwcGluZ3MucHVzaChtYXBwaW5nKTtcbiAgICAgICAgaWYgKHR5cGVvZiBtYXBwaW5nLm9yaWdpbmFsTGluZSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICBvcmlnaW5hbE1hcHBpbmdzLnB1c2gobWFwcGluZyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBxdWlja1NvcnQoZ2VuZXJhdGVkTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQpO1xuICAgIHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncyA9IGdlbmVyYXRlZE1hcHBpbmdzO1xuXG4gICAgcXVpY2tTb3J0KG9yaWdpbmFsTWFwcGluZ3MsIHV0aWwuY29tcGFyZUJ5T3JpZ2luYWxQb3NpdGlvbnMpO1xuICAgIHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzID0gb3JpZ2luYWxNYXBwaW5ncztcbiAgfTtcblxuLyoqXG4gKiBGaW5kIHRoZSBtYXBwaW5nIHRoYXQgYmVzdCBtYXRjaGVzIHRoZSBoeXBvdGhldGljYWwgXCJuZWVkbGVcIiBtYXBwaW5nIHRoYXRcbiAqIHdlIGFyZSBzZWFyY2hpbmcgZm9yIGluIHRoZSBnaXZlbiBcImhheXN0YWNrXCIgb2YgbWFwcGluZ3MuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9maW5kTWFwcGluZyA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX2ZpbmRNYXBwaW5nKGFOZWVkbGUsIGFNYXBwaW5ncywgYUxpbmVOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhQ29sdW1uTmFtZSwgYUNvbXBhcmF0b3IsIGFCaWFzKSB7XG4gICAgLy8gVG8gcmV0dXJuIHRoZSBwb3NpdGlvbiB3ZSBhcmUgc2VhcmNoaW5nIGZvciwgd2UgbXVzdCBmaXJzdCBmaW5kIHRoZVxuICAgIC8vIG1hcHBpbmcgZm9yIHRoZSBnaXZlbiBwb3NpdGlvbiBhbmQgdGhlbiByZXR1cm4gdGhlIG9wcG9zaXRlIHBvc2l0aW9uIGl0XG4gICAgLy8gcG9pbnRzIHRvLiBCZWNhdXNlIHRoZSBtYXBwaW5ncyBhcmUgc29ydGVkLCB3ZSBjYW4gdXNlIGJpbmFyeSBzZWFyY2ggdG9cbiAgICAvLyBmaW5kIHRoZSBiZXN0IG1hcHBpbmcuXG5cbiAgICBpZiAoYU5lZWRsZVthTGluZU5hbWVdIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0xpbmUgbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMSwgZ290ICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKyBhTmVlZGxlW2FMaW5lTmFtZV0pO1xuICAgIH1cbiAgICBpZiAoYU5lZWRsZVthQ29sdW1uTmFtZV0gPCAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDb2x1bW4gbXVzdCBiZSBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gMCwgZ290ICdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKyBhTmVlZGxlW2FDb2x1bW5OYW1lXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJpbmFyeVNlYXJjaC5zZWFyY2goYU5lZWRsZSwgYU1hcHBpbmdzLCBhQ29tcGFyYXRvciwgYUJpYXMpO1xuICB9O1xuXG4vKipcbiAqIENvbXB1dGUgdGhlIGxhc3QgY29sdW1uIGZvciBlYWNoIGdlbmVyYXRlZCBtYXBwaW5nLiBUaGUgbGFzdCBjb2x1bW4gaXNcbiAqIGluY2x1c2l2ZS5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuY29tcHV0ZUNvbHVtblNwYW5zID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfY29tcHV0ZUNvbHVtblNwYW5zKCkge1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncy5sZW5ndGg7ICsraW5kZXgpIHtcbiAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3NbaW5kZXhdO1xuXG4gICAgICAvLyBNYXBwaW5ncyBkbyBub3QgY29udGFpbiBhIGZpZWxkIGZvciB0aGUgbGFzdCBnZW5lcmF0ZWQgY29sdW1udC4gV2VcbiAgICAgIC8vIGNhbiBjb21lIHVwIHdpdGggYW4gb3B0aW1pc3RpYyBlc3RpbWF0ZSwgaG93ZXZlciwgYnkgYXNzdW1pbmcgdGhhdFxuICAgICAgLy8gbWFwcGluZ3MgYXJlIGNvbnRpZ3VvdXMgKGkuZS4gZ2l2ZW4gdHdvIGNvbnNlY3V0aXZlIG1hcHBpbmdzLCB0aGVcbiAgICAgIC8vIGZpcnN0IG1hcHBpbmcgZW5kcyB3aGVyZSB0aGUgc2Vjb25kIG9uZSBzdGFydHMpLlxuICAgICAgaWYgKGluZGV4ICsgMSA8IHRoaXMuX2dlbmVyYXRlZE1hcHBpbmdzLmxlbmd0aCkge1xuICAgICAgICB2YXIgbmV4dE1hcHBpbmcgPSB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5nc1tpbmRleCArIDFdO1xuXG4gICAgICAgIGlmIChtYXBwaW5nLmdlbmVyYXRlZExpbmUgPT09IG5leHRNYXBwaW5nLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgICBtYXBwaW5nLmxhc3RHZW5lcmF0ZWRDb2x1bW4gPSBuZXh0TWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gLSAxO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRoZSBsYXN0IG1hcHBpbmcgZm9yIGVhY2ggbGluZSBzcGFucyB0aGUgZW50aXJlIGxpbmUuXG4gICAgICBtYXBwaW5nLmxhc3RHZW5lcmF0ZWRDb2x1bW4gPSBJbmZpbml0eTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgb3JpZ2luYWwgc291cmNlLCBsaW5lLCBhbmQgY29sdW1uIGluZm9ybWF0aW9uIGZvciB0aGUgZ2VuZXJhdGVkXG4gKiBzb3VyY2UncyBsaW5lIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3RcbiAqIHdpdGggdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBsaW5lOiBUaGUgbGluZSBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuICBUaGUgbGluZSBudW1iZXJcbiAqICAgICBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIGdlbmVyYXRlZCBzb3VyY2UuICBUaGUgY29sdW1uXG4gKiAgICAgbnVtYmVyIGlzIDAtYmFzZWQuXG4gKiAgIC0gYmlhczogRWl0aGVyICdTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCcgb3JcbiAqICAgICAnU291cmNlTWFwQ29uc3VtZXIuTEVBU1RfVVBQRVJfQk9VTkQnLiBTcGVjaWZpZXMgd2hldGhlciB0byByZXR1cm4gdGhlXG4gKiAgICAgY2xvc2VzdCBlbGVtZW50IHRoYXQgaXMgc21hbGxlciB0aGFuIG9yIGdyZWF0ZXIgdGhhbiB0aGUgb25lIHdlIGFyZVxuICogICAgIHNlYXJjaGluZyBmb3IsIHJlc3BlY3RpdmVseSwgaWYgdGhlIGV4YWN0IGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLlxuICogICAgIERlZmF1bHRzIHRvICdTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCcuXG4gKlxuICogYW5kIGFuIG9iamVjdCBpcyByZXR1cm5lZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gc291cmNlOiBUaGUgb3JpZ2luYWwgc291cmNlIGZpbGUsIG9yIG51bGwuXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBsaW5lIG51bWJlciBpcyAxLWJhc2VkLlxuICogICAtIGNvbHVtbjogVGhlIGNvbHVtbiBudW1iZXIgaW4gdGhlIG9yaWdpbmFsIHNvdXJjZSwgb3IgbnVsbC4gIFRoZVxuICogICAgIGNvbHVtbiBudW1iZXIgaXMgMC1iYXNlZC5cbiAqICAgLSBuYW1lOiBUaGUgb3JpZ2luYWwgaWRlbnRpZmllciwgb3IgbnVsbC5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUub3JpZ2luYWxQb3NpdGlvbkZvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX29yaWdpbmFsUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICB2YXIgbmVlZGxlID0ge1xuICAgICAgZ2VuZXJhdGVkTGluZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyksXG4gICAgICBnZW5lcmF0ZWRDb2x1bW46IHV0aWwuZ2V0QXJnKGFBcmdzLCAnY29sdW1uJylcbiAgICB9O1xuXG4gICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZE1hcHBpbmcoXG4gICAgICBuZWVkbGUsXG4gICAgICB0aGlzLl9nZW5lcmF0ZWRNYXBwaW5ncyxcbiAgICAgIFwiZ2VuZXJhdGVkTGluZVwiLFxuICAgICAgXCJnZW5lcmF0ZWRDb2x1bW5cIixcbiAgICAgIHV0aWwuY29tcGFyZUJ5R2VuZXJhdGVkUG9zaXRpb25zRGVmbGF0ZWQsXG4gICAgICB1dGlsLmdldEFyZyhhQXJncywgJ2JpYXMnLCBTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORClcbiAgICApO1xuXG4gICAgaWYgKGluZGV4ID49IDApIHtcbiAgICAgIHZhciBtYXBwaW5nID0gdGhpcy5fZ2VuZXJhdGVkTWFwcGluZ3NbaW5kZXhdO1xuXG4gICAgICBpZiAobWFwcGluZy5nZW5lcmF0ZWRMaW5lID09PSBuZWVkbGUuZ2VuZXJhdGVkTGluZSkge1xuICAgICAgICB2YXIgc291cmNlID0gdXRpbC5nZXRBcmcobWFwcGluZywgJ3NvdXJjZScsIG51bGwpO1xuICAgICAgICBpZiAoc291cmNlICE9PSBudWxsKSB7XG4gICAgICAgICAgc291cmNlID0gdGhpcy5fc291cmNlcy5hdChzb3VyY2UpO1xuICAgICAgICAgIHNvdXJjZSA9IHV0aWwuY29tcHV0ZVNvdXJjZVVSTCh0aGlzLnNvdXJjZVJvb3QsIHNvdXJjZSwgdGhpcy5fc291cmNlTWFwVVJMKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbmFtZSA9IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICduYW1lJywgbnVsbCk7XG4gICAgICAgIGlmIChuYW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgbmFtZSA9IHRoaXMuX25hbWVzLmF0KG5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc291cmNlOiBzb3VyY2UsXG4gICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ29yaWdpbmFsTGluZScsIG51bGwpLFxuICAgICAgICAgIGNvbHVtbjogdXRpbC5nZXRBcmcobWFwcGluZywgJ29yaWdpbmFsQ29sdW1uJywgbnVsbCksXG4gICAgICAgICAgbmFtZTogbmFtZVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBzb3VyY2U6IG51bGwsXG4gICAgICBsaW5lOiBudWxsLFxuICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgbmFtZTogbnVsbFxuICAgIH07XG4gIH07XG5cbi8qKlxuICogUmV0dXJuIHRydWUgaWYgd2UgaGF2ZSB0aGUgc291cmNlIGNvbnRlbnQgZm9yIGV2ZXJ5IHNvdXJjZSBpbiB0aGUgc291cmNlXG4gKiBtYXAsIGZhbHNlIG90aGVyd2lzZS5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuaGFzQ29udGVudHNPZkFsbFNvdXJjZXMgPVxuICBmdW5jdGlvbiBCYXNpY1NvdXJjZU1hcENvbnN1bWVyX2hhc0NvbnRlbnRzT2ZBbGxTb3VyY2VzKCkge1xuICAgIGlmICghdGhpcy5zb3VyY2VzQ29udGVudCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudC5sZW5ndGggPj0gdGhpcy5fc291cmNlcy5zaXplKCkgJiZcbiAgICAgICF0aGlzLnNvdXJjZXNDb250ZW50LnNvbWUoZnVuY3Rpb24gKHNjKSB7IHJldHVybiBzYyA9PSBudWxsOyB9KTtcbiAgfTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBvcmlnaW5hbCBzb3VyY2UgY29udGVudC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgdGhlIHVybCBvZiB0aGVcbiAqIG9yaWdpbmFsIHNvdXJjZSBmaWxlLiBSZXR1cm5zIG51bGwgaWYgbm8gb3JpZ2luYWwgc291cmNlIGNvbnRlbnQgaXNcbiAqIGF2YWlsYWJsZS5cbiAqL1xuQmFzaWNTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuc291cmNlQ29udGVudEZvciA9XG4gIGZ1bmN0aW9uIFNvdXJjZU1hcENvbnN1bWVyX3NvdXJjZUNvbnRlbnRGb3IoYVNvdXJjZSwgbnVsbE9uTWlzc2luZykge1xuICAgIGlmICghdGhpcy5zb3VyY2VzQ29udGVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZFNvdXJjZUluZGV4KGFTb3VyY2UpO1xuICAgIGlmIChpbmRleCA+PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5zb3VyY2VzQ29udGVudFtpbmRleF07XG4gICAgfVxuXG4gICAgdmFyIHJlbGF0aXZlU291cmNlID0gYVNvdXJjZTtcbiAgICBpZiAodGhpcy5zb3VyY2VSb290ICE9IG51bGwpIHtcbiAgICAgIHJlbGF0aXZlU291cmNlID0gdXRpbC5yZWxhdGl2ZSh0aGlzLnNvdXJjZVJvb3QsIHJlbGF0aXZlU291cmNlKTtcbiAgICB9XG5cbiAgICB2YXIgdXJsO1xuICAgIGlmICh0aGlzLnNvdXJjZVJvb3QgIT0gbnVsbFxuICAgICAgICAmJiAodXJsID0gdXRpbC51cmxQYXJzZSh0aGlzLnNvdXJjZVJvb3QpKSkge1xuICAgICAgLy8gWFhYOiBmaWxlOi8vIFVSSXMgYW5kIGFic29sdXRlIHBhdGhzIGxlYWQgdG8gdW5leHBlY3RlZCBiZWhhdmlvciBmb3JcbiAgICAgIC8vIG1hbnkgdXNlcnMuIFdlIGNhbiBoZWxwIHRoZW0gb3V0IHdoZW4gdGhleSBleHBlY3QgZmlsZTovLyBVUklzIHRvXG4gICAgICAvLyBiZWhhdmUgbGlrZSBpdCB3b3VsZCBpZiB0aGV5IHdlcmUgcnVubmluZyBhIGxvY2FsIEhUVFAgc2VydmVyLiBTZWVcbiAgICAgIC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTg4NTU5Ny5cbiAgICAgIHZhciBmaWxlVXJpQWJzUGF0aCA9IHJlbGF0aXZlU291cmNlLnJlcGxhY2UoL15maWxlOlxcL1xcLy8sIFwiXCIpO1xuICAgICAgaWYgKHVybC5zY2hlbWUgPT0gXCJmaWxlXCJcbiAgICAgICAgICAmJiB0aGlzLl9zb3VyY2VzLmhhcyhmaWxlVXJpQWJzUGF0aCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnRbdGhpcy5fc291cmNlcy5pbmRleE9mKGZpbGVVcmlBYnNQYXRoKV1cbiAgICAgIH1cblxuICAgICAgaWYgKCghdXJsLnBhdGggfHwgdXJsLnBhdGggPT0gXCIvXCIpXG4gICAgICAgICAgJiYgdGhpcy5fc291cmNlcy5oYXMoXCIvXCIgKyByZWxhdGl2ZVNvdXJjZSkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlc0NvbnRlbnRbdGhpcy5fc291cmNlcy5pbmRleE9mKFwiL1wiICsgcmVsYXRpdmVTb3VyY2UpXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgcmVjdXJzaXZlbHkgZnJvbVxuICAgIC8vIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuc291cmNlQ29udGVudEZvci4gSW4gdGhhdCBjYXNlLCB3ZVxuICAgIC8vIGRvbid0IHdhbnQgdG8gdGhyb3cgaWYgd2UgY2FuJ3QgZmluZCB0aGUgc291cmNlIC0gd2UganVzdCB3YW50IHRvXG4gICAgLy8gcmV0dXJuIG51bGwsIHNvIHdlIHByb3ZpZGUgYSBmbGFnIHRvIGV4aXQgZ3JhY2VmdWxseS5cbiAgICBpZiAobnVsbE9uTWlzc2luZykge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdcIicgKyByZWxhdGl2ZVNvdXJjZSArICdcIiBpcyBub3QgaW4gdGhlIFNvdXJjZU1hcC4nKTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIG9yaWdpbmFsIHNvdXJjZSxcbiAqIGxpbmUsIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3Qgd2l0aFxuICogdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBmaWxlbmFtZSBvZiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLiAgVGhlIGxpbmUgbnVtYmVyXG4gKiAgICAgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgY29sdW1uXG4gKiAgICAgbnVtYmVyIGlzIDAtYmFzZWQuXG4gKiAgIC0gYmlhczogRWl0aGVyICdTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCcgb3JcbiAqICAgICAnU291cmNlTWFwQ29uc3VtZXIuTEVBU1RfVVBQRVJfQk9VTkQnLiBTcGVjaWZpZXMgd2hldGhlciB0byByZXR1cm4gdGhlXG4gKiAgICAgY2xvc2VzdCBlbGVtZW50IHRoYXQgaXMgc21hbGxlciB0aGFuIG9yIGdyZWF0ZXIgdGhhbiB0aGUgb25lIHdlIGFyZVxuICogICAgIHNlYXJjaGluZyBmb3IsIHJlc3BlY3RpdmVseSwgaWYgdGhlIGV4YWN0IGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLlxuICogICAgIERlZmF1bHRzIHRvICdTb3VyY2VNYXBDb25zdW1lci5HUkVBVEVTVF9MT1dFUl9CT1VORCcuXG4gKlxuICogYW5kIGFuIG9iamVjdCBpcyByZXR1cm5lZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICAgbGluZSBudW1iZXIgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLlxuICogICAgIFRoZSBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKi9cbkJhc2ljU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmdlbmVyYXRlZFBvc2l0aW9uRm9yID1cbiAgZnVuY3Rpb24gU291cmNlTWFwQ29uc3VtZXJfZ2VuZXJhdGVkUG9zaXRpb25Gb3IoYUFyZ3MpIHtcbiAgICB2YXIgc291cmNlID0gdXRpbC5nZXRBcmcoYUFyZ3MsICdzb3VyY2UnKTtcbiAgICBzb3VyY2UgPSB0aGlzLl9maW5kU291cmNlSW5kZXgoc291cmNlKTtcbiAgICBpZiAoc291cmNlIDwgMCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbGluZTogbnVsbCxcbiAgICAgICAgY29sdW1uOiBudWxsLFxuICAgICAgICBsYXN0Q29sdW1uOiBudWxsXG4gICAgICB9O1xuICAgIH1cblxuICAgIHZhciBuZWVkbGUgPSB7XG4gICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgIG9yaWdpbmFsTGluZTogdXRpbC5nZXRBcmcoYUFyZ3MsICdsaW5lJyksXG4gICAgICBvcmlnaW5hbENvbHVtbjogdXRpbC5nZXRBcmcoYUFyZ3MsICdjb2x1bW4nKVxuICAgIH07XG5cbiAgICB2YXIgaW5kZXggPSB0aGlzLl9maW5kTWFwcGluZyhcbiAgICAgIG5lZWRsZSxcbiAgICAgIHRoaXMuX29yaWdpbmFsTWFwcGluZ3MsXG4gICAgICBcIm9yaWdpbmFsTGluZVwiLFxuICAgICAgXCJvcmlnaW5hbENvbHVtblwiLFxuICAgICAgdXRpbC5jb21wYXJlQnlPcmlnaW5hbFBvc2l0aW9ucyxcbiAgICAgIHV0aWwuZ2V0QXJnKGFBcmdzLCAnYmlhcycsIFNvdXJjZU1hcENvbnN1bWVyLkdSRUFURVNUX0xPV0VSX0JPVU5EKVxuICAgICk7XG5cbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgdmFyIG1hcHBpbmcgPSB0aGlzLl9vcmlnaW5hbE1hcHBpbmdzW2luZGV4XTtcblxuICAgICAgaWYgKG1hcHBpbmcuc291cmNlID09PSBuZWVkbGUuc291cmNlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbGluZTogdXRpbC5nZXRBcmcobWFwcGluZywgJ2dlbmVyYXRlZExpbmUnLCBudWxsKSxcbiAgICAgICAgICBjb2x1bW46IHV0aWwuZ2V0QXJnKG1hcHBpbmcsICdnZW5lcmF0ZWRDb2x1bW4nLCBudWxsKSxcbiAgICAgICAgICBsYXN0Q29sdW1uOiB1dGlsLmdldEFyZyhtYXBwaW5nLCAnbGFzdEdlbmVyYXRlZENvbHVtbicsIG51bGwpXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxpbmU6IG51bGwsXG4gICAgICBjb2x1bW46IG51bGwsXG4gICAgICBsYXN0Q29sdW1uOiBudWxsXG4gICAgfTtcbiAgfTtcblxuZXhwb3J0cy5CYXNpY1NvdXJjZU1hcENvbnN1bWVyID0gQmFzaWNTb3VyY2VNYXBDb25zdW1lcjtcblxuLyoqXG4gKiBBbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIgaW5zdGFuY2UgcmVwcmVzZW50cyBhIHBhcnNlZCBzb3VyY2UgbWFwIHdoaWNoXG4gKiB3ZSBjYW4gcXVlcnkgZm9yIGluZm9ybWF0aW9uLiBJdCBkaWZmZXJzIGZyb20gQmFzaWNTb3VyY2VNYXBDb25zdW1lciBpblxuICogdGhhdCBpdCB0YWtlcyBcImluZGV4ZWRcIiBzb3VyY2UgbWFwcyAoaS5lLiBvbmVzIHdpdGggYSBcInNlY3Rpb25zXCIgZmllbGQpIGFzXG4gKiBpbnB1dC5cbiAqXG4gKiBUaGUgZmlyc3QgcGFyYW1ldGVyIGlzIGEgcmF3IHNvdXJjZSBtYXAgKGVpdGhlciBhcyBhIEpTT04gc3RyaW5nLCBvciBhbHJlYWR5XG4gKiBwYXJzZWQgdG8gYW4gb2JqZWN0KS4gQWNjb3JkaW5nIHRvIHRoZSBzcGVjIGZvciBpbmRleGVkIHNvdXJjZSBtYXBzLCB0aGV5XG4gKiBoYXZlIHRoZSBmb2xsb3dpbmcgYXR0cmlidXRlczpcbiAqXG4gKiAgIC0gdmVyc2lvbjogV2hpY2ggdmVyc2lvbiBvZiB0aGUgc291cmNlIG1hcCBzcGVjIHRoaXMgbWFwIGlzIGZvbGxvd2luZy5cbiAqICAgLSBmaWxlOiBPcHRpb25hbC4gVGhlIGdlbmVyYXRlZCBmaWxlIHRoaXMgc291cmNlIG1hcCBpcyBhc3NvY2lhdGVkIHdpdGguXG4gKiAgIC0gc2VjdGlvbnM6IEEgbGlzdCBvZiBzZWN0aW9uIGRlZmluaXRpb25zLlxuICpcbiAqIEVhY2ggdmFsdWUgdW5kZXIgdGhlIFwic2VjdGlvbnNcIiBmaWVsZCBoYXMgdHdvIGZpZWxkczpcbiAqICAgLSBvZmZzZXQ6IFRoZSBvZmZzZXQgaW50byB0aGUgb3JpZ2luYWwgc3BlY2lmaWVkIGF0IHdoaWNoIHRoaXMgc2VjdGlvblxuICogICAgICAgYmVnaW5zIHRvIGFwcGx5LCBkZWZpbmVkIGFzIGFuIG9iamVjdCB3aXRoIGEgXCJsaW5lXCIgYW5kIFwiY29sdW1uXCJcbiAqICAgICAgIGZpZWxkLlxuICogICAtIG1hcDogQSBzb3VyY2UgbWFwIGRlZmluaXRpb24uIFRoaXMgc291cmNlIG1hcCBjb3VsZCBhbHNvIGJlIGluZGV4ZWQsXG4gKiAgICAgICBidXQgZG9lc24ndCBoYXZlIHRvIGJlLlxuICpcbiAqIEluc3RlYWQgb2YgdGhlIFwibWFwXCIgZmllbGQsIGl0J3MgYWxzbyBwb3NzaWJsZSB0byBoYXZlIGEgXCJ1cmxcIiBmaWVsZFxuICogc3BlY2lmeWluZyBhIFVSTCB0byByZXRyaWV2ZSBhIHNvdXJjZSBtYXAgZnJvbSwgYnV0IHRoYXQncyBjdXJyZW50bHlcbiAqIHVuc3VwcG9ydGVkLlxuICpcbiAqIEhlcmUncyBhbiBleGFtcGxlIHNvdXJjZSBtYXAsIHRha2VuIGZyb20gdGhlIHNvdXJjZSBtYXAgc3BlY1swXSwgYnV0XG4gKiBtb2RpZmllZCB0byBvbWl0IGEgc2VjdGlvbiB3aGljaCB1c2VzIHRoZSBcInVybFwiIGZpZWxkLlxuICpcbiAqICB7XG4gKiAgICB2ZXJzaW9uIDogMyxcbiAqICAgIGZpbGU6IFwiYXBwLmpzXCIsXG4gKiAgICBzZWN0aW9uczogW3tcbiAqICAgICAgb2Zmc2V0OiB7bGluZToxMDAsIGNvbHVtbjoxMH0sXG4gKiAgICAgIG1hcDoge1xuICogICAgICAgIHZlcnNpb24gOiAzLFxuICogICAgICAgIGZpbGU6IFwic2VjdGlvbi5qc1wiLFxuICogICAgICAgIHNvdXJjZXM6IFtcImZvby5qc1wiLCBcImJhci5qc1wiXSxcbiAqICAgICAgICBuYW1lczogW1wic3JjXCIsIFwibWFwc1wiLCBcImFyZVwiLCBcImZ1blwiXSxcbiAqICAgICAgICBtYXBwaW5nczogXCJBQUFBLEU7O0FCQ0RFO1wiXG4gKiAgICAgIH1cbiAqICAgIH1dLFxuICogIH1cbiAqXG4gKiBUaGUgc2Vjb25kIHBhcmFtZXRlciwgaWYgZ2l2ZW4sIGlzIGEgc3RyaW5nIHdob3NlIHZhbHVlIGlzIHRoZSBVUkxcbiAqIGF0IHdoaWNoIHRoZSBzb3VyY2UgbWFwIHdhcyBmb3VuZC4gIFRoaXMgVVJMIGlzIHVzZWQgdG8gY29tcHV0ZSB0aGVcbiAqIHNvdXJjZXMgYXJyYXkuXG4gKlxuICogWzBdOiBodHRwczovL2RvY3MuZ29vZ2xlLmNvbS9kb2N1bWVudC9kLzFVMVJHQWVoUXdSeXBVVG92RjFLUmxwaU9GemUwYi1fMmdjNmZBSDBLWTBrL2VkaXQjaGVhZGluZz1oLjUzNWVzM3hlcHJndFxuICovXG5mdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXIoYVNvdXJjZU1hcCwgYVNvdXJjZU1hcFVSTCkge1xuICB2YXIgc291cmNlTWFwID0gYVNvdXJjZU1hcDtcbiAgaWYgKHR5cGVvZiBhU291cmNlTWFwID09PSAnc3RyaW5nJykge1xuICAgIHNvdXJjZU1hcCA9IHV0aWwucGFyc2VTb3VyY2VNYXBJbnB1dChhU291cmNlTWFwKTtcbiAgfVxuXG4gIHZhciB2ZXJzaW9uID0gdXRpbC5nZXRBcmcoc291cmNlTWFwLCAndmVyc2lvbicpO1xuICB2YXIgc2VjdGlvbnMgPSB1dGlsLmdldEFyZyhzb3VyY2VNYXAsICdzZWN0aW9ucycpO1xuXG4gIGlmICh2ZXJzaW9uICE9IHRoaXMuX3ZlcnNpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHZlcnNpb246ICcgKyB2ZXJzaW9uKTtcbiAgfVxuXG4gIHRoaXMuX3NvdXJjZXMgPSBuZXcgQXJyYXlTZXQoKTtcbiAgdGhpcy5fbmFtZXMgPSBuZXcgQXJyYXlTZXQoKTtcblxuICB2YXIgbGFzdE9mZnNldCA9IHtcbiAgICBsaW5lOiAtMSxcbiAgICBjb2x1bW46IDBcbiAgfTtcbiAgdGhpcy5fc2VjdGlvbnMgPSBzZWN0aW9ucy5tYXAoZnVuY3Rpb24gKHMpIHtcbiAgICBpZiAocy51cmwpIHtcbiAgICAgIC8vIFRoZSB1cmwgZmllbGQgd2lsbCByZXF1aXJlIHN1cHBvcnQgZm9yIGFzeW5jaHJvbmljaXR5LlxuICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tb3ppbGxhL3NvdXJjZS1tYXAvaXNzdWVzLzE2XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N1cHBvcnQgZm9yIHVybCBmaWVsZCBpbiBzZWN0aW9ucyBub3QgaW1wbGVtZW50ZWQuJyk7XG4gICAgfVxuICAgIHZhciBvZmZzZXQgPSB1dGlsLmdldEFyZyhzLCAnb2Zmc2V0Jyk7XG4gICAgdmFyIG9mZnNldExpbmUgPSB1dGlsLmdldEFyZyhvZmZzZXQsICdsaW5lJyk7XG4gICAgdmFyIG9mZnNldENvbHVtbiA9IHV0aWwuZ2V0QXJnKG9mZnNldCwgJ2NvbHVtbicpO1xuXG4gICAgaWYgKG9mZnNldExpbmUgPCBsYXN0T2Zmc2V0LmxpbmUgfHxcbiAgICAgICAgKG9mZnNldExpbmUgPT09IGxhc3RPZmZzZXQubGluZSAmJiBvZmZzZXRDb2x1bW4gPCBsYXN0T2Zmc2V0LmNvbHVtbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU2VjdGlvbiBvZmZzZXRzIG11c3QgYmUgb3JkZXJlZCBhbmQgbm9uLW92ZXJsYXBwaW5nLicpO1xuICAgIH1cbiAgICBsYXN0T2Zmc2V0ID0gb2Zmc2V0O1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGdlbmVyYXRlZE9mZnNldDoge1xuICAgICAgICAvLyBUaGUgb2Zmc2V0IGZpZWxkcyBhcmUgMC1iYXNlZCwgYnV0IHdlIHVzZSAxLWJhc2VkIGluZGljZXMgd2hlblxuICAgICAgICAvLyBlbmNvZGluZy9kZWNvZGluZyBmcm9tIFZMUS5cbiAgICAgICAgZ2VuZXJhdGVkTGluZTogb2Zmc2V0TGluZSArIDEsXG4gICAgICAgIGdlbmVyYXRlZENvbHVtbjogb2Zmc2V0Q29sdW1uICsgMVxuICAgICAgfSxcbiAgICAgIGNvbnN1bWVyOiBuZXcgU291cmNlTWFwQ29uc3VtZXIodXRpbC5nZXRBcmcocywgJ21hcCcpLCBhU291cmNlTWFwVVJMKVxuICAgIH1cbiAgfSk7XG59XG5cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSk7XG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gU291cmNlTWFwQ29uc3VtZXI7XG5cbi8qKlxuICogVGhlIHZlcnNpb24gb2YgdGhlIHNvdXJjZSBtYXBwaW5nIHNwZWMgdGhhdCB3ZSBhcmUgY29uc3VtaW5nLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl92ZXJzaW9uID0gMztcblxuLyoqXG4gKiBUaGUgbGlzdCBvZiBvcmlnaW5hbCBzb3VyY2VzLlxuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyLnByb3RvdHlwZSwgJ3NvdXJjZXMnLCB7XG4gIGdldDogZnVuY3Rpb24gKCkge1xuICAgIHZhciBzb3VyY2VzID0gW107XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLl9zZWN0aW9uc1tpXS5jb25zdW1lci5zb3VyY2VzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHNvdXJjZXMucHVzaCh0aGlzLl9zZWN0aW9uc1tpXS5jb25zdW1lci5zb3VyY2VzW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZXM7XG4gIH1cbn0pO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSwgbGluZSwgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIGdlbmVyYXRlZFxuICogc291cmNlJ3MgbGluZSBhbmQgY29sdW1uIHBvc2l0aW9ucyBwcm92aWRlZC4gVGhlIG9ubHkgYXJndW1lbnQgaXMgYW4gb2JqZWN0XG4gKiB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLiAgVGhlIGxpbmUgbnVtYmVyXG4gKiAgICAgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLiAgVGhlIGNvbHVtblxuICogICAgIG51bWJlciBpcyAwLWJhc2VkLlxuICpcbiAqIGFuZCBhbiBvYmplY3QgaXMgcmV0dXJuZWQgd2l0aCB0aGUgZm9sbG93aW5nIHByb3BlcnRpZXM6XG4gKlxuICogICAtIHNvdXJjZTogVGhlIG9yaWdpbmFsIHNvdXJjZSBmaWxlLCBvciBudWxsLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICAgbGluZSBudW1iZXIgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UsIG9yIG51bGwuICBUaGVcbiAqICAgICBjb2x1bW4gbnVtYmVyIGlzIDAtYmFzZWQuXG4gKiAgIC0gbmFtZTogVGhlIG9yaWdpbmFsIGlkZW50aWZpZXIsIG9yIG51bGwuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUub3JpZ2luYWxQb3NpdGlvbkZvciA9XG4gIGZ1bmN0aW9uIEluZGV4ZWRTb3VyY2VNYXBDb25zdW1lcl9vcmlnaW5hbFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgdmFyIG5lZWRsZSA9IHtcbiAgICAgIGdlbmVyYXRlZExpbmU6IHV0aWwuZ2V0QXJnKGFBcmdzLCAnbGluZScpLFxuICAgICAgZ2VuZXJhdGVkQ29sdW1uOiB1dGlsLmdldEFyZyhhQXJncywgJ2NvbHVtbicpXG4gICAgfTtcblxuICAgIC8vIEZpbmQgdGhlIHNlY3Rpb24gY29udGFpbmluZyB0aGUgZ2VuZXJhdGVkIHBvc2l0aW9uIHdlJ3JlIHRyeWluZyB0byBtYXBcbiAgICAvLyB0byBhbiBvcmlnaW5hbCBwb3NpdGlvbi5cbiAgICB2YXIgc2VjdGlvbkluZGV4ID0gYmluYXJ5U2VhcmNoLnNlYXJjaChuZWVkbGUsIHRoaXMuX3NlY3Rpb25zLFxuICAgICAgZnVuY3Rpb24obmVlZGxlLCBzZWN0aW9uKSB7XG4gICAgICAgIHZhciBjbXAgPSBuZWVkbGUuZ2VuZXJhdGVkTGluZSAtIHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmU7XG4gICAgICAgIGlmIChjbXApIHtcbiAgICAgICAgICByZXR1cm4gY21wO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChuZWVkbGUuZ2VuZXJhdGVkQ29sdW1uIC1cbiAgICAgICAgICAgICAgICBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgfSk7XG4gICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tzZWN0aW9uSW5kZXhdO1xuXG4gICAgaWYgKCFzZWN0aW9uKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzb3VyY2U6IG51bGwsXG4gICAgICAgIGxpbmU6IG51bGwsXG4gICAgICAgIGNvbHVtbjogbnVsbCxcbiAgICAgICAgbmFtZTogbnVsbFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2VjdGlvbi5jb25zdW1lci5vcmlnaW5hbFBvc2l0aW9uRm9yKHtcbiAgICAgIGxpbmU6IG5lZWRsZS5nZW5lcmF0ZWRMaW5lIC1cbiAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgLSAxKSxcbiAgICAgIGNvbHVtbjogbmVlZGxlLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lID09PSBuZWVkbGUuZ2VuZXJhdGVkTGluZVxuICAgICAgICAgPyBzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRDb2x1bW4gLSAxXG4gICAgICAgICA6IDApLFxuICAgICAgYmlhczogYUFyZ3MuYmlhc1xuICAgIH0pO1xuICB9O1xuXG4vKipcbiAqIFJldHVybiB0cnVlIGlmIHdlIGhhdmUgdGhlIHNvdXJjZSBjb250ZW50IGZvciBldmVyeSBzb3VyY2UgaW4gdGhlIHNvdXJjZVxuICogbWFwLCBmYWxzZSBvdGhlcndpc2UuXG4gKi9cbkluZGV4ZWRTb3VyY2VNYXBDb25zdW1lci5wcm90b3R5cGUuaGFzQ29udGVudHNPZkFsbFNvdXJjZXMgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfaGFzQ29udGVudHNPZkFsbFNvdXJjZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlY3Rpb25zLmV2ZXJ5KGZ1bmN0aW9uIChzKSB7XG4gICAgICByZXR1cm4gcy5jb25zdW1lci5oYXNDb250ZW50c09mQWxsU291cmNlcygpO1xuICAgIH0pO1xuICB9O1xuXG4vKipcbiAqIFJldHVybnMgdGhlIG9yaWdpbmFsIHNvdXJjZSBjb250ZW50LiBUaGUgb25seSBhcmd1bWVudCBpcyB0aGUgdXJsIG9mIHRoZVxuICogb3JpZ2luYWwgc291cmNlIGZpbGUuIFJldHVybnMgbnVsbCBpZiBubyBvcmlnaW5hbCBzb3VyY2UgY29udGVudCBpc1xuICogYXZhaWxhYmxlLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLnNvdXJjZUNvbnRlbnRGb3IgPVxuICBmdW5jdGlvbiBJbmRleGVkU291cmNlTWFwQ29uc3VtZXJfc291cmNlQ29udGVudEZvcihhU291cmNlLCBudWxsT25NaXNzaW5nKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tpXTtcblxuICAgICAgdmFyIGNvbnRlbnQgPSBzZWN0aW9uLmNvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3IoYVNvdXJjZSwgdHJ1ZSk7XG4gICAgICBpZiAoY29udGVudCkge1xuICAgICAgICByZXR1cm4gY29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG51bGxPbk1pc3NpbmcpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCInICsgYVNvdXJjZSArICdcIiBpcyBub3QgaW4gdGhlIFNvdXJjZU1hcC4nKTtcbiAgICB9XG4gIH07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZ2VuZXJhdGVkIGxpbmUgYW5kIGNvbHVtbiBpbmZvcm1hdGlvbiBmb3IgdGhlIG9yaWdpbmFsIHNvdXJjZSxcbiAqIGxpbmUsIGFuZCBjb2x1bW4gcG9zaXRpb25zIHByb3ZpZGVkLiBUaGUgb25seSBhcmd1bWVudCBpcyBhbiBvYmplY3Qgd2l0aFxuICogdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICpcbiAqICAgLSBzb3VyY2U6IFRoZSBmaWxlbmFtZSBvZiB0aGUgb3JpZ2luYWwgc291cmNlLlxuICogICAtIGxpbmU6IFRoZSBsaW5lIG51bWJlciBpbiB0aGUgb3JpZ2luYWwgc291cmNlLiAgVGhlIGxpbmUgbnVtYmVyXG4gKiAgICAgaXMgMS1iYXNlZC5cbiAqICAgLSBjb2x1bW46IFRoZSBjb2x1bW4gbnVtYmVyIGluIHRoZSBvcmlnaW5hbCBzb3VyY2UuICBUaGUgY29sdW1uXG4gKiAgICAgbnVtYmVyIGlzIDAtYmFzZWQuXG4gKlxuICogYW5kIGFuIG9iamVjdCBpcyByZXR1cm5lZCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJvcGVydGllczpcbiAqXG4gKiAgIC0gbGluZTogVGhlIGxpbmUgbnVtYmVyIGluIHRoZSBnZW5lcmF0ZWQgc291cmNlLCBvciBudWxsLiAgVGhlXG4gKiAgICAgbGluZSBudW1iZXIgaXMgMS1iYXNlZC4gXG4gKiAgIC0gY29sdW1uOiBUaGUgY29sdW1uIG51bWJlciBpbiB0aGUgZ2VuZXJhdGVkIHNvdXJjZSwgb3IgbnVsbC5cbiAqICAgICBUaGUgY29sdW1uIG51bWJlciBpcyAwLWJhc2VkLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLmdlbmVyYXRlZFBvc2l0aW9uRm9yID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX2dlbmVyYXRlZFBvc2l0aW9uRm9yKGFBcmdzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLl9zZWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNlY3Rpb24gPSB0aGlzLl9zZWN0aW9uc1tpXTtcblxuICAgICAgLy8gT25seSBjb25zaWRlciB0aGlzIHNlY3Rpb24gaWYgdGhlIHJlcXVlc3RlZCBzb3VyY2UgaXMgaW4gdGhlIGxpc3Qgb2ZcbiAgICAgIC8vIHNvdXJjZXMgb2YgdGhlIGNvbnN1bWVyLlxuICAgICAgaWYgKHNlY3Rpb24uY29uc3VtZXIuX2ZpbmRTb3VyY2VJbmRleCh1dGlsLmdldEFyZyhhQXJncywgJ3NvdXJjZScpKSA9PT0gLTEpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG4gICAgICB2YXIgZ2VuZXJhdGVkUG9zaXRpb24gPSBzZWN0aW9uLmNvbnN1bWVyLmdlbmVyYXRlZFBvc2l0aW9uRm9yKGFBcmdzKTtcbiAgICAgIGlmIChnZW5lcmF0ZWRQb3NpdGlvbikge1xuICAgICAgICB2YXIgcmV0ID0ge1xuICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZFBvc2l0aW9uLmxpbmUgK1xuICAgICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgLSAxKSxcbiAgICAgICAgICBjb2x1bW46IGdlbmVyYXRlZFBvc2l0aW9uLmNvbHVtbiArXG4gICAgICAgICAgICAoc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkTGluZSA9PT0gZ2VuZXJhdGVkUG9zaXRpb24ubGluZVxuICAgICAgICAgICAgID8gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkQ29sdW1uIC0gMVxuICAgICAgICAgICAgIDogMClcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgbGluZTogbnVsbCxcbiAgICAgIGNvbHVtbjogbnVsbFxuICAgIH07XG4gIH07XG5cbi8qKlxuICogUGFyc2UgdGhlIG1hcHBpbmdzIGluIGEgc3RyaW5nIGluIHRvIGEgZGF0YSBzdHJ1Y3R1cmUgd2hpY2ggd2UgY2FuIGVhc2lseVxuICogcXVlcnkgKHRoZSBvcmRlcmVkIGFycmF5cyBpbiB0aGUgYHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5nc2AgYW5kXG4gKiBgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3NgIHByb3BlcnRpZXMpLlxuICovXG5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIucHJvdG90eXBlLl9wYXJzZU1hcHBpbmdzID1cbiAgZnVuY3Rpb24gSW5kZXhlZFNvdXJjZU1hcENvbnN1bWVyX3BhcnNlTWFwcGluZ3MoYVN0ciwgYVNvdXJjZVJvb3QpIHtcbiAgICB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MgPSBbXTtcbiAgICB0aGlzLl9fb3JpZ2luYWxNYXBwaW5ncyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fc2VjdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzZWN0aW9uID0gdGhpcy5fc2VjdGlvbnNbaV07XG4gICAgICB2YXIgc2VjdGlvbk1hcHBpbmdzID0gc2VjdGlvbi5jb25zdW1lci5fZ2VuZXJhdGVkTWFwcGluZ3M7XG4gICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNlY3Rpb25NYXBwaW5ncy5sZW5ndGg7IGorKykge1xuICAgICAgICB2YXIgbWFwcGluZyA9IHNlY3Rpb25NYXBwaW5nc1tqXTtcblxuICAgICAgICB2YXIgc291cmNlID0gc2VjdGlvbi5jb25zdW1lci5fc291cmNlcy5hdChtYXBwaW5nLnNvdXJjZSk7XG4gICAgICAgIHNvdXJjZSA9IHV0aWwuY29tcHV0ZVNvdXJjZVVSTChzZWN0aW9uLmNvbnN1bWVyLnNvdXJjZVJvb3QsIHNvdXJjZSwgdGhpcy5fc291cmNlTWFwVVJMKTtcbiAgICAgICAgdGhpcy5fc291cmNlcy5hZGQoc291cmNlKTtcbiAgICAgICAgc291cmNlID0gdGhpcy5fc291cmNlcy5pbmRleE9mKHNvdXJjZSk7XG5cbiAgICAgICAgdmFyIG5hbWUgPSBudWxsO1xuICAgICAgICBpZiAobWFwcGluZy5uYW1lKSB7XG4gICAgICAgICAgbmFtZSA9IHNlY3Rpb24uY29uc3VtZXIuX25hbWVzLmF0KG1hcHBpbmcubmFtZSk7XG4gICAgICAgICAgdGhpcy5fbmFtZXMuYWRkKG5hbWUpO1xuICAgICAgICAgIG5hbWUgPSB0aGlzLl9uYW1lcy5pbmRleE9mKG5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVGhlIG1hcHBpbmdzIGNvbWluZyBmcm9tIHRoZSBjb25zdW1lciBmb3IgdGhlIHNlY3Rpb24gaGF2ZVxuICAgICAgICAvLyBnZW5lcmF0ZWQgcG9zaXRpb25zIHJlbGF0aXZlIHRvIHRoZSBzdGFydCBvZiB0aGUgc2VjdGlvbiwgc28gd2VcbiAgICAgICAgLy8gbmVlZCB0byBvZmZzZXQgdGhlbSB0byBiZSByZWxhdGl2ZSB0byB0aGUgc3RhcnQgb2YgdGhlIGNvbmNhdGVuYXRlZFxuICAgICAgICAvLyBnZW5lcmF0ZWQgZmlsZS5cbiAgICAgICAgdmFyIGFkanVzdGVkTWFwcGluZyA9IHtcbiAgICAgICAgICBzb3VyY2U6IHNvdXJjZSxcbiAgICAgICAgICBnZW5lcmF0ZWRMaW5lOiBtYXBwaW5nLmdlbmVyYXRlZExpbmUgK1xuICAgICAgICAgICAgKHNlY3Rpb24uZ2VuZXJhdGVkT2Zmc2V0LmdlbmVyYXRlZExpbmUgLSAxKSxcbiAgICAgICAgICBnZW5lcmF0ZWRDb2x1bW46IG1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uICtcbiAgICAgICAgICAgIChzZWN0aW9uLmdlbmVyYXRlZE9mZnNldC5nZW5lcmF0ZWRMaW5lID09PSBtYXBwaW5nLmdlbmVyYXRlZExpbmVcbiAgICAgICAgICAgID8gc2VjdGlvbi5nZW5lcmF0ZWRPZmZzZXQuZ2VuZXJhdGVkQ29sdW1uIC0gMVxuICAgICAgICAgICAgOiAwKSxcbiAgICAgICAgICBvcmlnaW5hbExpbmU6IG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgIG9yaWdpbmFsQ29sdW1uOiBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uLFxuICAgICAgICAgIG5hbWU6IG5hbWVcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl9fZ2VuZXJhdGVkTWFwcGluZ3MucHVzaChhZGp1c3RlZE1hcHBpbmcpO1xuICAgICAgICBpZiAodHlwZW9mIGFkanVzdGVkTWFwcGluZy5vcmlnaW5hbExpbmUgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgdGhpcy5fX29yaWdpbmFsTWFwcGluZ3MucHVzaChhZGp1c3RlZE1hcHBpbmcpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcXVpY2tTb3J0KHRoaXMuX19nZW5lcmF0ZWRNYXBwaW5ncywgdXRpbC5jb21wYXJlQnlHZW5lcmF0ZWRQb3NpdGlvbnNEZWZsYXRlZCk7XG4gICAgcXVpY2tTb3J0KHRoaXMuX19vcmlnaW5hbE1hcHBpbmdzLCB1dGlsLmNvbXBhcmVCeU9yaWdpbmFsUG9zaXRpb25zKTtcbiAgfTtcblxuZXhwb3J0cy5JbmRleGVkU291cmNlTWFwQ29uc3VtZXIgPSBJbmRleGVkU291cmNlTWFwQ29uc3VtZXI7XG4iLCIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbmV4cG9ydHMuR1JFQVRFU1RfTE9XRVJfQk9VTkQgPSAxO1xuZXhwb3J0cy5MRUFTVF9VUFBFUl9CT1VORCA9IDI7XG5cbi8qKlxuICogUmVjdXJzaXZlIGltcGxlbWVudGF0aW9uIG9mIGJpbmFyeSBzZWFyY2guXG4gKlxuICogQHBhcmFtIGFMb3cgSW5kaWNlcyBoZXJlIGFuZCBsb3dlciBkbyBub3QgY29udGFpbiB0aGUgbmVlZGxlLlxuICogQHBhcmFtIGFIaWdoIEluZGljZXMgaGVyZSBhbmQgaGlnaGVyIGRvIG5vdCBjb250YWluIHRoZSBuZWVkbGUuXG4gKiBAcGFyYW0gYU5lZWRsZSBUaGUgZWxlbWVudCBiZWluZyBzZWFyY2hlZCBmb3IuXG4gKiBAcGFyYW0gYUhheXN0YWNrIFRoZSBub24tZW1wdHkgYXJyYXkgYmVpbmcgc2VhcmNoZWQuXG4gKiBAcGFyYW0gYUNvbXBhcmUgRnVuY3Rpb24gd2hpY2ggdGFrZXMgdHdvIGVsZW1lbnRzIGFuZCByZXR1cm5zIC0xLCAwLCBvciAxLlxuICogQHBhcmFtIGFCaWFzIEVpdGhlciAnYmluYXJ5U2VhcmNoLkdSRUFURVNUX0xPV0VSX0JPVU5EJyBvclxuICogICAgICdiaW5hcnlTZWFyY2guTEVBU1RfVVBQRVJfQk9VTkQnLiBTcGVjaWZpZXMgd2hldGhlciB0byByZXR1cm4gdGhlXG4gKiAgICAgY2xvc2VzdCBlbGVtZW50IHRoYXQgaXMgc21hbGxlciB0aGFuIG9yIGdyZWF0ZXIgdGhhbiB0aGUgb25lIHdlIGFyZVxuICogICAgIHNlYXJjaGluZyBmb3IsIHJlc3BlY3RpdmVseSwgaWYgdGhlIGV4YWN0IGVsZW1lbnQgY2Fubm90IGJlIGZvdW5kLlxuICovXG5mdW5jdGlvbiByZWN1cnNpdmVTZWFyY2goYUxvdywgYUhpZ2gsIGFOZWVkbGUsIGFIYXlzdGFjaywgYUNvbXBhcmUsIGFCaWFzKSB7XG4gIC8vIFRoaXMgZnVuY3Rpb24gdGVybWluYXRlcyB3aGVuIG9uZSBvZiB0aGUgZm9sbG93aW5nIGlzIHRydWU6XG4gIC8vXG4gIC8vICAgMS4gV2UgZmluZCB0aGUgZXhhY3QgZWxlbWVudCB3ZSBhcmUgbG9va2luZyBmb3IuXG4gIC8vXG4gIC8vICAgMi4gV2UgZGlkIG5vdCBmaW5kIHRoZSBleGFjdCBlbGVtZW50LCBidXQgd2UgY2FuIHJldHVybiB0aGUgaW5kZXggb2ZcbiAgLy8gICAgICB0aGUgbmV4dC1jbG9zZXN0IGVsZW1lbnQuXG4gIC8vXG4gIC8vICAgMy4gV2UgZGlkIG5vdCBmaW5kIHRoZSBleGFjdCBlbGVtZW50LCBhbmQgdGhlcmUgaXMgbm8gbmV4dC1jbG9zZXN0XG4gIC8vICAgICAgZWxlbWVudCB0aGFuIHRoZSBvbmUgd2UgYXJlIHNlYXJjaGluZyBmb3IsIHNvIHdlIHJldHVybiAtMS5cbiAgdmFyIG1pZCA9IE1hdGguZmxvb3IoKGFIaWdoIC0gYUxvdykgLyAyKSArIGFMb3c7XG4gIHZhciBjbXAgPSBhQ29tcGFyZShhTmVlZGxlLCBhSGF5c3RhY2tbbWlkXSwgdHJ1ZSk7XG4gIGlmIChjbXAgPT09IDApIHtcbiAgICAvLyBGb3VuZCB0aGUgZWxlbWVudCB3ZSBhcmUgbG9va2luZyBmb3IuXG4gICAgcmV0dXJuIG1pZDtcbiAgfVxuICBlbHNlIGlmIChjbXAgPiAwKSB7XG4gICAgLy8gT3VyIG5lZWRsZSBpcyBncmVhdGVyIHRoYW4gYUhheXN0YWNrW21pZF0uXG4gICAgaWYgKGFIaWdoIC0gbWlkID4gMSkge1xuICAgICAgLy8gVGhlIGVsZW1lbnQgaXMgaW4gdGhlIHVwcGVyIGhhbGYuXG4gICAgICByZXR1cm4gcmVjdXJzaXZlU2VhcmNoKG1pZCwgYUhpZ2gsIGFOZWVkbGUsIGFIYXlzdGFjaywgYUNvbXBhcmUsIGFCaWFzKTtcbiAgICB9XG5cbiAgICAvLyBUaGUgZXhhY3QgbmVlZGxlIGVsZW1lbnQgd2FzIG5vdCBmb3VuZCBpbiB0aGlzIGhheXN0YWNrLiBEZXRlcm1pbmUgaWZcbiAgICAvLyB3ZSBhcmUgaW4gdGVybWluYXRpb24gY2FzZSAoMykgb3IgKDIpIGFuZCByZXR1cm4gdGhlIGFwcHJvcHJpYXRlIHRoaW5nLlxuICAgIGlmIChhQmlhcyA9PSBleHBvcnRzLkxFQVNUX1VQUEVSX0JPVU5EKSB7XG4gICAgICByZXR1cm4gYUhpZ2ggPCBhSGF5c3RhY2subGVuZ3RoID8gYUhpZ2ggOiAtMTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG1pZDtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gT3VyIG5lZWRsZSBpcyBsZXNzIHRoYW4gYUhheXN0YWNrW21pZF0uXG4gICAgaWYgKG1pZCAtIGFMb3cgPiAxKSB7XG4gICAgICAvLyBUaGUgZWxlbWVudCBpcyBpbiB0aGUgbG93ZXIgaGFsZi5cbiAgICAgIHJldHVybiByZWN1cnNpdmVTZWFyY2goYUxvdywgbWlkLCBhTmVlZGxlLCBhSGF5c3RhY2ssIGFDb21wYXJlLCBhQmlhcyk7XG4gICAgfVxuXG4gICAgLy8gd2UgYXJlIGluIHRlcm1pbmF0aW9uIGNhc2UgKDMpIG9yICgyKSBhbmQgcmV0dXJuIHRoZSBhcHByb3ByaWF0ZSB0aGluZy5cbiAgICBpZiAoYUJpYXMgPT0gZXhwb3J0cy5MRUFTVF9VUFBFUl9CT1VORCkge1xuICAgICAgcmV0dXJuIG1pZDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGFMb3cgPCAwID8gLTEgOiBhTG93O1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFRoaXMgaXMgYW4gaW1wbGVtZW50YXRpb24gb2YgYmluYXJ5IHNlYXJjaCB3aGljaCB3aWxsIGFsd2F5cyB0cnkgYW5kIHJldHVyblxuICogdGhlIGluZGV4IG9mIHRoZSBjbG9zZXN0IGVsZW1lbnQgaWYgdGhlcmUgaXMgbm8gZXhhY3QgaGl0LiBUaGlzIGlzIGJlY2F1c2VcbiAqIG1hcHBpbmdzIGJldHdlZW4gb3JpZ2luYWwgYW5kIGdlbmVyYXRlZCBsaW5lL2NvbCBwYWlycyBhcmUgc2luZ2xlIHBvaW50cyxcbiAqIGFuZCB0aGVyZSBpcyBhbiBpbXBsaWNpdCByZWdpb24gYmV0d2VlbiBlYWNoIG9mIHRoZW0sIHNvIGEgbWlzcyBqdXN0IG1lYW5zXG4gKiB0aGF0IHlvdSBhcmVuJ3Qgb24gdGhlIHZlcnkgc3RhcnQgb2YgYSByZWdpb24uXG4gKlxuICogQHBhcmFtIGFOZWVkbGUgVGhlIGVsZW1lbnQgeW91IGFyZSBsb29raW5nIGZvci5cbiAqIEBwYXJhbSBhSGF5c3RhY2sgVGhlIGFycmF5IHRoYXQgaXMgYmVpbmcgc2VhcmNoZWQuXG4gKiBAcGFyYW0gYUNvbXBhcmUgQSBmdW5jdGlvbiB3aGljaCB0YWtlcyB0aGUgbmVlZGxlIGFuZCBhbiBlbGVtZW50IGluIHRoZVxuICogICAgIGFycmF5IGFuZCByZXR1cm5zIC0xLCAwLCBvciAxIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBuZWVkbGUgaXMgbGVzc1xuICogICAgIHRoYW4sIGVxdWFsIHRvLCBvciBncmVhdGVyIHRoYW4gdGhlIGVsZW1lbnQsIHJlc3BlY3RpdmVseS5cbiAqIEBwYXJhbSBhQmlhcyBFaXRoZXIgJ2JpbmFyeVNlYXJjaC5HUkVBVEVTVF9MT1dFUl9CT1VORCcgb3JcbiAqICAgICAnYmluYXJ5U2VhcmNoLkxFQVNUX1VQUEVSX0JPVU5EJy4gU3BlY2lmaWVzIHdoZXRoZXIgdG8gcmV0dXJuIHRoZVxuICogICAgIGNsb3Nlc3QgZWxlbWVudCB0aGF0IGlzIHNtYWxsZXIgdGhhbiBvciBncmVhdGVyIHRoYW4gdGhlIG9uZSB3ZSBhcmVcbiAqICAgICBzZWFyY2hpbmcgZm9yLCByZXNwZWN0aXZlbHksIGlmIHRoZSBleGFjdCBlbGVtZW50IGNhbm5vdCBiZSBmb3VuZC5cbiAqICAgICBEZWZhdWx0cyB0byAnYmluYXJ5U2VhcmNoLkdSRUFURVNUX0xPV0VSX0JPVU5EJy5cbiAqL1xuZXhwb3J0cy5zZWFyY2ggPSBmdW5jdGlvbiBzZWFyY2goYU5lZWRsZSwgYUhheXN0YWNrLCBhQ29tcGFyZSwgYUJpYXMpIHtcbiAgaWYgKGFIYXlzdGFjay5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICB2YXIgaW5kZXggPSByZWN1cnNpdmVTZWFyY2goLTEsIGFIYXlzdGFjay5sZW5ndGgsIGFOZWVkbGUsIGFIYXlzdGFjayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFDb21wYXJlLCBhQmlhcyB8fCBleHBvcnRzLkdSRUFURVNUX0xPV0VSX0JPVU5EKTtcbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiAtMTtcbiAgfVxuXG4gIC8vIFdlIGhhdmUgZm91bmQgZWl0aGVyIHRoZSBleGFjdCBlbGVtZW50LCBvciB0aGUgbmV4dC1jbG9zZXN0IGVsZW1lbnQgdGhhblxuICAvLyB0aGUgb25lIHdlIGFyZSBzZWFyY2hpbmcgZm9yLiBIb3dldmVyLCB0aGVyZSBtYXkgYmUgbW9yZSB0aGFuIG9uZSBzdWNoXG4gIC8vIGVsZW1lbnQuIE1ha2Ugc3VyZSB3ZSBhbHdheXMgcmV0dXJuIHRoZSBzbWFsbGVzdCBvZiB0aGVzZS5cbiAgd2hpbGUgKGluZGV4IC0gMSA+PSAwKSB7XG4gICAgaWYgKGFDb21wYXJlKGFIYXlzdGFja1tpbmRleF0sIGFIYXlzdGFja1tpbmRleCAtIDFdLCB0cnVlKSAhPT0gMCkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC0taW5kZXg7XG4gIH1cblxuICByZXR1cm4gaW5kZXg7XG59O1xuIiwiLyogLSotIE1vZGU6IGpzOyBqcy1pbmRlbnQtbGV2ZWw6IDI7IC0qLSAqL1xuLypcbiAqIENvcHlyaWdodCAyMDExIE1vemlsbGEgRm91bmRhdGlvbiBhbmQgY29udHJpYnV0b3JzXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBsaWNlbnNlLiBTZWUgTElDRU5TRSBvcjpcbiAqIGh0dHA6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9CU0QtMy1DbGF1c2VcbiAqL1xuXG4vLyBJdCB0dXJucyBvdXQgdGhhdCBzb21lIChtb3N0PykgSmF2YVNjcmlwdCBlbmdpbmVzIGRvbid0IHNlbGYtaG9zdFxuLy8gYEFycmF5LnByb3RvdHlwZS5zb3J0YC4gVGhpcyBtYWtlcyBzZW5zZSBiZWNhdXNlIEMrKyB3aWxsIGxpa2VseSByZW1haW5cbi8vIGZhc3RlciB0aGFuIEpTIHdoZW4gZG9pbmcgcmF3IENQVS1pbnRlbnNpdmUgc29ydGluZy4gSG93ZXZlciwgd2hlbiB1c2luZyBhXG4vLyBjdXN0b20gY29tcGFyYXRvciBmdW5jdGlvbiwgY2FsbGluZyBiYWNrIGFuZCBmb3J0aCBiZXR3ZWVuIHRoZSBWTSdzIEMrKyBhbmRcbi8vIEpJVCdkIEpTIGlzIHJhdGhlciBzbG93ICphbmQqIGxvc2VzIEpJVCB0eXBlIGluZm9ybWF0aW9uLCByZXN1bHRpbmcgaW5cbi8vIHdvcnNlIGdlbmVyYXRlZCBjb2RlIGZvciB0aGUgY29tcGFyYXRvciBmdW5jdGlvbiB0aGFuIHdvdWxkIGJlIG9wdGltYWwuIEluXG4vLyBmYWN0LCB3aGVuIHNvcnRpbmcgd2l0aCBhIGNvbXBhcmF0b3IsIHRoZXNlIGNvc3RzIG91dHdlaWdoIHRoZSBiZW5lZml0cyBvZlxuLy8gc29ydGluZyBpbiBDKysuIEJ5IHVzaW5nIG91ciBvd24gSlMtaW1wbGVtZW50ZWQgUXVpY2sgU29ydCAoYmVsb3cpLCB3ZSBnZXRcbi8vIGEgfjM1MDBtcyBtZWFuIHNwZWVkLXVwIGluIGBiZW5jaC9iZW5jaC5odG1sYC5cblxuLyoqXG4gKiBTd2FwIHRoZSBlbGVtZW50cyBpbmRleGVkIGJ5IGB4YCBhbmQgYHlgIGluIHRoZSBhcnJheSBgYXJ5YC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnlcbiAqICAgICAgICBUaGUgYXJyYXkuXG4gKiBAcGFyYW0ge051bWJlcn0geFxuICogICAgICAgIFRoZSBpbmRleCBvZiB0aGUgZmlyc3QgaXRlbS5cbiAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gKiAgICAgICAgVGhlIGluZGV4IG9mIHRoZSBzZWNvbmQgaXRlbS5cbiAqL1xuZnVuY3Rpb24gc3dhcChhcnksIHgsIHkpIHtcbiAgdmFyIHRlbXAgPSBhcnlbeF07XG4gIGFyeVt4XSA9IGFyeVt5XTtcbiAgYXJ5W3ldID0gdGVtcDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmFuZG9tIGludGVnZXIgd2l0aGluIHRoZSByYW5nZSBgbG93IC4uIGhpZ2hgIGluY2x1c2l2ZS5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbG93XG4gKiAgICAgICAgVGhlIGxvd2VyIGJvdW5kIG9uIHRoZSByYW5nZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBoaWdoXG4gKiAgICAgICAgVGhlIHVwcGVyIGJvdW5kIG9uIHRoZSByYW5nZS5cbiAqL1xuZnVuY3Rpb24gcmFuZG9tSW50SW5SYW5nZShsb3csIGhpZ2gpIHtcbiAgcmV0dXJuIE1hdGgucm91bmQobG93ICsgKE1hdGgucmFuZG9tKCkgKiAoaGlnaCAtIGxvdykpKTtcbn1cblxuLyoqXG4gKiBUaGUgUXVpY2sgU29ydCBhbGdvcml0aG0uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gYXJ5XG4gKiAgICAgICAgQW4gYXJyYXkgdG8gc29ydC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbXBhcmF0b3JcbiAqICAgICAgICBGdW5jdGlvbiB0byB1c2UgdG8gY29tcGFyZSB0d28gaXRlbXMuXG4gKiBAcGFyYW0ge051bWJlcn0gcFxuICogICAgICAgIFN0YXJ0IGluZGV4IG9mIHRoZSBhcnJheVxuICogQHBhcmFtIHtOdW1iZXJ9IHJcbiAqICAgICAgICBFbmQgaW5kZXggb2YgdGhlIGFycmF5XG4gKi9cbmZ1bmN0aW9uIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgcCwgcikge1xuICAvLyBJZiBvdXIgbG93ZXIgYm91bmQgaXMgbGVzcyB0aGFuIG91ciB1cHBlciBib3VuZCwgd2UgKDEpIHBhcnRpdGlvbiB0aGVcbiAgLy8gYXJyYXkgaW50byB0d28gcGllY2VzIGFuZCAoMikgcmVjdXJzZSBvbiBlYWNoIGhhbGYuIElmIGl0IGlzIG5vdCwgdGhpcyBpc1xuICAvLyB0aGUgZW1wdHkgYXJyYXkgYW5kIG91ciBiYXNlIGNhc2UuXG5cbiAgaWYgKHAgPCByKSB7XG4gICAgLy8gKDEpIFBhcnRpdGlvbmluZy5cbiAgICAvL1xuICAgIC8vIFRoZSBwYXJ0aXRpb25pbmcgY2hvb3NlcyBhIHBpdm90IGJldHdlZW4gYHBgIGFuZCBgcmAgYW5kIG1vdmVzIGFsbFxuICAgIC8vIGVsZW1lbnRzIHRoYXQgYXJlIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgcGl2b3QgdG8gdGhlIGJlZm9yZSBpdCwgYW5kXG4gICAgLy8gYWxsIHRoZSBlbGVtZW50cyB0aGF0IGFyZSBncmVhdGVyIHRoYW4gaXQgYWZ0ZXIgaXQuIFRoZSBlZmZlY3QgaXMgdGhhdFxuICAgIC8vIG9uY2UgcGFydGl0aW9uIGlzIGRvbmUsIHRoZSBwaXZvdCBpcyBpbiB0aGUgZXhhY3QgcGxhY2UgaXQgd2lsbCBiZSB3aGVuXG4gICAgLy8gdGhlIGFycmF5IGlzIHB1dCBpbiBzb3J0ZWQgb3JkZXIsIGFuZCBpdCB3aWxsIG5vdCBuZWVkIHRvIGJlIG1vdmVkXG4gICAgLy8gYWdhaW4uIFRoaXMgcnVucyBpbiBPKG4pIHRpbWUuXG5cbiAgICAvLyBBbHdheXMgY2hvb3NlIGEgcmFuZG9tIHBpdm90IHNvIHRoYXQgYW4gaW5wdXQgYXJyYXkgd2hpY2ggaXMgcmV2ZXJzZVxuICAgIC8vIHNvcnRlZCBkb2VzIG5vdCBjYXVzZSBPKG5eMikgcnVubmluZyB0aW1lLlxuICAgIHZhciBwaXZvdEluZGV4ID0gcmFuZG9tSW50SW5SYW5nZShwLCByKTtcbiAgICB2YXIgaSA9IHAgLSAxO1xuXG4gICAgc3dhcChhcnksIHBpdm90SW5kZXgsIHIpO1xuICAgIHZhciBwaXZvdCA9IGFyeVtyXTtcblxuICAgIC8vIEltbWVkaWF0ZWx5IGFmdGVyIGBqYCBpcyBpbmNyZW1lbnRlZCBpbiB0aGlzIGxvb3AsIHRoZSBmb2xsb3dpbmcgaG9sZFxuICAgIC8vIHRydWU6XG4gICAgLy9cbiAgICAvLyAgICogRXZlcnkgZWxlbWVudCBpbiBgYXJ5W3AgLi4gaV1gIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0byB0aGUgcGl2b3QuXG4gICAgLy9cbiAgICAvLyAgICogRXZlcnkgZWxlbWVudCBpbiBgYXJ5W2krMSAuLiBqLTFdYCBpcyBncmVhdGVyIHRoYW4gdGhlIHBpdm90LlxuICAgIGZvciAodmFyIGogPSBwOyBqIDwgcjsgaisrKSB7XG4gICAgICBpZiAoY29tcGFyYXRvcihhcnlbal0sIHBpdm90KSA8PSAwKSB7XG4gICAgICAgIGkgKz0gMTtcbiAgICAgICAgc3dhcChhcnksIGksIGopO1xuICAgICAgfVxuICAgIH1cblxuICAgIHN3YXAoYXJ5LCBpICsgMSwgaik7XG4gICAgdmFyIHEgPSBpICsgMTtcblxuICAgIC8vICgyKSBSZWN1cnNlIG9uIGVhY2ggaGFsZi5cblxuICAgIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgcCwgcSAtIDEpO1xuICAgIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgcSArIDEsIHIpO1xuICB9XG59XG5cbi8qKlxuICogU29ydCB0aGUgZ2l2ZW4gYXJyYXkgaW4tcGxhY2Ugd2l0aCB0aGUgZ2l2ZW4gY29tcGFyYXRvciBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0FycmF5fSBhcnlcbiAqICAgICAgICBBbiBhcnJheSB0byBzb3J0LlxuICogQHBhcmFtIHtmdW5jdGlvbn0gY29tcGFyYXRvclxuICogICAgICAgIEZ1bmN0aW9uIHRvIHVzZSB0byBjb21wYXJlIHR3byBpdGVtcy5cbiAqL1xuZXhwb3J0cy5xdWlja1NvcnQgPSBmdW5jdGlvbiAoYXJ5LCBjb21wYXJhdG9yKSB7XG4gIGRvUXVpY2tTb3J0KGFyeSwgY29tcGFyYXRvciwgMCwgYXJ5Lmxlbmd0aCAtIDEpO1xufTtcbiIsIi8qIC0qLSBNb2RlOiBqczsganMtaW5kZW50LWxldmVsOiAyOyAtKi0gKi9cbi8qXG4gKiBDb3B5cmlnaHQgMjAxMSBNb3ppbGxhIEZvdW5kYXRpb24gYW5kIGNvbnRyaWJ1dG9yc1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgbGljZW5zZS4gU2VlIExJQ0VOU0Ugb3I6XG4gKiBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvQlNELTMtQ2xhdXNlXG4gKi9cblxudmFyIFNvdXJjZU1hcEdlbmVyYXRvciA9IHJlcXVpcmUoJy4vc291cmNlLW1hcC1nZW5lcmF0b3InKS5Tb3VyY2VNYXBHZW5lcmF0b3I7XG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vdXRpbCcpO1xuXG4vLyBNYXRjaGVzIGEgV2luZG93cy1zdHlsZSBgXFxyXFxuYCBuZXdsaW5lIG9yIGEgYFxcbmAgbmV3bGluZSB1c2VkIGJ5IGFsbCBvdGhlclxuLy8gb3BlcmF0aW5nIHN5c3RlbXMgdGhlc2UgZGF5cyAoY2FwdHVyaW5nIHRoZSByZXN1bHQpLlxudmFyIFJFR0VYX05FV0xJTkUgPSAvKFxccj9cXG4pLztcblxuLy8gTmV3bGluZSBjaGFyYWN0ZXIgY29kZSBmb3IgY2hhckNvZGVBdCgpIGNvbXBhcmlzb25zXG52YXIgTkVXTElORV9DT0RFID0gMTA7XG5cbi8vIFByaXZhdGUgc3ltYm9sIGZvciBpZGVudGlmeWluZyBgU291cmNlTm9kZWBzIHdoZW4gbXVsdGlwbGUgdmVyc2lvbnMgb2Zcbi8vIHRoZSBzb3VyY2UtbWFwIGxpYnJhcnkgYXJlIGxvYWRlZC4gVGhpcyBNVVNUIE5PVCBDSEFOR0UgYWNyb3NzXG4vLyB2ZXJzaW9ucyFcbnZhciBpc1NvdXJjZU5vZGUgPSBcIiQkJGlzU291cmNlTm9kZSQkJFwiO1xuXG4vKipcbiAqIFNvdXJjZU5vZGVzIHByb3ZpZGUgYSB3YXkgdG8gYWJzdHJhY3Qgb3ZlciBpbnRlcnBvbGF0aW5nL2NvbmNhdGVuYXRpbmdcbiAqIHNuaXBwZXRzIG9mIGdlbmVyYXRlZCBKYXZhU2NyaXB0IHNvdXJjZSBjb2RlIHdoaWxlIG1haW50YWluaW5nIHRoZSBsaW5lIGFuZFxuICogY29sdW1uIGluZm9ybWF0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUgb3JpZ2luYWwgc291cmNlIGNvZGUuXG4gKlxuICogQHBhcmFtIGFMaW5lIFRoZSBvcmlnaW5hbCBsaW5lIG51bWJlci5cbiAqIEBwYXJhbSBhQ29sdW1uIFRoZSBvcmlnaW5hbCBjb2x1bW4gbnVtYmVyLlxuICogQHBhcmFtIGFTb3VyY2UgVGhlIG9yaWdpbmFsIHNvdXJjZSdzIGZpbGVuYW1lLlxuICogQHBhcmFtIGFDaHVua3MgT3B0aW9uYWwuIEFuIGFycmF5IG9mIHN0cmluZ3Mgd2hpY2ggYXJlIHNuaXBwZXRzIG9mXG4gKiAgICAgICAgZ2VuZXJhdGVkIEpTLCBvciBvdGhlciBTb3VyY2VOb2Rlcy5cbiAqIEBwYXJhbSBhTmFtZSBUaGUgb3JpZ2luYWwgaWRlbnRpZmllci5cbiAqL1xuZnVuY3Rpb24gU291cmNlTm9kZShhTGluZSwgYUNvbHVtbiwgYVNvdXJjZSwgYUNodW5rcywgYU5hbWUpIHtcbiAgdGhpcy5jaGlsZHJlbiA9IFtdO1xuICB0aGlzLnNvdXJjZUNvbnRlbnRzID0ge307XG4gIHRoaXMubGluZSA9IGFMaW5lID09IG51bGwgPyBudWxsIDogYUxpbmU7XG4gIHRoaXMuY29sdW1uID0gYUNvbHVtbiA9PSBudWxsID8gbnVsbCA6IGFDb2x1bW47XG4gIHRoaXMuc291cmNlID0gYVNvdXJjZSA9PSBudWxsID8gbnVsbCA6IGFTb3VyY2U7XG4gIHRoaXMubmFtZSA9IGFOYW1lID09IG51bGwgPyBudWxsIDogYU5hbWU7XG4gIHRoaXNbaXNTb3VyY2VOb2RlXSA9IHRydWU7XG4gIGlmIChhQ2h1bmtzICE9IG51bGwpIHRoaXMuYWRkKGFDaHVua3MpO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBTb3VyY2VOb2RlIGZyb20gZ2VuZXJhdGVkIGNvZGUgYW5kIGEgU291cmNlTWFwQ29uc3VtZXIuXG4gKlxuICogQHBhcmFtIGFHZW5lcmF0ZWRDb2RlIFRoZSBnZW5lcmF0ZWQgY29kZVxuICogQHBhcmFtIGFTb3VyY2VNYXBDb25zdW1lciBUaGUgU291cmNlTWFwIGZvciB0aGUgZ2VuZXJhdGVkIGNvZGVcbiAqIEBwYXJhbSBhUmVsYXRpdmVQYXRoIE9wdGlvbmFsLiBUaGUgcGF0aCB0aGF0IHJlbGF0aXZlIHNvdXJjZXMgaW4gdGhlXG4gKiAgICAgICAgU291cmNlTWFwQ29uc3VtZXIgc2hvdWxkIGJlIHJlbGF0aXZlIHRvLlxuICovXG5Tb3VyY2VOb2RlLmZyb21TdHJpbmdXaXRoU291cmNlTWFwID1cbiAgZnVuY3Rpb24gU291cmNlTm9kZV9mcm9tU3RyaW5nV2l0aFNvdXJjZU1hcChhR2VuZXJhdGVkQ29kZSwgYVNvdXJjZU1hcENvbnN1bWVyLCBhUmVsYXRpdmVQYXRoKSB7XG4gICAgLy8gVGhlIFNvdXJjZU5vZGUgd2Ugd2FudCB0byBmaWxsIHdpdGggdGhlIGdlbmVyYXRlZCBjb2RlXG4gICAgLy8gYW5kIHRoZSBTb3VyY2VNYXBcbiAgICB2YXIgbm9kZSA9IG5ldyBTb3VyY2VOb2RlKCk7XG5cbiAgICAvLyBBbGwgZXZlbiBpbmRpY2VzIG9mIHRoaXMgYXJyYXkgYXJlIG9uZSBsaW5lIG9mIHRoZSBnZW5lcmF0ZWQgY29kZSxcbiAgICAvLyB3aGlsZSBhbGwgb2RkIGluZGljZXMgYXJlIHRoZSBuZXdsaW5lcyBiZXR3ZWVuIHR3byBhZGphY2VudCBsaW5lc1xuICAgIC8vIChzaW5jZSBgUkVHRVhfTkVXTElORWAgY2FwdHVyZXMgaXRzIG1hdGNoKS5cbiAgICAvLyBQcm9jZXNzZWQgZnJhZ21lbnRzIGFyZSBhY2Nlc3NlZCBieSBjYWxsaW5nIGBzaGlmdE5leHRMaW5lYC5cbiAgICB2YXIgcmVtYWluaW5nTGluZXMgPSBhR2VuZXJhdGVkQ29kZS5zcGxpdChSRUdFWF9ORVdMSU5FKTtcbiAgICB2YXIgcmVtYWluaW5nTGluZXNJbmRleCA9IDA7XG4gICAgdmFyIHNoaWZ0TmV4dExpbmUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsaW5lQ29udGVudHMgPSBnZXROZXh0TGluZSgpO1xuICAgICAgLy8gVGhlIGxhc3QgbGluZSBvZiBhIGZpbGUgbWlnaHQgbm90IGhhdmUgYSBuZXdsaW5lLlxuICAgICAgdmFyIG5ld0xpbmUgPSBnZXROZXh0TGluZSgpIHx8IFwiXCI7XG4gICAgICByZXR1cm4gbGluZUNvbnRlbnRzICsgbmV3TGluZTtcblxuICAgICAgZnVuY3Rpb24gZ2V0TmV4dExpbmUoKSB7XG4gICAgICAgIHJldHVybiByZW1haW5pbmdMaW5lc0luZGV4IDwgcmVtYWluaW5nTGluZXMubGVuZ3RoID9cbiAgICAgICAgICAgIHJlbWFpbmluZ0xpbmVzW3JlbWFpbmluZ0xpbmVzSW5kZXgrK10gOiB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIFdlIG5lZWQgdG8gcmVtZW1iZXIgdGhlIHBvc2l0aW9uIG9mIFwicmVtYWluaW5nTGluZXNcIlxuICAgIHZhciBsYXN0R2VuZXJhdGVkTGluZSA9IDEsIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSAwO1xuXG4gICAgLy8gVGhlIGdlbmVyYXRlIFNvdXJjZU5vZGVzIHdlIG5lZWQgYSBjb2RlIHJhbmdlLlxuICAgIC8vIFRvIGV4dHJhY3QgaXQgY3VycmVudCBhbmQgbGFzdCBtYXBwaW5nIGlzIHVzZWQuXG4gICAgLy8gSGVyZSB3ZSBzdG9yZSB0aGUgbGFzdCBtYXBwaW5nLlxuICAgIHZhciBsYXN0TWFwcGluZyA9IG51bGw7XG5cbiAgICBhU291cmNlTWFwQ29uc3VtZXIuZWFjaE1hcHBpbmcoZnVuY3Rpb24gKG1hcHBpbmcpIHtcbiAgICAgIGlmIChsYXN0TWFwcGluZyAhPT0gbnVsbCkge1xuICAgICAgICAvLyBXZSBhZGQgdGhlIGNvZGUgZnJvbSBcImxhc3RNYXBwaW5nXCIgdG8gXCJtYXBwaW5nXCI6XG4gICAgICAgIC8vIEZpcnN0IGNoZWNrIGlmIHRoZXJlIGlzIGEgbmV3IGxpbmUgaW4gYmV0d2Vlbi5cbiAgICAgICAgaWYgKGxhc3RHZW5lcmF0ZWRMaW5lIDwgbWFwcGluZy5nZW5lcmF0ZWRMaW5lKSB7XG4gICAgICAgICAgLy8gQXNzb2NpYXRlIGZpcnN0IGxpbmUgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgICBhZGRNYXBwaW5nV2l0aENvZGUobGFzdE1hcHBpbmcsIHNoaWZ0TmV4dExpbmUoKSk7XG4gICAgICAgICAgbGFzdEdlbmVyYXRlZExpbmUrKztcbiAgICAgICAgICBsYXN0R2VuZXJhdGVkQ29sdW1uID0gMDtcbiAgICAgICAgICAvLyBUaGUgcmVtYWluaW5nIGNvZGUgaXMgYWRkZWQgd2l0aG91dCBtYXBwaW5nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gVGhlcmUgaXMgbm8gbmV3IGxpbmUgaW4gYmV0d2Vlbi5cbiAgICAgICAgICAvLyBBc3NvY2lhdGUgdGhlIGNvZGUgYmV0d2VlbiBcImxhc3RHZW5lcmF0ZWRDb2x1bW5cIiBhbmRcbiAgICAgICAgICAvLyBcIm1hcHBpbmcuZ2VuZXJhdGVkQ29sdW1uXCIgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgICB2YXIgbmV4dExpbmUgPSByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4XSB8fCAnJztcbiAgICAgICAgICB2YXIgY29kZSA9IG5leHRMaW5lLnN1YnN0cigwLCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbiAtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgICAgcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF0gPSBuZXh0TGluZS5zdWJzdHIobWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4gLVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4pO1xuICAgICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcbiAgICAgICAgICBhZGRNYXBwaW5nV2l0aENvZGUobGFzdE1hcHBpbmcsIGNvZGUpO1xuICAgICAgICAgIC8vIE5vIG1vcmUgcmVtYWluaW5nIGNvZGUsIGNvbnRpbnVlXG4gICAgICAgICAgbGFzdE1hcHBpbmcgPSBtYXBwaW5nO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gV2UgYWRkIHRoZSBnZW5lcmF0ZWQgY29kZSB1bnRpbCB0aGUgZmlyc3QgbWFwcGluZ1xuICAgICAgLy8gdG8gdGhlIFNvdXJjZU5vZGUgd2l0aG91dCBhbnkgbWFwcGluZy5cbiAgICAgIC8vIEVhY2ggbGluZSBpcyBhZGRlZCBhcyBzZXBhcmF0ZSBzdHJpbmcuXG4gICAgICB3aGlsZSAobGFzdEdlbmVyYXRlZExpbmUgPCBtYXBwaW5nLmdlbmVyYXRlZExpbmUpIHtcbiAgICAgICAgbm9kZS5hZGQoc2hpZnROZXh0TGluZSgpKTtcbiAgICAgICAgbGFzdEdlbmVyYXRlZExpbmUrKztcbiAgICAgIH1cbiAgICAgIGlmIChsYXN0R2VuZXJhdGVkQ29sdW1uIDwgbWFwcGluZy5nZW5lcmF0ZWRDb2x1bW4pIHtcbiAgICAgICAgdmFyIG5leHRMaW5lID0gcmVtYWluaW5nTGluZXNbcmVtYWluaW5nTGluZXNJbmRleF0gfHwgJyc7XG4gICAgICAgIG5vZGUuYWRkKG5leHRMaW5lLnN1YnN0cigwLCBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbikpO1xuICAgICAgICByZW1haW5pbmdMaW5lc1tyZW1haW5pbmdMaW5lc0luZGV4XSA9IG5leHRMaW5lLnN1YnN0cihtYXBwaW5nLmdlbmVyYXRlZENvbHVtbik7XG4gICAgICAgIGxhc3RHZW5lcmF0ZWRDb2x1bW4gPSBtYXBwaW5nLmdlbmVyYXRlZENvbHVtbjtcbiAgICAgIH1cbiAgICAgIGxhc3RNYXBwaW5nID0gbWFwcGluZztcbiAgICB9LCB0aGlzKTtcbiAgICAvLyBXZSBoYXZlIHByb2Nlc3NlZCBhbGwgbWFwcGluZ3MuXG4gICAgaWYgKHJlbWFpbmluZ0xpbmVzSW5kZXggPCByZW1haW5pbmdMaW5lcy5sZW5ndGgpIHtcbiAgICAgIGlmIChsYXN0TWFwcGluZykge1xuICAgICAgICAvLyBBc3NvY2lhdGUgdGhlIHJlbWFpbmluZyBjb2RlIGluIHRoZSBjdXJyZW50IGxpbmUgd2l0aCBcImxhc3RNYXBwaW5nXCJcbiAgICAgICAgYWRkTWFwcGluZ1dpdGhDb2RlKGxhc3RNYXBwaW5nLCBzaGlmdE5leHRMaW5lKCkpO1xuICAgICAgfVxuICAgICAgLy8gYW5kIGFkZCB0aGUgcmVtYWluaW5nIGxpbmVzIHdpdGhvdXQgYW55IG1hcHBpbmdcbiAgICAgIG5vZGUuYWRkKHJlbWFpbmluZ0xpbmVzLnNwbGljZShyZW1haW5pbmdMaW5lc0luZGV4KS5qb2luKFwiXCIpKTtcbiAgICB9XG5cbiAgICAvLyBDb3B5IHNvdXJjZXNDb250ZW50IGludG8gU291cmNlTm9kZVxuICAgIGFTb3VyY2VNYXBDb25zdW1lci5zb3VyY2VzLmZvckVhY2goZnVuY3Rpb24gKHNvdXJjZUZpbGUpIHtcbiAgICAgIHZhciBjb250ZW50ID0gYVNvdXJjZU1hcENvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3Ioc291cmNlRmlsZSk7XG4gICAgICBpZiAoY29udGVudCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChhUmVsYXRpdmVQYXRoICE9IG51bGwpIHtcbiAgICAgICAgICBzb3VyY2VGaWxlID0gdXRpbC5qb2luKGFSZWxhdGl2ZVBhdGgsIHNvdXJjZUZpbGUpO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUuc2V0U291cmNlQ29udGVudChzb3VyY2VGaWxlLCBjb250ZW50KTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBub2RlO1xuXG4gICAgZnVuY3Rpb24gYWRkTWFwcGluZ1dpdGhDb2RlKG1hcHBpbmcsIGNvZGUpIHtcbiAgICAgIGlmIChtYXBwaW5nID09PSBudWxsIHx8IG1hcHBpbmcuc291cmNlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbm9kZS5hZGQoY29kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgc291cmNlID0gYVJlbGF0aXZlUGF0aFxuICAgICAgICAgID8gdXRpbC5qb2luKGFSZWxhdGl2ZVBhdGgsIG1hcHBpbmcuc291cmNlKVxuICAgICAgICAgIDogbWFwcGluZy5zb3VyY2U7XG4gICAgICAgIG5vZGUuYWRkKG5ldyBTb3VyY2VOb2RlKG1hcHBpbmcub3JpZ2luYWxMaW5lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBwaW5nLm9yaWdpbmFsQ29sdW1uLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcHBpbmcubmFtZSkpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBBZGQgYSBjaHVuayBvZiBnZW5lcmF0ZWQgSlMgdG8gdGhpcyBzb3VyY2Ugbm9kZS5cbiAqXG4gKiBAcGFyYW0gYUNodW5rIEEgc3RyaW5nIHNuaXBwZXQgb2YgZ2VuZXJhdGVkIEpTIGNvZGUsIGFub3RoZXIgaW5zdGFuY2Ugb2ZcbiAqICAgICAgICBTb3VyY2VOb2RlLCBvciBhbiBhcnJheSB3aGVyZSBlYWNoIG1lbWJlciBpcyBvbmUgb2YgdGhvc2UgdGhpbmdzLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX2FkZChhQ2h1bmspIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoYUNodW5rKSkge1xuICAgIGFDaHVuay5mb3JFYWNoKGZ1bmN0aW9uIChjaHVuaykge1xuICAgICAgdGhpcy5hZGQoY2h1bmspO1xuICAgIH0sIHRoaXMpO1xuICB9XG4gIGVsc2UgaWYgKGFDaHVua1tpc1NvdXJjZU5vZGVdIHx8IHR5cGVvZiBhQ2h1bmsgPT09IFwic3RyaW5nXCIpIHtcbiAgICBpZiAoYUNodW5rKSB7XG4gICAgICB0aGlzLmNoaWxkcmVuLnB1c2goYUNodW5rKTtcbiAgICB9XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgIFwiRXhwZWN0ZWQgYSBTb3VyY2VOb2RlLCBzdHJpbmcsIG9yIGFuIGFycmF5IG9mIFNvdXJjZU5vZGVzIGFuZCBzdHJpbmdzLiBHb3QgXCIgKyBhQ2h1bmtcbiAgICApO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBBZGQgYSBjaHVuayBvZiBnZW5lcmF0ZWQgSlMgdG8gdGhlIGJlZ2lubmluZyBvZiB0aGlzIHNvdXJjZSBub2RlLlxuICpcbiAqIEBwYXJhbSBhQ2h1bmsgQSBzdHJpbmcgc25pcHBldCBvZiBnZW5lcmF0ZWQgSlMgY29kZSwgYW5vdGhlciBpbnN0YW5jZSBvZlxuICogICAgICAgIFNvdXJjZU5vZGUsIG9yIGFuIGFycmF5IHdoZXJlIGVhY2ggbWVtYmVyIGlzIG9uZSBvZiB0aG9zZSB0aGluZ3MuXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnByZXBlbmQgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3ByZXBlbmQoYUNodW5rKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFDaHVuaykpIHtcbiAgICBmb3IgKHZhciBpID0gYUNodW5rLmxlbmd0aC0xOyBpID49IDA7IGktLSkge1xuICAgICAgdGhpcy5wcmVwZW5kKGFDaHVua1tpXSk7XG4gICAgfVxuICB9XG4gIGVsc2UgaWYgKGFDaHVua1tpc1NvdXJjZU5vZGVdIHx8IHR5cGVvZiBhQ2h1bmsgPT09IFwic3RyaW5nXCIpIHtcbiAgICB0aGlzLmNoaWxkcmVuLnVuc2hpZnQoYUNodW5rKTtcbiAgfVxuICBlbHNlIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgXCJFeHBlY3RlZCBhIFNvdXJjZU5vZGUsIHN0cmluZywgb3IgYW4gYXJyYXkgb2YgU291cmNlTm9kZXMgYW5kIHN0cmluZ3MuIEdvdCBcIiArIGFDaHVua1xuICAgICk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIFdhbGsgb3ZlciB0aGUgdHJlZSBvZiBKUyBzbmlwcGV0cyBpbiB0aGlzIG5vZGUgYW5kIGl0cyBjaGlsZHJlbi4gVGhlXG4gKiB3YWxraW5nIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmNlIGZvciBlYWNoIHNuaXBwZXQgb2YgSlMgYW5kIGlzIHBhc3NlZCB0aGF0XG4gKiBzbmlwcGV0IGFuZCB0aGUgaXRzIG9yaWdpbmFsIGFzc29jaWF0ZWQgc291cmNlJ3MgbGluZS9jb2x1bW4gbG9jYXRpb24uXG4gKlxuICogQHBhcmFtIGFGbiBUaGUgdHJhdmVyc2FsIGZ1bmN0aW9uLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gU291cmNlTm9kZV93YWxrKGFGbikge1xuICB2YXIgY2h1bms7XG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgY2h1bmsgPSB0aGlzLmNoaWxkcmVuW2ldO1xuICAgIGlmIChjaHVua1tpc1NvdXJjZU5vZGVdKSB7XG4gICAgICBjaHVuay53YWxrKGFGbik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKGNodW5rICE9PSAnJykge1xuICAgICAgICBhRm4oY2h1bmssIHsgc291cmNlOiB0aGlzLnNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgIGxpbmU6IHRoaXMubGluZSxcbiAgICAgICAgICAgICAgICAgICAgIGNvbHVtbjogdGhpcy5jb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vKipcbiAqIExpa2UgYFN0cmluZy5wcm90b3R5cGUuam9pbmAgZXhjZXB0IGZvciBTb3VyY2VOb2Rlcy4gSW5zZXJ0cyBgYVN0cmAgYmV0d2VlblxuICogZWFjaCBvZiBgdGhpcy5jaGlsZHJlbmAuXG4gKlxuICogQHBhcmFtIGFTZXAgVGhlIHNlcGFyYXRvci5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfam9pbihhU2VwKSB7XG4gIHZhciBuZXdDaGlsZHJlbjtcbiAgdmFyIGk7XG4gIHZhciBsZW4gPSB0aGlzLmNoaWxkcmVuLmxlbmd0aDtcbiAgaWYgKGxlbiA+IDApIHtcbiAgICBuZXdDaGlsZHJlbiA9IFtdO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW4tMTsgaSsrKSB7XG4gICAgICBuZXdDaGlsZHJlbi5wdXNoKHRoaXMuY2hpbGRyZW5baV0pO1xuICAgICAgbmV3Q2hpbGRyZW4ucHVzaChhU2VwKTtcbiAgICB9XG4gICAgbmV3Q2hpbGRyZW4ucHVzaCh0aGlzLmNoaWxkcmVuW2ldKTtcbiAgICB0aGlzLmNoaWxkcmVuID0gbmV3Q2hpbGRyZW47XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKipcbiAqIENhbGwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlIG9uIHRoZSB2ZXJ5IHJpZ2h0LW1vc3Qgc291cmNlIHNuaXBwZXQuIFVzZWZ1bFxuICogZm9yIHRyaW1taW5nIHdoaXRlc3BhY2UgZnJvbSB0aGUgZW5kIG9mIGEgc291cmNlIG5vZGUsIGV0Yy5cbiAqXG4gKiBAcGFyYW0gYVBhdHRlcm4gVGhlIHBhdHRlcm4gdG8gcmVwbGFjZS5cbiAqIEBwYXJhbSBhUmVwbGFjZW1lbnQgVGhlIHRoaW5nIHRvIHJlcGxhY2UgdGhlIHBhdHRlcm4gd2l0aC5cbiAqL1xuU291cmNlTm9kZS5wcm90b3R5cGUucmVwbGFjZVJpZ2h0ID0gZnVuY3Rpb24gU291cmNlTm9kZV9yZXBsYWNlUmlnaHQoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCkge1xuICB2YXIgbGFzdENoaWxkID0gdGhpcy5jaGlsZHJlblt0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDFdO1xuICBpZiAobGFzdENoaWxkW2lzU291cmNlTm9kZV0pIHtcbiAgICBsYXN0Q2hpbGQucmVwbGFjZVJpZ2h0KGFQYXR0ZXJuLCBhUmVwbGFjZW1lbnQpO1xuICB9XG4gIGVsc2UgaWYgKHR5cGVvZiBsYXN0Q2hpbGQgPT09ICdzdHJpbmcnKSB7XG4gICAgdGhpcy5jaGlsZHJlblt0aGlzLmNoaWxkcmVuLmxlbmd0aCAtIDFdID0gbGFzdENoaWxkLnJlcGxhY2UoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCk7XG4gIH1cbiAgZWxzZSB7XG4gICAgdGhpcy5jaGlsZHJlbi5wdXNoKCcnLnJlcGxhY2UoYVBhdHRlcm4sIGFSZXBsYWNlbWVudCkpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIHNvdXJjZSBjb250ZW50IGZvciBhIHNvdXJjZSBmaWxlLiBUaGlzIHdpbGwgYmUgYWRkZWQgdG8gdGhlIFNvdXJjZU1hcEdlbmVyYXRvclxuICogaW4gdGhlIHNvdXJjZXNDb250ZW50IGZpZWxkLlxuICpcbiAqIEBwYXJhbSBhU291cmNlRmlsZSBUaGUgZmlsZW5hbWUgb2YgdGhlIHNvdXJjZSBmaWxlXG4gKiBAcGFyYW0gYVNvdXJjZUNvbnRlbnQgVGhlIGNvbnRlbnQgb2YgdGhlIHNvdXJjZSBmaWxlXG4gKi9cblNvdXJjZU5vZGUucHJvdG90eXBlLnNldFNvdXJjZUNvbnRlbnQgPVxuICBmdW5jdGlvbiBTb3VyY2VOb2RlX3NldFNvdXJjZUNvbnRlbnQoYVNvdXJjZUZpbGUsIGFTb3VyY2VDb250ZW50KSB7XG4gICAgdGhpcy5zb3VyY2VDb250ZW50c1t1dGlsLnRvU2V0U3RyaW5nKGFTb3VyY2VGaWxlKV0gPSBhU291cmNlQ29udGVudDtcbiAgfTtcblxuLyoqXG4gKiBXYWxrIG92ZXIgdGhlIHRyZWUgb2YgU291cmNlTm9kZXMuIFRoZSB3YWxraW5nIGZ1bmN0aW9uIGlzIGNhbGxlZCBmb3IgZWFjaFxuICogc291cmNlIGZpbGUgY29udGVudCBhbmQgaXMgcGFzc2VkIHRoZSBmaWxlbmFtZSBhbmQgc291cmNlIGNvbnRlbnQuXG4gKlxuICogQHBhcmFtIGFGbiBUaGUgdHJhdmVyc2FsIGZ1bmN0aW9uLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS53YWxrU291cmNlQ29udGVudHMgPVxuICBmdW5jdGlvbiBTb3VyY2VOb2RlX3dhbGtTb3VyY2VDb250ZW50cyhhRm4pIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdGhpcy5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKHRoaXMuY2hpbGRyZW5baV1baXNTb3VyY2VOb2RlXSkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuW2ldLndhbGtTb3VyY2VDb250ZW50cyhhRm4pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBzb3VyY2VzID0gT2JqZWN0LmtleXModGhpcy5zb3VyY2VDb250ZW50cyk7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IHNvdXJjZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFGbih1dGlsLmZyb21TZXRTdHJpbmcoc291cmNlc1tpXSksIHRoaXMuc291cmNlQ29udGVudHNbc291cmNlc1tpXV0pO1xuICAgIH1cbiAgfTtcblxuLyoqXG4gKiBSZXR1cm4gdGhlIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIHNvdXJjZSBub2RlLiBXYWxrcyBvdmVyIHRoZSB0cmVlXG4gKiBhbmQgY29uY2F0ZW5hdGVzIGFsbCB0aGUgdmFyaW91cyBzbmlwcGV0cyB0b2dldGhlciB0byBvbmUgc3RyaW5nLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIFNvdXJjZU5vZGVfdG9TdHJpbmcoKSB7XG4gIHZhciBzdHIgPSBcIlwiO1xuICB0aGlzLndhbGsoZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgc3RyICs9IGNodW5rO1xuICB9KTtcbiAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgc291cmNlIG5vZGUgYWxvbmcgd2l0aCBhIHNvdXJjZVxuICogbWFwLlxuICovXG5Tb3VyY2VOb2RlLnByb3RvdHlwZS50b1N0cmluZ1dpdGhTb3VyY2VNYXAgPSBmdW5jdGlvbiBTb3VyY2VOb2RlX3RvU3RyaW5nV2l0aFNvdXJjZU1hcChhQXJncykge1xuICB2YXIgZ2VuZXJhdGVkID0ge1xuICAgIGNvZGU6IFwiXCIsXG4gICAgbGluZTogMSxcbiAgICBjb2x1bW46IDBcbiAgfTtcbiAgdmFyIG1hcCA9IG5ldyBTb3VyY2VNYXBHZW5lcmF0b3IoYUFyZ3MpO1xuICB2YXIgc291cmNlTWFwcGluZ0FjdGl2ZSA9IGZhbHNlO1xuICB2YXIgbGFzdE9yaWdpbmFsU291cmNlID0gbnVsbDtcbiAgdmFyIGxhc3RPcmlnaW5hbExpbmUgPSBudWxsO1xuICB2YXIgbGFzdE9yaWdpbmFsQ29sdW1uID0gbnVsbDtcbiAgdmFyIGxhc3RPcmlnaW5hbE5hbWUgPSBudWxsO1xuICB0aGlzLndhbGsoZnVuY3Rpb24gKGNodW5rLCBvcmlnaW5hbCkge1xuICAgIGdlbmVyYXRlZC5jb2RlICs9IGNodW5rO1xuICAgIGlmIChvcmlnaW5hbC5zb3VyY2UgIT09IG51bGxcbiAgICAgICAgJiYgb3JpZ2luYWwubGluZSAhPT0gbnVsbFxuICAgICAgICAmJiBvcmlnaW5hbC5jb2x1bW4gIT09IG51bGwpIHtcbiAgICAgIGlmKGxhc3RPcmlnaW5hbFNvdXJjZSAhPT0gb3JpZ2luYWwuc291cmNlXG4gICAgICAgICB8fCBsYXN0T3JpZ2luYWxMaW5lICE9PSBvcmlnaW5hbC5saW5lXG4gICAgICAgICB8fCBsYXN0T3JpZ2luYWxDb2x1bW4gIT09IG9yaWdpbmFsLmNvbHVtblxuICAgICAgICAgfHwgbGFzdE9yaWdpbmFsTmFtZSAhPT0gb3JpZ2luYWwubmFtZSkge1xuICAgICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgc291cmNlOiBvcmlnaW5hbC5zb3VyY2UsXG4gICAgICAgICAgb3JpZ2luYWw6IHtcbiAgICAgICAgICAgIGxpbmU6IG9yaWdpbmFsLmxpbmUsXG4gICAgICAgICAgICBjb2x1bW46IG9yaWdpbmFsLmNvbHVtblxuICAgICAgICAgIH0sXG4gICAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgICBsaW5lOiBnZW5lcmF0ZWQubGluZSxcbiAgICAgICAgICAgIGNvbHVtbjogZ2VuZXJhdGVkLmNvbHVtblxuICAgICAgICAgIH0sXG4gICAgICAgICAgbmFtZTogb3JpZ2luYWwubmFtZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG9yaWdpbmFsLnNvdXJjZTtcbiAgICAgIGxhc3RPcmlnaW5hbExpbmUgPSBvcmlnaW5hbC5saW5lO1xuICAgICAgbGFzdE9yaWdpbmFsQ29sdW1uID0gb3JpZ2luYWwuY29sdW1uO1xuICAgICAgbGFzdE9yaWdpbmFsTmFtZSA9IG9yaWdpbmFsLm5hbWU7XG4gICAgICBzb3VyY2VNYXBwaW5nQWN0aXZlID0gdHJ1ZTtcbiAgICB9IGVsc2UgaWYgKHNvdXJjZU1hcHBpbmdBY3RpdmUpIHtcbiAgICAgIG1hcC5hZGRNYXBwaW5nKHtcbiAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgbGluZTogZ2VuZXJhdGVkLmxpbmUsXG4gICAgICAgICAgY29sdW1uOiBnZW5lcmF0ZWQuY29sdW1uXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgbGFzdE9yaWdpbmFsU291cmNlID0gbnVsbDtcbiAgICAgIHNvdXJjZU1hcHBpbmdBY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gICAgZm9yICh2YXIgaWR4ID0gMCwgbGVuZ3RoID0gY2h1bmsubGVuZ3RoOyBpZHggPCBsZW5ndGg7IGlkeCsrKSB7XG4gICAgICBpZiAoY2h1bmsuY2hhckNvZGVBdChpZHgpID09PSBORVdMSU5FX0NPREUpIHtcbiAgICAgICAgZ2VuZXJhdGVkLmxpbmUrKztcbiAgICAgICAgZ2VuZXJhdGVkLmNvbHVtbiA9IDA7XG4gICAgICAgIC8vIE1hcHBpbmdzIGVuZCBhdCBlb2xcbiAgICAgICAgaWYgKGlkeCArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIGxhc3RPcmlnaW5hbFNvdXJjZSA9IG51bGw7XG4gICAgICAgICAgc291cmNlTWFwcGluZ0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZU1hcHBpbmdBY3RpdmUpIHtcbiAgICAgICAgICBtYXAuYWRkTWFwcGluZyh7XG4gICAgICAgICAgICBzb3VyY2U6IG9yaWdpbmFsLnNvdXJjZSxcbiAgICAgICAgICAgIG9yaWdpbmFsOiB7XG4gICAgICAgICAgICAgIGxpbmU6IG9yaWdpbmFsLmxpbmUsXG4gICAgICAgICAgICAgIGNvbHVtbjogb3JpZ2luYWwuY29sdW1uXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2VuZXJhdGVkOiB7XG4gICAgICAgICAgICAgIGxpbmU6IGdlbmVyYXRlZC5saW5lLFxuICAgICAgICAgICAgICBjb2x1bW46IGdlbmVyYXRlZC5jb2x1bW5cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuYW1lOiBvcmlnaW5hbC5uYW1lXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGdlbmVyYXRlZC5jb2x1bW4rKztcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICB0aGlzLndhbGtTb3VyY2VDb250ZW50cyhmdW5jdGlvbiAoc291cmNlRmlsZSwgc291cmNlQ29udGVudCkge1xuICAgIG1hcC5zZXRTb3VyY2VDb250ZW50KHNvdXJjZUZpbGUsIHNvdXJjZUNvbnRlbnQpO1xuICB9KTtcblxuICByZXR1cm4geyBjb2RlOiBnZW5lcmF0ZWQuY29kZSwgbWFwOiBtYXAgfTtcbn07XG5cbmV4cG9ydHMuU291cmNlTm9kZSA9IFNvdXJjZU5vZGU7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHdhcm5PbmNlO1xudmFyIHByaW50ZWQgPSB7fTtcblxuZnVuY3Rpb24gd2Fybk9uY2UobWVzc2FnZSkge1xuICBpZiAocHJpbnRlZFttZXNzYWdlXSkgcmV0dXJuO1xuICBwcmludGVkW21lc3NhZ2VdID0gdHJ1ZTtcblxuICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUud2Fybikge1xuICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5kaGNtNHRiMjVqWlM1bGN6WWlYU3dpYm1GdFpYTWlPbHNpY0hKcGJuUmxaQ0lzSW5kaGNtNVBibU5sSWl3aWJXVnpjMkZuWlNJc0ltTnZibk52YkdVaUxDSjNZWEp1SWwwc0ltMWhjSEJwYm1keklqb2lPenM3TzBGQlFVRXNTVUZCU1VFc1QwRkJUeXhIUVVGSExFVkJRV1E3TzBGQlJXVXNVMEZCVTBNc1VVRkJWQ3hEUVVGdFFrTXNUMEZCYmtJc1JVRkJORUk3UVVGRGVrTXNUVUZCU1VZc1QwRkJUeXhEUVVGRFJTeFBRVUZFTEVOQlFWZ3NSVUZCYzBJN1FVRkRkRUpHTEVWQlFVRkJMRTlCUVU4c1EwRkJRMFVzVDBGQlJDeERRVUZRTEVkQlFXMUNMRWxCUVc1Q096dEJRVVZCTEUxQlFVa3NUMEZCVDBNc1QwRkJVQ3hMUVVGdFFpeFhRVUZ1UWl4SlFVRnJRMEVzVDBGQlR5eERRVUZEUXl4SlFVRTVReXhGUVVGdlJEdEJRVU5zUkVRc1NVRkJRVUVzVDBGQlR5eERRVUZEUXl4SlFVRlNMRU5CUVdGR0xFOUJRV0k3UVVGRFJEdEJRVU5HSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaWJHVjBJSEJ5YVc1MFpXUWdQU0I3SUgxY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z2QyRnliazl1WTJVZ0tHMWxjM05oWjJVcElIdGNiaUFnYVdZZ0tIQnlhVzUwWldSYmJXVnpjMkZuWlYwcElISmxkSFZ5Ymx4dUlDQndjbWx1ZEdWa1cyMWxjM05oWjJWZElEMGdkSEoxWlZ4dVhHNGdJR2xtSUNoMGVYQmxiMllnWTI5dWMyOXNaU0FoUFQwZ0ozVnVaR1ZtYVc1bFpDY2dKaVlnWTI5dWMyOXNaUzUzWVhKdUtTQjdYRzRnSUNBZ1kyOXVjMjlzWlM1M1lYSnVLRzFsYzNOaFoyVXBYRzRnSUgxY2JuMWNiaUpkTENKbWFXeGxJam9pZDJGeWJpMXZibU5sTG1wekluMD1cbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3dhcm5pbmcgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3dhcm5pbmdcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbi8qKlxuICogUHJvdmlkZXMgdGhlIHJlc3VsdCBvZiB0aGUgUG9zdENTUyB0cmFuc2Zvcm1hdGlvbnMuXG4gKlxuICogQSBSZXN1bHQgaW5zdGFuY2UgaXMgcmV0dXJuZWQgYnkge0BsaW5rIExhenlSZXN1bHQjdGhlbn1cbiAqIG9yIHtAbGluayBSb290I3RvUmVzdWx0fSBtZXRob2RzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBwb3N0Y3NzKFthdXRvcHJlZml4ZXJdKS5wcm9jZXNzKGNzcykudGhlbihyZXN1bHQgPT4ge1xuICogIGNvbnNvbGUubG9nKHJlc3VsdC5jc3MpXG4gKiB9KVxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCByZXN1bHQyID0gcG9zdGNzcy5wYXJzZShjc3MpLnRvUmVzdWx0KClcbiAqL1xudmFyIFJlc3VsdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge1Byb2Nlc3Nvcn0gcHJvY2Vzc29yIFByb2Nlc3NvciB1c2VkIGZvciB0aGlzIHRyYW5zZm9ybWF0aW9uLlxuICAgKiBAcGFyYW0ge1Jvb3R9ICAgICAgcm9vdCAgICAgIFJvb3Qgbm9kZSBhZnRlciBhbGwgdHJhbnNmb3JtYXRpb25zLlxuICAgKiBAcGFyYW0ge3Byb2Nlc3NPcHRpb25zfSBvcHRzIE9wdGlvbnMgZnJvbSB0aGUge0BsaW5rIFByb2Nlc3NvciNwcm9jZXNzfVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yIHtAbGluayBSb290I3RvUmVzdWx0fS5cbiAgICovXG4gIGZ1bmN0aW9uIFJlc3VsdChwcm9jZXNzb3IsIHJvb3QsIG9wdHMpIHtcbiAgICAvKipcbiAgICAgKiBUaGUgUHJvY2Vzc29yIGluc3RhbmNlIHVzZWQgZm9yIHRoaXMgdHJhbnNmb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAdHlwZSB7UHJvY2Vzc29yfVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBmb3IgKGNvbnN0IHBsdWdpbiBvZiByZXN1bHQucHJvY2Vzc29yLnBsdWdpbnMpIHtcbiAgICAgKiAgIGlmIChwbHVnaW4ucG9zdGNzc1BsdWdpbiA9PT0gJ3Bvc3Rjc3MtYmFkJykge1xuICAgICAqICAgICB0aHJvdyAncG9zdGNzcy1nb29kIGlzIGluY29tcGF0aWJsZSB3aXRoIHBvc3Rjc3MtYmFkJ1xuICAgICAqICAgfVxuICAgICAqIH0pXG4gICAgICovXG4gICAgdGhpcy5wcm9jZXNzb3IgPSBwcm9jZXNzb3I7XG4gICAgLyoqXG4gICAgICogQ29udGFpbnMgbWVzc2FnZXMgZnJvbSBwbHVnaW5zIChlLmcuLCB3YXJuaW5ncyBvciBjdXN0b20gbWVzc2FnZXMpLlxuICAgICAqIEVhY2ggbWVzc2FnZSBzaG91bGQgaGF2ZSB0eXBlIGFuZCBwbHVnaW4gcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtNZXNzYWdlW119XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHBvc3Rjc3MucGx1Z2luKCdwb3N0Y3NzLW1pbi1icm93c2VyJywgKCkgPT4ge1xuICAgICAqICAgcmV0dXJuIChyb290LCByZXN1bHQpID0+IHtcbiAgICAgKiAgICAgY29uc3QgYnJvd3NlcnMgPSBkZXRlY3RNaW5Ccm93c2Vyc0J5Q2FuSVVzZShyb290KVxuICAgICAqICAgICByZXN1bHQubWVzc2FnZXMucHVzaCh7XG4gICAgICogICAgICAgdHlwZTogJ21pbi1icm93c2VyJyxcbiAgICAgKiAgICAgICBwbHVnaW46ICdwb3N0Y3NzLW1pbi1icm93c2VyJyxcbiAgICAgKiAgICAgICBicm93c2Vyc1xuICAgICAqICAgICB9KVxuICAgICAqICAgfVxuICAgICAqIH0pXG4gICAgICovXG5cbiAgICB0aGlzLm1lc3NhZ2VzID0gW107XG4gICAgLyoqXG4gICAgICogUm9vdCBub2RlIGFmdGVyIGFsbCB0cmFuc2Zvcm1hdGlvbnMuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7Um9vdH1cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogcm9vdC50b1Jlc3VsdCgpLnJvb3QgPT09IHJvb3RcbiAgICAgKi9cblxuICAgIHRoaXMucm9vdCA9IHJvb3Q7XG4gICAgLyoqXG4gICAgICogT3B0aW9ucyBmcm9tIHRoZSB7QGxpbmsgUHJvY2Vzc29yI3Byb2Nlc3N9IG9yIHtAbGluayBSb290I3RvUmVzdWx0fSBjYWxsXG4gICAgICogdGhhdCBwcm9kdWNlZCB0aGlzIFJlc3VsdCBpbnN0YW5jZS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtwcm9jZXNzT3B0aW9uc31cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogcm9vdC50b1Jlc3VsdChvcHRzKS5vcHRzID09PSBvcHRzXG4gICAgICovXG5cbiAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgIC8qKlxuICAgICAqIEEgQ1NTIHN0cmluZyByZXByZXNlbnRpbmcgb2Yge0BsaW5rIFJlc3VsdCNyb290fS5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHBvc3Rjc3MucGFyc2UoJ2F7fScpLnRvUmVzdWx0KCkuY3NzIC8vPT4gXCJhe31cIlxuICAgICAqL1xuXG4gICAgdGhpcy5jc3MgPSB1bmRlZmluZWQ7XG4gICAgLyoqXG4gICAgICogQW4gaW5zdGFuY2Ugb2YgYFNvdXJjZU1hcEdlbmVyYXRvcmAgY2xhc3MgZnJvbSB0aGUgYHNvdXJjZS1tYXBgIGxpYnJhcnksXG4gICAgICogcmVwcmVzZW50aW5nIGNoYW5nZXMgdG8gdGhlIHtAbGluayBSZXN1bHQjcm9vdH0gaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7U291cmNlTWFwR2VuZXJhdG9yfVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiByZXN1bHQubWFwLnRvSlNPTigpIC8vPT4geyB2ZXJzaW9uOiAzLCBmaWxlOiAnYS5jc3MnLCDigKYgfVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBpZiAocmVzdWx0Lm1hcCkge1xuICAgICAqICAgZnMud3JpdGVGaWxlU3luYyhyZXN1bHQub3B0cy50byArICcubWFwJywgcmVzdWx0Lm1hcC50b1N0cmluZygpKVxuICAgICAqIH1cbiAgICAgKi9cblxuICAgIHRoaXMubWFwID0gdW5kZWZpbmVkO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIGZvciBAe2xpbmsgUmVzdWx0I2Nzc30gY29udGVudC5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogcmVzdWx0ICsgJycgPT09IHJlc3VsdC5jc3NcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSBTdHJpbmcgcmVwcmVzZW50aW5nIG9mIHtAbGluayBSZXN1bHQjcm9vdH0uXG4gICAqL1xuXG5cbiAgdmFyIF9wcm90byA9IFJlc3VsdC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMuY3NzO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIHtAbGluayBXYXJuaW5nfSBhbmQgYWRkcyBpdFxuICAgKiB0byB7QGxpbmsgUmVzdWx0I21lc3NhZ2VzfS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgICAgICAgIFdhcm5pbmcgbWVzc2FnZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXSAgICAgIFdhcm5pbmcgb3B0aW9ucy5cbiAgICogQHBhcmFtIHtOb2RlfSAgIG9wdHMubm9kZSAgIENTUyBub2RlIHRoYXQgY2F1c2VkIHRoZSB3YXJuaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy53b3JkICAgV29yZCBpbiBDU1Mgc291cmNlIHRoYXQgY2F1c2VkIHRoZSB3YXJuaW5nLlxuICAgKiBAcGFyYW0ge251bWJlcn0gb3B0cy5pbmRleCAgSW5kZXggaW4gQ1NTIG5vZGUgc3RyaW5nIHRoYXQgY2F1c2VkXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgd2FybmluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMucGx1Z2luIE5hbWUgb2YgdGhlIHBsdWdpbiB0aGF0IGNyZWF0ZWRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgd2FybmluZy4ge0BsaW5rIFJlc3VsdCN3YXJufSBmaWxsc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBwcm9wZXJ0eSBhdXRvbWF0aWNhbGx5LlxuICAgKlxuICAgKiBAcmV0dXJuIHtXYXJuaW5nfSBDcmVhdGVkIHdhcm5pbmcuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLndhcm4gPSBmdW5jdGlvbiB3YXJuKHRleHQsIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgaWYgKCFvcHRzLnBsdWdpbikge1xuICAgICAgaWYgKHRoaXMubGFzdFBsdWdpbiAmJiB0aGlzLmxhc3RQbHVnaW4ucG9zdGNzc1BsdWdpbikge1xuICAgICAgICBvcHRzLnBsdWdpbiA9IHRoaXMubGFzdFBsdWdpbi5wb3N0Y3NzUGx1Z2luO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciB3YXJuaW5nID0gbmV3IF93YXJuaW5nLmRlZmF1bHQodGV4dCwgb3B0cyk7XG4gICAgdGhpcy5tZXNzYWdlcy5wdXNoKHdhcm5pbmcpO1xuICAgIHJldHVybiB3YXJuaW5nO1xuICB9XG4gIC8qKlxuICAgICAqIFJldHVybnMgd2FybmluZ3MgZnJvbSBwbHVnaW5zLiBGaWx0ZXJzIHtAbGluayBXYXJuaW5nfSBpbnN0YW5jZXNcbiAgICAgKiBmcm9tIHtAbGluayBSZXN1bHQjbWVzc2FnZXN9LlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiByZXN1bHQud2FybmluZ3MoKS5mb3JFYWNoKHdhcm4gPT4ge1xuICAgICAqICAgY29uc29sZS53YXJuKHdhcm4udG9TdHJpbmcoKSlcbiAgICAgKiB9KVxuICAgICAqXG4gICAgICogQHJldHVybiB7V2FybmluZ1tdfSBXYXJuaW5ncyBmcm9tIHBsdWdpbnMuXG4gICAgICovXG4gIDtcblxuICBfcHJvdG8ud2FybmluZ3MgPSBmdW5jdGlvbiB3YXJuaW5ncygpIHtcbiAgICByZXR1cm4gdGhpcy5tZXNzYWdlcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgIHJldHVybiBpLnR5cGUgPT09ICd3YXJuaW5nJztcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogQW4gYWxpYXMgZm9yIHRoZSB7QGxpbmsgUmVzdWx0I2Nzc30gcHJvcGVydHkuXG4gICAqIFVzZSBpdCB3aXRoIHN5bnRheGVzIHRoYXQgZ2VuZXJhdGUgbm9uLUNTUyBvdXRwdXQuXG4gICAqXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHJlc3VsdC5jc3MgPT09IHJlc3VsdC5jb250ZW50XG4gICAqL1xuICA7XG5cbiAgX2NyZWF0ZUNsYXNzKFJlc3VsdCwgW3tcbiAgICBrZXk6IFwiY29udGVudFwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuY3NzO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBSZXN1bHQ7XG59KCk7XG5cbnZhciBfZGVmYXVsdCA9IFJlc3VsdDtcbi8qKlxuICogQHR5cGVkZWYgIHtvYmplY3R9IE1lc3NhZ2VcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB0eXBlICAgTWVzc2FnZSB0eXBlLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBsdWdpbiBTb3VyY2UgUG9zdENTUyBwbHVnaW4gbmFtZS5cbiAqL1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbkpsYzNWc2RDNWxjellpWFN3aWJtRnRaWE1pT2xzaVVtVnpkV3gwSWl3aWNISnZZMlZ6YzI5eUlpd2ljbTl2ZENJc0ltOXdkSE1pTENKdFpYTnpZV2RsY3lJc0ltTnpjeUlzSW5WdVpHVm1hVzVsWkNJc0ltMWhjQ0lzSW5SdlUzUnlhVzVuSWl3aWQyRnliaUlzSW5SbGVIUWlMQ0p3YkhWbmFXNGlMQ0pzWVhOMFVHeDFaMmx1SWl3aWNHOXpkR056YzFCc2RXZHBiaUlzSW5kaGNtNXBibWNpTENKWFlYSnVhVzVuSWl3aWNIVnphQ0lzSW5kaGNtNXBibWR6SWl3aVptbHNkR1Z5SWl3aWFTSXNJblI1Y0dVaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN08wRkJRVUU3T3pzN096czdPMEZCUlVFN096czdPenM3T3pzN096czdPMGxCWTAxQkxFMDdPenRCUVVOS096czdPenM3UVVGTlFTeHJRa0ZCWVVNc1UwRkJZaXhGUVVGM1FrTXNTVUZCZUVJc1JVRkJPRUpETEVsQlFUbENMRVZCUVc5RE8wRkJRMnhET3pzN096czdPenM3T3pzN1FVRlpRU3hUUVVGTFJpeFRRVUZNTEVkQlFXbENRU3hUUVVGcVFqdEJRVU5CT3pzN096czdPenM3T3pzN096czdPenM3TzBGQmEwSkJMRk5CUVV0SExGRkJRVXdzUjBGQlowSXNSVUZCYUVJN1FVRkRRVHM3T3pzN096czdPMEZCVVVFc1UwRkJTMFlzU1VGQlRDeEhRVUZaUVN4SlFVRmFPMEZCUTBFN096czdPenM3T3pzN1FVRlRRU3hUUVVGTFF5eEpRVUZNTEVkQlFWbEJMRWxCUVZvN1FVRkRRVHM3T3pzN096czdPMEZCVVVFc1UwRkJTMFVzUjBGQlRDeEhRVUZYUXl4VFFVRllPMEZCUTBFN096czdPenM3T3pzN096czdPenRCUVdOQkxGTkJRVXRETEVkQlFVd3NSMEZCVjBRc1UwRkJXRHRCUVVORU8wRkJSVVE3T3pzN096czdPenM3T3p0VFFWRkJSU3hSTEVkQlFVRXNiMEpCUVZrN1FVRkRWaXhYUVVGUExFdEJRVXRJTEVkQlFWbzdRVUZEUkR0QlFVVkVPenM3T3pzN096czdPenM3T3pzN096czdVMEZuUWtGSkxFa3NSMEZCUVN4alFVRk5ReXhKUVVGT0xFVkJRVmxRTEVsQlFWb3NSVUZCZDBJN1FVRkJRU3hSUVVGYVFTeEpRVUZaTzBGQlFWcEJMRTFCUVVGQkxFbEJRVmtzUjBGQlRDeEZRVUZMTzBGQlFVRTdPMEZCUTNSQ0xGRkJRVWtzUTBGQlEwRXNTVUZCU1N4RFFVRkRVU3hOUVVGV0xFVkJRV3RDTzBGQlEyaENMRlZCUVVrc1MwRkJTME1zVlVGQlRDeEpRVUZ0UWl4TFFVRkxRU3hWUVVGTUxFTkJRV2RDUXl4aFFVRjJReXhGUVVGelJEdEJRVU53UkZZc1VVRkJRVUVzU1VGQlNTeERRVUZEVVN4TlFVRk1MRWRCUVdNc1MwRkJTME1zVlVGQlRDeERRVUZuUWtNc1lVRkJPVUk3UVVGRFJEdEJRVU5HT3p0QlFVVkVMRkZCUVVsRExFOUJRVThzUjBGQlJ5eEpRVUZKUXl4blFrRkJTaXhEUVVGWlRDeEpRVUZhTEVWQlFXdENVQ3hKUVVGc1FpeERRVUZrTzBGQlEwRXNVMEZCUzBNc1VVRkJUQ3hEUVVGaldTeEpRVUZrTEVOQlFXMUNSaXhQUVVGdVFqdEJRVVZCTEZkQlFVOUJMRTlCUVZBN1FVRkRSRHRCUVVWRU96czdPenM3T3pzN096czdPMU5CVjBGSExGRXNSMEZCUVN4dlFrRkJXVHRCUVVOV0xGZEJRVThzUzBGQlMySXNVVUZCVEN4RFFVRmpZeXhOUVVGa0xFTkJRWEZDTEZWQlFVRkRMRU5CUVVNN1FVRkJRU3hoUVVGSlFTeERRVUZETEVOQlFVTkRMRWxCUVVZc1MwRkJWeXhUUVVGbU8wRkJRVUVzUzBGQmRFSXNRMEZCVUR0QlFVTkVPMEZCUlVRN096czdPenM3T3pzN096czdkMEpCVTJVN1FVRkRZaXhoUVVGUExFdEJRVXRtTEVkQlFWbzdRVUZEUkRzN096czdPMlZCUjFsTUxFMDdRVUZGWmlJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYkltbHRjRzl5ZENCWFlYSnVhVzVuSUdaeWIyMGdKeTR2ZDJGeWJtbHVaeWRjYmx4dUx5b3FYRzRnS2lCUWNtOTJhV1JsY3lCMGFHVWdjbVZ6ZFd4MElHOW1JSFJvWlNCUWIzTjBRMU5USUhSeVlXNXpabTl5YldGMGFXOXVjeTVjYmlBcVhHNGdLaUJCSUZKbGMzVnNkQ0JwYm5OMFlXNWpaU0JwY3lCeVpYUjFjbTVsWkNCaWVTQjdRR3hwYm1zZ1RHRjZlVkpsYzNWc2RDTjBhR1Z1ZlZ4dUlDb2diM0lnZTBCc2FXNXJJRkp2YjNRamRHOVNaWE4xYkhSOUlHMWxkR2h2WkhNdVhHNGdLbHh1SUNvZ1FHVjRZVzF3YkdWY2JpQXFJSEJ2YzNSamMzTW9XMkYxZEc5d2NtVm1hWGhsY2wwcExuQnliMk5sYzNNb1kzTnpLUzUwYUdWdUtISmxjM1ZzZENBOVBpQjdYRzRnS2lBZ1kyOXVjMjlzWlM1c2IyY29jbVZ6ZFd4MExtTnpjeWxjYmlBcUlIMHBYRzRnS2x4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxSUdOdmJuTjBJSEpsYzNWc2RESWdQU0J3YjNOMFkzTnpMbkJoY25ObEtHTnpjeWt1ZEc5U1pYTjFiSFFvS1Z4dUlDb3ZYRzVqYkdGemN5QlNaWE4xYkhRZ2UxeHVJQ0F2S2lwY2JpQWdJQ29nUUhCaGNtRnRJSHRRY205alpYTnpiM0o5SUhCeWIyTmxjM052Y2lCUWNtOWpaWE56YjNJZ2RYTmxaQ0JtYjNJZ2RHaHBjeUIwY21GdWMyWnZjbTFoZEdsdmJpNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0U2IyOTBmU0FnSUNBZ0lISnZiM1FnSUNBZ0lDQlNiMjkwSUc1dlpHVWdZV1owWlhJZ1lXeHNJSFJ5WVc1elptOXliV0YwYVc5dWN5NWNiaUFnSUNvZ1FIQmhjbUZ0SUh0d2NtOWpaWE56VDNCMGFXOXVjMzBnYjNCMGN5QlBjSFJwYjI1eklHWnliMjBnZEdobElIdEFiR2x1YXlCUWNtOWpaWE56YjNJamNISnZZMlZ6YzMxY2JpQWdJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCdmNpQjdRR3hwYm1zZ1VtOXZkQ04wYjFKbGMzVnNkSDB1WEc0Z0lDQXFMMXh1SUNCamIyNXpkSEoxWTNSdmNpQW9jSEp2WTJWemMyOXlMQ0J5YjI5MExDQnZjSFJ6S1NCN1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1ZHaGxJRkJ5YjJObGMzTnZjaUJwYm5OMFlXNWpaU0IxYzJWa0lHWnZjaUIwYUdseklIUnlZVzV6Wm05eWJXRjBhVzl1TGx4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhSNWNHVWdlMUJ5YjJObGMzTnZjbjFjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJsZUdGdGNHeGxYRzRnSUNBZ0lDb2dabTl5SUNoamIyNXpkQ0J3YkhWbmFXNGdiMllnY21WemRXeDBMbkJ5YjJObGMzTnZjaTV3YkhWbmFXNXpLU0I3WEc0Z0lDQWdJQ29nSUNCcFppQW9jR3gxWjJsdUxuQnZjM1JqYzNOUWJIVm5hVzRnUFQwOUlDZHdiM04wWTNOekxXSmhaQ2NwSUh0Y2JpQWdJQ0FnS2lBZ0lDQWdkR2h5YjNjZ0ozQnZjM1JqYzNNdFoyOXZaQ0JwY3lCcGJtTnZiWEJoZEdsaWJHVWdkMmwwYUNCd2IzTjBZM056TFdKaFpDZGNiaUFnSUNBZ0tpQWdJSDFjYmlBZ0lDQWdLaUI5S1Z4dUlDQWdJQ0FxTDF4dUlDQWdJSFJvYVhNdWNISnZZMlZ6YzI5eUlEMGdjSEp2WTJWemMyOXlYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dRMjl1ZEdGcGJuTWdiV1Z6YzJGblpYTWdabkp2YlNCd2JIVm5hVzV6SUNobExtY3VMQ0IzWVhKdWFXNW5jeUJ2Y2lCamRYTjBiMjBnYldWemMyRm5aWE1wTGx4dUlDQWdJQ0FxSUVWaFkyZ2diV1Z6YzJGblpTQnphRzkxYkdRZ2FHRjJaU0IwZVhCbElHRnVaQ0J3YkhWbmFXNGdjSEp2Y0dWeWRHbGxjeTVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUIwZVhCbElIdE5aWE56WVdkbFcxMTlYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnSUNBcUlIQnZjM1JqYzNNdWNHeDFaMmx1S0Nkd2IzTjBZM056TFcxcGJpMWljbTkzYzJWeUp5d2dLQ2tnUFQ0Z2UxeHVJQ0FnSUNBcUlDQWdjbVYwZFhKdUlDaHliMjkwTENCeVpYTjFiSFFwSUQwK0lIdGNiaUFnSUNBZ0tpQWdJQ0FnWTI5dWMzUWdZbkp2ZDNObGNuTWdQU0JrWlhSbFkzUk5hVzVDY205M2MyVnljMEo1UTJGdVNWVnpaU2h5YjI5MEtWeHVJQ0FnSUNBcUlDQWdJQ0J5WlhOMWJIUXViV1Z6YzJGblpYTXVjSFZ6YUNoN1hHNGdJQ0FnSUNvZ0lDQWdJQ0FnZEhsd1pUb2dKMjFwYmkxaWNtOTNjMlZ5Snl4Y2JpQWdJQ0FnS2lBZ0lDQWdJQ0J3YkhWbmFXNDZJQ2R3YjNOMFkzTnpMVzFwYmkxaWNtOTNjMlZ5Snl4Y2JpQWdJQ0FnS2lBZ0lDQWdJQ0JpY205M2MyVnljMXh1SUNBZ0lDQXFJQ0FnSUNCOUtWeHVJQ0FnSUNBcUlDQWdmVnh1SUNBZ0lDQXFJSDBwWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1dFpYTnpZV2RsY3lBOUlGdGRYRzRnSUNBZ0x5b3FYRzRnSUNBZ0lDb2dVbTl2ZENCdWIyUmxJR0ZtZEdWeUlHRnNiQ0IwY21GdWMyWnZjbTFoZEdsdmJuTXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFkSGx3WlNCN1VtOXZkSDFjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUJsZUdGdGNHeGxYRzRnSUNBZ0lDb2djbTl2ZEM1MGIxSmxjM1ZzZENncExuSnZiM1FnUFQwOUlISnZiM1JjYmlBZ0lDQWdLaTljYmlBZ0lDQjBhR2x6TG5KdmIzUWdQU0J5YjI5MFhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1QzQjBhVzl1Y3lCbWNtOXRJSFJvWlNCN1FHeHBibXNnVUhKdlkyVnpjMjl5STNCeWIyTmxjM045SUc5eUlIdEFiR2x1YXlCU2IyOTBJM1J2VW1WemRXeDBmU0JqWVd4c1hHNGdJQ0FnSUNvZ2RHaGhkQ0J3Y205a2RXTmxaQ0IwYUdseklGSmxjM1ZzZENCcGJuTjBZVzVqWlM1Y2JpQWdJQ0FnS2x4dUlDQWdJQ0FxSUVCMGVYQmxJSHR3Y205alpYTnpUM0IwYVc5dWMzMWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FnSUNvZ2NtOXZkQzUwYjFKbGMzVnNkQ2h2Y0hSektTNXZjSFJ6SUQwOVBTQnZjSFJ6WEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1dmNIUnpJRDBnYjNCMGMxeHVJQ0FnSUM4cUtseHVJQ0FnSUNBcUlFRWdRMU5USUhOMGNtbHVaeUJ5WlhCeVpYTmxiblJwYm1jZ2IyWWdlMEJzYVc1cklGSmxjM1ZzZENOeWIyOTBmUzVjYmlBZ0lDQWdLbHh1SUNBZ0lDQXFJRUIwZVhCbElIdHpkSEpwYm1kOVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQVpYaGhiWEJzWlZ4dUlDQWdJQ0FxSUhCdmMzUmpjM011Y0dGeWMyVW9KMkY3ZlNjcExuUnZVbVZ6ZFd4MEtDa3VZM056SUM4dlBUNGdYQ0poZTMxY0lseHVJQ0FnSUNBcUwxeHVJQ0FnSUhSb2FYTXVZM056SUQwZ2RXNWtaV1pwYm1Wa1hHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1FXNGdhVzV6ZEdGdVkyVWdiMllnWUZOdmRYSmpaVTFoY0VkbGJtVnlZWFJ2Y21BZ1kyeGhjM01nWm5KdmJTQjBhR1VnWUhOdmRYSmpaUzF0WVhCZ0lHeHBZbkpoY25rc1hHNGdJQ0FnSUNvZ2NtVndjbVZ6Wlc1MGFXNW5JR05vWVc1blpYTWdkRzhnZEdobElIdEFiR2x1YXlCU1pYTjFiSFFqY205dmRIMGdhVzV6ZEdGdVkyVXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFkSGx3WlNCN1UyOTFjbU5sVFdGd1IyVnVaWEpoZEc5eWZWeHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ0FnS2lCeVpYTjFiSFF1YldGd0xuUnZTbE5QVGlncElDOHZQVDRnZXlCMlpYSnphVzl1T2lBekxDQm1hV3hsT2lBbllTNWpjM01uTENEaWdLWWdmVnh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNBZ0tpQnBaaUFvY21WemRXeDBMbTFoY0NrZ2UxeHVJQ0FnSUNBcUlDQWdabk11ZDNKcGRHVkdhV3hsVTNsdVl5aHlaWE4xYkhRdWIzQjBjeTUwYnlBcklDY3ViV0Z3Snl3Z2NtVnpkV3gwTG0xaGNDNTBiMU4wY21sdVp5Z3BLVnh1SUNBZ0lDQXFJSDFjYmlBZ0lDQWdLaTljYmlBZ0lDQjBhR2x6TG0xaGNDQTlJSFZ1WkdWbWFXNWxaRnh1SUNCOVhHNWNiaUFnTHlvcVhHNGdJQ0FxSUZKbGRIVnlibk1nWm05eUlFQjdiR2x1YXlCU1pYTjFiSFFqWTNOemZTQmpiMjUwWlc1MExseHVJQ0FnS2x4dUlDQWdLaUJBWlhoaGJYQnNaVnh1SUNBZ0tpQnlaWE4xYkhRZ0t5QW5KeUE5UFQwZ2NtVnpkV3gwTG1OemMxeHVJQ0FnS2x4dUlDQWdLaUJBY21WMGRYSnVJSHR6ZEhKcGJtZDlJRk4wY21sdVp5QnlaWEJ5WlhObGJuUnBibWNnYjJZZ2UwQnNhVzVySUZKbGMzVnNkQ055YjI5MGZTNWNiaUFnSUNvdlhHNGdJSFJ2VTNSeWFXNW5JQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amMzTmNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJEY21WaGRHVnpJR0Z1SUdsdWMzUmhibU5sSUc5bUlIdEFiR2x1YXlCWFlYSnVhVzVuZlNCaGJtUWdZV1JrY3lCcGRGeHVJQ0FnS2lCMGJ5QjdRR3hwYm1zZ1VtVnpkV3gwSTIxbGMzTmhaMlZ6ZlM1Y2JpQWdJQ3BjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlIUmxlSFFnSUNBZ0lDQWdJRmRoY201cGJtY2diV1Z6YzJGblpTNWNiaUFnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUZ0dmNIUnpYU0FnSUNBZ0lGZGhjbTVwYm1jZ2IzQjBhVzl1Y3k1Y2JpQWdJQ29nUUhCaGNtRnRJSHRPYjJSbGZTQWdJRzl3ZEhNdWJtOWtaU0FnSUVOVFV5QnViMlJsSUhSb1lYUWdZMkYxYzJWa0lIUm9aU0IzWVhKdWFXNW5MbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2IzQjBjeTUzYjNKa0lDQWdWMjl5WkNCcGJpQkRVMU1nYzI5MWNtTmxJSFJvWVhRZ1kyRjFjMlZrSUhSb1pTQjNZWEp1YVc1bkxseHVJQ0FnS2lCQWNHRnlZVzBnZTI1MWJXSmxjbjBnYjNCMGN5NXBibVJsZUNBZ1NXNWtaWGdnYVc0Z1ExTlRJRzV2WkdVZ2MzUnlhVzVuSUhSb1lYUWdZMkYxYzJWa1hHNGdJQ0FxSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHVWdkMkZ5Ym1sdVp5NWNiaUFnSUNvZ1FIQmhjbUZ0SUh0emRISnBibWQ5SUc5d2RITXVjR3gxWjJsdUlFNWhiV1VnYjJZZ2RHaGxJSEJzZFdkcGJpQjBhR0YwSUdOeVpXRjBaV1JjYmlBZ0lDb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNZ2QyRnlibWx1Wnk0Z2UwQnNhVzVySUZKbGMzVnNkQ04zWVhKdWZTQm1hV3hzYzF4dUlDQWdLaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5QndjbTl3WlhKMGVTQmhkWFJ2YldGMGFXTmhiR3g1TGx4dUlDQWdLbHh1SUNBZ0tpQkFjbVYwZFhKdUlIdFhZWEp1YVc1bmZTQkRjbVZoZEdWa0lIZGhjbTVwYm1jdVhHNGdJQ0FxTDF4dUlDQjNZWEp1SUNoMFpYaDBMQ0J2Y0hSeklEMGdleUI5S1NCN1hHNGdJQ0FnYVdZZ0tDRnZjSFJ6TG5Cc2RXZHBiaWtnZTF4dUlDQWdJQ0FnYVdZZ0tIUm9hWE11YkdGemRGQnNkV2RwYmlBbUppQjBhR2x6TG14aGMzUlFiSFZuYVc0dWNHOXpkR056YzFCc2RXZHBiaWtnZTF4dUlDQWdJQ0FnSUNCdmNIUnpMbkJzZFdkcGJpQTlJSFJvYVhNdWJHRnpkRkJzZFdkcGJpNXdiM04wWTNOelVHeDFaMmx1WEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1WEc0Z0lDQWdiR1YwSUhkaGNtNXBibWNnUFNCdVpYY2dWMkZ5Ym1sdVp5aDBaWGgwTENCdmNIUnpLVnh1SUNBZ0lIUm9hWE11YldWemMyRm5aWE11Y0hWemFDaDNZWEp1YVc1bktWeHVYRzRnSUNBZ2NtVjBkWEp1SUhkaGNtNXBibWRjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnSUNBcUlGSmxkSFZ5Ym5NZ2QyRnlibWx1WjNNZ1puSnZiU0J3YkhWbmFXNXpMaUJHYVd4MFpYSnpJSHRBYkdsdWF5QlhZWEp1YVc1bmZTQnBibk4wWVc1alpYTmNiaUFnSUNBZ0tpQm1jbTl0SUh0QWJHbHVheUJTWlhOMWJIUWpiV1Z6YzJGblpYTjlMbHh1SUNBZ0lDQXFYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNBZ0tpQnlaWE4xYkhRdWQyRnlibWx1WjNNb0tTNW1iM0pGWVdOb0tIZGhjbTRnUFQ0Z2UxeHVJQ0FnSUNBcUlDQWdZMjl1YzI5c1pTNTNZWEp1S0hkaGNtNHVkRzlUZEhKcGJtY29LU2xjYmlBZ0lDQWdLaUI5S1Z4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VjJGeWJtbHVaMXRkZlNCWFlYSnVhVzVuY3lCbWNtOXRJSEJzZFdkcGJuTXVYRzRnSUNBZ0lDb3ZYRzRnSUhkaGNtNXBibWR6SUNncElIdGNiaUFnSUNCeVpYUjFjbTRnZEdocGN5NXRaWE56WVdkbGN5NW1hV3gwWlhJb2FTQTlQaUJwTG5SNWNHVWdQVDA5SUNkM1lYSnVhVzVuSnlsY2JpQWdmVnh1WEc0Z0lDOHFLbHh1SUNBZ0tpQkJiaUJoYkdsaGN5Qm1iM0lnZEdobElIdEFiR2x1YXlCU1pYTjFiSFFqWTNOemZTQndjbTl3WlhKMGVTNWNiaUFnSUNvZ1ZYTmxJR2wwSUhkcGRHZ2djM2x1ZEdGNFpYTWdkR2hoZENCblpXNWxjbUYwWlNCdWIyNHRRMU5USUc5MWRIQjFkQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIUjVjR1VnZTNOMGNtbHVaMzFjYmlBZ0lDcGNiaUFnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ29nY21WemRXeDBMbU56Y3lBOVBUMGdjbVZ6ZFd4MExtTnZiblJsYm5SY2JpQWdJQ292WEc0Z0lHZGxkQ0JqYjI1MFpXNTBJQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1amMzTmNiaUFnZlZ4dWZWeHVYRzVsZUhCdmNuUWdaR1ZtWVhWc2RDQlNaWE4xYkhSY2JseHVMeW9xWEc0Z0tpQkFkSGx3WldSbFppQWdlMjlpYW1WamRIMGdUV1Z6YzJGblpWeHVJQ29nUUhCeWIzQmxjblI1SUh0emRISnBibWQ5SUhSNWNHVWdJQ0JOWlhOellXZGxJSFI1Y0dVdVhHNGdLaUJBY0hKdmNHVnlkSGtnZTNOMGNtbHVaMzBnY0d4MVoybHVJRk52ZFhKalpTQlFiM04wUTFOVElIQnNkV2RwYmlCdVlXMWxMbHh1SUNvdlhHNGlYU3dpWm1sc1pTSTZJbkpsYzNWc2RDNXFjeUo5XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgcGx1Z2lu4oCZcyB3YXJuaW5nLiBJdCBjYW4gYmUgY3JlYXRlZCB1c2luZyB7QGxpbmsgTm9kZSN3YXJufS5cbiAqXG4gKiBAZXhhbXBsZVxuICogaWYgKGRlY2wuaW1wb3J0YW50KSB7XG4gKiAgIGRlY2wud2FybihyZXN1bHQsICdBdm9pZCAhaW1wb3J0YW50JywgeyB3b3JkOiAnIWltcG9ydGFudCcgfSlcbiAqIH1cbiAqL1xudmFyIFdhcm5pbmcgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgICAgICAgIFdhcm5pbmcgbWVzc2FnZS5cbiAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXSAgICAgIFdhcm5pbmcgb3B0aW9ucy5cbiAgICogQHBhcmFtIHtOb2RlfSAgIG9wdHMubm9kZSAgIENTUyBub2RlIHRoYXQgY2F1c2VkIHRoZSB3YXJuaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy53b3JkICAgV29yZCBpbiBDU1Mgc291cmNlIHRoYXQgY2F1c2VkIHRoZSB3YXJuaW5nLlxuICAgKiBAcGFyYW0ge251bWJlcn0gb3B0cy5pbmRleCAgSW5kZXggaW4gQ1NTIG5vZGUgc3RyaW5nIHRoYXQgY2F1c2VkXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgd2FybmluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMucGx1Z2luIE5hbWUgb2YgdGhlIHBsdWdpbiB0aGF0IGNyZWF0ZWRcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgd2FybmluZy4ge0BsaW5rIFJlc3VsdCN3YXJufSBmaWxsc1xuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcyBwcm9wZXJ0eSBhdXRvbWF0aWNhbGx5LlxuICAgKi9cbiAgZnVuY3Rpb24gV2FybmluZyh0ZXh0LCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFR5cGUgdG8gZmlsdGVyIHdhcm5pbmdzIGZyb20ge0BsaW5rIFJlc3VsdCNtZXNzYWdlc30uXG4gICAgICogQWx3YXlzIGVxdWFsIHRvIGBcIndhcm5pbmdcImAuXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBjb25zdCBub25XYXJuaW5nID0gcmVzdWx0Lm1lc3NhZ2VzLmZpbHRlcihpID0+IGkudHlwZSAhPT0gJ3dhcm5pbmcnKVxuICAgICAqL1xuICAgIHRoaXMudHlwZSA9ICd3YXJuaW5nJztcbiAgICAvKipcbiAgICAgKiBUaGUgd2FybmluZyBtZXNzYWdlLlxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogd2FybmluZy50ZXh0IC8vPT4gJ1RyeSB0byBhdm9pZCAhaW1wb3J0YW50J1xuICAgICAqL1xuXG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcblxuICAgIGlmIChvcHRzLm5vZGUgJiYgb3B0cy5ub2RlLnNvdXJjZSkge1xuICAgICAgdmFyIHBvcyA9IG9wdHMubm9kZS5wb3NpdGlvbkJ5KG9wdHMpO1xuICAgICAgLyoqXG4gICAgICAgKiBMaW5lIGluIHRoZSBpbnB1dCBmaWxlIHdpdGggdGhpcyB3YXJuaW5n4oCZcyBzb3VyY2UuXG4gICAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAgICpcbiAgICAgICAqIEBleGFtcGxlXG4gICAgICAgKiB3YXJuaW5nLmxpbmUgLy89PiA1XG4gICAgICAgKi9cblxuICAgICAgdGhpcy5saW5lID0gcG9zLmxpbmU7XG4gICAgICAvKipcbiAgICAgICAqIENvbHVtbiBpbiB0aGUgaW5wdXQgZmlsZSB3aXRoIHRoaXMgd2FybmluZ+KAmXMgc291cmNlLlxuICAgICAgICpcbiAgICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICAgKlxuICAgICAgICogQGV4YW1wbGVcbiAgICAgICAqIHdhcm5pbmcuY29sdW1uIC8vPT4gNlxuICAgICAgICovXG5cbiAgICAgIHRoaXMuY29sdW1uID0gcG9zLmNvbHVtbjtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBvcHQgaW4gb3B0cykge1xuICAgICAgdGhpc1tvcHRdID0gb3B0c1tvcHRdO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogUmV0dXJucyBhIHdhcm5pbmcgcG9zaXRpb24gYW5kIG1lc3NhZ2UuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHdhcm5pbmcudG9TdHJpbmcoKSAvLz0+ICdwb3N0Y3NzLWxpbnQ6YS5jc3M6MTA6MTQ6IEF2b2lkICFpbXBvcnRhbnQnXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gV2FybmluZyBwb3NpdGlvbiBhbmQgbWVzc2FnZS5cbiAgICovXG5cblxuICB2YXIgX3Byb3RvID0gV2FybmluZy5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgaWYgKHRoaXMubm9kZSkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZS5lcnJvcih0aGlzLnRleHQsIHtcbiAgICAgICAgcGx1Z2luOiB0aGlzLnBsdWdpbixcbiAgICAgICAgaW5kZXg6IHRoaXMuaW5kZXgsXG4gICAgICAgIHdvcmQ6IHRoaXMud29yZFxuICAgICAgfSkubWVzc2FnZTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5wbHVnaW4pIHtcbiAgICAgIHJldHVybiB0aGlzLnBsdWdpbiArICc6ICcgKyB0aGlzLnRleHQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGV4dDtcbiAgfVxuICAvKipcbiAgICogQG1lbWJlcm9mIFdhcm5pbmcjXG4gICAqIEBtZW1iZXIge3N0cmluZ30gcGx1Z2luIFRoZSBuYW1lIG9mIHRoZSBwbHVnaW4gdGhhdCBjcmVhdGVkXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIGl0IHdpbGwgZmlsbCB0aGlzIHByb3BlcnR5IGF1dG9tYXRpY2FsbHkuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMgd2FybmluZy4gV2hlbiB5b3UgY2FsbCB7QGxpbmsgTm9kZSN3YXJufVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB3YXJuaW5nLnBsdWdpbiAvLz0+ICdwb3N0Y3NzLWltcG9ydGFudCdcbiAgICovXG5cbiAgLyoqXG4gICAqIEBtZW1iZXJvZiBXYXJuaW5nI1xuICAgKiBAbWVtYmVyIHtOb2RlfSBub2RlIENvbnRhaW5zIHRoZSBDU1Mgbm9kZSB0aGF0IGNhdXNlZCB0aGUgd2FybmluZy5cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogd2FybmluZy5ub2RlLnRvU3RyaW5nKCkgLy89PiAnY29sb3I6IHdoaXRlICFpbXBvcnRhbnQnXG4gICAqL1xuICA7XG5cbiAgcmV0dXJuIFdhcm5pbmc7XG59KCk7XG5cbnZhciBfZGVmYXVsdCA9IFdhcm5pbmc7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRoY201cGJtY3VaWE0ySWwwc0ltNWhiV1Z6SWpwYklsZGhjbTVwYm1jaUxDSjBaWGgwSWl3aWIzQjBjeUlzSW5SNWNHVWlMQ0p1YjJSbElpd2ljMjkxY21ObElpd2ljRzl6SWl3aWNHOXphWFJwYjI1Q2VTSXNJbXhwYm1VaUxDSmpiMngxYlc0aUxDSnZjSFFpTENKMGIxTjBjbWx1WnlJc0ltVnljbTl5SWl3aWNHeDFaMmx1SWl3aWFXNWtaWGdpTENKM2IzSmtJaXdpYldWemMyRm5aU0pkTENKdFlYQndhVzVuY3lJNklqczdPenM3UVVGQlFUczdPenM3T3pzN1NVRlJUVUVzVHpzN08wRkJRMG83T3pzN096czdPenM3TzBGQlYwRXNiVUpCUVdGRExFbEJRV0lzUlVGQmJVSkRMRWxCUVc1Q0xFVkJRU3RDTzBGQlFVRXNVVUZCV2tFc1NVRkJXVHRCUVVGYVFTeE5RVUZCUVN4SlFVRlpMRWRCUVV3c1JVRkJTenRCUVVGQk96dEJRVU0zUWpzN096czdPenM3TzBGQlUwRXNVMEZCUzBNc1NVRkJUQ3hIUVVGWkxGTkJRVm83UVVGRFFUczdPenM3T3pzN08wRkJVVUVzVTBGQlMwWXNTVUZCVEN4SFFVRlpRU3hKUVVGYU96dEJRVVZCTEZGQlFVbERMRWxCUVVrc1EwRkJRMFVzU1VGQlRDeEpRVUZoUml4SlFVRkpMRU5CUVVORkxFbEJRVXdzUTBGQlZVTXNUVUZCTTBJc1JVRkJiVU03UVVGRGFrTXNWVUZCU1VNc1IwRkJSeXhIUVVGSFNpeEpRVUZKTEVOQlFVTkZMRWxCUVV3c1EwRkJWVWNzVlVGQlZpeERRVUZ4UWt3c1NVRkJja0lzUTBGQlZqdEJRVU5CT3pzN096czdPenRCUVU5QkxGZEJRVXROTEVsQlFVd3NSMEZCV1VZc1IwRkJSeXhEUVVGRFJTeEpRVUZvUWp0QlFVTkJPenM3T3pzN096czdRVUZSUVN4WFFVRkxReXhOUVVGTUxFZEJRV05JTEVkQlFVY3NRMEZCUTBjc1RVRkJiRUk3UVVGRFJEczdRVUZGUkN4VFFVRkxMRWxCUVVsRExFZEJRVlFzU1VGQlowSlNMRWxCUVdoQ08wRkJRWE5DTEZkQlFVdFJMRWRCUVV3c1NVRkJXVklzU1VGQlNTeERRVUZEVVN4SFFVRkVMRU5CUVdoQ08wRkJRWFJDTzBGQlEwUTdRVUZGUkRzN096czdPenM3T3pzN08xTkJVVUZETEZFc1IwRkJRU3h2UWtGQldUdEJRVU5XTEZGQlFVa3NTMEZCUzFBc1NVRkJWQ3hGUVVGbE8wRkJRMklzWVVGQlR5eExRVUZMUVN4SlFVRk1MRU5CUVZWUkxFdEJRVllzUTBGQlowSXNTMEZCUzFnc1NVRkJja0lzUlVGQk1rSTdRVUZEYUVOWkxGRkJRVUZCTEUxQlFVMHNSVUZCUlN4TFFVRkxRU3hOUVVSdFFqdEJRVVZvUTBNc1VVRkJRVUVzUzBGQlN5eEZRVUZGTEV0QlFVdEJMRXRCUm05Q08wRkJSMmhEUXl4UlFVRkJRU3hKUVVGSkxFVkJRVVVzUzBGQlMwRTdRVUZJY1VJc1QwRkJNMElzUlVGSlNrTXNUMEZLU0R0QlFVdEVPenRCUVVWRUxGRkJRVWtzUzBGQlMwZ3NUVUZCVkN4RlFVRnBRanRCUVVObUxHRkJRVThzUzBGQlMwRXNUVUZCVEN4SFFVRmpMRWxCUVdRc1IwRkJjVUlzUzBGQlMxb3NTVUZCYWtNN1FVRkRSRHM3UVVGRlJDeFhRVUZQTEV0QlFVdEJMRWxCUVZvN1FVRkRSRHRCUVVWRU96czdPenM3T3pzN08wRkJWVUU3T3pzN096czdPenM3T3p0bFFWTmhSQ3hQSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCU1pYQnlaWE5sYm5SeklHRWdjR3gxWjJsdTRvQ1pjeUIzWVhKdWFXNW5MaUJKZENCallXNGdZbVVnWTNKbFlYUmxaQ0IxYzJsdVp5QjdRR3hwYm1zZ1RtOWtaU04zWVhKdWZTNWNiaUFxWEc0Z0tpQkFaWGhoYlhCc1pWeHVJQ29nYVdZZ0tHUmxZMnd1YVcxd2IzSjBZVzUwS1NCN1hHNGdLaUFnSUdSbFkyd3VkMkZ5YmloeVpYTjFiSFFzSUNkQmRtOXBaQ0FoYVcxd2IzSjBZVzUwSnl3Z2V5QjNiM0prT2lBbklXbHRjRzl5ZEdGdWRDY2dmU2xjYmlBcUlIMWNiaUFxTDF4dVkyeGhjM01nVjJGeWJtbHVaeUI3WEc0Z0lDOHFLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ2RHVjRkQ0FnSUNBZ0lDQWdWMkZ5Ym1sdVp5QnRaWE56WVdkbExseHVJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnVzI5d2RITmRJQ0FnSUNBZ1YyRnlibWx1WnlCdmNIUnBiMjV6TGx4dUlDQWdLaUJBY0dGeVlXMGdlMDV2WkdWOUlDQWdiM0IwY3k1dWIyUmxJQ0FnUTFOVElHNXZaR1VnZEdoaGRDQmpZWFZ6WldRZ2RHaGxJSGRoY201cGJtY3VYRzRnSUNBcUlFQndZWEpoYlNCN2MzUnlhVzVuZlNCdmNIUnpMbmR2Y21RZ0lDQlhiM0prSUdsdUlFTlRVeUJ6YjNWeVkyVWdkR2hoZENCallYVnpaV1FnZEdobElIZGhjbTVwYm1jdVhHNGdJQ0FxSUVCd1lYSmhiU0I3Ym5WdFltVnlmU0J2Y0hSekxtbHVaR1Y0SUNCSmJtUmxlQ0JwYmlCRFUxTWdibTlrWlNCemRISnBibWNnZEdoaGRDQmpZWFZ6WldSY2JpQWdJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb1pTQjNZWEp1YVc1bkxseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnYjNCMGN5NXdiSFZuYVc0Z1RtRnRaU0J2WmlCMGFHVWdjR3gxWjJsdUlIUm9ZWFFnWTNKbFlYUmxaRnh1SUNBZ0tpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3lCM1lYSnVhVzVuTGlCN1FHeHBibXNnVW1WemRXeDBJM2RoY201OUlHWnBiR3h6WEc0Z0lDQXFJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdseklIQnliM0JsY25SNUlHRjFkRzl0WVhScFkyRnNiSGt1WEc0Z0lDQXFMMXh1SUNCamIyNXpkSEoxWTNSdmNpQW9kR1Y0ZEN3Z2IzQjBjeUE5SUhzZ2ZTa2dlMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlI1Y0dVZ2RHOGdabWxzZEdWeUlIZGhjbTVwYm1keklHWnliMjBnZTBCc2FXNXJJRkpsYzNWc2RDTnRaWE56WVdkbGMzMHVYRzRnSUNBZ0lDb2dRV3gzWVhseklHVnhkV0ZzSUhSdklHQmNJbmRoY201cGJtZGNJbUF1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBZEhsd1pTQjdjM1J5YVc1bmZWeHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ0FnS2lCamIyNXpkQ0J1YjI1WFlYSnVhVzVuSUQwZ2NtVnpkV3gwTG0xbGMzTmhaMlZ6TG1acGJIUmxjaWhwSUQwK0lHa3VkSGx3WlNBaFBUMGdKM2RoY201cGJtY25LVnh1SUNBZ0lDQXFMMXh1SUNBZ0lIUm9hWE11ZEhsd1pTQTlJQ2QzWVhKdWFXNW5KMXh1SUNBZ0lDOHFLbHh1SUNBZ0lDQXFJRlJvWlNCM1lYSnVhVzVuSUcxbGMzTmhaMlV1WEc0Z0lDQWdJQ3BjYmlBZ0lDQWdLaUJBZEhsd1pTQjdjM1J5YVc1bmZWeHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ0FnS2lCM1lYSnVhVzVuTG5SbGVIUWdMeTg5UGlBblZISjVJSFJ2SUdGMmIybGtJQ0ZwYlhCdmNuUmhiblFuWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1MFpYaDBJRDBnZEdWNGRGeHVYRzRnSUNBZ2FXWWdLRzl3ZEhNdWJtOWtaU0FtSmlCdmNIUnpMbTV2WkdVdWMyOTFjbU5sS1NCN1hHNGdJQ0FnSUNCc1pYUWdjRzl6SUQwZ2IzQjBjeTV1YjJSbExuQnZjMmwwYVc5dVFua29iM0IwY3lsY2JpQWdJQ0FnSUM4cUtseHVJQ0FnSUNBZ0lDb2dUR2x1WlNCcGJpQjBhR1VnYVc1d2RYUWdabWxzWlNCM2FYUm9JSFJvYVhNZ2QyRnlibWx1WitLQW1YTWdjMjkxY21ObExseHVJQ0FnSUNBZ0lDb2dRSFI1Y0dVZ2UyNTFiV0psY24xY2JpQWdJQ0FnSUNBcVhHNGdJQ0FnSUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnSUNBZ0lDb2dkMkZ5Ym1sdVp5NXNhVzVsSUM4dlBUNGdOVnh1SUNBZ0lDQWdJQ292WEc0Z0lDQWdJQ0IwYUdsekxteHBibVVnUFNCd2IzTXViR2x1WlZ4dUlDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0tpQkRiMngxYlc0Z2FXNGdkR2hsSUdsdWNIVjBJR1pwYkdVZ2QybDBhQ0IwYUdseklIZGhjbTVwYm1maWdKbHpJSE52ZFhKalpTNWNiaUFnSUNBZ0lDQXFYRzRnSUNBZ0lDQWdLaUJBZEhsd1pTQjdiblZ0WW1WeWZWeHVJQ0FnSUNBZ0lDcGNiaUFnSUNBZ0lDQXFJRUJsZUdGdGNHeGxYRzRnSUNBZ0lDQWdLaUIzWVhKdWFXNW5MbU52YkhWdGJpQXZMejArSURaY2JpQWdJQ0FnSUNBcUwxeHVJQ0FnSUNBZ2RHaHBjeTVqYjJ4MWJXNGdQU0J3YjNNdVkyOXNkVzF1WEc0Z0lDQWdmVnh1WEc0Z0lDQWdabTl5SUNoc1pYUWdiM0IwSUdsdUlHOXdkSE1wSUhSb2FYTmJiM0IwWFNBOUlHOXdkSE5iYjNCMFhWeHVJQ0I5WEc1Y2JpQWdMeW9xWEc0Z0lDQXFJRkpsZEhWeWJuTWdZU0IzWVhKdWFXNW5JSEJ2YzJsMGFXOXVJR0Z1WkNCdFpYTnpZV2RsTGx4dUlDQWdLbHh1SUNBZ0tpQkFaWGhoYlhCc1pWeHVJQ0FnS2lCM1lYSnVhVzVuTG5SdlUzUnlhVzVuS0NrZ0x5ODlQaUFuY0c5emRHTnpjeTFzYVc1ME9tRXVZM056T2pFd09qRTBPaUJCZG05cFpDQWhhVzF3YjNKMFlXNTBKMXh1SUNBZ0tseHVJQ0FnS2lCQWNtVjBkWEp1SUh0emRISnBibWQ5SUZkaGNtNXBibWNnY0c5emFYUnBiMjRnWVc1a0lHMWxjM05oWjJVdVhHNGdJQ0FxTDF4dUlDQjBiMU4wY21sdVp5QW9LU0I3WEc0Z0lDQWdhV1lnS0hSb2FYTXVibTlrWlNrZ2UxeHVJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVibTlrWlM1bGNuSnZjaWgwYUdsekxuUmxlSFFzSUh0Y2JpQWdJQ0FnSUNBZ2NHeDFaMmx1T2lCMGFHbHpMbkJzZFdkcGJpeGNiaUFnSUNBZ0lDQWdhVzVrWlhnNklIUm9hWE11YVc1a1pYZ3NYRzRnSUNBZ0lDQWdJSGR2Y21RNklIUm9hWE11ZDI5eVpGeHVJQ0FnSUNBZ2ZTa3ViV1Z6YzJGblpWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaDBhR2x6TG5Cc2RXZHBiaWtnZTF4dUlDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWNHeDFaMmx1SUNzZ0p6b2dKeUFySUhSb2FYTXVkR1Y0ZEZ4dUlDQWdJSDFjYmx4dUlDQWdJSEpsZEhWeWJpQjBhR2x6TG5SbGVIUmNiaUFnZlZ4dVhHNGdJQzhxS2x4dUlDQWdLaUJBYldWdFltVnliMllnVjJGeWJtbHVaeU5jYmlBZ0lDb2dRRzFsYldKbGNpQjdjM1J5YVc1bmZTQndiSFZuYVc0Z1ZHaGxJRzVoYldVZ2IyWWdkR2hsSUhCc2RXZHBiaUIwYUdGMElHTnlaV0YwWldSY2JpQWdJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhWFFnZDJsc2JDQm1hV3hzSUhSb2FYTWdjSEp2Y0dWeWRIa2dZWFYwYjIxaGRHbGpZV3hzZVM1Y2JpQWdJQ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3lCM1lYSnVhVzVuTGlCWGFHVnVJSGx2ZFNCallXeHNJSHRBYkdsdWF5Qk9iMlJsSTNkaGNtNTlYRzRnSUNBcVhHNGdJQ0FxSUVCbGVHRnRjR3hsWEc0Z0lDQXFJSGRoY201cGJtY3VjR3gxWjJsdUlDOHZQVDRnSjNCdmMzUmpjM010YVcxd2IzSjBZVzUwSjF4dUlDQWdLaTljYmx4dUlDQXZLaXBjYmlBZ0lDb2dRRzFsYldKbGNtOW1JRmRoY201cGJtY2pYRzRnSUNBcUlFQnRaVzFpWlhJZ2UwNXZaR1Y5SUc1dlpHVWdRMjl1ZEdGcGJuTWdkR2hsSUVOVFV5QnViMlJsSUhSb1lYUWdZMkYxYzJWa0lIUm9aU0IzWVhKdWFXNW5MbHh1SUNBZ0tseHVJQ0FnS2lCQVpYaGhiWEJzWlZ4dUlDQWdLaUIzWVhKdWFXNW5MbTV2WkdVdWRHOVRkSEpwYm1jb0tTQXZMejArSUNkamIyeHZjam9nZDJocGRHVWdJV2x0Y0c5eWRHRnVkQ2RjYmlBZ0lDb3ZYRzU5WEc1Y2JtVjRjRzl5ZENCa1pXWmhkV3gwSUZkaGNtNXBibWRjYmlKZExDSm1hV3hsSWpvaWQyRnlibWx1Wnk1cWN5SjlcbiIsIlwidXNlIHN0cmljdFwiO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2RlY2xhcmF0aW9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9kZWNsYXJhdGlvblwiKSk7XG5cbnZhciBfdG9rZW5pemUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Rva2VuaXplXCIpKTtcblxudmFyIF9jb21tZW50ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jb21tZW50XCIpKTtcblxudmFyIF9hdFJ1bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2F0LXJ1bGVcIikpO1xuXG52YXIgX3Jvb3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3Jvb3RcIikpO1xuXG52YXIgX3J1bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL3J1bGVcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgUGFyc2VyID1cbi8qI19fUFVSRV9fKi9cbmZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUGFyc2VyKGlucHV0KSB7XG4gICAgdGhpcy5pbnB1dCA9IGlucHV0O1xuICAgIHRoaXMucm9vdCA9IG5ldyBfcm9vdC5kZWZhdWx0KCk7XG4gICAgdGhpcy5jdXJyZW50ID0gdGhpcy5yb290O1xuICAgIHRoaXMuc3BhY2VzID0gJyc7XG4gICAgdGhpcy5zZW1pY29sb24gPSBmYWxzZTtcbiAgICB0aGlzLmNyZWF0ZVRva2VuaXplcigpO1xuICAgIHRoaXMucm9vdC5zb3VyY2UgPSB7XG4gICAgICBpbnB1dDogaW5wdXQsXG4gICAgICBzdGFydDoge1xuICAgICAgICBsaW5lOiAxLFxuICAgICAgICBjb2x1bW46IDFcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFBhcnNlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNyZWF0ZVRva2VuaXplciA9IGZ1bmN0aW9uIGNyZWF0ZVRva2VuaXplcigpIHtcbiAgICB0aGlzLnRva2VuaXplciA9ICgwLCBfdG9rZW5pemUuZGVmYXVsdCkodGhpcy5pbnB1dCk7XG4gIH07XG5cbiAgX3Byb3RvLnBhcnNlID0gZnVuY3Rpb24gcGFyc2UoKSB7XG4gICAgdmFyIHRva2VuO1xuXG4gICAgd2hpbGUgKCF0aGlzLnRva2VuaXplci5lbmRPZkZpbGUoKSkge1xuICAgICAgdG9rZW4gPSB0aGlzLnRva2VuaXplci5uZXh0VG9rZW4oKTtcblxuICAgICAgc3dpdGNoICh0b2tlblswXSkge1xuICAgICAgICBjYXNlICdzcGFjZSc6XG4gICAgICAgICAgdGhpcy5zcGFjZXMgKz0gdG9rZW5bMV07XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnOyc6XG4gICAgICAgICAgdGhpcy5mcmVlU2VtaWNvbG9uKHRva2VuKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICd9JzpcbiAgICAgICAgICB0aGlzLmVuZCh0b2tlbik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAnY29tbWVudCc6XG4gICAgICAgICAgdGhpcy5jb21tZW50KHRva2VuKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlICdhdC13b3JkJzpcbiAgICAgICAgICB0aGlzLmF0cnVsZSh0b2tlbik7XG4gICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAneyc6XG4gICAgICAgICAgdGhpcy5lbXB0eVJ1bGUodG9rZW4pO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhpcy5vdGhlcih0b2tlbik7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5lbmRGaWxlKCk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbW1lbnQgPSBmdW5jdGlvbiBjb21tZW50KHRva2VuKSB7XG4gICAgdmFyIG5vZGUgPSBuZXcgX2NvbW1lbnQuZGVmYXVsdCgpO1xuICAgIHRoaXMuaW5pdChub2RlLCB0b2tlblsyXSwgdG9rZW5bM10pO1xuICAgIG5vZGUuc291cmNlLmVuZCA9IHtcbiAgICAgIGxpbmU6IHRva2VuWzRdLFxuICAgICAgY29sdW1uOiB0b2tlbls1XVxuICAgIH07XG4gICAgdmFyIHRleHQgPSB0b2tlblsxXS5zbGljZSgyLCAtMik7XG5cbiAgICBpZiAoL15cXHMqJC8udGVzdCh0ZXh0KSkge1xuICAgICAgbm9kZS50ZXh0ID0gJyc7XG4gICAgICBub2RlLnJhd3MubGVmdCA9IHRleHQ7XG4gICAgICBub2RlLnJhd3MucmlnaHQgPSAnJztcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIG1hdGNoID0gdGV4dC5tYXRjaCgvXihcXHMqKShbXl0qW15cXHNdKShcXHMqKSQvKTtcbiAgICAgIG5vZGUudGV4dCA9IG1hdGNoWzJdO1xuICAgICAgbm9kZS5yYXdzLmxlZnQgPSBtYXRjaFsxXTtcbiAgICAgIG5vZGUucmF3cy5yaWdodCA9IG1hdGNoWzNdO1xuICAgIH1cbiAgfTtcblxuICBfcHJvdG8uZW1wdHlSdWxlID0gZnVuY3Rpb24gZW1wdHlSdWxlKHRva2VuKSB7XG4gICAgdmFyIG5vZGUgPSBuZXcgX3J1bGUuZGVmYXVsdCgpO1xuICAgIHRoaXMuaW5pdChub2RlLCB0b2tlblsyXSwgdG9rZW5bM10pO1xuICAgIG5vZGUuc2VsZWN0b3IgPSAnJztcbiAgICBub2RlLnJhd3MuYmV0d2VlbiA9ICcnO1xuICAgIHRoaXMuY3VycmVudCA9IG5vZGU7XG4gIH07XG5cbiAgX3Byb3RvLm90aGVyID0gZnVuY3Rpb24gb3RoZXIoc3RhcnQpIHtcbiAgICB2YXIgZW5kID0gZmFsc2U7XG4gICAgdmFyIHR5cGUgPSBudWxsO1xuICAgIHZhciBjb2xvbiA9IGZhbHNlO1xuICAgIHZhciBicmFja2V0ID0gbnVsbDtcbiAgICB2YXIgYnJhY2tldHMgPSBbXTtcbiAgICB2YXIgdG9rZW5zID0gW107XG4gICAgdmFyIHRva2VuID0gc3RhcnQ7XG5cbiAgICB3aGlsZSAodG9rZW4pIHtcbiAgICAgIHR5cGUgPSB0b2tlblswXTtcbiAgICAgIHRva2Vucy5wdXNoKHRva2VuKTtcblxuICAgICAgaWYgKHR5cGUgPT09ICcoJyB8fCB0eXBlID09PSAnWycpIHtcbiAgICAgICAgaWYgKCFicmFja2V0KSBicmFja2V0ID0gdG9rZW47XG4gICAgICAgIGJyYWNrZXRzLnB1c2godHlwZSA9PT0gJygnID8gJyknIDogJ10nKTtcbiAgICAgIH0gZWxzZSBpZiAoYnJhY2tldHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnOycpIHtcbiAgICAgICAgICBpZiAoY29sb24pIHtcbiAgICAgICAgICAgIHRoaXMuZGVjbCh0b2tlbnMpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ3snKSB7XG4gICAgICAgICAgdGhpcy5ydWxlKHRva2Vucyk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICd9Jykge1xuICAgICAgICAgIHRoaXMudG9rZW5pemVyLmJhY2sodG9rZW5zLnBvcCgpKTtcbiAgICAgICAgICBlbmQgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICc6Jykge1xuICAgICAgICAgIGNvbG9uID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0eXBlID09PSBicmFja2V0c1ticmFja2V0cy5sZW5ndGggLSAxXSkge1xuICAgICAgICBicmFja2V0cy5wb3AoKTtcbiAgICAgICAgaWYgKGJyYWNrZXRzLmxlbmd0aCA9PT0gMCkgYnJhY2tldCA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIHRva2VuID0gdGhpcy50b2tlbml6ZXIubmV4dFRva2VuKCk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMudG9rZW5pemVyLmVuZE9mRmlsZSgpKSBlbmQgPSB0cnVlO1xuICAgIGlmIChicmFja2V0cy5sZW5ndGggPiAwKSB0aGlzLnVuY2xvc2VkQnJhY2tldChicmFja2V0KTtcblxuICAgIGlmIChlbmQgJiYgY29sb24pIHtcbiAgICAgIHdoaWxlICh0b2tlbnMubGVuZ3RoKSB7XG4gICAgICAgIHRva2VuID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXVswXTtcbiAgICAgICAgaWYgKHRva2VuICE9PSAnc3BhY2UnICYmIHRva2VuICE9PSAnY29tbWVudCcpIGJyZWFrO1xuICAgICAgICB0aGlzLnRva2VuaXplci5iYWNrKHRva2Vucy5wb3AoKSk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZGVjbCh0b2tlbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnVua25vd25Xb3JkKHRva2Vucyk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5ydWxlID0gZnVuY3Rpb24gcnVsZSh0b2tlbnMpIHtcbiAgICB0b2tlbnMucG9wKCk7XG4gICAgdmFyIG5vZGUgPSBuZXcgX3J1bGUuZGVmYXVsdCgpO1xuICAgIHRoaXMuaW5pdChub2RlLCB0b2tlbnNbMF1bMl0sIHRva2Vuc1swXVszXSk7XG4gICAgbm9kZS5yYXdzLmJldHdlZW4gPSB0aGlzLnNwYWNlc0FuZENvbW1lbnRzRnJvbUVuZCh0b2tlbnMpO1xuICAgIHRoaXMucmF3KG5vZGUsICdzZWxlY3RvcicsIHRva2Vucyk7XG4gICAgdGhpcy5jdXJyZW50ID0gbm9kZTtcbiAgfTtcblxuICBfcHJvdG8uZGVjbCA9IGZ1bmN0aW9uIGRlY2wodG9rZW5zKSB7XG4gICAgdmFyIG5vZGUgPSBuZXcgX2RlY2xhcmF0aW9uLmRlZmF1bHQoKTtcbiAgICB0aGlzLmluaXQobm9kZSk7XG4gICAgdmFyIGxhc3QgPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdO1xuXG4gICAgaWYgKGxhc3RbMF0gPT09ICc7Jykge1xuICAgICAgdGhpcy5zZW1pY29sb24gPSB0cnVlO1xuICAgICAgdG9rZW5zLnBvcCgpO1xuICAgIH1cblxuICAgIGlmIChsYXN0WzRdKSB7XG4gICAgICBub2RlLnNvdXJjZS5lbmQgPSB7XG4gICAgICAgIGxpbmU6IGxhc3RbNF0sXG4gICAgICAgIGNvbHVtbjogbGFzdFs1XVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5zb3VyY2UuZW5kID0ge1xuICAgICAgICBsaW5lOiBsYXN0WzJdLFxuICAgICAgICBjb2x1bW46IGxhc3RbM11cbiAgICAgIH07XG4gICAgfVxuXG4gICAgd2hpbGUgKHRva2Vuc1swXVswXSAhPT0gJ3dvcmQnKSB7XG4gICAgICBpZiAodG9rZW5zLmxlbmd0aCA9PT0gMSkgdGhpcy51bmtub3duV29yZCh0b2tlbnMpO1xuICAgICAgbm9kZS5yYXdzLmJlZm9yZSArPSB0b2tlbnMuc2hpZnQoKVsxXTtcbiAgICB9XG5cbiAgICBub2RlLnNvdXJjZS5zdGFydCA9IHtcbiAgICAgIGxpbmU6IHRva2Vuc1swXVsyXSxcbiAgICAgIGNvbHVtbjogdG9rZW5zWzBdWzNdXG4gICAgfTtcbiAgICBub2RlLnByb3AgPSAnJztcblxuICAgIHdoaWxlICh0b2tlbnMubGVuZ3RoKSB7XG4gICAgICB2YXIgdHlwZSA9IHRva2Vuc1swXVswXTtcblxuICAgICAgaWYgKHR5cGUgPT09ICc6JyB8fCB0eXBlID09PSAnc3BhY2UnIHx8IHR5cGUgPT09ICdjb21tZW50Jykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cblxuICAgICAgbm9kZS5wcm9wICs9IHRva2Vucy5zaGlmdCgpWzFdO1xuICAgIH1cblxuICAgIG5vZGUucmF3cy5iZXR3ZWVuID0gJyc7XG4gICAgdmFyIHRva2VuO1xuXG4gICAgd2hpbGUgKHRva2Vucy5sZW5ndGgpIHtcbiAgICAgIHRva2VuID0gdG9rZW5zLnNoaWZ0KCk7XG5cbiAgICAgIGlmICh0b2tlblswXSA9PT0gJzonKSB7XG4gICAgICAgIG5vZGUucmF3cy5iZXR3ZWVuICs9IHRva2VuWzFdO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmICh0b2tlblswXSA9PT0gJ3dvcmQnICYmIC9cXHcvLnRlc3QodG9rZW5bMV0pKSB7XG4gICAgICAgICAgdGhpcy51bmtub3duV29yZChbdG9rZW5dKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUucmF3cy5iZXR3ZWVuICs9IHRva2VuWzFdO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChub2RlLnByb3BbMF0gPT09ICdfJyB8fCBub2RlLnByb3BbMF0gPT09ICcqJykge1xuICAgICAgbm9kZS5yYXdzLmJlZm9yZSArPSBub2RlLnByb3BbMF07XG4gICAgICBub2RlLnByb3AgPSBub2RlLnByb3Auc2xpY2UoMSk7XG4gICAgfVxuXG4gICAgbm9kZS5yYXdzLmJldHdlZW4gKz0gdGhpcy5zcGFjZXNBbmRDb21tZW50c0Zyb21TdGFydCh0b2tlbnMpO1xuICAgIHRoaXMucHJlY2hlY2tNaXNzZWRTZW1pY29sb24odG9rZW5zKTtcblxuICAgIGZvciAodmFyIGkgPSB0b2tlbnMubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xuICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICAgIGlmICh0b2tlblsxXS50b0xvd2VyQ2FzZSgpID09PSAnIWltcG9ydGFudCcpIHtcbiAgICAgICAgbm9kZS5pbXBvcnRhbnQgPSB0cnVlO1xuICAgICAgICB2YXIgc3RyaW5nID0gdGhpcy5zdHJpbmdGcm9tKHRva2VucywgaSk7XG4gICAgICAgIHN0cmluZyA9IHRoaXMuc3BhY2VzRnJvbUVuZCh0b2tlbnMpICsgc3RyaW5nO1xuICAgICAgICBpZiAoc3RyaW5nICE9PSAnICFpbXBvcnRhbnQnKSBub2RlLnJhd3MuaW1wb3J0YW50ID0gc3RyaW5nO1xuICAgICAgICBicmVhaztcbiAgICAgIH0gZWxzZSBpZiAodG9rZW5bMV0udG9Mb3dlckNhc2UoKSA9PT0gJ2ltcG9ydGFudCcpIHtcbiAgICAgICAgdmFyIGNhY2hlID0gdG9rZW5zLnNsaWNlKDApO1xuICAgICAgICB2YXIgc3RyID0gJyc7XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IGk7IGogPiAwOyBqLS0pIHtcbiAgICAgICAgICB2YXIgX3R5cGUgPSBjYWNoZVtqXVswXTtcblxuICAgICAgICAgIGlmIChzdHIudHJpbSgpLmluZGV4T2YoJyEnKSA9PT0gMCAmJiBfdHlwZSAhPT0gJ3NwYWNlJykge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgc3RyID0gY2FjaGUucG9wKClbMV0gKyBzdHI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyLnRyaW0oKS5pbmRleE9mKCchJykgPT09IDApIHtcbiAgICAgICAgICBub2RlLmltcG9ydGFudCA9IHRydWU7XG4gICAgICAgICAgbm9kZS5yYXdzLmltcG9ydGFudCA9IHN0cjtcbiAgICAgICAgICB0b2tlbnMgPSBjYWNoZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW5bMF0gIT09ICdzcGFjZScgJiYgdG9rZW5bMF0gIT09ICdjb21tZW50Jykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnJhdyhub2RlLCAndmFsdWUnLCB0b2tlbnMpO1xuICAgIGlmIChub2RlLnZhbHVlLmluZGV4T2YoJzonKSAhPT0gLTEpIHRoaXMuY2hlY2tNaXNzZWRTZW1pY29sb24odG9rZW5zKTtcbiAgfTtcblxuICBfcHJvdG8uYXRydWxlID0gZnVuY3Rpb24gYXRydWxlKHRva2VuKSB7XG4gICAgdmFyIG5vZGUgPSBuZXcgX2F0UnVsZS5kZWZhdWx0KCk7XG4gICAgbm9kZS5uYW1lID0gdG9rZW5bMV0uc2xpY2UoMSk7XG5cbiAgICBpZiAobm9kZS5uYW1lID09PSAnJykge1xuICAgICAgdGhpcy51bm5hbWVkQXRydWxlKG5vZGUsIHRva2VuKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXQobm9kZSwgdG9rZW5bMl0sIHRva2VuWzNdKTtcbiAgICB2YXIgcHJldjtcbiAgICB2YXIgc2hpZnQ7XG4gICAgdmFyIGxhc3QgPSBmYWxzZTtcbiAgICB2YXIgb3BlbiA9IGZhbHNlO1xuICAgIHZhciBwYXJhbXMgPSBbXTtcblxuICAgIHdoaWxlICghdGhpcy50b2tlbml6ZXIuZW5kT2ZGaWxlKCkpIHtcbiAgICAgIHRva2VuID0gdGhpcy50b2tlbml6ZXIubmV4dFRva2VuKCk7XG5cbiAgICAgIGlmICh0b2tlblswXSA9PT0gJzsnKSB7XG4gICAgICAgIG5vZGUuc291cmNlLmVuZCA9IHtcbiAgICAgICAgICBsaW5lOiB0b2tlblsyXSxcbiAgICAgICAgICBjb2x1bW46IHRva2VuWzNdXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuc2VtaWNvbG9uID0gdHJ1ZTtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9IGVsc2UgaWYgKHRva2VuWzBdID09PSAneycpIHtcbiAgICAgICAgb3BlbiA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIGlmICh0b2tlblswXSA9PT0gJ30nKSB7XG4gICAgICAgIGlmIChwYXJhbXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNoaWZ0ID0gcGFyYW1zLmxlbmd0aCAtIDE7XG4gICAgICAgICAgcHJldiA9IHBhcmFtc1tzaGlmdF07XG5cbiAgICAgICAgICB3aGlsZSAocHJldiAmJiBwcmV2WzBdID09PSAnc3BhY2UnKSB7XG4gICAgICAgICAgICBwcmV2ID0gcGFyYW1zWy0tc2hpZnRdO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChwcmV2KSB7XG4gICAgICAgICAgICBub2RlLnNvdXJjZS5lbmQgPSB7XG4gICAgICAgICAgICAgIGxpbmU6IHByZXZbNF0sXG4gICAgICAgICAgICAgIGNvbHVtbjogcHJldls1XVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVuZCh0b2tlbik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcGFyYW1zLnB1c2godG9rZW4pO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy50b2tlbml6ZXIuZW5kT2ZGaWxlKCkpIHtcbiAgICAgICAgbGFzdCA9IHRydWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIG5vZGUucmF3cy5iZXR3ZWVuID0gdGhpcy5zcGFjZXNBbmRDb21tZW50c0Zyb21FbmQocGFyYW1zKTtcblxuICAgIGlmIChwYXJhbXMubGVuZ3RoKSB7XG4gICAgICBub2RlLnJhd3MuYWZ0ZXJOYW1lID0gdGhpcy5zcGFjZXNBbmRDb21tZW50c0Zyb21TdGFydChwYXJhbXMpO1xuICAgICAgdGhpcy5yYXcobm9kZSwgJ3BhcmFtcycsIHBhcmFtcyk7XG5cbiAgICAgIGlmIChsYXN0KSB7XG4gICAgICAgIHRva2VuID0gcGFyYW1zW3BhcmFtcy5sZW5ndGggLSAxXTtcbiAgICAgICAgbm9kZS5zb3VyY2UuZW5kID0ge1xuICAgICAgICAgIGxpbmU6IHRva2VuWzRdLFxuICAgICAgICAgIGNvbHVtbjogdG9rZW5bNV1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zcGFjZXMgPSBub2RlLnJhd3MuYmV0d2VlbjtcbiAgICAgICAgbm9kZS5yYXdzLmJldHdlZW4gPSAnJztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbm9kZS5yYXdzLmFmdGVyTmFtZSA9ICcnO1xuICAgICAgbm9kZS5wYXJhbXMgPSAnJztcbiAgICB9XG5cbiAgICBpZiAob3Blbikge1xuICAgICAgbm9kZS5ub2RlcyA9IFtdO1xuICAgICAgdGhpcy5jdXJyZW50ID0gbm9kZTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmVuZCA9IGZ1bmN0aW9uIGVuZCh0b2tlbikge1xuICAgIGlmICh0aGlzLmN1cnJlbnQubm9kZXMgJiYgdGhpcy5jdXJyZW50Lm5vZGVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5jdXJyZW50LnJhd3Muc2VtaWNvbG9uID0gdGhpcy5zZW1pY29sb247XG4gICAgfVxuXG4gICAgdGhpcy5zZW1pY29sb24gPSBmYWxzZTtcbiAgICB0aGlzLmN1cnJlbnQucmF3cy5hZnRlciA9ICh0aGlzLmN1cnJlbnQucmF3cy5hZnRlciB8fCAnJykgKyB0aGlzLnNwYWNlcztcbiAgICB0aGlzLnNwYWNlcyA9ICcnO1xuXG4gICAgaWYgKHRoaXMuY3VycmVudC5wYXJlbnQpIHtcbiAgICAgIHRoaXMuY3VycmVudC5zb3VyY2UuZW5kID0ge1xuICAgICAgICBsaW5lOiB0b2tlblsyXSxcbiAgICAgICAgY29sdW1uOiB0b2tlblszXVxuICAgICAgfTtcbiAgICAgIHRoaXMuY3VycmVudCA9IHRoaXMuY3VycmVudC5wYXJlbnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudW5leHBlY3RlZENsb3NlKHRva2VuKTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmVuZEZpbGUgPSBmdW5jdGlvbiBlbmRGaWxlKCkge1xuICAgIGlmICh0aGlzLmN1cnJlbnQucGFyZW50KSB0aGlzLnVuY2xvc2VkQmxvY2soKTtcblxuICAgIGlmICh0aGlzLmN1cnJlbnQubm9kZXMgJiYgdGhpcy5jdXJyZW50Lm5vZGVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5jdXJyZW50LnJhd3Muc2VtaWNvbG9uID0gdGhpcy5zZW1pY29sb247XG4gICAgfVxuXG4gICAgdGhpcy5jdXJyZW50LnJhd3MuYWZ0ZXIgPSAodGhpcy5jdXJyZW50LnJhd3MuYWZ0ZXIgfHwgJycpICsgdGhpcy5zcGFjZXM7XG4gIH07XG5cbiAgX3Byb3RvLmZyZWVTZW1pY29sb24gPSBmdW5jdGlvbiBmcmVlU2VtaWNvbG9uKHRva2VuKSB7XG4gICAgdGhpcy5zcGFjZXMgKz0gdG9rZW5bMV07XG5cbiAgICBpZiAodGhpcy5jdXJyZW50Lm5vZGVzKSB7XG4gICAgICB2YXIgcHJldiA9IHRoaXMuY3VycmVudC5ub2Rlc1t0aGlzLmN1cnJlbnQubm9kZXMubGVuZ3RoIC0gMV07XG5cbiAgICAgIGlmIChwcmV2ICYmIHByZXYudHlwZSA9PT0gJ3J1bGUnICYmICFwcmV2LnJhd3Mub3duU2VtaWNvbG9uKSB7XG4gICAgICAgIHByZXYucmF3cy5vd25TZW1pY29sb24gPSB0aGlzLnNwYWNlcztcbiAgICAgICAgdGhpcy5zcGFjZXMgPSAnJztcbiAgICAgIH1cbiAgICB9XG4gIH0gLy8gSGVscGVyc1xuICA7XG5cbiAgX3Byb3RvLmluaXQgPSBmdW5jdGlvbiBpbml0KG5vZGUsIGxpbmUsIGNvbHVtbikge1xuICAgIHRoaXMuY3VycmVudC5wdXNoKG5vZGUpO1xuICAgIG5vZGUuc291cmNlID0ge1xuICAgICAgc3RhcnQ6IHtcbiAgICAgICAgbGluZTogbGluZSxcbiAgICAgICAgY29sdW1uOiBjb2x1bW5cbiAgICAgIH0sXG4gICAgICBpbnB1dDogdGhpcy5pbnB1dFxuICAgIH07XG4gICAgbm9kZS5yYXdzLmJlZm9yZSA9IHRoaXMuc3BhY2VzO1xuICAgIHRoaXMuc3BhY2VzID0gJyc7XG4gICAgaWYgKG5vZGUudHlwZSAhPT0gJ2NvbW1lbnQnKSB0aGlzLnNlbWljb2xvbiA9IGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by5yYXcgPSBmdW5jdGlvbiByYXcobm9kZSwgcHJvcCwgdG9rZW5zKSB7XG4gICAgdmFyIHRva2VuLCB0eXBlO1xuICAgIHZhciBsZW5ndGggPSB0b2tlbnMubGVuZ3RoO1xuICAgIHZhciB2YWx1ZSA9ICcnO1xuICAgIHZhciBjbGVhbiA9IHRydWU7XG4gICAgdmFyIG5leHQsIHByZXY7XG4gICAgdmFyIHBhdHRlcm4gPSAvXihbLnwjXSk/KFtcXHddKSsvaTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHRva2VuID0gdG9rZW5zW2ldO1xuICAgICAgdHlwZSA9IHRva2VuWzBdO1xuXG4gICAgICBpZiAodHlwZSA9PT0gJ2NvbW1lbnQnICYmIG5vZGUudHlwZSA9PT0gJ3J1bGUnKSB7XG4gICAgICAgIHByZXYgPSB0b2tlbnNbaSAtIDFdO1xuICAgICAgICBuZXh0ID0gdG9rZW5zW2kgKyAxXTtcblxuICAgICAgICBpZiAocHJldlswXSAhPT0gJ3NwYWNlJyAmJiBuZXh0WzBdICE9PSAnc3BhY2UnICYmIHBhdHRlcm4udGVzdChwcmV2WzFdKSAmJiBwYXR0ZXJuLnRlc3QobmV4dFsxXSkpIHtcbiAgICAgICAgICB2YWx1ZSArPSB0b2tlblsxXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjbGVhbiA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlID09PSAnY29tbWVudCcgfHwgdHlwZSA9PT0gJ3NwYWNlJyAmJiBpID09PSBsZW5ndGggLSAxKSB7XG4gICAgICAgIGNsZWFuID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSArPSB0b2tlblsxXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoIWNsZWFuKSB7XG4gICAgICB2YXIgcmF3ID0gdG9rZW5zLnJlZHVjZShmdW5jdGlvbiAoYWxsLCBpKSB7XG4gICAgICAgIHJldHVybiBhbGwgKyBpWzFdO1xuICAgICAgfSwgJycpO1xuICAgICAgbm9kZS5yYXdzW3Byb3BdID0ge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIHJhdzogcmF3XG4gICAgICB9O1xuICAgIH1cblxuICAgIG5vZGVbcHJvcF0gPSB2YWx1ZTtcbiAgfTtcblxuICBfcHJvdG8uc3BhY2VzQW5kQ29tbWVudHNGcm9tRW5kID0gZnVuY3Rpb24gc3BhY2VzQW5kQ29tbWVudHNGcm9tRW5kKHRva2Vucykge1xuICAgIHZhciBsYXN0VG9rZW5UeXBlO1xuICAgIHZhciBzcGFjZXMgPSAnJztcblxuICAgIHdoaWxlICh0b2tlbnMubGVuZ3RoKSB7XG4gICAgICBsYXN0VG9rZW5UeXBlID0gdG9rZW5zW3Rva2Vucy5sZW5ndGggLSAxXVswXTtcbiAgICAgIGlmIChsYXN0VG9rZW5UeXBlICE9PSAnc3BhY2UnICYmIGxhc3RUb2tlblR5cGUgIT09ICdjb21tZW50JykgYnJlYWs7XG4gICAgICBzcGFjZXMgPSB0b2tlbnMucG9wKClbMV0gKyBzcGFjZXM7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNwYWNlcztcbiAgfTtcblxuICBfcHJvdG8uc3BhY2VzQW5kQ29tbWVudHNGcm9tU3RhcnQgPSBmdW5jdGlvbiBzcGFjZXNBbmRDb21tZW50c0Zyb21TdGFydCh0b2tlbnMpIHtcbiAgICB2YXIgbmV4dDtcbiAgICB2YXIgc3BhY2VzID0gJyc7XG5cbiAgICB3aGlsZSAodG9rZW5zLmxlbmd0aCkge1xuICAgICAgbmV4dCA9IHRva2Vuc1swXVswXTtcbiAgICAgIGlmIChuZXh0ICE9PSAnc3BhY2UnICYmIG5leHQgIT09ICdjb21tZW50JykgYnJlYWs7XG4gICAgICBzcGFjZXMgKz0gdG9rZW5zLnNoaWZ0KClbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHNwYWNlcztcbiAgfTtcblxuICBfcHJvdG8uc3BhY2VzRnJvbUVuZCA9IGZ1bmN0aW9uIHNwYWNlc0Zyb21FbmQodG9rZW5zKSB7XG4gICAgdmFyIGxhc3RUb2tlblR5cGU7XG4gICAgdmFyIHNwYWNlcyA9ICcnO1xuXG4gICAgd2hpbGUgKHRva2Vucy5sZW5ndGgpIHtcbiAgICAgIGxhc3RUb2tlblR5cGUgPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdWzBdO1xuICAgICAgaWYgKGxhc3RUb2tlblR5cGUgIT09ICdzcGFjZScpIGJyZWFrO1xuICAgICAgc3BhY2VzID0gdG9rZW5zLnBvcCgpWzFdICsgc3BhY2VzO1xuICAgIH1cblxuICAgIHJldHVybiBzcGFjZXM7XG4gIH07XG5cbiAgX3Byb3RvLnN0cmluZ0Zyb20gPSBmdW5jdGlvbiBzdHJpbmdGcm9tKHRva2VucywgZnJvbSkge1xuICAgIHZhciByZXN1bHQgPSAnJztcblxuICAgIGZvciAodmFyIGkgPSBmcm9tOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHQgKz0gdG9rZW5zW2ldWzFdO1xuICAgIH1cblxuICAgIHRva2Vucy5zcGxpY2UoZnJvbSwgdG9rZW5zLmxlbmd0aCAtIGZyb20pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgX3Byb3RvLmNvbG9uID0gZnVuY3Rpb24gY29sb24odG9rZW5zKSB7XG4gICAgdmFyIGJyYWNrZXRzID0gMDtcbiAgICB2YXIgdG9rZW4sIHR5cGUsIHByZXY7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdG9rZW4gPSB0b2tlbnNbaV07XG4gICAgICB0eXBlID0gdG9rZW5bMF07XG5cbiAgICAgIGlmICh0eXBlID09PSAnKCcpIHtcbiAgICAgICAgYnJhY2tldHMgKz0gMTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGUgPT09ICcpJykge1xuICAgICAgICBicmFja2V0cyAtPSAxO1xuICAgICAgfVxuXG4gICAgICBpZiAoYnJhY2tldHMgPT09IDAgJiYgdHlwZSA9PT0gJzonKSB7XG4gICAgICAgIGlmICghcHJldikge1xuICAgICAgICAgIHRoaXMuZG91YmxlQ29sb24odG9rZW4pO1xuICAgICAgICB9IGVsc2UgaWYgKHByZXZbMF0gPT09ICd3b3JkJyAmJiBwcmV2WzFdID09PSAncHJvZ2lkJykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHByZXYgPSB0b2tlbjtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gLy8gRXJyb3JzXG4gIDtcblxuICBfcHJvdG8udW5jbG9zZWRCcmFja2V0ID0gZnVuY3Rpb24gdW5jbG9zZWRCcmFja2V0KGJyYWNrZXQpIHtcbiAgICB0aHJvdyB0aGlzLmlucHV0LmVycm9yKCdVbmNsb3NlZCBicmFja2V0JywgYnJhY2tldFsyXSwgYnJhY2tldFszXSk7XG4gIH07XG5cbiAgX3Byb3RvLnVua25vd25Xb3JkID0gZnVuY3Rpb24gdW5rbm93bldvcmQodG9rZW5zKSB7XG4gICAgdGhyb3cgdGhpcy5pbnB1dC5lcnJvcignVW5rbm93biB3b3JkJywgdG9rZW5zWzBdWzJdLCB0b2tlbnNbMF1bM10pO1xuICB9O1xuXG4gIF9wcm90by51bmV4cGVjdGVkQ2xvc2UgPSBmdW5jdGlvbiB1bmV4cGVjdGVkQ2xvc2UodG9rZW4pIHtcbiAgICB0aHJvdyB0aGlzLmlucHV0LmVycm9yKCdVbmV4cGVjdGVkIH0nLCB0b2tlblsyXSwgdG9rZW5bM10pO1xuICB9O1xuXG4gIF9wcm90by51bmNsb3NlZEJsb2NrID0gZnVuY3Rpb24gdW5jbG9zZWRCbG9jaygpIHtcbiAgICB2YXIgcG9zID0gdGhpcy5jdXJyZW50LnNvdXJjZS5zdGFydDtcbiAgICB0aHJvdyB0aGlzLmlucHV0LmVycm9yKCdVbmNsb3NlZCBibG9jaycsIHBvcy5saW5lLCBwb3MuY29sdW1uKTtcbiAgfTtcblxuICBfcHJvdG8uZG91YmxlQ29sb24gPSBmdW5jdGlvbiBkb3VibGVDb2xvbih0b2tlbikge1xuICAgIHRocm93IHRoaXMuaW5wdXQuZXJyb3IoJ0RvdWJsZSBjb2xvbicsIHRva2VuWzJdLCB0b2tlblszXSk7XG4gIH07XG5cbiAgX3Byb3RvLnVubmFtZWRBdHJ1bGUgPSBmdW5jdGlvbiB1bm5hbWVkQXRydWxlKG5vZGUsIHRva2VuKSB7XG4gICAgdGhyb3cgdGhpcy5pbnB1dC5lcnJvcignQXQtcnVsZSB3aXRob3V0IG5hbWUnLCB0b2tlblsyXSwgdG9rZW5bM10pO1xuICB9O1xuXG4gIF9wcm90by5wcmVjaGVja01pc3NlZFNlbWljb2xvbiA9IGZ1bmN0aW9uIHByZWNoZWNrTWlzc2VkU2VtaWNvbG9uKClcbiAgLyogdG9rZW5zICovXG4gIHsvLyBIb29rIGZvciBTYWZlIFBhcnNlclxuICB9O1xuXG4gIF9wcm90by5jaGVja01pc3NlZFNlbWljb2xvbiA9IGZ1bmN0aW9uIGNoZWNrTWlzc2VkU2VtaWNvbG9uKHRva2Vucykge1xuICAgIHZhciBjb2xvbiA9IHRoaXMuY29sb24odG9rZW5zKTtcbiAgICBpZiAoY29sb24gPT09IGZhbHNlKSByZXR1cm47XG4gICAgdmFyIGZvdW5kZWQgPSAwO1xuICAgIHZhciB0b2tlbjtcblxuICAgIGZvciAodmFyIGogPSBjb2xvbiAtIDE7IGogPj0gMDsgai0tKSB7XG4gICAgICB0b2tlbiA9IHRva2Vuc1tqXTtcblxuICAgICAgaWYgKHRva2VuWzBdICE9PSAnc3BhY2UnKSB7XG4gICAgICAgIGZvdW5kZWQgKz0gMTtcbiAgICAgICAgaWYgKGZvdW5kZWQgPT09IDIpIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRocm93IHRoaXMuaW5wdXQuZXJyb3IoJ01pc3NlZCBzZW1pY29sb24nLCB0b2tlblsyXSwgdG9rZW5bM10pO1xuICB9O1xuXG4gIHJldHVybiBQYXJzZXI7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFBhcnNlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbkJoY25ObGNpNWxjellpWFN3aWJtRnRaWE1pT2xzaVVHRnljMlZ5SWl3aWFXNXdkWFFpTENKeWIyOTBJaXdpVW05dmRDSXNJbU4xY25KbGJuUWlMQ0p6Y0dGalpYTWlMQ0p6WlcxcFkyOXNiMjRpTENKamNtVmhkR1ZVYjJ0bGJtbDZaWElpTENKemIzVnlZMlVpTENKemRHRnlkQ0lzSW14cGJtVWlMQ0pqYjJ4MWJXNGlMQ0owYjJ0bGJtbDZaWElpTENKd1lYSnpaU0lzSW5SdmEyVnVJaXdpWlc1a1QyWkdhV3hsSWl3aWJtVjRkRlJ2YTJWdUlpd2labkpsWlZObGJXbGpiMnh2YmlJc0ltVnVaQ0lzSW1OdmJXMWxiblFpTENKaGRISjFiR1VpTENKbGJYQjBlVkoxYkdVaUxDSnZkR2hsY2lJc0ltVnVaRVpwYkdVaUxDSnViMlJsSWl3aVEyOXRiV1Z1ZENJc0ltbHVhWFFpTENKMFpYaDBJaXdpYzJ4cFkyVWlMQ0owWlhOMElpd2ljbUYzY3lJc0lteGxablFpTENKeWFXZG9kQ0lzSW0xaGRHTm9JaXdpVW5Wc1pTSXNJbk5sYkdWamRHOXlJaXdpWW1WMGQyVmxiaUlzSW5SNWNHVWlMQ0pqYjJ4dmJpSXNJbUp5WVdOclpYUWlMQ0ppY21GamEyVjBjeUlzSW5SdmEyVnVjeUlzSW5CMWMyZ2lMQ0pzWlc1bmRHZ2lMQ0prWldOc0lpd2ljblZzWlNJc0ltSmhZMnNpTENKd2IzQWlMQ0oxYm1Oc2IzTmxaRUp5WVdOclpYUWlMQ0oxYm10dWIzZHVWMjl5WkNJc0luTndZV05sYzBGdVpFTnZiVzFsYm5SelJuSnZiVVZ1WkNJc0luSmhkeUlzSWtSbFkyeGhjbUYwYVc5dUlpd2liR0Z6ZENJc0ltSmxabTl5WlNJc0luTm9hV1owSWl3aWNISnZjQ0lzSW5Od1lXTmxjMEZ1WkVOdmJXMWxiblJ6Um5KdmJWTjBZWEowSWl3aWNISmxZMmhsWTJ0TmFYTnpaV1JUWlcxcFkyOXNiMjRpTENKcElpd2lkRzlNYjNkbGNrTmhjMlVpTENKcGJYQnZjblJoYm5RaUxDSnpkSEpwYm1jaUxDSnpkSEpwYm1kR2NtOXRJaXdpYzNCaFkyVnpSbkp2YlVWdVpDSXNJbU5oWTJobElpd2ljM1J5SWl3aWFpSXNJblJ5YVcwaUxDSnBibVJsZUU5bUlpd2lkbUZzZFdVaUxDSmphR1ZqYTAxcGMzTmxaRk5sYldsamIyeHZiaUlzSWtGMFVuVnNaU0lzSW01aGJXVWlMQ0oxYm01aGJXVmtRWFJ5ZFd4bElpd2ljSEpsZGlJc0ltOXdaVzRpTENKd1lYSmhiWE1pTENKaFpuUmxjazVoYldVaUxDSnViMlJsY3lJc0ltRm1kR1Z5SWl3aWNHRnlaVzUwSWl3aWRXNWxlSEJsWTNSbFpFTnNiM05sSWl3aWRXNWpiRzl6WldSQ2JHOWpheUlzSW05M2JsTmxiV2xqYjJ4dmJpSXNJbU5zWldGdUlpd2libVY0ZENJc0luQmhkSFJsY200aUxDSnlaV1IxWTJVaUxDSmhiR3dpTENKc1lYTjBWRzlyWlc1VWVYQmxJaXdpWm5KdmJTSXNJbkpsYzNWc2RDSXNJbk53YkdsalpTSXNJbVJ2ZFdKc1pVTnZiRzl1SWl3aVpYSnliM0lpTENKd2IzTWlMQ0ptYjNWdVpHVmtJbDBzSW0xaGNIQnBibWR6SWpvaU96czdPenRCUVVGQk96dEJRVU5CT3p0QlFVTkJPenRCUVVOQk96dEJRVU5CT3p0QlFVTkJPenM3TzBsQlJYRkNRU3hOT3pzN1FVRkRia0lzYTBKQlFXRkRMRXRCUVdJc1JVRkJiMEk3UVVGRGJFSXNVMEZCUzBFc1MwRkJUQ3hIUVVGaFFTeExRVUZpTzBGQlJVRXNVMEZCUzBNc1NVRkJUQ3hIUVVGWkxFbEJRVWxETEdGQlFVb3NSVUZCV2p0QlFVTkJMRk5CUVV0RExFOUJRVXdzUjBGQlpTeExRVUZMUml4SlFVRndRanRCUVVOQkxGTkJRVXRITEUxQlFVd3NSMEZCWXl4RlFVRmtPMEZCUTBFc1UwRkJTME1zVTBGQlRDeEhRVUZwUWl4TFFVRnFRanRCUVVWQkxGTkJRVXRETEdWQlFVdzdRVUZEUVN4VFFVRkxUQ3hKUVVGTUxFTkJRVlZOTEUxQlFWWXNSMEZCYlVJN1FVRkJSVkFzVFVGQlFVRXNTMEZCU3l4RlFVRk1RU3hMUVVGR08wRkJRVk5STEUxQlFVRkJMRXRCUVVzc1JVRkJSVHRCUVVGRlF5eFJRVUZCUVN4SlFVRkpMRVZCUVVVc1EwRkJVanRCUVVGWFF5eFJRVUZCUVN4TlFVRk5MRVZCUVVVN1FVRkJia0k3UVVGQmFFSXNTMEZCYmtJN1FVRkRSRHM3T3p0VFFVVkVTaXhsTEVkQlFVRXNNa0pCUVcxQ08wRkJRMnBDTEZOQlFVdExMRk5CUVV3c1IwRkJhVUlzZFVKQlFWVXNTMEZCUzFnc1MwRkJaaXhEUVVGcVFqdEJRVU5FTEVjN08xTkJSVVJaTEVzc1IwRkJRU3hwUWtGQlV6dEJRVU5RTEZGQlFVbERMRXRCUVVvN08wRkJRMEVzVjBGQlR5eERRVUZETEV0QlFVdEdMRk5CUVV3c1EwRkJaVWNzVTBGQlppeEZRVUZTTEVWQlFXOURPMEZCUTJ4RFJDeE5RVUZCUVN4TFFVRkxMRWRCUVVjc1MwRkJTMFlzVTBGQlRDeERRVUZsU1N4VFFVRm1MRVZCUVZJN08wRkJSVUVzWTBGQlVVWXNTMEZCU3l4RFFVRkRMRU5CUVVRc1EwRkJZanRCUVVORkxHRkJRVXNzVDBGQlREdEJRVU5GTEdWQlFVdFVMRTFCUVV3c1NVRkJaVk1zUzBGQlN5eERRVUZETEVOQlFVUXNRMEZCY0VJN1FVRkRRVHM3UVVGRlJpeGhRVUZMTEVkQlFVdzdRVUZEUlN4bFFVRkxSeXhoUVVGTUxFTkJRVzFDU0N4TFFVRnVRanRCUVVOQk96dEJRVVZHTEdGQlFVc3NSMEZCVER0QlFVTkZMR1ZCUVV0SkxFZEJRVXdzUTBGQlUwb3NTMEZCVkR0QlFVTkJPenRCUVVWR0xHRkJRVXNzVTBGQlREdEJRVU5GTEdWQlFVdExMRTlCUVV3c1EwRkJZVXdzUzBGQllqdEJRVU5CT3p0QlFVVkdMR0ZCUVVzc1UwRkJURHRCUVVORkxHVkJRVXROTEUxQlFVd3NRMEZCV1U0c1MwRkJXanRCUVVOQk96dEJRVVZHTEdGQlFVc3NSMEZCVER0QlFVTkZMR1ZCUVV0UExGTkJRVXdzUTBGQlpWQXNTMEZCWmp0QlFVTkJPenRCUVVWR08wRkJRMFVzWlVGQlMxRXNTMEZCVEN4RFFVRlhVaXhMUVVGWU8wRkJRMEU3UVVFelFrbzdRVUUyUWtRN08wRkJRMFFzVTBGQlMxTXNUMEZCVER0QlFVTkVMRWM3TzFOQlJVUktMRThzUjBGQlFTeHBRa0ZCVTB3c1MwRkJWQ3hGUVVGblFqdEJRVU5rTEZGQlFVbFZMRWxCUVVrc1IwRkJSeXhKUVVGSlF5eG5Ra0ZCU2l4RlFVRllPMEZCUTBFc1UwRkJTME1zU1VGQlRDeERRVUZWUml4SlFVRldMRVZCUVdkQ1ZpeExRVUZMTEVOQlFVTXNRMEZCUkN4RFFVRnlRaXhGUVVFd1FrRXNTMEZCU3l4RFFVRkRMRU5CUVVRc1EwRkJMMEk3UVVGRFFWVXNTVUZCUVVFc1NVRkJTU3hEUVVGRGFFSXNUVUZCVEN4RFFVRlpWU3hIUVVGYUxFZEJRV3RDTzBGQlFVVlNMRTFCUVVGQkxFbEJRVWtzUlVGQlJVa3NTMEZCU3l4RFFVRkRMRU5CUVVRc1EwRkJZanRCUVVGclFrZ3NUVUZCUVVFc1RVRkJUU3hGUVVGRlJ5eExRVUZMTEVOQlFVTXNRMEZCUkR0QlFVRXZRaXhMUVVGc1FqdEJRVVZCTEZGQlFVbGhMRWxCUVVrc1IwRkJSMklzUzBGQlN5eERRVUZETEVOQlFVUXNRMEZCVEN4RFFVRlRZeXhMUVVGVUxFTkJRV1VzUTBGQlppeEZRVUZyUWl4RFFVRkRMRU5CUVc1Q0xFTkJRVmc3TzBGQlEwRXNVVUZCU1N4UlFVRlJReXhKUVVGU0xFTkJRV0ZHTEVsQlFXSXNRMEZCU2l4RlFVRjNRanRCUVVOMFFrZ3NUVUZCUVVFc1NVRkJTU3hEUVVGRFJ5eEpRVUZNTEVkQlFWa3NSVUZCV2p0QlFVTkJTQ3hOUVVGQlFTeEpRVUZKTEVOQlFVTk5MRWxCUVV3c1EwRkJWVU1zU1VGQlZpeEhRVUZwUWtvc1NVRkJha0k3UVVGRFFVZ3NUVUZCUVVFc1NVRkJTU3hEUVVGRFRTeEpRVUZNTEVOQlFWVkZMRXRCUVZZc1IwRkJhMElzUlVGQmJFSTdRVUZEUkN4TFFVcEVMRTFCU1U4N1FVRkRUQ3hWUVVGSlF5eExRVUZMTEVkQlFVZE9MRWxCUVVrc1EwRkJRMDBzUzBGQlRDeERRVUZYTEhsQ1FVRllMRU5CUVZvN1FVRkRRVlFzVFVGQlFVRXNTVUZCU1N4RFFVRkRSeXhKUVVGTUxFZEJRVmxOTEV0QlFVc3NRMEZCUXl4RFFVRkVMRU5CUVdwQ08wRkJRMEZVTEUxQlFVRkJMRWxCUVVrc1EwRkJRMDBzU1VGQlRDeERRVUZWUXl4SlFVRldMRWRCUVdsQ1JTeExRVUZMTEVOQlFVTXNRMEZCUkN4RFFVRjBRanRCUVVOQlZDeE5RVUZCUVN4SlFVRkpMRU5CUVVOTkxFbEJRVXdzUTBGQlZVVXNTMEZCVml4SFFVRnJRa01zUzBGQlN5eERRVUZETEVOQlFVUXNRMEZCZGtJN1FVRkRSRHRCUVVOR0xFYzdPMU5CUlVSYUxGTXNSMEZCUVN4dFFrRkJWMUFzUzBGQldDeEZRVUZyUWp0QlFVTm9RaXhSUVVGSlZTeEpRVUZKTEVkQlFVY3NTVUZCU1ZVc1lVRkJTaXhGUVVGWU8wRkJRMEVzVTBGQlMxSXNTVUZCVEN4RFFVRlZSaXhKUVVGV0xFVkJRV2RDVml4TFFVRkxMRU5CUVVNc1EwRkJSQ3hEUVVGeVFpeEZRVUV3UWtFc1MwRkJTeXhEUVVGRExFTkJRVVFzUTBGQkwwSTdRVUZEUVZVc1NVRkJRVUVzU1VGQlNTeERRVUZEVnl4UlFVRk1MRWRCUVdkQ0xFVkJRV2hDTzBGQlEwRllMRWxCUVVGQkxFbEJRVWtzUTBGQlEwMHNTVUZCVEN4RFFVRlZUU3hQUVVGV0xFZEJRVzlDTEVWQlFYQkNPMEZCUTBFc1UwRkJTMmhETEU5QlFVd3NSMEZCWlc5Q0xFbEJRV1k3UVVGRFJDeEhPenRUUVVWRVJpeExMRWRCUVVFc1pVRkJUMklzUzBGQlVDeEZRVUZqTzBGQlExb3NVVUZCU1ZNc1IwRkJSeXhIUVVGSExFdEJRVlk3UVVGRFFTeFJRVUZKYlVJc1NVRkJTU3hIUVVGSExFbEJRVmc3UVVGRFFTeFJRVUZKUXl4TFFVRkxMRWRCUVVjc1MwRkJXanRCUVVOQkxGRkJRVWxETEU5QlFVOHNSMEZCUnl4SlFVRmtPMEZCUTBFc1VVRkJTVU1zVVVGQlVTeEhRVUZITEVWQlFXWTdRVUZGUVN4UlFVRkpReXhOUVVGTkxFZEJRVWNzUlVGQllqdEJRVU5CTEZGQlFVa3pRaXhMUVVGTExFZEJRVWRNTEV0QlFWbzdPMEZCUTBFc1YwRkJUMHNzUzBGQlVDeEZRVUZqTzBGQlExcDFRaXhOUVVGQlFTeEpRVUZKTEVkQlFVZDJRaXhMUVVGTExFTkJRVU1zUTBGQlJDeERRVUZhTzBGQlEwRXlRaXhOUVVGQlFTeE5RVUZOTEVOQlFVTkRMRWxCUVZBc1EwRkJXVFZDTEV0QlFWbzdPMEZCUlVFc1ZVRkJTWFZDTEVsQlFVa3NTMEZCU3l4SFFVRlVMRWxCUVdkQ1FTeEpRVUZKTEV0QlFVc3NSMEZCTjBJc1JVRkJhME03UVVGRGFFTXNXVUZCU1N4RFFVRkRSU3hQUVVGTUxFVkJRV05CTEU5QlFVOHNSMEZCUjNwQ0xFdEJRVlk3UVVGRFpEQkNMRkZCUVVGQkxGRkJRVkVzUTBGQlEwVXNTVUZCVkN4RFFVRmpUQ3hKUVVGSkxFdEJRVXNzUjBGQlZDeEhRVUZsTEVkQlFXWXNSMEZCY1VJc1IwRkJia003UVVGRFJDeFBRVWhFTEUxQlIwOHNTVUZCU1Vjc1VVRkJVU3hEUVVGRFJ5eE5RVUZVTEV0QlFXOUNMRU5CUVhoQ0xFVkJRVEpDTzBGQlEyaERMRmxCUVVsT0xFbEJRVWtzUzBGQlN5eEhRVUZpTEVWQlFXdENPMEZCUTJoQ0xHTkJRVWxETEV0QlFVb3NSVUZCVnp0QlFVTlVMR2xDUVVGTFRTeEpRVUZNTEVOQlFWVklMRTFCUVZZN1FVRkRRVHRCUVVORUxGZEJTRVFzVFVGSFR6dEJRVU5NTzBGQlEwUTdRVUZEUml4VFFWQkVMRTFCVDA4c1NVRkJTVW9zU1VGQlNTeExRVUZMTEVkQlFXSXNSVUZCYTBJN1FVRkRka0lzWlVGQlMxRXNTVUZCVEN4RFFVRlZTaXhOUVVGV08wRkJRMEU3UVVGRFJDeFRRVWhOTEUxQlIwRXNTVUZCU1Vvc1NVRkJTU3hMUVVGTExFZEJRV0lzUlVGQmEwSTdRVUZEZGtJc1pVRkJTM3BDTEZOQlFVd3NRMEZCWld0RExFbEJRV1lzUTBGQmIwSk1MRTFCUVUwc1EwRkJRMDBzUjBGQlVDeEZRVUZ3UWp0QlFVTkJOMElzVlVGQlFVRXNSMEZCUnl4SFFVRkhMRWxCUVU0N1FVRkRRVHRCUVVORUxGTkJTazBzVFVGSlFTeEpRVUZKYlVJc1NVRkJTU3hMUVVGTExFZEJRV0lzUlVGQmEwSTdRVUZEZGtKRExGVkJRVUZCTEV0QlFVc3NSMEZCUnl4SlFVRlNPMEZCUTBRN1FVRkRSaXhQUVd4Q1RTeE5RV3RDUVN4SlFVRkpSQ3hKUVVGSkxFdEJRVXRITEZGQlFWRXNRMEZCUTBFc1VVRkJVU3hEUVVGRFJ5eE5RVUZVTEVkQlFXdENMRU5CUVc1Q0xFTkJRWEpDTEVWQlFUUkRPMEZCUTJwRVNDeFJRVUZCUVN4UlFVRlJMRU5CUVVOUExFZEJRVlE3UVVGRFFTeFpRVUZKVUN4UlFVRlJMRU5CUVVOSExFMUJRVlFzUzBGQmIwSXNRMEZCZUVJc1JVRkJNa0pLTEU5QlFVOHNSMEZCUnl4SlFVRldPMEZCUXpWQ096dEJRVVZFZWtJc1RVRkJRVUVzUzBGQlN5eEhRVUZITEV0QlFVdEdMRk5CUVV3c1EwRkJaVWtzVTBGQlppeEZRVUZTTzBGQlEwUTdPMEZCUlVRc1VVRkJTU3hMUVVGTFNpeFRRVUZNTEVOQlFXVkhMRk5CUVdZc1JVRkJTaXhGUVVGblEwY3NSMEZCUnl4SFFVRkhMRWxCUVU0N1FVRkRhRU1zVVVGQlNYTkNMRkZCUVZFc1EwRkJRMGNzVFVGQlZDeEhRVUZyUWl4RFFVRjBRaXhGUVVGNVFpeExRVUZMU3l4bFFVRk1MRU5CUVhGQ1ZDeFBRVUZ5UWpzN1FVRkZla0lzVVVGQlNYSkNMRWRCUVVjc1NVRkJTVzlDTEV0QlFWZ3NSVUZCYTBJN1FVRkRhRUlzWVVGQlQwY3NUVUZCVFN4RFFVRkRSU3hOUVVGa0xFVkJRWE5DTzBGQlEzQkNOMElzVVVGQlFVRXNTMEZCU3l4SFFVRkhNa0lzVFVGQlRTeERRVUZEUVN4TlFVRk5MRU5CUVVORkxFMUJRVkFzUjBGQlowSXNRMEZCYWtJc1EwRkJUaXhEUVVFd1FpeERRVUV4UWl4RFFVRlNPMEZCUTBFc1dVRkJTVGRDTEV0QlFVc3NTMEZCU3l4UFFVRldMRWxCUVhGQ1FTeExRVUZMTEV0QlFVc3NVMEZCYmtNc1JVRkJPRU03UVVGRE9VTXNZVUZCUzBZc1UwRkJUQ3hEUVVGbGEwTXNTVUZCWml4RFFVRnZRa3dzVFVGQlRTeERRVUZEVFN4SFFVRlFMRVZCUVhCQ08wRkJRMFE3TzBGQlEwUXNWMEZCUzBnc1NVRkJUQ3hEUVVGVlNDeE5RVUZXTzBGQlEwUXNTMEZRUkN4TlFVOVBPMEZCUTB3c1YwRkJTMUVzVjBGQlRDeERRVUZwUWxJc1RVRkJha0k3UVVGRFJEdEJRVU5HTEVjN08xTkJSVVJKTEVrc1IwRkJRU3hqUVVGTlNpeE5RVUZPTEVWQlFXTTdRVUZEV2tFc1NVRkJRVUVzVFVGQlRTeERRVUZEVFN4SFFVRlFPMEZCUlVFc1VVRkJTWFpDTEVsQlFVa3NSMEZCUnl4SlFVRkpWU3hoUVVGS0xFVkJRVmc3UVVGRFFTeFRRVUZMVWl4SlFVRk1MRU5CUVZWR0xFbEJRVllzUlVGQlowSnBRaXhOUVVGTkxFTkJRVU1zUTBGQlJDeERRVUZPTEVOQlFWVXNRMEZCVml4RFFVRm9RaXhGUVVFNFFrRXNUVUZCVFN4RFFVRkRMRU5CUVVRc1EwRkJUaXhEUVVGVkxFTkJRVllzUTBGQk9VSTdRVUZGUVdwQ0xFbEJRVUZCTEVsQlFVa3NRMEZCUTAwc1NVRkJUQ3hEUVVGVlRTeFBRVUZXTEVkQlFXOUNMRXRCUVV0akxIZENRVUZNTEVOQlFUaENWQ3hOUVVFNVFpeERRVUZ3UWp0QlFVTkJMRk5CUVV0VkxFZEJRVXdzUTBGQlV6TkNMRWxCUVZRc1JVRkJaU3hWUVVGbUxFVkJRVEpDYVVJc1RVRkJNMEk3UVVGRFFTeFRRVUZMY2tNc1QwRkJUQ3hIUVVGbGIwSXNTVUZCWmp0QlFVTkVMRWM3TzFOQlJVUnZRaXhKTEVkQlFVRXNZMEZCVFVnc1RVRkJUaXhGUVVGak8wRkJRMW9zVVVGQlNXcENMRWxCUVVrc1IwRkJSeXhKUVVGSk5FSXNiMEpCUVVvc1JVRkJXRHRCUVVOQkxGTkJRVXN4UWl4SlFVRk1MRU5CUVZWR0xFbEJRVlk3UVVGRlFTeFJRVUZKTmtJc1NVRkJTU3hIUVVGSFdpeE5RVUZOTEVOQlFVTkJMRTFCUVUwc1EwRkJRMFVzVFVGQlVDeEhRVUZuUWl4RFFVRnFRaXhEUVVGcVFqczdRVUZEUVN4UlFVRkpWU3hKUVVGSkxFTkJRVU1zUTBGQlJDeERRVUZLTEV0QlFWa3NSMEZCYUVJc1JVRkJjVUk3UVVGRGJrSXNWMEZCU3k5RExGTkJRVXdzUjBGQmFVSXNTVUZCYWtJN1FVRkRRVzFETEUxQlFVRkJMRTFCUVUwc1EwRkJRMDBzUjBGQlVEdEJRVU5FT3p0QlFVTkVMRkZCUVVsTkxFbEJRVWtzUTBGQlF5eERRVUZFTEVOQlFWSXNSVUZCWVR0QlFVTllOMElzVFVGQlFVRXNTVUZCU1N4RFFVRkRhRUlzVFVGQlRDeERRVUZaVlN4SFFVRmFMRWRCUVd0Q08wRkJRVVZTTEZGQlFVRkJMRWxCUVVrc1JVRkJSVEpETEVsQlFVa3NRMEZCUXl4RFFVRkVMRU5CUVZvN1FVRkJhVUl4UXl4UlFVRkJRU3hOUVVGTkxFVkJRVVV3UXl4SlFVRkpMRU5CUVVNc1EwRkJSRHRCUVVFM1FpeFBRVUZzUWp0QlFVTkVMRXRCUmtRc1RVRkZUenRCUVVOTU4wSXNUVUZCUVVFc1NVRkJTU3hEUVVGRGFFSXNUVUZCVEN4RFFVRlpWU3hIUVVGYUxFZEJRV3RDTzBGQlFVVlNMRkZCUVVGQkxFbEJRVWtzUlVGQlJUSkRMRWxCUVVrc1EwRkJReXhEUVVGRUxFTkJRVm83UVVGQmFVSXhReXhSUVVGQlFTeE5RVUZOTEVWQlFVVXdReXhKUVVGSkxFTkJRVU1zUTBGQlJEdEJRVUUzUWl4UFFVRnNRanRCUVVORU96dEJRVVZFTEZkQlFVOWFMRTFCUVUwc1EwRkJReXhEUVVGRUxFTkJRVTRzUTBGQlZTeERRVUZXTEUxQlFXbENMRTFCUVhoQ0xFVkJRV2RETzBGQlF6bENMRlZCUVVsQkxFMUJRVTBzUTBGQlEwVXNUVUZCVUN4TFFVRnJRaXhEUVVGMFFpeEZRVUY1UWl4TFFVRkxUU3hYUVVGTUxFTkJRV2xDVWl4TlFVRnFRanRCUVVONlFtcENMRTFCUVVGQkxFbEJRVWtzUTBGQlEwMHNTVUZCVEN4RFFVRlZkMElzVFVGQlZpeEpRVUZ2UW1Jc1RVRkJUU3hEUVVGRFl5eExRVUZRTEVkQlFXVXNRMEZCWml4RFFVRndRanRCUVVORU96dEJRVU5FTDBJc1NVRkJRVUVzU1VGQlNTeERRVUZEYUVJc1RVRkJUQ3hEUVVGWlF5eExRVUZhTEVkQlFXOUNPMEZCUVVWRExFMUJRVUZCTEVsQlFVa3NSVUZCUlN0Q0xFMUJRVTBzUTBGQlF5eERRVUZFTEVOQlFVNHNRMEZCVlN4RFFVRldMRU5CUVZJN1FVRkJjMEk1UWl4TlFVRkJRU3hOUVVGTkxFVkJRVVU0UWl4TlFVRk5MRU5CUVVNc1EwRkJSQ3hEUVVGT0xFTkJRVlVzUTBGQlZqdEJRVUU1UWl4TFFVRndRanRCUVVWQmFrSXNTVUZCUVVFc1NVRkJTU3hEUVVGRFowTXNTVUZCVEN4SFFVRlpMRVZCUVZvN08wRkJRMEVzVjBGQlQyWXNUVUZCVFN4RFFVRkRSU3hOUVVGa0xFVkJRWE5DTzBGQlEzQkNMRlZCUVVsT0xFbEJRVWtzUjBGQlIwa3NUVUZCVFN4RFFVRkRMRU5CUVVRc1EwRkJUaXhEUVVGVkxFTkJRVllzUTBGQldEczdRVUZEUVN4VlFVRkpTaXhKUVVGSkxFdEJRVXNzUjBGQlZDeEpRVUZuUWtFc1NVRkJTU3hMUVVGTExFOUJRWHBDTEVsQlFXOURRU3hKUVVGSkxFdEJRVXNzVTBGQmFrUXNSVUZCTkVRN1FVRkRNVVE3UVVGRFJEczdRVUZEUkdJc1RVRkJRVUVzU1VGQlNTeERRVUZEWjBNc1NVRkJUQ3hKUVVGaFppeE5RVUZOTEVOQlFVTmpMRXRCUVZBc1IwRkJaU3hEUVVGbUxFTkJRV0k3UVVGRFJEczdRVUZGUkM5Q0xFbEJRVUZCTEVsQlFVa3NRMEZCUTAwc1NVRkJUQ3hEUVVGVlRTeFBRVUZXTEVkQlFXOUNMRVZCUVhCQ08wRkJSVUVzVVVGQlNYUkNMRXRCUVVvN08wRkJRMEVzVjBGQlR6SkNMRTFCUVUwc1EwRkJRMFVzVFVGQlpDeEZRVUZ6UWp0QlFVTndRamRDTEUxQlFVRkJMRXRCUVVzc1IwRkJSekpDTEUxQlFVMHNRMEZCUTJNc1MwRkJVQ3hGUVVGU096dEJRVVZCTEZWQlFVbDZReXhMUVVGTExFTkJRVU1zUTBGQlJDeERRVUZNTEV0QlFXRXNSMEZCYWtJc1JVRkJjMEk3UVVGRGNFSlZMRkZCUVVGQkxFbEJRVWtzUTBGQlEwMHNTVUZCVEN4RFFVRlZUU3hQUVVGV0xFbEJRWEZDZEVJc1MwRkJTeXhEUVVGRExFTkJRVVFzUTBGQk1VSTdRVUZEUVR0QlFVTkVMRTlCU0VRc1RVRkhUenRCUVVOTUxGbEJRVWxCTEV0QlFVc3NRMEZCUXl4RFFVRkVMRU5CUVV3c1MwRkJZU3hOUVVGaUxFbEJRWFZDTEV0QlFVdGxMRWxCUVV3c1EwRkJWV1lzUzBGQlN5eERRVUZETEVOQlFVUXNRMEZCWml4RFFVRXpRaXhGUVVGblJEdEJRVU01UXl4bFFVRkxiVU1zVjBGQlRDeERRVUZwUWl4RFFVRkRia01zUzBGQlJDeERRVUZxUWp0QlFVTkVPenRCUVVORVZTeFJRVUZCUVN4SlFVRkpMRU5CUVVOTkxFbEJRVXdzUTBGQlZVMHNUMEZCVml4SlFVRnhRblJDTEV0QlFVc3NRMEZCUXl4RFFVRkVMRU5CUVRGQ08wRkJRMFE3UVVGRFJqczdRVUZGUkN4UlFVRkpWU3hKUVVGSkxFTkJRVU5uUXl4SlFVRk1MRU5CUVZVc1EwRkJWaXhOUVVGcFFpeEhRVUZxUWl4SlFVRjNRbWhETEVsQlFVa3NRMEZCUTJkRExFbEJRVXdzUTBGQlZTeERRVUZXTEUxQlFXbENMRWRCUVRkRExFVkJRV3RFTzBGQlEyaEVhRU1zVFVGQlFVRXNTVUZCU1N4RFFVRkRUU3hKUVVGTUxFTkJRVlYzUWl4TlFVRldMRWxCUVc5Q09VSXNTVUZCU1N4RFFVRkRaME1zU1VGQlRDeERRVUZWTEVOQlFWWXNRMEZCY0VJN1FVRkRRV2hETEUxQlFVRkJMRWxCUVVrc1EwRkJRMmRETEVsQlFVd3NSMEZCV1doRExFbEJRVWtzUTBGQlEyZERMRWxCUVV3c1EwRkJWVFZDTEV0QlFWWXNRMEZCWjBJc1EwRkJhRUlzUTBGQldqdEJRVU5FT3p0QlFVTkVTaXhKUVVGQlFTeEpRVUZKTEVOQlFVTk5MRWxCUVV3c1EwRkJWVTBzVDBGQlZpeEpRVUZ4UWl4TFFVRkxjVUlzTUVKQlFVd3NRMEZCWjBOb1FpeE5RVUZvUXl4RFFVRnlRanRCUVVOQkxGTkJRVXRwUWl4MVFrRkJUQ3hEUVVFMlFtcENMRTFCUVRkQ096dEJRVVZCTEZOQlFVc3NTVUZCU1d0Q0xFTkJRVU1zUjBGQlIyeENMRTFCUVUwc1EwRkJRMFVzVFVGQlVDeEhRVUZuUWl4RFFVRTNRaXhGUVVGblEyZENMRU5CUVVNc1IwRkJSeXhEUVVGd1F5eEZRVUYxUTBFc1EwRkJReXhGUVVGNFF5eEZRVUUwUXp0QlFVTXhRemRETEUxQlFVRkJMRXRCUVVzc1IwRkJSekpDTEUxQlFVMHNRMEZCUTJ0Q0xFTkJRVVFzUTBGQlpEczdRVUZEUVN4VlFVRkpOME1zUzBGQlN5eERRVUZETEVOQlFVUXNRMEZCVEN4RFFVRlRPRU1zVjBGQlZDeFBRVUV5UWl4WlFVRXZRaXhGUVVFMlF6dEJRVU16UTNCRExGRkJRVUZCTEVsQlFVa3NRMEZCUTNGRExGTkJRVXdzUjBGQmFVSXNTVUZCYWtJN1FVRkRRU3haUVVGSlF5eE5RVUZOTEVkQlFVY3NTMEZCUzBNc1ZVRkJUQ3hEUVVGblFuUkNMRTFCUVdoQ0xFVkJRWGRDYTBJc1EwRkJlRUlzUTBGQllqdEJRVU5CUnl4UlFVRkJRU3hOUVVGTkxFZEJRVWNzUzBGQlMwVXNZVUZCVEN4RFFVRnRRblpDTEUxQlFXNUNMRWxCUVRaQ2NVSXNUVUZCZEVNN1FVRkRRU3haUVVGSlFTeE5RVUZOTEV0QlFVc3NZVUZCWml4RlFVRTRRblJETEVsQlFVa3NRMEZCUTAwc1NVRkJUQ3hEUVVGVkswSXNVMEZCVml4SFFVRnpRa01zVFVGQmRFSTdRVUZET1VJN1FVRkRSQ3hQUVU1RUxFMUJUVThzU1VGQlNXaEVMRXRCUVVzc1EwRkJReXhEUVVGRUxFTkJRVXdzUTBGQlV6aERMRmRCUVZRc1QwRkJNa0lzVjBGQkwwSXNSVUZCTkVNN1FVRkRha1FzV1VGQlNVc3NTMEZCU3l4SFFVRkhlRUlzVFVGQlRTeERRVUZEWWl4TFFVRlFMRU5CUVdFc1EwRkJZaXhEUVVGYU8wRkJRMEVzV1VGQlNYTkRMRWRCUVVjc1IwRkJSeXhGUVVGV096dEJRVU5CTEdGQlFVc3NTVUZCU1VNc1EwRkJReXhIUVVGSFVpeERRVUZpTEVWQlFXZENVU3hEUVVGRExFZEJRVWNzUTBGQmNFSXNSVUZCZFVKQkxFTkJRVU1zUlVGQmVFSXNSVUZCTkVJN1FVRkRNVUlzWTBGQlNUbENMRXRCUVVrc1IwRkJSelJDTEV0QlFVc3NRMEZCUTBVc1EwRkJSQ3hEUVVGTUxFTkJRVk1zUTBGQlZDeERRVUZZT3p0QlFVTkJMR05CUVVsRUxFZEJRVWNzUTBGQlEwVXNTVUZCU2l4SFFVRlhReXhQUVVGWUxFTkJRVzFDTEVkQlFXNUNMRTFCUVRSQ0xFTkJRVFZDTEVsQlFXbERhRU1zUzBGQlNTeExRVUZMTEU5QlFUbERMRVZCUVhWRU8wRkJRM0pFTzBGQlEwUTdPMEZCUTBRMlFpeFZRVUZCUVN4SFFVRkhMRWRCUVVkRUxFdEJRVXNzUTBGQlEyeENMRWRCUVU0c1IwRkJXU3hEUVVGYUxFbEJRV2xDYlVJc1IwRkJka0k3UVVGRFJEczdRVUZEUkN4WlFVRkpRU3hIUVVGSExFTkJRVU5GTEVsQlFVb3NSMEZCVjBNc1QwRkJXQ3hEUVVGdFFpeEhRVUZ1UWl4TlFVRTBRaXhEUVVGb1F5eEZRVUZ0UXp0QlFVTnFRemRETEZWQlFVRkJMRWxCUVVrc1EwRkJRM0ZETEZOQlFVd3NSMEZCYVVJc1NVRkJha0k3UVVGRFFYSkRMRlZCUVVGQkxFbEJRVWtzUTBGQlEwMHNTVUZCVEN4RFFVRlZLMElzVTBGQlZpeEhRVUZ6UWtzc1IwRkJkRUk3UVVGRFFYcENMRlZCUVVGQkxFMUJRVTBzUjBGQlIzZENMRXRCUVZRN1FVRkRSRHRCUVVOR096dEJRVVZFTEZWQlFVbHVSQ3hMUVVGTExFTkJRVU1zUTBGQlJDeERRVUZNTEV0QlFXRXNUMEZCWWl4SlFVRjNRa0VzUzBGQlN5eERRVUZETEVOQlFVUXNRMEZCVEN4TFFVRmhMRk5CUVhwRExFVkJRVzlFTzBGQlEyeEVPMEZCUTBRN1FVRkRSanM3UVVGRlJDeFRRVUZMY1VNc1IwRkJUQ3hEUVVGVE0wSXNTVUZCVkN4RlFVRmxMRTlCUVdZc1JVRkJkMEpwUWl4TlFVRjRRanRCUVVWQkxGRkJRVWxxUWl4SlFVRkpMRU5CUVVNNFF5eExRVUZNTEVOQlFWZEVMRTlCUVZnc1EwRkJiVUlzUjBGQmJrSXNUVUZCTkVJc1EwRkJReXhEUVVGcVF5eEZRVUZ2UXl4TFFVRkxSU3h2UWtGQlRDeERRVUV3UWpsQ0xFMUJRVEZDTzBGQlEzSkRMRWM3TzFOQlJVUnlRaXhOTEVkQlFVRXNaMEpCUVZGT0xFdEJRVklzUlVGQlpUdEJRVU5pTEZGQlFVbFZMRWxCUVVrc1IwRkJSeXhKUVVGSlowUXNaVUZCU2l4RlFVRllPMEZCUTBGb1JDeEpRVUZCUVN4SlFVRkpMRU5CUVVOcFJDeEpRVUZNTEVkQlFWa3pSQ3hMUVVGTExFTkJRVU1zUTBGQlJDeERRVUZNTEVOQlFWTmpMRXRCUVZRc1EwRkJaU3hEUVVGbUxFTkJRVm83TzBGQlEwRXNVVUZCU1Vvc1NVRkJTU3hEUVVGRGFVUXNTVUZCVEN4TFFVRmpMRVZCUVd4Q0xFVkJRWE5DTzBGQlEzQkNMRmRCUVV0RExHRkJRVXdzUTBGQmJVSnNSQ3hKUVVGdVFpeEZRVUY1UWxZc1MwRkJla0k3UVVGRFJEczdRVUZEUkN4VFFVRkxXU3hKUVVGTUxFTkJRVlZHTEVsQlFWWXNSVUZCWjBKV0xFdEJRVXNzUTBGQlF5eERRVUZFTEVOQlFYSkNMRVZCUVRCQ1FTeExRVUZMTEVOQlFVTXNRMEZCUkN4RFFVRXZRanRCUVVWQkxGRkJRVWsyUkN4SlFVRktPMEZCUTBFc1VVRkJTWEJDTEV0QlFVbzdRVUZEUVN4UlFVRkpSaXhKUVVGSkxFZEJRVWNzUzBGQldEdEJRVU5CTEZGQlFVbDFRaXhKUVVGSkxFZEJRVWNzUzBGQldEdEJRVU5CTEZGQlFVbERMRTFCUVUwc1IwRkJSeXhGUVVGaU96dEJRVVZCTEZkQlFVOHNRMEZCUXl4TFFVRkxha1VzVTBGQlRDeERRVUZsUnl4VFFVRm1MRVZCUVZJc1JVRkJiME03UVVGRGJFTkVMRTFCUVVGQkxFdEJRVXNzUjBGQlJ5eExRVUZMUml4VFFVRk1MRU5CUVdWSkxGTkJRV1lzUlVGQlVqczdRVUZGUVN4VlFVRkpSaXhMUVVGTExFTkJRVU1zUTBGQlJDeERRVUZNTEV0QlFXRXNSMEZCYWtJc1JVRkJjMEk3UVVGRGNFSlZMRkZCUVVGQkxFbEJRVWtzUTBGQlEyaENMRTFCUVV3c1EwRkJXVlVzUjBGQldpeEhRVUZyUWp0QlFVRkZVaXhWUVVGQlFTeEpRVUZKTEVWQlFVVkpMRXRCUVVzc1EwRkJReXhEUVVGRUxFTkJRV0k3UVVGQmEwSklMRlZCUVVGQkxFMUJRVTBzUlVGQlJVY3NTMEZCU3l4RFFVRkRMRU5CUVVRN1FVRkJMMElzVTBGQmJFSTdRVUZEUVN4aFFVRkxVaXhUUVVGTUxFZEJRV2xDTEVsQlFXcENPMEZCUTBFN1FVRkRSQ3hQUVVwRUxFMUJTVThzU1VGQlNWRXNTMEZCU3l4RFFVRkRMRU5CUVVRc1EwRkJUQ3hMUVVGaExFZEJRV3BDTEVWQlFYTkNPMEZCUXpOQ09FUXNVVUZCUVVFc1NVRkJTU3hIUVVGSExFbEJRVkE3UVVGRFFUdEJRVU5FTEU5QlNFMHNUVUZIUVN4SlFVRkpPVVFzUzBGQlN5eERRVUZETEVOQlFVUXNRMEZCVEN4TFFVRmhMRWRCUVdwQ0xFVkJRWE5DTzBGQlF6TkNMRmxCUVVrclJDeE5RVUZOTEVOQlFVTnNReXhOUVVGUUxFZEJRV2RDTEVOQlFYQkNMRVZCUVhWQ08wRkJRM0pDV1N4VlFVRkJRU3hMUVVGTExFZEJRVWR6UWl4TlFVRk5MRU5CUVVOc1F5eE5RVUZRTEVkQlFXZENMRU5CUVhoQ08wRkJRMEZuUXl4VlFVRkJRU3hKUVVGSkxFZEJRVWRGTEUxQlFVMHNRMEZCUTNSQ0xFdEJRVVFzUTBGQllqczdRVUZEUVN4cFFrRkJUMjlDTEVsQlFVa3NTVUZCU1VFc1NVRkJTU3hEUVVGRExFTkJRVVFzUTBGQlNpeExRVUZaTEU5QlFUTkNMRVZCUVc5RE8wRkJRMnhEUVN4WlFVRkJRU3hKUVVGSkxFZEJRVWRGTEUxQlFVMHNRMEZCUXl4RlFVRkZkRUlzUzBGQlNDeERRVUZpTzBGQlEwUTdPMEZCUTBRc1kwRkJTVzlDTEVsQlFVb3NSVUZCVlR0QlFVTlNia1FzV1VGQlFVRXNTVUZCU1N4RFFVRkRhRUlzVFVGQlRDeERRVUZaVlN4SFFVRmFMRWRCUVd0Q08wRkJRVVZTTEdOQlFVRkJMRWxCUVVrc1JVRkJSV2xGTEVsQlFVa3NRMEZCUXl4RFFVRkVMRU5CUVZvN1FVRkJhVUpvUlN4alFVRkJRU3hOUVVGTkxFVkJRVVZuUlN4SlFVRkpMRU5CUVVNc1EwRkJSRHRCUVVFM1FpeGhRVUZzUWp0QlFVTkVPMEZCUTBZN08wRkJRMFFzWVVGQlMzcEVMRWRCUVV3c1EwRkJVMG9zUzBGQlZEdEJRVU5CTzBGQlEwUXNUMEZpVFN4TlFXRkJPMEZCUTB3clJDeFJRVUZCUVN4TlFVRk5MRU5CUVVOdVF5eEpRVUZRTEVOQlFWazFRaXhMUVVGYU8wRkJRMFE3TzBGQlJVUXNWVUZCU1N4TFFVRkxSaXhUUVVGTUxFTkJRV1ZITEZOQlFXWXNSVUZCU2l4RlFVRm5RenRCUVVNNVFuTkRMRkZCUVVGQkxFbEJRVWtzUjBGQlJ5eEpRVUZRTzBGQlEwRTdRVUZEUkR0QlFVTkdPenRCUVVWRU4wSXNTVUZCUVVFc1NVRkJTU3hEUVVGRFRTeEpRVUZNTEVOQlFWVk5MRTlCUVZZc1IwRkJiMElzUzBGQlMyTXNkMEpCUVV3c1EwRkJPRUl5UWl4TlFVRTVRaXhEUVVGd1FqczdRVUZEUVN4UlFVRkpRU3hOUVVGTkxFTkJRVU5zUXl4TlFVRllMRVZCUVcxQ08wRkJRMnBDYmtJc1RVRkJRVUVzU1VGQlNTeERRVUZEVFN4SlFVRk1MRU5CUVZWblJDeFRRVUZXTEVkQlFYTkNMRXRCUVV0eVFpd3dRa0ZCVEN4RFFVRm5RMjlDTEUxQlFXaERMRU5CUVhSQ08wRkJRMEVzVjBGQlN6RkNMRWRCUVV3c1EwRkJVek5DTEVsQlFWUXNSVUZCWlN4UlFVRm1MRVZCUVhsQ2NVUXNUVUZCZWtJN08wRkJRMEVzVlVGQlNYaENMRWxCUVVvc1JVRkJWVHRCUVVOU2RrTXNVVUZCUVVFc1MwRkJTeXhIUVVGSEswUXNUVUZCVFN4RFFVRkRRU3hOUVVGTkxFTkJRVU5zUXl4TlFVRlFMRWRCUVdkQ0xFTkJRV3BDTEVOQlFXUTdRVUZEUVc1Q0xGRkJRVUZCTEVsQlFVa3NRMEZCUTJoQ0xFMUJRVXdzUTBGQldWVXNSMEZCV2l4SFFVRnJRanRCUVVGRlVpeFZRVUZCUVN4SlFVRkpMRVZCUVVWSkxFdEJRVXNzUTBGQlF5eERRVUZFTEVOQlFXSTdRVUZCYTBKSUxGVkJRVUZCTEUxQlFVMHNSVUZCUlVjc1MwRkJTeXhEUVVGRExFTkJRVVE3UVVGQkwwSXNVMEZCYkVJN1FVRkRRU3hoUVVGTFZDeE5RVUZNTEVkQlFXTnRRaXhKUVVGSkxFTkJRVU5OTEVsQlFVd3NRMEZCVlUwc1QwRkJlRUk3UVVGRFFWb3NVVUZCUVVFc1NVRkJTU3hEUVVGRFRTeEpRVUZNTEVOQlFWVk5MRTlCUVZZc1IwRkJiMElzUlVGQmNFSTdRVUZEUkR0QlFVTkdMRXRCVkVRc1RVRlRUenRCUVVOTVdpeE5RVUZCUVN4SlFVRkpMRU5CUVVOTkxFbEJRVXdzUTBGQlZXZEVMRk5CUVZZc1IwRkJjMElzUlVGQmRFSTdRVUZEUVhSRUxFMUJRVUZCTEVsQlFVa3NRMEZCUTNGRUxFMUJRVXdzUjBGQll5eEZRVUZrTzBGQlEwUTdPMEZCUlVRc1VVRkJTVVFzU1VGQlNpeEZRVUZWTzBGQlExSndSQ3hOUVVGQlFTeEpRVUZKTEVOQlFVTjFSQ3hMUVVGTUxFZEJRV0VzUlVGQllqdEJRVU5CTEZkQlFVc3pSU3hQUVVGTUxFZEJRV1Z2UWl4SlFVRm1PMEZCUTBRN1FVRkRSaXhIT3p0VFFVVkVUaXhITEVkQlFVRXNZVUZCUzBvc1MwRkJUQ3hGUVVGWk8wRkJRMVlzVVVGQlNTeExRVUZMVml4UFFVRk1MRU5CUVdFeVJTeExRVUZpTEVsQlFYTkNMRXRCUVVzelJTeFBRVUZNTEVOQlFXRXlSU3hMUVVGaUxFTkJRVzFDY0VNc1RVRkJOME1zUlVGQmNVUTdRVUZEYmtRc1YwRkJTM1pETEU5QlFVd3NRMEZCWVRCQ0xFbEJRV0lzUTBGQmEwSjRRaXhUUVVGc1FpeEhRVUU0UWl4TFFVRkxRU3hUUVVGdVF6dEJRVU5FT3p0QlFVTkVMRk5CUVV0QkxGTkJRVXdzUjBGQmFVSXNTMEZCYWtJN1FVRkZRU3hUUVVGTFJpeFBRVUZNTEVOQlFXRXdRaXhKUVVGaUxFTkJRV3RDYTBRc1MwRkJiRUlzUjBGQk1FSXNRMEZCUXl4TFFVRkxOVVVzVDBGQlRDeERRVUZoTUVJc1NVRkJZaXhEUVVGclFtdEVMRXRCUVd4Q0xFbEJRVEpDTEVWQlFUVkNMRWxCUVd0RExFdEJRVXN6UlN4TlFVRnFSVHRCUVVOQkxGTkJRVXRCTEUxQlFVd3NSMEZCWXl4RlFVRmtPenRCUVVWQkxGRkJRVWtzUzBGQlMwUXNUMEZCVEN4RFFVRmhOa1VzVFVGQmFrSXNSVUZCZVVJN1FVRkRka0lzVjBGQlN6ZEZMRTlCUVV3c1EwRkJZVWtzVFVGQllpeERRVUZ2UWxVc1IwRkJjRUlzUjBGQk1FSTdRVUZCUlZJc1VVRkJRVUVzU1VGQlNTeEZRVUZGU1N4TFFVRkxMRU5CUVVNc1EwRkJSQ3hEUVVGaU8wRkJRV3RDU0N4UlFVRkJRU3hOUVVGTkxFVkJRVVZITEV0QlFVc3NRMEZCUXl4RFFVRkVPMEZCUVM5Q0xFOUJRVEZDTzBGQlEwRXNWMEZCUzFZc1QwRkJUQ3hIUVVGbExFdEJRVXRCTEU5QlFVd3NRMEZCWVRaRkxFMUJRVFZDTzBGQlEwUXNTMEZJUkN4TlFVZFBPMEZCUTB3c1YwRkJTME1zWlVGQlRDeERRVUZ4UW5CRkxFdEJRWEpDTzBGQlEwUTdRVUZEUml4SE96dFRRVVZFVXl4UExFZEJRVUVzYlVKQlFWYzdRVUZEVkN4UlFVRkpMRXRCUVV0dVFpeFBRVUZNTEVOQlFXRTJSU3hOUVVGcVFpeEZRVUY1UWl4TFFVRkxSU3hoUVVGTU96dEJRVU42UWl4UlFVRkpMRXRCUVVzdlJTeFBRVUZNTEVOQlFXRXlSU3hMUVVGaUxFbEJRWE5DTEV0QlFVc3pSU3hQUVVGTUxFTkJRV0V5UlN4TFFVRmlMRU5CUVcxQ2NFTXNUVUZCTjBNc1JVRkJjVVE3UVVGRGJrUXNWMEZCUzNaRExFOUJRVXdzUTBGQllUQkNMRWxCUVdJc1EwRkJhMEo0UWl4VFFVRnNRaXhIUVVFNFFpeExRVUZMUVN4VFFVRnVRenRCUVVORU96dEJRVU5FTEZOQlFVdEdMRTlCUVV3c1EwRkJZVEJDTEVsQlFXSXNRMEZCYTBKclJDeExRVUZzUWl4SFFVRXdRaXhEUVVGRExFdEJRVXMxUlN4UFFVRk1MRU5CUVdFd1FpeEpRVUZpTEVOQlFXdENhMFFzUzBGQmJFSXNTVUZCTWtJc1JVRkJOVUlzU1VGQmEwTXNTMEZCU3pORkxFMUJRV3BGTzBGQlEwUXNSenM3VTBGRlJGa3NZU3hIUVVGQkxIVkNRVUZsU0N4TFFVRm1MRVZCUVhOQ08wRkJRM0JDTEZOQlFVdFVMRTFCUVV3c1NVRkJaVk1zUzBGQlN5eERRVUZETEVOQlFVUXNRMEZCY0VJN08wRkJRMEVzVVVGQlNTeExRVUZMVml4UFFVRk1MRU5CUVdFeVJTeExRVUZxUWl4RlFVRjNRanRCUVVOMFFpeFZRVUZKU2l4SlFVRkpMRWRCUVVjc1MwRkJTM1pGTEU5QlFVd3NRMEZCWVRKRkxFdEJRV0lzUTBGQmJVSXNTMEZCU3pORkxFOUJRVXdzUTBGQllUSkZMRXRCUVdJc1EwRkJiVUp3UXl4TlFVRnVRaXhIUVVFMFFpeERRVUV2UXl4RFFVRllPenRCUVVOQkxGVkJRVWxuUXl4SlFVRkpMRWxCUVVsQkxFbEJRVWtzUTBGQlEzUkRMRWxCUVV3c1MwRkJZeXhOUVVGMFFpeEpRVUZuUXl4RFFVRkRjME1zU1VGQlNTeERRVUZETjBNc1NVRkJUQ3hEUVVGVmMwUXNXVUZCTDBNc1JVRkJOa1E3UVVGRE0wUlVMRkZCUVVGQkxFbEJRVWtzUTBGQlF6ZERMRWxCUVV3c1EwRkJWWE5FTEZsQlFWWXNSMEZCZVVJc1MwRkJTeTlGTEUxQlFUbENPMEZCUTBFc1lVRkJTMEVzVFVGQlRDeEhRVUZqTEVWQlFXUTdRVUZEUkR0QlFVTkdPMEZCUTBZc1J5eERRVVZFT3pzN1UwRkZRWEZDTEVrc1IwRkJRU3hqUVVGTlJpeEpRVUZPTEVWQlFWbGtMRWxCUVZvc1JVRkJhMEpETEUxQlFXeENMRVZCUVRCQ08wRkJRM2hDTEZOQlFVdFFMRTlCUVV3c1EwRkJZWE5ETEVsQlFXSXNRMEZCYTBKc1FpeEpRVUZzUWp0QlFVVkJRU3hKUVVGQlFTeEpRVUZKTEVOQlFVTm9RaXhOUVVGTUxFZEJRV003UVVGQlJVTXNUVUZCUVVFc1MwRkJTeXhGUVVGRk8wRkJRVVZETEZGQlFVRkJMRWxCUVVrc1JVRkJTa0VzU1VGQlJqdEJRVUZSUXl4UlFVRkJRU3hOUVVGTkxFVkJRVTVCTzBGQlFWSXNUMEZCVkR0QlFVRXlRbFlzVFVGQlFVRXNTMEZCU3l4RlFVRkZMRXRCUVV0Qk8wRkJRWFpETEV0QlFXUTdRVUZEUVhWQ0xFbEJRVUZCTEVsQlFVa3NRMEZCUTAwc1NVRkJUQ3hEUVVGVmQwSXNUVUZCVml4SFFVRnRRaXhMUVVGTGFrUXNUVUZCZUVJN1FVRkRRU3hUUVVGTFFTeE5RVUZNTEVkQlFXTXNSVUZCWkR0QlFVTkJMRkZCUVVsdFFpeEpRVUZKTEVOQlFVTmhMRWxCUVV3c1MwRkJZeXhUUVVGc1FpeEZRVUUyUWl4TFFVRkxMMElzVTBGQlRDeEhRVUZwUWl4TFFVRnFRanRCUVVNNVFpeEhPenRUUVVWRU5rTXNSeXhIUVVGQkxHRkJRVXN6UWl4SlFVRk1MRVZCUVZkblF5eEpRVUZZTEVWQlFXbENaaXhOUVVGcVFpeEZRVUY1UWp0QlFVTjJRaXhSUVVGSk0wSXNTMEZCU2l4RlFVRlhkVUlzU1VGQldEdEJRVU5CTEZGQlFVbE5MRTFCUVUwc1IwRkJSMFlzVFVGQlRTeERRVUZEUlN4TlFVRndRanRCUVVOQkxGRkJRVWt5UWl4TFFVRkxMRWRCUVVjc1JVRkJXanRCUVVOQkxGRkJRVWxsTEV0QlFVc3NSMEZCUnl4SlFVRmFPMEZCUTBFc1VVRkJTVU1zU1VGQlNpeEZRVUZWV0N4SlFVRldPMEZCUTBFc1VVRkJTVmtzVDBGQlR5eEhRVUZITEcxQ1FVRmtPenRCUVVWQkxGTkJRVXNzU1VGQlNUVkNMRU5CUVVNc1IwRkJSeXhEUVVGaUxFVkJRV2RDUVN4RFFVRkRMRWRCUVVkb1FpeE5RVUZ3UWl4RlFVRTBRbWRDTEVOQlFVTXNTVUZCU1N4RFFVRnFReXhGUVVGdlF6dEJRVU5zUXpkRExFMUJRVUZCTEV0QlFVc3NSMEZCUnpKQ0xFMUJRVTBzUTBGQlEydENMRU5CUVVRc1EwRkJaRHRCUVVOQmRFSXNUVUZCUVVFc1NVRkJTU3hIUVVGSGRrSXNTMEZCU3l4RFFVRkRMRU5CUVVRc1EwRkJXanM3UVVGRlFTeFZRVUZKZFVJc1NVRkJTU3hMUVVGTExGTkJRVlFzU1VGQmMwSmlMRWxCUVVrc1EwRkJRMkVzU1VGQlRDeExRVUZqTEUxQlFYaERMRVZCUVdkRU8wRkJRemxEYzBNc1VVRkJRVUVzU1VGQlNTeEhRVUZIYkVNc1RVRkJUU3hEUVVGRGEwSXNRMEZCUXl4SFFVRkhMRU5CUVV3c1EwRkJZanRCUVVOQk1rSXNVVUZCUVVFc1NVRkJTU3hIUVVGSE4wTXNUVUZCVFN4RFFVRkRhMElzUTBGQlF5eEhRVUZITEVOQlFVd3NRMEZCWWpzN1FVRkZRU3haUVVORlowSXNTVUZCU1N4RFFVRkRMRU5CUVVRc1EwRkJTaXhMUVVGWkxFOUJRVm9zU1VGRFFWY3NTVUZCU1N4RFFVRkRMRU5CUVVRc1EwRkJTaXhMUVVGWkxFOUJSRm9zU1VGRlFVTXNUMEZCVHl4RFFVRkRNVVFzU1VGQlVpeERRVUZoT0VNc1NVRkJTU3hEUVVGRExFTkJRVVFzUTBGQmFrSXNRMEZHUVN4SlFVZEJXU3hQUVVGUExFTkJRVU14UkN4SlFVRlNMRU5CUVdGNVJDeEpRVUZKTEVOQlFVTXNRMEZCUkN4RFFVRnFRaXhEUVVwR0xFVkJTMFU3UVVGRFFXaENMRlZCUVVGQkxFdEJRVXNzU1VGQlNYaEVMRXRCUVVzc1EwRkJReXhEUVVGRUxFTkJRV1E3UVVGRFJDeFRRVkJFTEUxQlQwODdRVUZEVEhWRkxGVkJRVUZCTEV0QlFVc3NSMEZCUnl4TFFVRlNPMEZCUTBRN08wRkJSVVE3UVVGRFJEczdRVUZGUkN4VlFVRkphRVFzU1VGQlNTeExRVUZMTEZOQlFWUXNTVUZCZFVKQkxFbEJRVWtzUzBGQlN5eFBRVUZVTEVsQlFXOUNjMElzUTBGQlF5eExRVUZMYUVJc1RVRkJUU3hIUVVGSExFTkJRVGxFTEVWQlFXdEZPMEZCUTJoRk1FTXNVVUZCUVVFc1MwRkJTeXhIUVVGSExFdEJRVkk3UVVGRFJDeFBRVVpFTEUxQlJVODdRVUZEVEdZc1VVRkJRVUVzUzBGQlN5eEpRVUZKZUVRc1MwRkJTeXhEUVVGRExFTkJRVVFzUTBGQlpEdEJRVU5FTzBGQlEwWTdPMEZCUTBRc1VVRkJTU3hEUVVGRGRVVXNTMEZCVEN4RlFVRlpPMEZCUTFZc1ZVRkJTV3hETEVkQlFVY3NSMEZCUjFZc1RVRkJUU3hEUVVGREswTXNUVUZCVUN4RFFVRmpMRlZCUVVORExFZEJRVVFzUlVGQlRUbENMRU5CUVU0N1FVRkJRU3hsUVVGWk9FSXNSMEZCUnl4SFFVRkhPVUlzUTBGQlF5eERRVUZETEVOQlFVUXNRMEZCYmtJN1FVRkJRU3hQUVVGa0xFVkJRWE5ETEVWQlFYUkRMRU5CUVZZN1FVRkRRVzVETEUxQlFVRkJMRWxCUVVrc1EwRkJRMDBzU1VGQlRDeERRVUZWTUVJc1NVRkJWaXhKUVVGclFqdEJRVUZGWXl4UlFVRkJRU3hMUVVGTExFVkJRVXhCTEV0QlFVWTdRVUZCVTI1Q0xGRkJRVUZCTEVkQlFVY3NSVUZCU0VFN1FVRkJWQ3hQUVVGc1FqdEJRVU5FT3p0QlFVTkVNMElzU1VGQlFVRXNTVUZCU1N4RFFVRkRaME1zU1VGQlJDeERRVUZLTEVkQlFXRmpMRXRCUVdJN1FVRkRSQ3hIT3p0VFFVVkVjRUlzZDBJc1IwRkJRU3hyUTBGQk1FSlVMRTFCUVRGQ0xFVkJRV3RETzBGQlEyaERMRkZCUVVscFJDeGhRVUZLTzBGQlEwRXNVVUZCU1hKR0xFMUJRVTBzUjBGQlJ5eEZRVUZpT3p0QlFVTkJMRmRCUVU5dlF5eE5RVUZOTEVOQlFVTkZMRTFCUVdRc1JVRkJjMEk3UVVGRGNFSXJReXhOUVVGQlFTeGhRVUZoTEVkQlFVZHFSQ3hOUVVGTkxFTkJRVU5CTEUxQlFVMHNRMEZCUTBVc1RVRkJVQ3hIUVVGblFpeERRVUZxUWl4RFFVRk9MRU5CUVRCQ0xFTkJRVEZDTEVOQlFXaENPMEZCUTBFc1ZVRkJTU3RETEdGQlFXRXNTMEZCU3l4UFFVRnNRaXhKUVVFMlFrRXNZVUZCWVN4TFFVRkxMRk5CUVc1RUxFVkJRVGhFTzBGQlF6bEVja1lzVFVGQlFVRXNUVUZCVFN4SFFVRkhiME1zVFVGQlRTeERRVUZEVFN4SFFVRlFMRWRCUVdFc1EwRkJZaXhKUVVGclFqRkRMRTFCUVROQ08wRkJRMFE3TzBGQlEwUXNWMEZCVDBFc1RVRkJVRHRCUVVORUxFYzdPMU5CUlVSdlJDd3dRaXhIUVVGQkxHOURRVUUwUW1oQ0xFMUJRVFZDTEVWQlFXOURPMEZCUTJ4RExGRkJRVWsyUXl4SlFVRktPMEZCUTBFc1VVRkJTV3BHTEUxQlFVMHNSMEZCUnl4RlFVRmlPenRCUVVOQkxGZEJRVTl2UXl4TlFVRk5MRU5CUVVORkxFMUJRV1FzUlVGQmMwSTdRVUZEY0VJeVF5eE5RVUZCUVN4SlFVRkpMRWRCUVVjM1F5eE5RVUZOTEVOQlFVTXNRMEZCUkN4RFFVRk9MRU5CUVZVc1EwRkJWaXhEUVVGUU8wRkJRMEVzVlVGQlNUWkRMRWxCUVVrc1MwRkJTeXhQUVVGVUxFbEJRVzlDUVN4SlFVRkpMRXRCUVVzc1UwRkJha01zUlVGQk5FTTdRVUZETlVOcVJpeE5RVUZCUVN4TlFVRk5MRWxCUVVsdlF5eE5RVUZOTEVOQlFVTmpMRXRCUVZBc1IwRkJaU3hEUVVGbUxFTkJRVlk3UVVGRFJEczdRVUZEUkN4WFFVRlBiRVFzVFVGQlVEdEJRVU5FTEVjN08xTkJSVVF5UkN4aExFZEJRVUVzZFVKQlFXVjJRaXhOUVVGbUxFVkJRWFZDTzBGQlEzSkNMRkZCUVVscFJDeGhRVUZLTzBGQlEwRXNVVUZCU1hKR0xFMUJRVTBzUjBGQlJ5eEZRVUZpT3p0QlFVTkJMRmRCUVU5dlF5eE5RVUZOTEVOQlFVTkZMRTFCUVdRc1JVRkJjMEk3UVVGRGNFSXJReXhOUVVGQlFTeGhRVUZoTEVkQlFVZHFSQ3hOUVVGTkxFTkJRVU5CTEUxQlFVMHNRMEZCUTBVc1RVRkJVQ3hIUVVGblFpeERRVUZxUWl4RFFVRk9MRU5CUVRCQ0xFTkJRVEZDTEVOQlFXaENPMEZCUTBFc1ZVRkJTU3RETEdGQlFXRXNTMEZCU3l4UFFVRjBRaXhGUVVFclFqdEJRVU12UW5KR0xFMUJRVUZCTEUxQlFVMHNSMEZCUjI5RExFMUJRVTBzUTBGQlEwMHNSMEZCVUN4SFFVRmhMRU5CUVdJc1NVRkJhMEl4UXl4TlFVRXpRanRCUVVORU96dEJRVU5FTEZkQlFVOUJMRTFCUVZBN1FVRkRSQ3hIT3p0VFFVVkVNRVFzVlN4SFFVRkJMRzlDUVVGWmRFSXNUVUZCV2l4RlFVRnZRbXRFTEVsQlFYQkNMRVZCUVRCQ08wRkJRM2hDTEZGQlFVbERMRTFCUVUwc1IwRkJSeXhGUVVGaU96dEJRVU5CTEZOQlFVc3NTVUZCU1dwRExFTkJRVU1zUjBGQlIyZERMRWxCUVdJc1JVRkJiVUpvUXl4RFFVRkRMRWRCUVVkc1FpeE5RVUZOTEVOQlFVTkZMRTFCUVRsQ0xFVkJRWE5EWjBJc1EwRkJReXhGUVVGMlF5eEZRVUV5UXp0QlFVTjZRMmxETEUxQlFVRkJMRTFCUVUwc1NVRkJTVzVFTEUxQlFVMHNRMEZCUTJ0Q0xFTkJRVVFzUTBGQlRpeERRVUZWTEVOQlFWWXNRMEZCVmp0QlFVTkVPenRCUVVORWJFSXNTVUZCUVVFc1RVRkJUU3hEUVVGRGIwUXNUVUZCVUN4RFFVRmpSaXhKUVVGa0xFVkJRVzlDYkVRc1RVRkJUU3hEUVVGRFJTeE5RVUZRTEVkQlFXZENaMFFzU1VGQmNFTTdRVUZEUVN4WFFVRlBReXhOUVVGUU8wRkJRMFFzUnpzN1UwRkZSSFJFTEVzc1IwRkJRU3hsUVVGUFJ5eE5RVUZRTEVWQlFXVTdRVUZEWWl4UlFVRkpSQ3hSUVVGUkxFZEJRVWNzUTBGQlpqdEJRVU5CTEZGQlFVa3hRaXhMUVVGS0xFVkJRVmQxUWl4SlFVRllMRVZCUVdsQ2MwTXNTVUZCYWtJN08wRkJRMEVzVTBGQlN5eEpRVUZKYUVJc1EwRkJReXhIUVVGSExFTkJRV0lzUlVGQlowSkJMRU5CUVVNc1IwRkJSMnhDTEUxQlFVMHNRMEZCUTBVc1RVRkJNMElzUlVGQmJVTm5RaXhEUVVGRExFVkJRWEJETEVWQlFYZERPMEZCUTNSRE4wTXNUVUZCUVVFc1MwRkJTeXhIUVVGSE1rSXNUVUZCVFN4RFFVRkRhMElzUTBGQlJDeERRVUZrTzBGQlEwRjBRaXhOUVVGQlFTeEpRVUZKTEVkQlFVZDJRaXhMUVVGTExFTkJRVU1zUTBGQlJDeERRVUZhT3p0QlFVVkJMRlZCUVVsMVFpeEpRVUZKTEV0QlFVc3NSMEZCWWl4RlFVRnJRanRCUVVOb1FrY3NVVUZCUVVFc1VVRkJVU3hKUVVGSkxFTkJRVm83UVVGRFJEczdRVUZEUkN4VlFVRkpTQ3hKUVVGSkxFdEJRVXNzUjBGQllpeEZRVUZyUWp0QlFVTm9Ra2NzVVVGQlFVRXNVVUZCVVN4SlFVRkpMRU5CUVZvN1FVRkRSRHM3UVVGRFJDeFZRVUZKUVN4UlFVRlJMRXRCUVVzc1EwRkJZaXhKUVVGclFrZ3NTVUZCU1N4TFFVRkxMRWRCUVM5Q0xFVkJRVzlETzBGQlEyeERMRmxCUVVrc1EwRkJRM05ETEVsQlFVd3NSVUZCVnp0QlFVTlVMR1ZCUVV0dFFpeFhRVUZNTEVOQlFXbENhRVlzUzBGQmFrSTdRVUZEUkN4VFFVWkVMRTFCUlU4c1NVRkJTVFpFTEVsQlFVa3NRMEZCUXl4RFFVRkVMRU5CUVVvc1MwRkJXU3hOUVVGYUxFbEJRWE5DUVN4SlFVRkpMRU5CUVVNc1EwRkJSQ3hEUVVGS0xFdEJRVmtzVVVGQmRFTXNSVUZCWjBRN1FVRkRja1E3UVVGRFJDeFRRVVpOTEUxQlJVRTdRVUZEVEN4cFFrRkJUMmhDTEVOQlFWQTdRVUZEUkR0QlFVTkdPenRCUVVWRVowSXNUVUZCUVVFc1NVRkJTU3hIUVVGSE4wUXNTMEZCVUR0QlFVTkVPenRCUVVORUxGZEJRVThzUzBGQlVEdEJRVU5FTEVjc1EwRkZSRHM3TzFOQlJVRnJReXhsTEVkQlFVRXNlVUpCUVdsQ1ZDeFBRVUZxUWl4RlFVRXdRanRCUVVONFFpeFZRVUZOTEV0QlFVdDBReXhMUVVGTUxFTkJRVmM0Uml4TFFVRllMRU5CUVdsQ0xHdENRVUZxUWl4RlFVRnhRM2hFTEU5QlFVOHNRMEZCUXl4RFFVRkVMRU5CUVRWRExFVkJRV2xFUVN4UFFVRlBMRU5CUVVNc1EwRkJSQ3hEUVVGNFJDeERRVUZPTzBGQlEwUXNSenM3VTBGRlJGVXNWeXhIUVVGQkxIRkNRVUZoVWl4TlFVRmlMRVZCUVhGQ08wRkJRMjVDTEZWQlFVMHNTMEZCUzNoRExFdEJRVXdzUTBGQlZ6aEdMRXRCUVZnc1EwRkJhVUlzWTBGQmFrSXNSVUZCYVVOMFJDeE5RVUZOTEVOQlFVTXNRMEZCUkN4RFFVRk9MRU5CUVZVc1EwRkJWaXhEUVVGcVF5eEZRVUVyUTBFc1RVRkJUU3hEUVVGRExFTkJRVVFzUTBGQlRpeERRVUZWTEVOQlFWWXNRMEZCTDBNc1EwRkJUanRCUVVORUxFYzdPMU5CUlVSNVF5eGxMRWRCUVVFc2VVSkJRV2xDY0VVc1MwRkJha0lzUlVGQmQwSTdRVUZEZEVJc1ZVRkJUU3hMUVVGTFlpeExRVUZNTEVOQlFWYzRSaXhMUVVGWUxFTkJRV2xDTEdOQlFXcENMRVZCUVdsRGFrWXNTMEZCU3l4RFFVRkRMRU5CUVVRc1EwRkJkRU1zUlVGQk1rTkJMRXRCUVVzc1EwRkJReXhEUVVGRUxFTkJRV2hFTEVOQlFVNDdRVUZEUkN4SE96dFRRVVZFY1VVc1lTeEhRVUZCTEhsQ1FVRnBRanRCUVVObUxGRkJRVWxoTEVkQlFVY3NSMEZCUnl4TFFVRkxOVVlzVDBGQlRDeERRVUZoU1N4TlFVRmlMRU5CUVc5Q1F5eExRVUU1UWp0QlFVTkJMRlZCUVUwc1MwRkJTMUlzUzBGQlRDeERRVUZYT0VZc1MwRkJXQ3hEUVVGcFFpeG5Ra0ZCYWtJc1JVRkJiVU5ETEVkQlFVY3NRMEZCUTNSR0xFbEJRWFpETEVWQlFUWkRjMFlzUjBGQlJ5eERRVUZEY2tZc1RVRkJha1FzUTBGQlRqdEJRVU5FTEVjN08xTkJSVVJ0Uml4WExFZEJRVUVzY1VKQlFXRm9SaXhMUVVGaUxFVkJRVzlDTzBGQlEyeENMRlZCUVUwc1MwRkJTMklzUzBGQlRDeERRVUZYT0VZc1MwRkJXQ3hEUVVGcFFpeGpRVUZxUWl4RlFVRnBRMnBHTEV0QlFVc3NRMEZCUXl4RFFVRkVMRU5CUVhSRExFVkJRVEpEUVN4TFFVRkxMRU5CUVVNc1EwRkJSQ3hEUVVGb1JDeERRVUZPTzBGQlEwUXNSenM3VTBGRlJEUkVMR0VzUjBGQlFTeDFRa0ZCWld4RUxFbEJRV1lzUlVGQmNVSldMRXRCUVhKQ0xFVkJRVFJDTzBGQlF6RkNMRlZCUVUwc1MwRkJTMklzUzBGQlRDeERRVUZYT0VZc1MwRkJXQ3hEUVVGcFFpeHpRa0ZCYWtJc1JVRkJlVU5xUml4TFFVRkxMRU5CUVVNc1EwRkJSQ3hEUVVFNVF5eEZRVUZ0UkVFc1MwRkJTeXhEUVVGRExFTkJRVVFzUTBGQmVFUXNRMEZCVGp0QlFVTkVMRWM3TzFOQlJVUTBReXgxUWl4SFFVRkJPMEZCUVhsQ08wRkJRV01zUjBGRGNrTTdRVUZEUkN4SE96dFRRVVZFWVN4dlFpeEhRVUZCTERoQ1FVRnpRamxDTEUxQlFYUkNMRVZCUVRoQ08wRkJRelZDTEZGQlFVbElMRXRCUVVzc1IwRkJSeXhMUVVGTFFTeExRVUZNTEVOQlFWZEhMRTFCUVZnc1EwRkJXanRCUVVOQkxGRkJRVWxJTEV0QlFVc3NTMEZCU3l4TFFVRmtMRVZCUVhGQ08wRkJSWEpDTEZGQlFVa3lSQ3hQUVVGUExFZEJRVWNzUTBGQlpEdEJRVU5CTEZGQlFVbHVSaXhMUVVGS096dEJRVU5CTEZOQlFVc3NTVUZCU1hGRUxFTkJRVU1zUjBGQlJ6ZENMRXRCUVVzc1IwRkJSeXhEUVVGeVFpeEZRVUYzUWpaQ0xFTkJRVU1zU1VGQlNTeERRVUUzUWl4RlFVRm5RMEVzUTBGQlF5eEZRVUZxUXl4RlFVRnhRenRCUVVOdVEzSkVMRTFCUVVGQkxFdEJRVXNzUjBGQlJ6SkNMRTFCUVUwc1EwRkJRekJDTEVOQlFVUXNRMEZCWkRzN1FVRkRRU3hWUVVGSmNrUXNTMEZCU3l4RFFVRkRMRU5CUVVRc1EwRkJUQ3hMUVVGaExFOUJRV3BDTEVWQlFUQkNPMEZCUTNoQ2JVWXNVVUZCUVVFc1QwRkJUeXhKUVVGSkxFTkJRVmc3UVVGRFFTeFpRVUZKUVN4UFFVRlBMRXRCUVVzc1EwRkJhRUlzUlVGQmJVSTdRVUZEY0VJN1FVRkRSanM3UVVGRFJDeFZRVUZOTEV0QlFVdG9SeXhMUVVGTUxFTkJRVmM0Uml4TFFVRllMRU5CUVdsQ0xHdENRVUZxUWl4RlFVRnhRMnBHTEV0QlFVc3NRMEZCUXl4RFFVRkVMRU5CUVRGRExFVkJRU3REUVN4TFFVRkxMRU5CUVVNc1EwRkJSQ3hEUVVGd1JDeERRVUZPTzBGQlEwUXNSeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0JFWldOc1lYSmhkR2x2YmlCbWNtOXRJQ2N1TDJSbFkyeGhjbUYwYVc5dUoxeHVhVzF3YjNKMElIUnZhMlZ1YVhwbGNpQm1jbTl0SUNjdUwzUnZhMlZ1YVhwbEoxeHVhVzF3YjNKMElFTnZiVzFsYm5RZ1puSnZiU0FuTGk5amIyMXRaVzUwSjF4dWFXMXdiM0owSUVGMFVuVnNaU0JtY205dElDY3VMMkYwTFhKMWJHVW5YRzVwYlhCdmNuUWdVbTl2ZENCbWNtOXRJQ2N1TDNKdmIzUW5YRzVwYlhCdmNuUWdVblZzWlNCbWNtOXRJQ2N1TDNKMWJHVW5YRzVjYm1WNGNHOXlkQ0JrWldaaGRXeDBJR05zWVhOeklGQmhjbk5sY2lCN1hHNGdJR052Ym5OMGNuVmpkRzl5SUNocGJuQjFkQ2tnZTF4dUlDQWdJSFJvYVhNdWFXNXdkWFFnUFNCcGJuQjFkRnh1WEc0Z0lDQWdkR2hwY3k1eWIyOTBJRDBnYm1WM0lGSnZiM1FvS1Z4dUlDQWdJSFJvYVhNdVkzVnljbVZ1ZENBOUlIUm9hWE11Y205dmRGeHVJQ0FnSUhSb2FYTXVjM0JoWTJWeklEMGdKeWRjYmlBZ0lDQjBhR2x6TG5ObGJXbGpiMnh2YmlBOUlHWmhiSE5sWEc1Y2JpQWdJQ0IwYUdsekxtTnlaV0YwWlZSdmEyVnVhWHBsY2lncFhHNGdJQ0FnZEdocGN5NXliMjkwTG5OdmRYSmpaU0E5SUhzZ2FXNXdkWFFzSUhOMFlYSjBPaUI3SUd4cGJtVTZJREVzSUdOdmJIVnRiam9nTVNCOUlIMWNiaUFnZlZ4dVhHNGdJR055WldGMFpWUnZhMlZ1YVhwbGNpQW9LU0I3WEc0Z0lDQWdkR2hwY3k1MGIydGxibWw2WlhJZ1BTQjBiMnRsYm1sNlpYSW9kR2hwY3k1cGJuQjFkQ2xjYmlBZ2ZWeHVYRzRnSUhCaGNuTmxJQ2dwSUh0Y2JpQWdJQ0JzWlhRZ2RHOXJaVzVjYmlBZ0lDQjNhR2xzWlNBb0lYUm9hWE11ZEc5clpXNXBlbVZ5TG1WdVpFOW1SbWxzWlNncEtTQjdYRzRnSUNBZ0lDQjBiMnRsYmlBOUlIUm9hWE11ZEc5clpXNXBlbVZ5TG01bGVIUlViMnRsYmlncFhHNWNiaUFnSUNBZ0lITjNhWFJqYUNBb2RHOXJaVzViTUYwcElIdGNiaUFnSUNBZ0lDQWdZMkZ6WlNBbmMzQmhZMlVuT2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YzNCaFkyVnpJQ3M5SUhSdmEyVnVXekZkWEc0Z0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmx4dUlDQWdJQ0FnSUNCallYTmxJQ2M3SnpwY2JpQWdJQ0FnSUNBZ0lDQjBhR2x6TG1aeVpXVlRaVzFwWTI5c2IyNG9kRzlyWlc0cFhHNGdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JseHVJQ0FnSUNBZ0lDQmpZWE5sSUNkOUp6cGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtVnVaQ2gwYjJ0bGJpbGNiaUFnSUNBZ0lDQWdJQ0JpY21WaGExeHVYRzRnSUNBZ0lDQWdJR05oYzJVZ0oyTnZiVzFsYm5Rbk9seHVJQ0FnSUNBZ0lDQWdJSFJvYVhNdVkyOXRiV1Z1ZENoMGIydGxiaWxjYmlBZ0lDQWdJQ0FnSUNCaWNtVmhhMXh1WEc0Z0lDQWdJQ0FnSUdOaGMyVWdKMkYwTFhkdmNtUW5PbHh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVZWFJ5ZFd4bEtIUnZhMlZ1S1Z4dUlDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc1Y2JpQWdJQ0FnSUNBZ1kyRnpaU0FuZXljNlhHNGdJQ0FnSUNBZ0lDQWdkR2hwY3k1bGJYQjBlVkoxYkdVb2RHOXJaVzRwWEc0Z0lDQWdJQ0FnSUNBZ1luSmxZV3RjYmx4dUlDQWdJQ0FnSUNCa1pXWmhkV3gwT2x4dUlDQWdJQ0FnSUNBZ0lIUm9hWE11YjNSb1pYSW9kRzlyWlc0cFhHNGdJQ0FnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lDQWdkR2hwY3k1bGJtUkdhV3hsS0NsY2JpQWdmVnh1WEc0Z0lHTnZiVzFsYm5RZ0tIUnZhMlZ1S1NCN1hHNGdJQ0FnYkdWMElHNXZaR1VnUFNCdVpYY2dRMjl0YldWdWRDZ3BYRzRnSUNBZ2RHaHBjeTVwYm1sMEtHNXZaR1VzSUhSdmEyVnVXekpkTENCMGIydGxibHN6WFNsY2JpQWdJQ0J1YjJSbExuTnZkWEpqWlM1bGJtUWdQU0I3SUd4cGJtVTZJSFJ2YTJWdVd6UmRMQ0JqYjJ4MWJXNDZJSFJ2YTJWdVd6VmRJSDFjYmx4dUlDQWdJR3hsZENCMFpYaDBJRDBnZEc5clpXNWJNVjB1YzJ4cFkyVW9NaXdnTFRJcFhHNGdJQ0FnYVdZZ0tDOWVYRnh6S2lRdkxuUmxjM1FvZEdWNGRDa3BJSHRjYmlBZ0lDQWdJRzV2WkdVdWRHVjRkQ0E5SUNjblhHNGdJQ0FnSUNCdWIyUmxMbkpoZDNNdWJHVm1kQ0E5SUhSbGVIUmNiaUFnSUNBZ0lHNXZaR1V1Y21GM2N5NXlhV2RvZENBOUlDY25YRzRnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUd4bGRDQnRZWFJqYUNBOUlIUmxlSFF1YldGMFkyZ29MMTRvWEZ4ektpa29XMTVkS2x0ZVhGeHpYU2tvWEZ4ektpa2tMeWxjYmlBZ0lDQWdJRzV2WkdVdWRHVjRkQ0E5SUcxaGRHTm9XekpkWEc0Z0lDQWdJQ0J1YjJSbExuSmhkM011YkdWbWRDQTlJRzFoZEdOb1d6RmRYRzRnSUNBZ0lDQnViMlJsTG5KaGQzTXVjbWxuYUhRZ1BTQnRZWFJqYUZzelhWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lHVnRjSFI1VW5Wc1pTQW9kRzlyWlc0cElIdGNiaUFnSUNCc1pYUWdibTlrWlNBOUlHNWxkeUJTZFd4bEtDbGNiaUFnSUNCMGFHbHpMbWx1YVhRb2JtOWtaU3dnZEc5clpXNWJNbDBzSUhSdmEyVnVXek5kS1Z4dUlDQWdJRzV2WkdVdWMyVnNaV04wYjNJZ1BTQW5KMXh1SUNBZ0lHNXZaR1V1Y21GM2N5NWlaWFIzWldWdUlEMGdKeWRjYmlBZ0lDQjBhR2x6TG1OMWNuSmxiblFnUFNCdWIyUmxYRzRnSUgxY2JseHVJQ0J2ZEdobGNpQW9jM1JoY25RcElIdGNiaUFnSUNCc1pYUWdaVzVrSUQwZ1ptRnNjMlZjYmlBZ0lDQnNaWFFnZEhsd1pTQTlJRzUxYkd4Y2JpQWdJQ0JzWlhRZ1kyOXNiMjRnUFNCbVlXeHpaVnh1SUNBZ0lHeGxkQ0JpY21GamEyVjBJRDBnYm5Wc2JGeHVJQ0FnSUd4bGRDQmljbUZqYTJWMGN5QTlJRnRkWEc1Y2JpQWdJQ0JzWlhRZ2RHOXJaVzV6SUQwZ1cxMWNiaUFnSUNCc1pYUWdkRzlyWlc0Z1BTQnpkR0Z5ZEZ4dUlDQWdJSGRvYVd4bElDaDBiMnRsYmlrZ2UxeHVJQ0FnSUNBZ2RIbHdaU0E5SUhSdmEyVnVXekJkWEc0Z0lDQWdJQ0IwYjJ0bGJuTXVjSFZ6YUNoMGIydGxiaWxjYmx4dUlDQWdJQ0FnYVdZZ0tIUjVjR1VnUFQwOUlDY29KeUI4ZkNCMGVYQmxJRDA5UFNBbld5Y3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmljbUZqYTJWMEtTQmljbUZqYTJWMElEMGdkRzlyWlc1Y2JpQWdJQ0FnSUNBZ1luSmhZMnRsZEhNdWNIVnphQ2gwZVhCbElEMDlQU0FuS0NjZ1B5QW5LU2NnT2lBblhTY3BYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLR0p5WVdOclpYUnpMbXhsYm1kMGFDQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pTQTlQVDBnSnpzbktTQjdYRzRnSUNBZ0lDQWdJQ0FnYVdZZ0tHTnZiRzl1S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtUmxZMndvZEc5clpXNXpLVnh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVWdQVDA5SUNkN0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVjblZzWlNoMGIydGxibk1wWEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaU0E5UFQwZ0ozMG5LU0I3WEc0Z0lDQWdJQ0FnSUNBZ2RHaHBjeTUwYjJ0bGJtbDZaWEl1WW1GamF5aDBiMnRsYm5NdWNHOXdLQ2twWEc0Z0lDQWdJQ0FnSUNBZ1pXNWtJRDBnZEhKMVpWeHVJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCcFppQW9kSGx3WlNBOVBUMGdKem9uS1NCN1hHNGdJQ0FnSUNBZ0lDQWdZMjlzYjI0Z1BTQjBjblZsWEc0Z0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RIbHdaU0E5UFQwZ1luSmhZMnRsZEhOYlluSmhZMnRsZEhNdWJHVnVaM1JvSUMwZ01WMHBJSHRjYmlBZ0lDQWdJQ0FnWW5KaFkydGxkSE11Y0c5d0tDbGNiaUFnSUNBZ0lDQWdhV1lnS0dKeVlXTnJaWFJ6TG14bGJtZDBhQ0E5UFQwZ01Da2dZbkpoWTJ0bGRDQTlJRzUxYkd4Y2JpQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ2RHOXJaVzRnUFNCMGFHbHpMblJ2YTJWdWFYcGxjaTV1WlhoMFZHOXJaVzRvS1Z4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNoMGFHbHpMblJ2YTJWdWFYcGxjaTVsYm1SUFprWnBiR1VvS1NrZ1pXNWtJRDBnZEhKMVpWeHVJQ0FnSUdsbUlDaGljbUZqYTJWMGN5NXNaVzVuZEdnZ1BpQXdLU0IwYUdsekxuVnVZMnh2YzJWa1FuSmhZMnRsZENoaWNtRmphMlYwS1Z4dVhHNGdJQ0FnYVdZZ0tHVnVaQ0FtSmlCamIyeHZiaWtnZTF4dUlDQWdJQ0FnZDJocGJHVWdLSFJ2YTJWdWN5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lDQWdkRzlyWlc0Z1BTQjBiMnRsYm5OYmRHOXJaVzV6TG14bGJtZDBhQ0F0SURGZFd6QmRYRzRnSUNBZ0lDQWdJR2xtSUNoMGIydGxiaUFoUFQwZ0ozTndZV05sSnlBbUppQjBiMnRsYmlBaFBUMGdKMk52YlcxbGJuUW5LU0JpY21WaGExeHVJQ0FnSUNBZ0lDQjBhR2x6TG5SdmEyVnVhWHBsY2k1aVlXTnJLSFJ2YTJWdWN5NXdiM0FvS1NsY2JpQWdJQ0FnSUgxY2JpQWdJQ0FnSUhSb2FYTXVaR1ZqYkNoMGIydGxibk1wWEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9hWE11ZFc1cmJtOTNibGR2Y21Rb2RHOXJaVzV6S1Z4dUlDQWdJSDFjYmlBZ2ZWeHVYRzRnSUhKMWJHVWdLSFJ2YTJWdWN5a2dlMXh1SUNBZ0lIUnZhMlZ1Y3k1d2IzQW9LVnh1WEc0Z0lDQWdiR1YwSUc1dlpHVWdQU0J1WlhjZ1VuVnNaU2dwWEc0Z0lDQWdkR2hwY3k1cGJtbDBLRzV2WkdVc0lIUnZhMlZ1YzFzd1hWc3lYU3dnZEc5clpXNXpXekJkV3pOZEtWeHVYRzRnSUNBZ2JtOWtaUzV5WVhkekxtSmxkSGRsWlc0Z1BTQjBhR2x6TG5Od1lXTmxjMEZ1WkVOdmJXMWxiblJ6Um5KdmJVVnVaQ2gwYjJ0bGJuTXBYRzRnSUNBZ2RHaHBjeTV5WVhjb2JtOWtaU3dnSjNObGJHVmpkRzl5Snl3Z2RHOXJaVzV6S1Z4dUlDQWdJSFJvYVhNdVkzVnljbVZ1ZENBOUlHNXZaR1ZjYmlBZ2ZWeHVYRzRnSUdSbFkyd2dLSFJ2YTJWdWN5a2dlMXh1SUNBZ0lHeGxkQ0J1YjJSbElEMGdibVYzSUVSbFkyeGhjbUYwYVc5dUtDbGNiaUFnSUNCMGFHbHpMbWx1YVhRb2JtOWtaU2xjYmx4dUlDQWdJR3hsZENCc1lYTjBJRDBnZEc5clpXNXpXM1J2YTJWdWN5NXNaVzVuZEdnZ0xTQXhYVnh1SUNBZ0lHbG1JQ2hzWVhOMFd6QmRJRDA5UFNBbk95Y3BJSHRjYmlBZ0lDQWdJSFJvYVhNdWMyVnRhV052Ykc5dUlEMGdkSEoxWlZ4dUlDQWdJQ0FnZEc5clpXNXpMbkJ2Y0NncFhHNGdJQ0FnZlZ4dUlDQWdJR2xtSUNoc1lYTjBXelJkS1NCN1hHNGdJQ0FnSUNCdWIyUmxMbk52ZFhKalpTNWxibVFnUFNCN0lHeHBibVU2SUd4aGMzUmJORjBzSUdOdmJIVnRiam9nYkdGemRGczFYU0I5WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHNXZaR1V1YzI5MWNtTmxMbVZ1WkNBOUlIc2diR2x1WlRvZ2JHRnpkRnN5WFN3Z1kyOXNkVzF1T2lCc1lYTjBXek5kSUgxY2JpQWdJQ0I5WEc1Y2JpQWdJQ0IzYUdsc1pTQW9kRzlyWlc1eld6QmRXekJkSUNFOVBTQW5kMjl5WkNjcElIdGNiaUFnSUNBZ0lHbG1JQ2gwYjJ0bGJuTXViR1Z1WjNSb0lEMDlQU0F4S1NCMGFHbHpMblZ1YTI1dmQyNVhiM0prS0hSdmEyVnVjeWxjYmlBZ0lDQWdJRzV2WkdVdWNtRjNjeTVpWldadmNtVWdLejBnZEc5clpXNXpMbk5vYVdaMEtDbGJNVjFjYmlBZ0lDQjlYRzRnSUNBZ2JtOWtaUzV6YjNWeVkyVXVjM1JoY25RZ1BTQjdJR3hwYm1VNklIUnZhMlZ1YzFzd1hWc3lYU3dnWTI5c2RXMXVPaUIwYjJ0bGJuTmJNRjFiTTEwZ2ZWeHVYRzRnSUNBZ2JtOWtaUzV3Y205d0lEMGdKeWRjYmlBZ0lDQjNhR2xzWlNBb2RHOXJaVzV6TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnYkdWMElIUjVjR1VnUFNCMGIydGxibk5iTUYxYk1GMWNiaUFnSUNBZ0lHbG1JQ2gwZVhCbElEMDlQU0FuT2ljZ2ZId2dkSGx3WlNBOVBUMGdKM053WVdObEp5QjhmQ0IwZVhCbElEMDlQU0FuWTI5dGJXVnVkQ2NwSUh0Y2JpQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJSDFjYmlBZ0lDQWdJRzV2WkdVdWNISnZjQ0FyUFNCMGIydGxibk11YzJocFpuUW9LVnN4WFZ4dUlDQWdJSDFjYmx4dUlDQWdJRzV2WkdVdWNtRjNjeTVpWlhSM1pXVnVJRDBnSnlkY2JseHVJQ0FnSUd4bGRDQjBiMnRsYmx4dUlDQWdJSGRvYVd4bElDaDBiMnRsYm5NdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNCMGIydGxiaUE5SUhSdmEyVnVjeTV6YUdsbWRDZ3BYRzVjYmlBZ0lDQWdJR2xtSUNoMGIydGxibHN3WFNBOVBUMGdKem9uS1NCN1hHNGdJQ0FnSUNBZ0lHNXZaR1V1Y21GM2N5NWlaWFIzWldWdUlDczlJSFJ2YTJWdVd6RmRYRzRnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCcFppQW9kRzlyWlc1Yk1GMGdQVDA5SUNkM2IzSmtKeUFtSmlBdlhGeDNMeTUwWlhOMEtIUnZhMlZ1V3pGZEtTa2dlMXh1SUNBZ0lDQWdJQ0FnSUhSb2FYTXVkVzVyYm05M2JsZHZjbVFvVzNSdmEyVnVYU2xjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCdWIyUmxMbkpoZDNNdVltVjBkMlZsYmlBclBTQjBiMnRsYmxzeFhWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JseHVJQ0FnSUdsbUlDaHViMlJsTG5CeWIzQmJNRjBnUFQwOUlDZGZKeUI4ZkNCdWIyUmxMbkJ5YjNCYk1GMGdQVDA5SUNjcUp5a2dlMXh1SUNBZ0lDQWdibTlrWlM1eVlYZHpMbUpsWm05eVpTQXJQU0J1YjJSbExuQnliM0JiTUYxY2JpQWdJQ0FnSUc1dlpHVXVjSEp2Y0NBOUlHNXZaR1V1Y0hKdmNDNXpiR2xqWlNneEtWeHVJQ0FnSUgxY2JpQWdJQ0J1YjJSbExuSmhkM011WW1WMGQyVmxiaUFyUFNCMGFHbHpMbk53WVdObGMwRnVaRU52YlcxbGJuUnpSbkp2YlZOMFlYSjBLSFJ2YTJWdWN5bGNiaUFnSUNCMGFHbHpMbkJ5WldOb1pXTnJUV2x6YzJWa1UyVnRhV052Ykc5dUtIUnZhMlZ1Y3lsY2JseHVJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQjBiMnRsYm5NdWJHVnVaM1JvSUMwZ01Uc2dhU0ErSURBN0lHa3RMU2tnZTF4dUlDQWdJQ0FnZEc5clpXNGdQU0IwYjJ0bGJuTmJhVjFjYmlBZ0lDQWdJR2xtSUNoMGIydGxibHN4WFM1MGIweHZkMlZ5UTJGelpTZ3BJRDA5UFNBbklXbHRjRzl5ZEdGdWRDY3BJSHRjYmlBZ0lDQWdJQ0FnYm05a1pTNXBiWEJ2Y25SaGJuUWdQU0IwY25WbFhHNGdJQ0FnSUNBZ0lHeGxkQ0J6ZEhKcGJtY2dQU0IwYUdsekxuTjBjbWx1WjBaeWIyMG9kRzlyWlc1ekxDQnBLVnh1SUNBZ0lDQWdJQ0J6ZEhKcGJtY2dQU0IwYUdsekxuTndZV05sYzBaeWIyMUZibVFvZEc5clpXNXpLU0FySUhOMGNtbHVaMXh1SUNBZ0lDQWdJQ0JwWmlBb2MzUnlhVzVuSUNFOVBTQW5JQ0ZwYlhCdmNuUmhiblFuS1NCdWIyUmxMbkpoZDNNdWFXMXdiM0owWVc1MElEMGdjM1J5YVc1blhHNGdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSdmEyVnVXekZkTG5SdlRHOTNaWEpEWVhObEtDa2dQVDA5SUNkcGJYQnZjblJoYm5RbktTQjdYRzRnSUNBZ0lDQWdJR3hsZENCallXTm9aU0E5SUhSdmEyVnVjeTV6YkdsalpTZ3dLVnh1SUNBZ0lDQWdJQ0JzWlhRZ2MzUnlJRDBnSnlkY2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FpQTlJR2s3SUdvZ1BpQXdPeUJxTFMwcElIdGNiaUFnSUNBZ0lDQWdJQ0JzWlhRZ2RIbHdaU0E5SUdOaFkyaGxXMnBkV3pCZFhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0hOMGNpNTBjbWx0S0NrdWFXNWtaWGhQWmlnbklTY3BJRDA5UFNBd0lDWW1JSFI1Y0dVZ0lUMDlJQ2R6Y0dGalpTY3BJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ0lDQWdJSE4wY2lBOUlHTmhZMmhsTG5CdmNDZ3BXekZkSUNzZ2MzUnlYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJQ0FnYVdZZ0tITjBjaTUwY21sdEtDa3VhVzVrWlhoUFppZ25JU2NwSUQwOVBTQXdLU0I3WEc0Z0lDQWdJQ0FnSUNBZ2JtOWtaUzVwYlhCdmNuUmhiblFnUFNCMGNuVmxYRzRnSUNBZ0lDQWdJQ0FnYm05a1pTNXlZWGR6TG1sdGNHOXlkR0Z1ZENBOUlITjBjbHh1SUNBZ0lDQWdJQ0FnSUhSdmEyVnVjeUE5SUdOaFkyaGxYRzRnSUNBZ0lDQWdJSDFjYmlBZ0lDQWdJSDFjYmx4dUlDQWdJQ0FnYVdZZ0tIUnZhMlZ1V3pCZElDRTlQU0FuYzNCaFkyVW5JQ1ltSUhSdmEyVnVXekJkSUNFOVBTQW5ZMjl0YldWdWRDY3BJSHRjYmlBZ0lDQWdJQ0FnWW5KbFlXdGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCMGFHbHpMbkpoZHlodWIyUmxMQ0FuZG1Gc2RXVW5MQ0IwYjJ0bGJuTXBYRzVjYmlBZ0lDQnBaaUFvYm05a1pTNTJZV3gxWlM1cGJtUmxlRTltS0NjNkp5a2dJVDA5SUMweEtTQjBhR2x6TG1Ob1pXTnJUV2x6YzJWa1UyVnRhV052Ykc5dUtIUnZhMlZ1Y3lsY2JpQWdmVnh1WEc0Z0lHRjBjblZzWlNBb2RHOXJaVzRwSUh0Y2JpQWdJQ0JzWlhRZ2JtOWtaU0E5SUc1bGR5QkJkRkoxYkdVb0tWeHVJQ0FnSUc1dlpHVXVibUZ0WlNBOUlIUnZhMlZ1V3pGZExuTnNhV05sS0RFcFhHNGdJQ0FnYVdZZ0tHNXZaR1V1Ym1GdFpTQTlQVDBnSnljcElIdGNiaUFnSUNBZ0lIUm9hWE11ZFc1dVlXMWxaRUYwY25Wc1pTaHViMlJsTENCMGIydGxiaWxjYmlBZ0lDQjlYRzRnSUNBZ2RHaHBjeTVwYm1sMEtHNXZaR1VzSUhSdmEyVnVXekpkTENCMGIydGxibHN6WFNsY2JseHVJQ0FnSUd4bGRDQndjbVYyWEc0Z0lDQWdiR1YwSUhOb2FXWjBYRzRnSUNBZ2JHVjBJR3hoYzNRZ1BTQm1ZV3h6WlZ4dUlDQWdJR3hsZENCdmNHVnVJRDBnWm1Gc2MyVmNiaUFnSUNCc1pYUWdjR0Z5WVcxeklEMGdXMTFjYmx4dUlDQWdJSGRvYVd4bElDZ2hkR2hwY3k1MGIydGxibWw2WlhJdVpXNWtUMlpHYVd4bEtDa3BJSHRjYmlBZ0lDQWdJSFJ2YTJWdUlEMGdkR2hwY3k1MGIydGxibWw2WlhJdWJtVjRkRlJ2YTJWdUtDbGNibHh1SUNBZ0lDQWdhV1lnS0hSdmEyVnVXekJkSUQwOVBTQW5PeWNwSUh0Y2JpQWdJQ0FnSUNBZ2JtOWtaUzV6YjNWeVkyVXVaVzVrSUQwZ2V5QnNhVzVsT2lCMGIydGxibHN5WFN3Z1kyOXNkVzF1T2lCMGIydGxibHN6WFNCOVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWdGFXTnZiRzl1SUQwZ2RISjFaVnh1SUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaDBiMnRsYmxzd1hTQTlQVDBnSjNzbktTQjdYRzRnSUNBZ0lDQWdJRzl3Wlc0Z1BTQjBjblZsWEc0Z0lDQWdJQ0FnSUdKeVpXRnJYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSFJ2YTJWdVd6QmRJRDA5UFNBbmZTY3BJSHRjYmlBZ0lDQWdJQ0FnYVdZZ0tIQmhjbUZ0Y3k1c1pXNW5kR2dnUGlBd0tTQjdYRzRnSUNBZ0lDQWdJQ0FnYzJocFpuUWdQU0J3WVhKaGJYTXViR1Z1WjNSb0lDMGdNVnh1SUNBZ0lDQWdJQ0FnSUhCeVpYWWdQU0J3WVhKaGJYTmJjMmhwWm5SZFhHNGdJQ0FnSUNBZ0lDQWdkMmhwYkdVZ0tIQnlaWFlnSmlZZ2NISmxkbHN3WFNBOVBUMGdKM053WVdObEp5a2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2NISmxkaUE5SUhCaGNtRnRjMXN0TFhOb2FXWjBYVnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQnBaaUFvY0hKbGRpa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2JtOWtaUzV6YjNWeVkyVXVaVzVrSUQwZ2V5QnNhVzVsT2lCd2NtVjJXelJkTENCamIyeDFiVzQ2SUhCeVpYWmJOVjBnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0IwYUdsekxtVnVaQ2gwYjJ0bGJpbGNiaUFnSUNBZ0lDQWdZbkpsWVd0Y2JpQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUhCaGNtRnRjeTV3ZFhOb0tIUnZhMlZ1S1Z4dUlDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNCcFppQW9kR2hwY3k1MGIydGxibWw2WlhJdVpXNWtUMlpHYVd4bEtDa3BJSHRjYmlBZ0lDQWdJQ0FnYkdGemRDQTlJSFJ5ZFdWY2JpQWdJQ0FnSUNBZ1luSmxZV3RjYmlBZ0lDQWdJSDFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnViMlJsTG5KaGQzTXVZbVYwZDJWbGJpQTlJSFJvYVhNdWMzQmhZMlZ6UVc1a1EyOXRiV1Z1ZEhOR2NtOXRSVzVrS0hCaGNtRnRjeWxjYmlBZ0lDQnBaaUFvY0dGeVlXMXpMbXhsYm1kMGFDa2dlMXh1SUNBZ0lDQWdibTlrWlM1eVlYZHpMbUZtZEdWeVRtRnRaU0E5SUhSb2FYTXVjM0JoWTJWelFXNWtRMjl0YldWdWRITkdjbTl0VTNSaGNuUW9jR0Z5WVcxektWeHVJQ0FnSUNBZ2RHaHBjeTV5WVhjb2JtOWtaU3dnSjNCaGNtRnRjeWNzSUhCaGNtRnRjeWxjYmlBZ0lDQWdJR2xtSUNoc1lYTjBLU0I3WEc0Z0lDQWdJQ0FnSUhSdmEyVnVJRDBnY0dGeVlXMXpXM0JoY21GdGN5NXNaVzVuZEdnZ0xTQXhYVnh1SUNBZ0lDQWdJQ0J1YjJSbExuTnZkWEpqWlM1bGJtUWdQU0I3SUd4cGJtVTZJSFJ2YTJWdVd6UmRMQ0JqYjJ4MWJXNDZJSFJ2YTJWdVd6VmRJSDFjYmlBZ0lDQWdJQ0FnZEdocGN5NXpjR0ZqWlhNZ1BTQnViMlJsTG5KaGQzTXVZbVYwZDJWbGJseHVJQ0FnSUNBZ0lDQnViMlJsTG5KaGQzTXVZbVYwZDJWbGJpQTlJQ2NuWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lHNXZaR1V1Y21GM2N5NWhablJsY2s1aGJXVWdQU0FuSjF4dUlDQWdJQ0FnYm05a1pTNXdZWEpoYlhNZ1BTQW5KMXh1SUNBZ0lIMWNibHh1SUNBZ0lHbG1JQ2h2Y0dWdUtTQjdYRzRnSUNBZ0lDQnViMlJsTG01dlpHVnpJRDBnVzExY2JpQWdJQ0FnSUhSb2FYTXVZM1Z5Y21WdWRDQTlJRzV2WkdWY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCbGJtUWdLSFJ2YTJWdUtTQjdYRzRnSUNBZ2FXWWdLSFJvYVhNdVkzVnljbVZ1ZEM1dWIyUmxjeUFtSmlCMGFHbHpMbU4xY25KbGJuUXVibTlrWlhNdWJHVnVaM1JvS1NCN1hHNGdJQ0FnSUNCMGFHbHpMbU4xY25KbGJuUXVjbUYzY3k1elpXMXBZMjlzYjI0Z1BTQjBhR2x6TG5ObGJXbGpiMnh2Ymx4dUlDQWdJSDFjYmlBZ0lDQjBhR2x6TG5ObGJXbGpiMnh2YmlBOUlHWmhiSE5sWEc1Y2JpQWdJQ0IwYUdsekxtTjFjbkpsYm5RdWNtRjNjeTVoWm5SbGNpQTlJQ2gwYUdsekxtTjFjbkpsYm5RdWNtRjNjeTVoWm5SbGNpQjhmQ0FuSnlrZ0t5QjBhR2x6TG5Od1lXTmxjMXh1SUNBZ0lIUm9hWE11YzNCaFkyVnpJRDBnSnlkY2JseHVJQ0FnSUdsbUlDaDBhR2x6TG1OMWNuSmxiblF1Y0dGeVpXNTBLU0I3WEc0Z0lDQWdJQ0IwYUdsekxtTjFjbkpsYm5RdWMyOTFjbU5sTG1WdVpDQTlJSHNnYkdsdVpUb2dkRzlyWlc1Yk1sMHNJR052YkhWdGJqb2dkRzlyWlc1Yk0xMGdmVnh1SUNBZ0lDQWdkR2hwY3k1amRYSnlaVzUwSUQwZ2RHaHBjeTVqZFhKeVpXNTBMbkJoY21WdWRGeHVJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0IwYUdsekxuVnVaWGh3WldOMFpXUkRiRzl6WlNoMGIydGxiaWxjYmlBZ0lDQjlYRzRnSUgxY2JseHVJQ0JsYm1SR2FXeGxJQ2dwSUh0Y2JpQWdJQ0JwWmlBb2RHaHBjeTVqZFhKeVpXNTBMbkJoY21WdWRDa2dkR2hwY3k1MWJtTnNiM05sWkVKc2IyTnJLQ2xjYmlBZ0lDQnBaaUFvZEdocGN5NWpkWEp5Wlc1MExtNXZaR1Z6SUNZbUlIUm9hWE11WTNWeWNtVnVkQzV1YjJSbGN5NXNaVzVuZEdncElIdGNiaUFnSUNBZ0lIUm9hWE11WTNWeWNtVnVkQzV5WVhkekxuTmxiV2xqYjJ4dmJpQTlJSFJvYVhNdWMyVnRhV052Ykc5dVhHNGdJQ0FnZlZ4dUlDQWdJSFJvYVhNdVkzVnljbVZ1ZEM1eVlYZHpMbUZtZEdWeUlEMGdLSFJvYVhNdVkzVnljbVZ1ZEM1eVlYZHpMbUZtZEdWeUlIeDhJQ2NuS1NBcklIUm9hWE11YzNCaFkyVnpYRzRnSUgxY2JseHVJQ0JtY21WbFUyVnRhV052Ykc5dUlDaDBiMnRsYmlrZ2UxeHVJQ0FnSUhSb2FYTXVjM0JoWTJWeklDczlJSFJ2YTJWdVd6RmRYRzRnSUNBZ2FXWWdLSFJvYVhNdVkzVnljbVZ1ZEM1dWIyUmxjeWtnZTF4dUlDQWdJQ0FnYkdWMElIQnlaWFlnUFNCMGFHbHpMbU4xY25KbGJuUXVibTlrWlhOYmRHaHBjeTVqZFhKeVpXNTBMbTV2WkdWekxteGxibWQwYUNBdElERmRYRzRnSUNBZ0lDQnBaaUFvY0hKbGRpQW1KaUJ3Y21WMkxuUjVjR1VnUFQwOUlDZHlkV3hsSnlBbUppQWhjSEpsZGk1eVlYZHpMbTkzYmxObGJXbGpiMnh2YmlrZ2UxeHVJQ0FnSUNBZ0lDQndjbVYyTG5KaGQzTXViM2R1VTJWdGFXTnZiRzl1SUQwZ2RHaHBjeTV6Y0dGalpYTmNiaUFnSUNBZ0lDQWdkR2hwY3k1emNHRmpaWE1nUFNBbkoxeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdmVnh1WEc0Z0lDOHZJRWhsYkhCbGNuTmNibHh1SUNCcGJtbDBJQ2h1YjJSbExDQnNhVzVsTENCamIyeDFiVzRwSUh0Y2JpQWdJQ0IwYUdsekxtTjFjbkpsYm5RdWNIVnphQ2h1YjJSbEtWeHVYRzRnSUNBZ2JtOWtaUzV6YjNWeVkyVWdQU0I3SUhOMFlYSjBPaUI3SUd4cGJtVXNJR052YkhWdGJpQjlMQ0JwYm5CMWREb2dkR2hwY3k1cGJuQjFkQ0I5WEc0Z0lDQWdibTlrWlM1eVlYZHpMbUpsWm05eVpTQTlJSFJvYVhNdWMzQmhZMlZ6WEc0Z0lDQWdkR2hwY3k1emNHRmpaWE1nUFNBbkoxeHVJQ0FnSUdsbUlDaHViMlJsTG5SNWNHVWdJVDA5SUNkamIyMXRaVzUwSnlrZ2RHaHBjeTV6WlcxcFkyOXNiMjRnUFNCbVlXeHpaVnh1SUNCOVhHNWNiaUFnY21GM0lDaHViMlJsTENCd2NtOXdMQ0IwYjJ0bGJuTXBJSHRjYmlBZ0lDQnNaWFFnZEc5clpXNHNJSFI1Y0dWY2JpQWdJQ0JzWlhRZ2JHVnVaM1JvSUQwZ2RHOXJaVzV6TG14bGJtZDBhRnh1SUNBZ0lHeGxkQ0IyWVd4MVpTQTlJQ2NuWEc0Z0lDQWdiR1YwSUdOc1pXRnVJRDBnZEhKMVpWeHVJQ0FnSUd4bGRDQnVaWGgwTENCd2NtVjJYRzRnSUNBZ2JHVjBJSEJoZEhSbGNtNGdQU0F2WGloYkxud2pYU2svS0Z0Y1hIZGRLU3N2YVZ4dVhHNGdJQ0FnWm05eUlDaHNaWFFnYVNBOUlEQTdJR2tnUENCc1pXNW5kR2c3SUdrZ0t6MGdNU2tnZTF4dUlDQWdJQ0FnZEc5clpXNGdQU0IwYjJ0bGJuTmJhVjFjYmlBZ0lDQWdJSFI1Y0dVZ1BTQjBiMnRsYmxzd1hWeHVYRzRnSUNBZ0lDQnBaaUFvZEhsd1pTQTlQVDBnSjJOdmJXMWxiblFuSUNZbUlHNXZaR1V1ZEhsd1pTQTlQVDBnSjNKMWJHVW5LU0I3WEc0Z0lDQWdJQ0FnSUhCeVpYWWdQU0IwYjJ0bGJuTmJhU0F0SURGZFhHNGdJQ0FnSUNBZ0lHNWxlSFFnUFNCMGIydGxibk5iYVNBcklERmRYRzVjYmlBZ0lDQWdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJSEJ5WlhaYk1GMGdJVDA5SUNkemNHRmpaU2NnSmlaY2JpQWdJQ0FnSUNBZ0lDQnVaWGgwV3pCZElDRTlQU0FuYzNCaFkyVW5JQ1ltWEc0Z0lDQWdJQ0FnSUNBZ2NHRjBkR1Z5Ymk1MFpYTjBLSEJ5WlhaYk1WMHBJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ2NHRjBkR1Z5Ymk1MFpYTjBLRzVsZUhSYk1WMHBYRzRnSUNBZ0lDQWdJQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lIWmhiSFZsSUNzOUlIUnZhMlZ1V3pGZFhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdZMnhsWVc0Z1BTQm1ZV3h6WlZ4dUlDQWdJQ0FnSUNCOVhHNWNiaUFnSUNBZ0lDQWdZMjl1ZEdsdWRXVmNiaUFnSUNBZ0lIMWNibHh1SUNBZ0lDQWdhV1lnS0hSNWNHVWdQVDA5SUNkamIyMXRaVzUwSnlCOGZDQW9kSGx3WlNBOVBUMGdKM053WVdObEp5QW1KaUJwSUQwOVBTQnNaVzVuZEdnZ0xTQXhLU2tnZTF4dUlDQWdJQ0FnSUNCamJHVmhiaUE5SUdaaGJITmxYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjJZV3gxWlNBclBTQjBiMnRsYmxzeFhWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgxY2JpQWdJQ0JwWmlBb0lXTnNaV0Z1S1NCN1hHNGdJQ0FnSUNCc1pYUWdjbUYzSUQwZ2RHOXJaVzV6TG5KbFpIVmpaU2dvWVd4c0xDQnBLU0E5UGlCaGJHd2dLeUJwV3pGZExDQW5KeWxjYmlBZ0lDQWdJRzV2WkdVdWNtRjNjMXR3Y205d1hTQTlJSHNnZG1Gc2RXVXNJSEpoZHlCOVhHNGdJQ0FnZlZ4dUlDQWdJRzV2WkdWYmNISnZjRjBnUFNCMllXeDFaVnh1SUNCOVhHNWNiaUFnYzNCaFkyVnpRVzVrUTI5dGJXVnVkSE5HY205dFJXNWtJQ2gwYjJ0bGJuTXBJSHRjYmlBZ0lDQnNaWFFnYkdGemRGUnZhMlZ1Vkhsd1pWeHVJQ0FnSUd4bGRDQnpjR0ZqWlhNZ1BTQW5KMXh1SUNBZ0lIZG9hV3hsSUNoMGIydGxibk11YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0JzWVhOMFZHOXJaVzVVZVhCbElEMGdkRzlyWlc1elczUnZhMlZ1Y3k1c1pXNW5kR2dnTFNBeFhWc3dYVnh1SUNBZ0lDQWdhV1lnS0d4aGMzUlViMnRsYmxSNWNHVWdJVDA5SUNkemNHRmpaU2NnSmlZZ2JHRnpkRlJ2YTJWdVZIbHdaU0FoUFQwZ0oyTnZiVzFsYm5RbktTQmljbVZoYTF4dUlDQWdJQ0FnYzNCaFkyVnpJRDBnZEc5clpXNXpMbkJ2Y0NncFd6RmRJQ3NnYzNCaFkyVnpYRzRnSUNBZ2ZWeHVJQ0FnSUhKbGRIVnliaUJ6Y0dGalpYTmNiaUFnZlZ4dVhHNGdJSE53WVdObGMwRnVaRU52YlcxbGJuUnpSbkp2YlZOMFlYSjBJQ2gwYjJ0bGJuTXBJSHRjYmlBZ0lDQnNaWFFnYm1WNGRGeHVJQ0FnSUd4bGRDQnpjR0ZqWlhNZ1BTQW5KMXh1SUNBZ0lIZG9hV3hsSUNoMGIydGxibk11YkdWdVozUm9LU0I3WEc0Z0lDQWdJQ0J1WlhoMElEMGdkRzlyWlc1eld6QmRXekJkWEc0Z0lDQWdJQ0JwWmlBb2JtVjRkQ0FoUFQwZ0ozTndZV05sSnlBbUppQnVaWGgwSUNFOVBTQW5ZMjl0YldWdWRDY3BJR0p5WldGclhHNGdJQ0FnSUNCemNHRmpaWE1nS3owZ2RHOXJaVzV6TG5Ob2FXWjBLQ2xiTVYxY2JpQWdJQ0I5WEc0Z0lDQWdjbVYwZFhKdUlITndZV05sYzF4dUlDQjlYRzVjYmlBZ2MzQmhZMlZ6Um5KdmJVVnVaQ0FvZEc5clpXNXpLU0I3WEc0Z0lDQWdiR1YwSUd4aGMzUlViMnRsYmxSNWNHVmNiaUFnSUNCc1pYUWdjM0JoWTJWeklEMGdKeWRjYmlBZ0lDQjNhR2xzWlNBb2RHOXJaVzV6TG14bGJtZDBhQ2tnZTF4dUlDQWdJQ0FnYkdGemRGUnZhMlZ1Vkhsd1pTQTlJSFJ2YTJWdWMxdDBiMnRsYm5NdWJHVnVaM1JvSUMwZ01WMWJNRjFjYmlBZ0lDQWdJR2xtSUNoc1lYTjBWRzlyWlc1VWVYQmxJQ0U5UFNBbmMzQmhZMlVuS1NCaWNtVmhhMXh1SUNBZ0lDQWdjM0JoWTJWeklEMGdkRzlyWlc1ekxuQnZjQ2dwV3pGZElDc2djM0JoWTJWelhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQnpjR0ZqWlhOY2JpQWdmVnh1WEc0Z0lITjBjbWx1WjBaeWIyMGdLSFJ2YTJWdWN5d2dabkp2YlNrZ2UxeHVJQ0FnSUd4bGRDQnlaWE4xYkhRZ1BTQW5KMXh1SUNBZ0lHWnZjaUFvYkdWMElHa2dQU0JtY205dE95QnBJRHdnZEc5clpXNXpMbXhsYm1kMGFEc2dhU3NyS1NCN1hHNGdJQ0FnSUNCeVpYTjFiSFFnS3owZ2RHOXJaVzV6VzJsZFd6RmRYRzRnSUNBZ2ZWeHVJQ0FnSUhSdmEyVnVjeTV6Y0d4cFkyVW9abkp2YlN3Z2RHOXJaVzV6TG14bGJtZDBhQ0F0SUdaeWIyMHBYRzRnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkRnh1SUNCOVhHNWNiaUFnWTI5c2IyNGdLSFJ2YTJWdWN5a2dlMXh1SUNBZ0lHeGxkQ0JpY21GamEyVjBjeUE5SURCY2JpQWdJQ0JzWlhRZ2RHOXJaVzRzSUhSNWNHVXNJSEJ5WlhaY2JpQWdJQ0JtYjNJZ0tHeGxkQ0JwSUQwZ01Ec2dhU0E4SUhSdmEyVnVjeTVzWlc1bmRHZzdJR2tyS3lrZ2UxeHVJQ0FnSUNBZ2RHOXJaVzRnUFNCMGIydGxibk5iYVYxY2JpQWdJQ0FnSUhSNWNHVWdQU0IwYjJ0bGJsc3dYVnh1WEc0Z0lDQWdJQ0JwWmlBb2RIbHdaU0E5UFQwZ0p5Z25LU0I3WEc0Z0lDQWdJQ0FnSUdKeVlXTnJaWFJ6SUNzOUlERmNiaUFnSUNBZ0lIMWNiaUFnSUNBZ0lHbG1JQ2gwZVhCbElEMDlQU0FuS1NjcElIdGNiaUFnSUNBZ0lDQWdZbkpoWTJ0bGRITWdMVDBnTVZ4dUlDQWdJQ0FnZlZ4dUlDQWdJQ0FnYVdZZ0tHSnlZV05yWlhSeklEMDlQU0F3SUNZbUlIUjVjR1VnUFQwOUlDYzZKeWtnZTF4dUlDQWdJQ0FnSUNCcFppQW9JWEJ5WlhZcElIdGNiaUFnSUNBZ0lDQWdJQ0IwYUdsekxtUnZkV0pzWlVOdmJHOXVLSFJ2YTJWdUtWeHVJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEJ5WlhaYk1GMGdQVDA5SUNkM2IzSmtKeUFtSmlCd2NtVjJXekZkSUQwOVBTQW5jSEp2WjJsa0p5a2dlMXh1SUNBZ0lDQWdJQ0FnSUdOdmJuUnBiblZsWEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQndjbVYySUQwZ2RHOXJaVzVjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUdaaGJITmxYRzRnSUgxY2JseHVJQ0F2THlCRmNuSnZjbk5jYmx4dUlDQjFibU5zYjNObFpFSnlZV05yWlhRZ0tHSnlZV05yWlhRcElIdGNiaUFnSUNCMGFISnZkeUIwYUdsekxtbHVjSFYwTG1WeWNtOXlLQ2RWYm1Oc2IzTmxaQ0JpY21GamEyVjBKeXdnWW5KaFkydGxkRnN5WFN3Z1luSmhZMnRsZEZzelhTbGNiaUFnZlZ4dVhHNGdJSFZ1YTI1dmQyNVhiM0prSUNoMGIydGxibk1wSUh0Y2JpQWdJQ0IwYUhKdmR5QjBhR2x6TG1sdWNIVjBMbVZ5Y205eUtDZFZibXR1YjNkdUlIZHZjbVFuTENCMGIydGxibk5iTUYxYk1sMHNJSFJ2YTJWdWMxc3dYVnN6WFNsY2JpQWdmVnh1WEc0Z0lIVnVaWGh3WldOMFpXUkRiRzl6WlNBb2RHOXJaVzRwSUh0Y2JpQWdJQ0IwYUhKdmR5QjBhR2x6TG1sdWNIVjBMbVZ5Y205eUtDZFZibVY0Y0dWamRHVmtJSDBuTENCMGIydGxibHN5WFN3Z2RHOXJaVzViTTEwcFhHNGdJSDFjYmx4dUlDQjFibU5zYjNObFpFSnNiMk5ySUNncElIdGNiaUFnSUNCc1pYUWdjRzl6SUQwZ2RHaHBjeTVqZFhKeVpXNTBMbk52ZFhKalpTNXpkR0Z5ZEZ4dUlDQWdJSFJvY205M0lIUm9hWE11YVc1d2RYUXVaWEp5YjNJb0oxVnVZMnh2YzJWa0lHSnNiMk5ySnl3Z2NHOXpMbXhwYm1Vc0lIQnZjeTVqYjJ4MWJXNHBYRzRnSUgxY2JseHVJQ0JrYjNWaWJHVkRiMnh2YmlBb2RHOXJaVzRwSUh0Y2JpQWdJQ0IwYUhKdmR5QjBhR2x6TG1sdWNIVjBMbVZ5Y205eUtDZEViM1ZpYkdVZ1kyOXNiMjRuTENCMGIydGxibHN5WFN3Z2RHOXJaVzViTTEwcFhHNGdJSDFjYmx4dUlDQjFibTVoYldWa1FYUnlkV3hsSUNodWIyUmxMQ0IwYjJ0bGJpa2dlMXh1SUNBZ0lIUm9jbTkzSUhSb2FYTXVhVzV3ZFhRdVpYSnliM0lvSjBGMExYSjFiR1VnZDJsMGFHOTFkQ0J1WVcxbEp5d2dkRzlyWlc1Yk1sMHNJSFJ2YTJWdVd6TmRLVnh1SUNCOVhHNWNiaUFnY0hKbFkyaGxZMnROYVhOelpXUlRaVzFwWTI5c2IyNGdLQzhxSUhSdmEyVnVjeUFxTHlrZ2UxeHVJQ0FnSUM4dklFaHZiMnNnWm05eUlGTmhabVVnVUdGeWMyVnlYRzRnSUgxY2JseHVJQ0JqYUdWamEwMXBjM05sWkZObGJXbGpiMnh2YmlBb2RHOXJaVzV6S1NCN1hHNGdJQ0FnYkdWMElHTnZiRzl1SUQwZ2RHaHBjeTVqYjJ4dmJpaDBiMnRsYm5NcFhHNGdJQ0FnYVdZZ0tHTnZiRzl1SUQwOVBTQm1ZV3h6WlNrZ2NtVjBkWEp1WEc1Y2JpQWdJQ0JzWlhRZ1ptOTFibVJsWkNBOUlEQmNiaUFnSUNCc1pYUWdkRzlyWlc1Y2JpQWdJQ0JtYjNJZ0tHeGxkQ0JxSUQwZ1kyOXNiMjRnTFNBeE95QnFJRDQ5SURBN0lHb3RMU2tnZTF4dUlDQWdJQ0FnZEc5clpXNGdQU0IwYjJ0bGJuTmJhbDFjYmlBZ0lDQWdJR2xtSUNoMGIydGxibHN3WFNBaFBUMGdKM053WVdObEp5a2dlMXh1SUNBZ0lDQWdJQ0JtYjNWdVpHVmtJQ3M5SURGY2JpQWdJQ0FnSUNBZ2FXWWdLR1p2ZFc1a1pXUWdQVDA5SURJcElHSnlaV0ZyWEc0Z0lDQWdJQ0I5WEc0Z0lDQWdmVnh1SUNBZ0lIUm9jbTkzSUhSb2FYTXVhVzV3ZFhRdVpYSnliM0lvSjAxcGMzTmxaQ0J6WlcxcFkyOXNiMjRuTENCMGIydGxibHN5WFN3Z2RHOXJaVzViTTEwcFhHNGdJSDFjYm4xY2JpSmRMQ0ptYVd4bElqb2ljR0Z5YzJWeUxtcHpJbjA9XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHRva2VuaXplcjtcbnZhciBTSU5HTEVfUVVPVEUgPSAnXFwnJy5jaGFyQ29kZUF0KDApO1xudmFyIERPVUJMRV9RVU9URSA9ICdcIicuY2hhckNvZGVBdCgwKTtcbnZhciBCQUNLU0xBU0ggPSAnXFxcXCcuY2hhckNvZGVBdCgwKTtcbnZhciBTTEFTSCA9ICcvJy5jaGFyQ29kZUF0KDApO1xudmFyIE5FV0xJTkUgPSAnXFxuJy5jaGFyQ29kZUF0KDApO1xudmFyIFNQQUNFID0gJyAnLmNoYXJDb2RlQXQoMCk7XG52YXIgRkVFRCA9ICdcXGYnLmNoYXJDb2RlQXQoMCk7XG52YXIgVEFCID0gJ1xcdCcuY2hhckNvZGVBdCgwKTtcbnZhciBDUiA9ICdcXHInLmNoYXJDb2RlQXQoMCk7XG52YXIgT1BFTl9TUVVBUkUgPSAnWycuY2hhckNvZGVBdCgwKTtcbnZhciBDTE9TRV9TUVVBUkUgPSAnXScuY2hhckNvZGVBdCgwKTtcbnZhciBPUEVOX1BBUkVOVEhFU0VTID0gJygnLmNoYXJDb2RlQXQoMCk7XG52YXIgQ0xPU0VfUEFSRU5USEVTRVMgPSAnKScuY2hhckNvZGVBdCgwKTtcbnZhciBPUEVOX0NVUkxZID0gJ3snLmNoYXJDb2RlQXQoMCk7XG52YXIgQ0xPU0VfQ1VSTFkgPSAnfScuY2hhckNvZGVBdCgwKTtcbnZhciBTRU1JQ09MT04gPSAnOycuY2hhckNvZGVBdCgwKTtcbnZhciBBU1RFUklTSyA9ICcqJy5jaGFyQ29kZUF0KDApO1xudmFyIENPTE9OID0gJzonLmNoYXJDb2RlQXQoMCk7XG52YXIgQVQgPSAnQCcuY2hhckNvZGVBdCgwKTtcbnZhciBSRV9BVF9FTkQgPSAvWyBcXG5cXHRcXHJcXGZ7fSgpJ1wiXFxcXDsvW1xcXSNdL2c7XG52YXIgUkVfV09SRF9FTkQgPSAvWyBcXG5cXHRcXHJcXGYoKXt9OjtAISdcIlxcXFxcXF1bI118XFwvKD89XFwqKS9nO1xudmFyIFJFX0JBRF9CUkFDS0VUID0gLy5bXFxcXC8oXCInXFxuXS87XG52YXIgUkVfSEVYX0VTQ0FQRSA9IC9bYS1mMC05XS9pO1xuXG5mdW5jdGlvbiB0b2tlbml6ZXIoaW5wdXQsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIHZhciBjc3MgPSBpbnB1dC5jc3MudmFsdWVPZigpO1xuICB2YXIgaWdub3JlID0gb3B0aW9ucy5pZ25vcmVFcnJvcnM7XG4gIHZhciBjb2RlLCBuZXh0LCBxdW90ZSwgbGluZXMsIGxhc3QsIGNvbnRlbnQsIGVzY2FwZTtcbiAgdmFyIG5leHRMaW5lLCBuZXh0T2Zmc2V0LCBlc2NhcGVkLCBlc2NhcGVQb3MsIHByZXYsIG4sIGN1cnJlbnRUb2tlbjtcbiAgdmFyIGxlbmd0aCA9IGNzcy5sZW5ndGg7XG4gIHZhciBvZmZzZXQgPSAtMTtcbiAgdmFyIGxpbmUgPSAxO1xuICB2YXIgcG9zID0gMDtcbiAgdmFyIGJ1ZmZlciA9IFtdO1xuICB2YXIgcmV0dXJuZWQgPSBbXTtcblxuICBmdW5jdGlvbiBwb3NpdGlvbigpIHtcbiAgICByZXR1cm4gcG9zO1xuICB9XG5cbiAgZnVuY3Rpb24gdW5jbG9zZWQod2hhdCkge1xuICAgIHRocm93IGlucHV0LmVycm9yKCdVbmNsb3NlZCAnICsgd2hhdCwgbGluZSwgcG9zIC0gb2Zmc2V0KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVuZE9mRmlsZSgpIHtcbiAgICByZXR1cm4gcmV0dXJuZWQubGVuZ3RoID09PSAwICYmIHBvcyA+PSBsZW5ndGg7XG4gIH1cblxuICBmdW5jdGlvbiBuZXh0VG9rZW4ob3B0cykge1xuICAgIGlmIChyZXR1cm5lZC5sZW5ndGgpIHJldHVybiByZXR1cm5lZC5wb3AoKTtcbiAgICBpZiAocG9zID49IGxlbmd0aCkgcmV0dXJuO1xuICAgIHZhciBpZ25vcmVVbmNsb3NlZCA9IG9wdHMgPyBvcHRzLmlnbm9yZVVuY2xvc2VkIDogZmFsc2U7XG4gICAgY29kZSA9IGNzcy5jaGFyQ29kZUF0KHBvcyk7XG5cbiAgICBpZiAoY29kZSA9PT0gTkVXTElORSB8fCBjb2RlID09PSBGRUVEIHx8IGNvZGUgPT09IENSICYmIGNzcy5jaGFyQ29kZUF0KHBvcyArIDEpICE9PSBORVdMSU5FKSB7XG4gICAgICBvZmZzZXQgPSBwb3M7XG4gICAgICBsaW5lICs9IDE7XG4gICAgfVxuXG4gICAgc3dpdGNoIChjb2RlKSB7XG4gICAgICBjYXNlIE5FV0xJTkU6XG4gICAgICBjYXNlIFNQQUNFOlxuICAgICAgY2FzZSBUQUI6XG4gICAgICBjYXNlIENSOlxuICAgICAgY2FzZSBGRUVEOlxuICAgICAgICBuZXh0ID0gcG9zO1xuXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBuZXh0ICs9IDE7XG4gICAgICAgICAgY29kZSA9IGNzcy5jaGFyQ29kZUF0KG5leHQpO1xuXG4gICAgICAgICAgaWYgKGNvZGUgPT09IE5FV0xJTkUpIHtcbiAgICAgICAgICAgIG9mZnNldCA9IG5leHQ7XG4gICAgICAgICAgICBsaW5lICs9IDE7XG4gICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlIChjb2RlID09PSBTUEFDRSB8fCBjb2RlID09PSBORVdMSU5FIHx8IGNvZGUgPT09IFRBQiB8fCBjb2RlID09PSBDUiB8fCBjb2RlID09PSBGRUVEKTtcblxuICAgICAgICBjdXJyZW50VG9rZW4gPSBbJ3NwYWNlJywgY3NzLnNsaWNlKHBvcywgbmV4dCldO1xuICAgICAgICBwb3MgPSBuZXh0IC0gMTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgT1BFTl9TUVVBUkU6XG4gICAgICBjYXNlIENMT1NFX1NRVUFSRTpcbiAgICAgIGNhc2UgT1BFTl9DVVJMWTpcbiAgICAgIGNhc2UgQ0xPU0VfQ1VSTFk6XG4gICAgICBjYXNlIENPTE9OOlxuICAgICAgY2FzZSBTRU1JQ09MT046XG4gICAgICBjYXNlIENMT1NFX1BBUkVOVEhFU0VTOlxuICAgICAgICB2YXIgY29udHJvbENoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGNvZGUpO1xuICAgICAgICBjdXJyZW50VG9rZW4gPSBbY29udHJvbENoYXIsIGNvbnRyb2xDaGFyLCBsaW5lLCBwb3MgLSBvZmZzZXRdO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBPUEVOX1BBUkVOVEhFU0VTOlxuICAgICAgICBwcmV2ID0gYnVmZmVyLmxlbmd0aCA/IGJ1ZmZlci5wb3AoKVsxXSA6ICcnO1xuICAgICAgICBuID0gY3NzLmNoYXJDb2RlQXQocG9zICsgMSk7XG5cbiAgICAgICAgaWYgKHByZXYgPT09ICd1cmwnICYmIG4gIT09IFNJTkdMRV9RVU9URSAmJiBuICE9PSBET1VCTEVfUVVPVEUgJiYgbiAhPT0gU1BBQ0UgJiYgbiAhPT0gTkVXTElORSAmJiBuICE9PSBUQUIgJiYgbiAhPT0gRkVFRCAmJiBuICE9PSBDUikge1xuICAgICAgICAgIG5leHQgPSBwb3M7XG5cbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBlc2NhcGVkID0gZmFsc2U7XG4gICAgICAgICAgICBuZXh0ID0gY3NzLmluZGV4T2YoJyknLCBuZXh0ICsgMSk7XG5cbiAgICAgICAgICAgIGlmIChuZXh0ID09PSAtMSkge1xuICAgICAgICAgICAgICBpZiAoaWdub3JlIHx8IGlnbm9yZVVuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgbmV4dCA9IHBvcztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1bmNsb3NlZCgnYnJhY2tldCcpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGVzY2FwZVBvcyA9IG5leHQ7XG5cbiAgICAgICAgICAgIHdoaWxlIChjc3MuY2hhckNvZGVBdChlc2NhcGVQb3MgLSAxKSA9PT0gQkFDS1NMQVNIKSB7XG4gICAgICAgICAgICAgIGVzY2FwZVBvcyAtPSAxO1xuICAgICAgICAgICAgICBlc2NhcGVkID0gIWVzY2FwZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAoZXNjYXBlZCk7XG5cbiAgICAgICAgICBjdXJyZW50VG9rZW4gPSBbJ2JyYWNrZXRzJywgY3NzLnNsaWNlKHBvcywgbmV4dCArIDEpLCBsaW5lLCBwb3MgLSBvZmZzZXQsIGxpbmUsIG5leHQgLSBvZmZzZXRdO1xuICAgICAgICAgIHBvcyA9IG5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dCA9IGNzcy5pbmRleE9mKCcpJywgcG9zICsgMSk7XG4gICAgICAgICAgY29udGVudCA9IGNzcy5zbGljZShwb3MsIG5leHQgKyAxKTtcblxuICAgICAgICAgIGlmIChuZXh0ID09PSAtMSB8fCBSRV9CQURfQlJBQ0tFVC50ZXN0KGNvbnRlbnQpKSB7XG4gICAgICAgICAgICBjdXJyZW50VG9rZW4gPSBbJygnLCAnKCcsIGxpbmUsIHBvcyAtIG9mZnNldF07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnRUb2tlbiA9IFsnYnJhY2tldHMnLCBjb250ZW50LCBsaW5lLCBwb3MgLSBvZmZzZXQsIGxpbmUsIG5leHQgLSBvZmZzZXRdO1xuICAgICAgICAgICAgcG9zID0gbmV4dDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBTSU5HTEVfUVVPVEU6XG4gICAgICBjYXNlIERPVUJMRV9RVU9URTpcbiAgICAgICAgcXVvdGUgPSBjb2RlID09PSBTSU5HTEVfUVVPVEUgPyAnXFwnJyA6ICdcIic7XG4gICAgICAgIG5leHQgPSBwb3M7XG5cbiAgICAgICAgZG8ge1xuICAgICAgICAgIGVzY2FwZWQgPSBmYWxzZTtcbiAgICAgICAgICBuZXh0ID0gY3NzLmluZGV4T2YocXVvdGUsIG5leHQgKyAxKTtcblxuICAgICAgICAgIGlmIChuZXh0ID09PSAtMSkge1xuICAgICAgICAgICAgaWYgKGlnbm9yZSB8fCBpZ25vcmVVbmNsb3NlZCkge1xuICAgICAgICAgICAgICBuZXh0ID0gcG9zICsgMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB1bmNsb3NlZCgnc3RyaW5nJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZXNjYXBlUG9zID0gbmV4dDtcblxuICAgICAgICAgIHdoaWxlIChjc3MuY2hhckNvZGVBdChlc2NhcGVQb3MgLSAxKSA9PT0gQkFDS1NMQVNIKSB7XG4gICAgICAgICAgICBlc2NhcGVQb3MgLT0gMTtcbiAgICAgICAgICAgIGVzY2FwZWQgPSAhZXNjYXBlZDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gd2hpbGUgKGVzY2FwZWQpO1xuXG4gICAgICAgIGNvbnRlbnQgPSBjc3Muc2xpY2UocG9zLCBuZXh0ICsgMSk7XG4gICAgICAgIGxpbmVzID0gY29udGVudC5zcGxpdCgnXFxuJyk7XG4gICAgICAgIGxhc3QgPSBsaW5lcy5sZW5ndGggLSAxO1xuXG4gICAgICAgIGlmIChsYXN0ID4gMCkge1xuICAgICAgICAgIG5leHRMaW5lID0gbGluZSArIGxhc3Q7XG4gICAgICAgICAgbmV4dE9mZnNldCA9IG5leHQgLSBsaW5lc1tsYXN0XS5sZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV4dExpbmUgPSBsaW5lO1xuICAgICAgICAgIG5leHRPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50VG9rZW4gPSBbJ3N0cmluZycsIGNzcy5zbGljZShwb3MsIG5leHQgKyAxKSwgbGluZSwgcG9zIC0gb2Zmc2V0LCBuZXh0TGluZSwgbmV4dCAtIG5leHRPZmZzZXRdO1xuICAgICAgICBvZmZzZXQgPSBuZXh0T2Zmc2V0O1xuICAgICAgICBsaW5lID0gbmV4dExpbmU7XG4gICAgICAgIHBvcyA9IG5leHQ7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEFUOlxuICAgICAgICBSRV9BVF9FTkQubGFzdEluZGV4ID0gcG9zICsgMTtcbiAgICAgICAgUkVfQVRfRU5ELnRlc3QoY3NzKTtcblxuICAgICAgICBpZiAoUkVfQVRfRU5ELmxhc3RJbmRleCA9PT0gMCkge1xuICAgICAgICAgIG5leHQgPSBjc3MubGVuZ3RoIC0gMTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBuZXh0ID0gUkVfQVRfRU5ELmxhc3RJbmRleCAtIDI7XG4gICAgICAgIH1cblxuICAgICAgICBjdXJyZW50VG9rZW4gPSBbJ2F0LXdvcmQnLCBjc3Muc2xpY2UocG9zLCBuZXh0ICsgMSksIGxpbmUsIHBvcyAtIG9mZnNldCwgbGluZSwgbmV4dCAtIG9mZnNldF07XG4gICAgICAgIHBvcyA9IG5leHQ7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlIEJBQ0tTTEFTSDpcbiAgICAgICAgbmV4dCA9IHBvcztcbiAgICAgICAgZXNjYXBlID0gdHJ1ZTtcblxuICAgICAgICB3aGlsZSAoY3NzLmNoYXJDb2RlQXQobmV4dCArIDEpID09PSBCQUNLU0xBU0gpIHtcbiAgICAgICAgICBuZXh0ICs9IDE7XG4gICAgICAgICAgZXNjYXBlID0gIWVzY2FwZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvZGUgPSBjc3MuY2hhckNvZGVBdChuZXh0ICsgMSk7XG5cbiAgICAgICAgaWYgKGVzY2FwZSAmJiBjb2RlICE9PSBTTEFTSCAmJiBjb2RlICE9PSBTUEFDRSAmJiBjb2RlICE9PSBORVdMSU5FICYmIGNvZGUgIT09IFRBQiAmJiBjb2RlICE9PSBDUiAmJiBjb2RlICE9PSBGRUVEKSB7XG4gICAgICAgICAgbmV4dCArPSAxO1xuXG4gICAgICAgICAgaWYgKFJFX0hFWF9FU0NBUEUudGVzdChjc3MuY2hhckF0KG5leHQpKSkge1xuICAgICAgICAgICAgd2hpbGUgKFJFX0hFWF9FU0NBUEUudGVzdChjc3MuY2hhckF0KG5leHQgKyAxKSkpIHtcbiAgICAgICAgICAgICAgbmV4dCArPSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY3NzLmNoYXJDb2RlQXQobmV4dCArIDEpID09PSBTUEFDRSkge1xuICAgICAgICAgICAgICBuZXh0ICs9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudFRva2VuID0gWyd3b3JkJywgY3NzLnNsaWNlKHBvcywgbmV4dCArIDEpLCBsaW5lLCBwb3MgLSBvZmZzZXQsIGxpbmUsIG5leHQgLSBvZmZzZXRdO1xuICAgICAgICBwb3MgPSBuZXh0O1xuICAgICAgICBicmVhaztcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGNvZGUgPT09IFNMQVNIICYmIGNzcy5jaGFyQ29kZUF0KHBvcyArIDEpID09PSBBU1RFUklTSykge1xuICAgICAgICAgIG5leHQgPSBjc3MuaW5kZXhPZignKi8nLCBwb3MgKyAyKSArIDE7XG5cbiAgICAgICAgICBpZiAobmV4dCA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKGlnbm9yZSB8fCBpZ25vcmVVbmNsb3NlZCkge1xuICAgICAgICAgICAgICBuZXh0ID0gY3NzLmxlbmd0aDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHVuY2xvc2VkKCdjb21tZW50Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGVudCA9IGNzcy5zbGljZShwb3MsIG5leHQgKyAxKTtcbiAgICAgICAgICBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoJ1xcbicpO1xuICAgICAgICAgIGxhc3QgPSBsaW5lcy5sZW5ndGggLSAxO1xuXG4gICAgICAgICAgaWYgKGxhc3QgPiAwKSB7XG4gICAgICAgICAgICBuZXh0TGluZSA9IGxpbmUgKyBsYXN0O1xuICAgICAgICAgICAgbmV4dE9mZnNldCA9IG5leHQgLSBsaW5lc1tsYXN0XS5sZW5ndGg7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHRMaW5lID0gbGluZTtcbiAgICAgICAgICAgIG5leHRPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY3VycmVudFRva2VuID0gWydjb21tZW50JywgY29udGVudCwgbGluZSwgcG9zIC0gb2Zmc2V0LCBuZXh0TGluZSwgbmV4dCAtIG5leHRPZmZzZXRdO1xuICAgICAgICAgIG9mZnNldCA9IG5leHRPZmZzZXQ7XG4gICAgICAgICAgbGluZSA9IG5leHRMaW5lO1xuICAgICAgICAgIHBvcyA9IG5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgUkVfV09SRF9FTkQubGFzdEluZGV4ID0gcG9zICsgMTtcbiAgICAgICAgICBSRV9XT1JEX0VORC50ZXN0KGNzcyk7XG5cbiAgICAgICAgICBpZiAoUkVfV09SRF9FTkQubGFzdEluZGV4ID09PSAwKSB7XG4gICAgICAgICAgICBuZXh0ID0gY3NzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5leHQgPSBSRV9XT1JEX0VORC5sYXN0SW5kZXggLSAyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGN1cnJlbnRUb2tlbiA9IFsnd29yZCcsIGNzcy5zbGljZShwb3MsIG5leHQgKyAxKSwgbGluZSwgcG9zIC0gb2Zmc2V0LCBsaW5lLCBuZXh0IC0gb2Zmc2V0XTtcbiAgICAgICAgICBidWZmZXIucHVzaChjdXJyZW50VG9rZW4pO1xuICAgICAgICAgIHBvcyA9IG5leHQ7XG4gICAgICAgIH1cblxuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBwb3MrKztcbiAgICByZXR1cm4gY3VycmVudFRva2VuO1xuICB9XG5cbiAgZnVuY3Rpb24gYmFjayh0b2tlbikge1xuICAgIHJldHVybmVkLnB1c2godG9rZW4pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBiYWNrOiBiYWNrLFxuICAgIG5leHRUb2tlbjogbmV4dFRva2VuLFxuICAgIGVuZE9mRmlsZTogZW5kT2ZGaWxlLFxuICAgIHBvc2l0aW9uOiBwb3NpdGlvblxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5SdmEyVnVhWHBsTG1Wek5pSmRMQ0p1WVcxbGN5STZXeUpUU1U1SFRFVmZVVlZQVkVVaUxDSmphR0Z5UTI5a1pVRjBJaXdpUkU5VlFreEZYMUZWVDFSRklpd2lRa0ZEUzFOTVFWTklJaXdpVTB4QlUwZ2lMQ0pPUlZkTVNVNUZJaXdpVTFCQlEwVWlMQ0pHUlVWRUlpd2lWRUZDSWl3aVExSWlMQ0pQVUVWT1gxTlJWVUZTUlNJc0lrTk1UMU5GWDFOUlZVRlNSU0lzSWs5UVJVNWZVRUZTUlU1VVNFVlRSVk1pTENKRFRFOVRSVjlRUVZKRlRsUklSVk5GVXlJc0lrOVFSVTVmUTFWU1RGa2lMQ0pEVEU5VFJWOURWVkpNV1NJc0lsTkZUVWxEVDB4UFRpSXNJa0ZUVkVWU1NWTkxJaXdpUTA5TVQwNGlMQ0pCVkNJc0lsSkZYMEZVWDBWT1JDSXNJbEpGWDFkUFVrUmZSVTVFSWl3aVVrVmZRa0ZFWDBKU1FVTkxSVlFpTENKU1JWOUlSVmhmUlZORFFWQkZJaXdpZEc5clpXNXBlbVZ5SWl3aWFXNXdkWFFpTENKdmNIUnBiMjV6SWl3aVkzTnpJaXdpZG1Gc2RXVlBaaUlzSW1sbmJtOXlaU0lzSW1sbmJtOXlaVVZ5Y205eWN5SXNJbU52WkdVaUxDSnVaWGgwSWl3aWNYVnZkR1VpTENKc2FXNWxjeUlzSW14aGMzUWlMQ0pqYjI1MFpXNTBJaXdpWlhOallYQmxJaXdpYm1WNGRFeHBibVVpTENKdVpYaDBUMlptYzJWMElpd2laWE5qWVhCbFpDSXNJbVZ6WTJGd1pWQnZjeUlzSW5CeVpYWWlMQ0p1SWl3aVkzVnljbVZ1ZEZSdmEyVnVJaXdpYkdWdVozUm9JaXdpYjJabWMyVjBJaXdpYkdsdVpTSXNJbkJ2Y3lJc0ltSjFabVpsY2lJc0luSmxkSFZ5Ym1Wa0lpd2ljRzl6YVhScGIyNGlMQ0oxYm1Oc2IzTmxaQ0lzSW5kb1lYUWlMQ0psY25KdmNpSXNJbVZ1WkU5bVJtbHNaU0lzSW01bGVIUlViMnRsYmlJc0ltOXdkSE1pTENKd2IzQWlMQ0pwWjI1dmNtVlZibU5zYjNObFpDSXNJbk5zYVdObElpd2lZMjl1ZEhKdmJFTm9ZWElpTENKVGRISnBibWNpTENKbWNtOXRRMmhoY2tOdlpHVWlMQ0pwYm1SbGVFOW1JaXdpZEdWemRDSXNJbk53YkdsMElpd2liR0Z6ZEVsdVpHVjRJaXdpWTJoaGNrRjBJaXdpY0hWemFDSXNJbUpoWTJzaUxDSjBiMnRsYmlKZExDSnRZWEJ3YVc1bmN5STZJanM3T3p0QlFVRkJMRWxCUVUxQkxGbEJRVmtzUjBGQlJ5eExRVUZMUXl4VlFVRk1MRU5CUVdkQ0xFTkJRV2hDTEVOQlFYSkNPMEZCUTBFc1NVRkJUVU1zV1VGQldTeEhRVUZITEVsQlFVbEVMRlZCUVVvc1EwRkJaU3hEUVVGbUxFTkJRWEpDTzBGQlEwRXNTVUZCVFVVc1UwRkJVeXhIUVVGSExFdEJRVXRHTEZWQlFVd3NRMEZCWjBJc1EwRkJhRUlzUTBGQmJFSTdRVUZEUVN4SlFVRk5SeXhMUVVGTExFZEJRVWNzU1VGQlNVZ3NWVUZCU2l4RFFVRmxMRU5CUVdZc1EwRkJaRHRCUVVOQkxFbEJRVTFKTEU5QlFVOHNSMEZCUnl4TFFVRkxTaXhWUVVGTUxFTkJRV2RDTEVOQlFXaENMRU5CUVdoQ08wRkJRMEVzU1VGQlRVc3NTMEZCU3l4SFFVRkhMRWxCUVVsTUxGVkJRVW9zUTBGQlpTeERRVUZtTEVOQlFXUTdRVUZEUVN4SlFVRk5UU3hKUVVGSkxFZEJRVWNzUzBGQlMwNHNWVUZCVEN4RFFVRm5RaXhEUVVGb1FpeERRVUZpTzBGQlEwRXNTVUZCVFU4c1IwRkJSeXhIUVVGSExFdEJRVXRRTEZWQlFVd3NRMEZCWjBJc1EwRkJhRUlzUTBGQldqdEJRVU5CTEVsQlFVMVJMRVZCUVVVc1IwRkJSeXhMUVVGTFVpeFZRVUZNTEVOQlFXZENMRU5CUVdoQ0xFTkJRVmc3UVVGRFFTeEpRVUZOVXl4WFFVRlhMRWRCUVVjc1NVRkJTVlFzVlVGQlNpeERRVUZsTEVOQlFXWXNRMEZCY0VJN1FVRkRRU3hKUVVGTlZTeFpRVUZaTEVkQlFVY3NTVUZCU1ZZc1ZVRkJTaXhEUVVGbExFTkJRV1lzUTBGQmNrSTdRVUZEUVN4SlFVRk5WeXhuUWtGQlowSXNSMEZCUnl4SlFVRkpXQ3hWUVVGS0xFTkJRV1VzUTBGQlppeERRVUY2UWp0QlFVTkJMRWxCUVUxWkxHbENRVUZwUWl4SFFVRkhMRWxCUVVsYUxGVkJRVW9zUTBGQlpTeERRVUZtTEVOQlFURkNPMEZCUTBFc1NVRkJUV0VzVlVGQlZTeEhRVUZITEVsQlFVbGlMRlZCUVVvc1EwRkJaU3hEUVVGbUxFTkJRVzVDTzBGQlEwRXNTVUZCVFdNc1YwRkJWeXhIUVVGSExFbEJRVWxrTEZWQlFVb3NRMEZCWlN4RFFVRm1MRU5CUVhCQ08wRkJRMEVzU1VGQlRXVXNVMEZCVXl4SFFVRkhMRWxCUVVsbUxGVkJRVW9zUTBGQlpTeERRVUZtTEVOQlFXeENPMEZCUTBFc1NVRkJUV2RDTEZGQlFWRXNSMEZCUnl4SlFVRkphRUlzVlVGQlNpeERRVUZsTEVOQlFXWXNRMEZCYWtJN1FVRkRRU3hKUVVGTmFVSXNTMEZCU3l4SFFVRkhMRWxCUVVscVFpeFZRVUZLTEVOQlFXVXNRMEZCWml4RFFVRmtPMEZCUTBFc1NVRkJUV3RDTEVWQlFVVXNSMEZCUnl4SlFVRkpiRUlzVlVGQlNpeERRVUZsTEVOQlFXWXNRMEZCV0R0QlFVVkJMRWxCUVUxdFFpeFRRVUZUTEVkQlFVY3NORUpCUVd4Q08wRkJRMEVzU1VGQlRVTXNWMEZCVnl4SFFVRkhMSFZEUVVGd1FqdEJRVU5CTEVsQlFVMURMR05CUVdNc1IwRkJSeXhoUVVGMlFqdEJRVU5CTEVsQlFVMURMR0ZCUVdFc1IwRkJSeXhYUVVGMFFqczdRVUZGWlN4VFFVRlRReXhUUVVGVUxFTkJRVzlDUXl4TFFVRndRaXhGUVVFeVFrTXNUMEZCTTBJc1JVRkJlVU03UVVGQlFTeE5RVUZrUVN4UFFVRmpPMEZCUVdSQkxFbEJRVUZCTEU5QlFXTXNSMEZCU2l4RlFVRkpPMEZCUVVFN08wRkJRM1JFTEUxQlFVbERMRWRCUVVjc1IwRkJSMFlzUzBGQlN5eERRVUZEUlN4SFFVRk9MRU5CUVZWRExFOUJRVllzUlVGQlZqdEJRVU5CTEUxQlFVbERMRTFCUVUwc1IwRkJSMGdzVDBGQlR5eERRVUZEU1N4WlFVRnlRanRCUVVWQkxFMUJRVWxETEVsQlFVb3NSVUZCVlVNc1NVRkJWaXhGUVVGblFrTXNTMEZCYUVJc1JVRkJkVUpETEV0QlFYWkNMRVZCUVRoQ1F5eEpRVUU1UWl4RlFVRnZRME1zVDBGQmNFTXNSVUZCTmtORExFMUJRVGRETzBGQlEwRXNUVUZCU1VNc1VVRkJTaXhGUVVGalF5eFZRVUZrTEVWQlFUQkNReXhQUVVFeFFpeEZRVUZ0UTBNc1UwRkJia01zUlVGQk9FTkRMRWxCUVRsRExFVkJRVzlFUXl4RFFVRndSQ3hGUVVGMVJFTXNXVUZCZGtRN1FVRkZRU3hOUVVGSlF5eE5RVUZOTEVkQlFVZHNRaXhIUVVGSExFTkJRVU5yUWl4TlFVRnFRanRCUVVOQkxFMUJRVWxETEUxQlFVMHNSMEZCUnl4RFFVRkRMRU5CUVdRN1FVRkRRU3hOUVVGSlF5eEpRVUZKTEVkQlFVY3NRMEZCV0R0QlFVTkJMRTFCUVVsRExFZEJRVWNzUjBGQlJ5eERRVUZXTzBGQlEwRXNUVUZCU1VNc1RVRkJUU3hIUVVGSExFVkJRV0k3UVVGRFFTeE5RVUZKUXl4UlFVRlJMRWRCUVVjc1JVRkJaanM3UVVGRlFTeFhRVUZUUXl4UlFVRlVMRWRCUVhGQ08wRkJRMjVDTEZkQlFVOUlMRWRCUVZBN1FVRkRSRHM3UVVGRlJDeFhRVUZUU1N4UlFVRlVMRU5CUVcxQ1F5eEpRVUZ1UWl4RlFVRjVRanRCUVVOMlFpeFZRVUZOTlVJc1MwRkJTeXhEUVVGRE5rSXNTMEZCVGl4RFFVRlpMR05CUVdORUxFbEJRVEZDTEVWQlFXZERUaXhKUVVGb1F5eEZRVUZ6UTBNc1IwRkJSeXhIUVVGSFJpeE5RVUUxUXl4RFFVRk9PMEZCUTBRN08wRkJSVVFzVjBGQlUxTXNVMEZCVkN4SFFVRnpRanRCUVVOd1FpeFhRVUZQVEN4UlFVRlJMRU5CUVVOTUxFMUJRVlFzUzBGQmIwSXNRMEZCY0VJc1NVRkJlVUpITEVkQlFVY3NTVUZCU1Vnc1RVRkJka003UVVGRFJEczdRVUZGUkN4WFFVRlRWeXhUUVVGVUxFTkJRVzlDUXl4SlFVRndRaXhGUVVFd1FqdEJRVU40UWl4UlFVRkpVQ3hSUVVGUkxFTkJRVU5NTEUxQlFXSXNSVUZCY1VJc1QwRkJUMHNzVVVGQlVTeERRVUZEVVN4SFFVRlVMRVZCUVZBN1FVRkRja0lzVVVGQlNWWXNSMEZCUnl4SlFVRkpTQ3hOUVVGWUxFVkJRVzFDTzBGQlJXNUNMRkZCUVVsakxHTkJRV01zUjBGQlIwWXNTVUZCU1N4SFFVRkhRU3hKUVVGSkxFTkJRVU5GTEdOQlFWSXNSMEZCZVVJc1MwRkJiRVE3UVVGRlFUVkNMRWxCUVVGQkxFbEJRVWtzUjBGQlIwb3NSMEZCUnl4RFFVRkRNVUlzVlVGQlNpeERRVUZsSzBNc1IwRkJaaXhEUVVGUU96dEJRVU5CTEZGQlEwVnFRaXhKUVVGSkxFdEJRVXN4UWl4UFFVRlVMRWxCUVc5Q01FSXNTVUZCU1N4TFFVRkxlRUlzU1VGQk4wSXNTVUZEUTNkQ0xFbEJRVWtzUzBGQlMzUkNMRVZCUVZRc1NVRkJaV3RDTEVkQlFVY3NRMEZCUXpGQ0xGVkJRVW9zUTBGQlpTdERMRWRCUVVjc1IwRkJSeXhEUVVGeVFpeE5RVUUwUWpORExFOUJSamxETEVWQlIwVTdRVUZEUVhsRExFMUJRVUZCTEUxQlFVMHNSMEZCUjBVc1IwRkJWRHRCUVVOQlJDeE5RVUZCUVN4SlFVRkpMRWxCUVVrc1EwRkJVanRCUVVORU96dEJRVVZFTEZsQlFWRm9RaXhKUVVGU08wRkJRMFVzVjBGQlN6RkNMRTlCUVV3N1FVRkRRU3hYUVVGTFF5eExRVUZNTzBGQlEwRXNWMEZCUzBVc1IwRkJURHRCUVVOQkxGZEJRVXRETEVWQlFVdzdRVUZEUVN4WFFVRkxSaXhKUVVGTU8wRkJRMFY1UWl4UlFVRkJRU3hKUVVGSkxFZEJRVWRuUWl4SFFVRlFPenRCUVVOQkxGZEJRVWM3UVVGRFJHaENMRlZCUVVGQkxFbEJRVWtzU1VGQlNTeERRVUZTTzBGQlEwRkVMRlZCUVVGQkxFbEJRVWtzUjBGQlIwb3NSMEZCUnl4RFFVRkRNVUlzVlVGQlNpeERRVUZsSzBJc1NVRkJaaXhEUVVGUU96dEJRVU5CTEdOQlFVbEVMRWxCUVVrc1MwRkJTekZDTEU5QlFXSXNSVUZCYzBJN1FVRkRjRUo1UXl4WlFVRkJRU3hOUVVGTkxFZEJRVWRrTEVsQlFWUTdRVUZEUVdVc1dVRkJRVUVzU1VGQlNTeEpRVUZKTEVOQlFWSTdRVUZEUkR0QlFVTkdMRk5CVUVRc1VVRlJSV2hDTEVsQlFVa3NTMEZCUzNwQ0xFdEJRVlFzU1VGRFFYbENMRWxCUVVrc1MwRkJTekZDTEU5QlJGUXNTVUZGUVRCQ0xFbEJRVWtzUzBGQlMzWkNMRWRCUmxRc1NVRkhRWFZDTEVsQlFVa3NTMEZCUzNSQ0xFVkJTRlFzU1VGSlFYTkNMRWxCUVVrc1MwRkJTM2hDTEVsQldsZzdPMEZCWlVGeFF5eFJRVUZCUVN4WlFVRlpMRWRCUVVjc1EwRkJReXhQUVVGRUxFVkJRVlZxUWl4SFFVRkhMRU5CUVVOcFF5eExRVUZLTEVOQlFWVmFMRWRCUVZZc1JVRkJaV2hDTEVsQlFXWXNRMEZCVml4RFFVRm1PMEZCUTBGblFpeFJRVUZCUVN4SFFVRkhMRWRCUVVkb1FpeEpRVUZKTEVkQlFVY3NRMEZCWWp0QlFVTkJPenRCUVVWR0xGZEJRVXQwUWl4WFFVRk1PMEZCUTBFc1YwRkJTME1zV1VGQlREdEJRVU5CTEZkQlFVdEhMRlZCUVV3N1FVRkRRU3hYUVVGTFF5eFhRVUZNTzBGQlEwRXNWMEZCUzBjc1MwRkJURHRCUVVOQkxGZEJRVXRHTEZOQlFVdzdRVUZEUVN4WFFVRkxTQ3hwUWtGQlREdEJRVU5GTEZsQlFVbG5SQ3hYUVVGWExFZEJRVWRETEUxQlFVMHNRMEZCUTBNc1dVRkJVQ3hEUVVGdlFtaERMRWxCUVhCQ0xFTkJRV3hDTzBGQlEwRmhMRkZCUVVGQkxGbEJRVmtzUjBGQlJ5eERRVUZEYVVJc1YwRkJSQ3hGUVVGalFTeFhRVUZrTEVWQlFUSkNaQ3hKUVVFelFpeEZRVUZwUTBNc1IwRkJSeXhIUVVGSFJpeE5RVUYyUXl4RFFVRm1PMEZCUTBFN08wRkJSVVlzVjBGQlMyeERMR2RDUVVGTU8wRkJRMFU0UWl4UlFVRkJRU3hKUVVGSkxFZEJRVWRQTEUxQlFVMHNRMEZCUTBvc1RVRkJVQ3hIUVVGblFra3NUVUZCVFN4RFFVRkRVeXhIUVVGUUxFZEJRV0VzUTBGQllpeERRVUZvUWl4SFFVRnJReXhGUVVGNlF6dEJRVU5CWml4UlFVRkJRU3hEUVVGRExFZEJRVWRvUWl4SFFVRkhMRU5CUVVNeFFpeFZRVUZLTEVOQlFXVXJReXhIUVVGSExFZEJRVWNzUTBGQmNrSXNRMEZCU2pzN1FVRkRRU3haUVVORlRpeEpRVUZKTEV0QlFVc3NTMEZCVkN4SlFVTkJReXhEUVVGRExFdEJRVXN6UXl4WlFVUk9MRWxCUTNOQ01rTXNRMEZCUXl4TFFVRkxla01zV1VGRU5VSXNTVUZGUVhsRExFTkJRVU1zUzBGQlMzSkRMRXRCUms0c1NVRkZaWEZETEVOQlFVTXNTMEZCUzNSRExFOUJSbkpDTEVsQlJXZERjME1zUTBGQlF5eExRVUZMYmtNc1IwRkdkRU1zU1VGSFFXMURMRU5CUVVNc1MwRkJTM0JETEVsQlNFNHNTVUZIWTI5RExFTkJRVU1zUzBGQlMyeERMRVZCU25SQ0xFVkJTMFU3UVVGRFFYVkNMRlZCUVVGQkxFbEJRVWtzUjBGQlIyZENMRWRCUVZBN08wRkJRMEVzWVVGQlJ6dEJRVU5FVWl4WlFVRkJRU3hQUVVGUExFZEJRVWNzUzBGQlZqdEJRVU5CVWl4WlFVRkJRU3hKUVVGSkxFZEJRVWRNTEVkQlFVY3NRMEZCUTNGRExFOUJRVW9zUTBGQldTeEhRVUZhTEVWQlFXbENhRU1zU1VGQlNTeEhRVUZITEVOQlFYaENMRU5CUVZBN08wRkJRMEVzWjBKQlFVbEJMRWxCUVVrc1MwRkJTeXhEUVVGRExFTkJRV1FzUlVGQmFVSTdRVUZEWml4clFrRkJTVWdzVFVGQlRTeEpRVUZKT0VJc1kwRkJaQ3hGUVVFNFFqdEJRVU0xUWpOQ0xHZENRVUZCUVN4SlFVRkpMRWRCUVVkblFpeEhRVUZRTzBGQlEwRTdRVUZEUkN4bFFVaEVMRTFCUjA4N1FVRkRURWtzWjBKQlFVRkJMRkZCUVZFc1EwRkJReXhUUVVGRUxFTkJRVkk3UVVGRFJEdEJRVU5HT3p0QlFVTkVXQ3haUVVGQlFTeFRRVUZUTEVkQlFVZFVMRWxCUVZvN08wRkJRMEVzYlVKQlFVOU1MRWRCUVVjc1EwRkJRekZDTEZWQlFVb3NRMEZCWlhkRExGTkJRVk1zUjBGQlJ5eERRVUV6UWl4TlFVRnJRM1JETEZOQlFYcERMRVZCUVc5RU8wRkJRMnhFYzBNc1kwRkJRVUVzVTBGQlV5eEpRVUZKTEVOQlFXSTdRVUZEUVVRc1kwRkJRVUVzVDBGQlR5eEhRVUZITEVOQlFVTkJMRTlCUVZnN1FVRkRSRHRCUVVOR0xGZEJhRUpFTEZGQlowSlRRU3hQUVdoQ1ZEczdRVUZyUWtGSkxGVkJRVUZCTEZsQlFWa3NSMEZCUnl4RFFVRkRMRlZCUVVRc1JVRkJZV3BDTEVkQlFVY3NRMEZCUTJsRExFdEJRVW9zUTBGQlZWb3NSMEZCVml4RlFVRmxhRUlzU1VGQlNTeEhRVUZITEVOQlFYUkNMRU5CUVdJc1JVRkRZbVVzU1VGRVlTeEZRVU5RUXl4SFFVRkhMRWRCUVVkR0xFMUJSRU1zUlVGRllrTXNTVUZHWVN4RlFVVlFaaXhKUVVGSkxFZEJRVWRqTEUxQlJrRXNRMEZCWmp0QlFVdEJSU3hWUVVGQlFTeEhRVUZITEVkQlFVZG9RaXhKUVVGT08wRkJRMFFzVTBFdlFrUXNUVUVyUWs4N1FVRkRURUVzVlVGQlFVRXNTVUZCU1N4SFFVRkhUQ3hIUVVGSExFTkJRVU54UXl4UFFVRktMRU5CUVZrc1IwRkJXaXhGUVVGcFFtaENMRWRCUVVjc1IwRkJSeXhEUVVGMlFpeERRVUZRTzBGQlEwRmFMRlZCUVVGQkxFOUJRVThzUjBGQlIxUXNSMEZCUnl4RFFVRkRhVU1zUzBGQlNpeERRVUZWV2l4SFFVRldMRVZCUVdWb1FpeEpRVUZKTEVkQlFVY3NRMEZCZEVJc1EwRkJWanM3UVVGRlFTeGpRVUZKUVN4SlFVRkpMRXRCUVVzc1EwRkJReXhEUVVGV0xFbEJRV1ZXTEdOQlFXTXNRMEZCUXpKRExFbEJRV1lzUTBGQmIwSTNRaXhQUVVGd1FpeERRVUZ1UWl4RlFVRnBSRHRCUVVNdlExRXNXVUZCUVVFc1dVRkJXU3hIUVVGSExFTkJRVU1zUjBGQlJDeEZRVUZOTEVkQlFVNHNSVUZCVjBjc1NVRkJXQ3hGUVVGcFFrTXNSMEZCUnl4SFFVRkhSaXhOUVVGMlFpeERRVUZtTzBGQlEwUXNWMEZHUkN4TlFVVlBPMEZCUTB4R0xGbEJRVUZCTEZsQlFWa3NSMEZCUnl4RFFVRkRMRlZCUVVRc1JVRkJZVklzVDBGQllpeEZRVU5pVnl4SlFVUmhMRVZCUTFCRExFZEJRVWNzUjBGQlIwWXNUVUZFUXl4RlFVVmlReXhKUVVaaExFVkJSVkJtTEVsQlFVa3NSMEZCUjJNc1RVRkdRU3hEUVVGbU8wRkJTVUZGTEZsQlFVRkJMRWRCUVVjc1IwRkJSMmhDTEVsQlFVNDdRVUZEUkR0QlFVTkdPenRCUVVWRU96dEJRVVZHTEZkQlFVdG9ReXhaUVVGTU8wRkJRMEVzVjBGQlMwVXNXVUZCVER0QlFVTkZLMElzVVVGQlFVRXNTMEZCU3l4SFFVRkhSaXhKUVVGSkxFdEJRVXN2UWl4WlFVRlVMRWRCUVhkQ0xFbEJRWGhDTEVkQlFTdENMRWRCUVhaRE8wRkJRMEZuUXl4UlFVRkJRU3hKUVVGSkxFZEJRVWRuUWl4SFFVRlFPenRCUVVOQkxGZEJRVWM3UVVGRFJGSXNWVUZCUVVFc1QwRkJUeXhIUVVGSExFdEJRVlk3UVVGRFFWSXNWVUZCUVVFc1NVRkJTU3hIUVVGSFRDeEhRVUZITEVOQlFVTnhReXhQUVVGS0xFTkJRVmt2UWl4TFFVRmFMRVZCUVcxQ1JDeEpRVUZKTEVkQlFVY3NRMEZCTVVJc1EwRkJVRHM3UVVGRFFTeGpRVUZKUVN4SlFVRkpMRXRCUVVzc1EwRkJReXhEUVVGa0xFVkJRV2xDTzBGQlEyWXNaMEpCUVVsSUxFMUJRVTBzU1VGQlNUaENMR05CUVdRc1JVRkJPRUk3UVVGRE5VSXpRaXhqUVVGQlFTeEpRVUZKTEVkQlFVZG5RaXhIUVVGSExFZEJRVWNzUTBGQllqdEJRVU5CTzBGQlEwUXNZVUZJUkN4TlFVZFBPMEZCUTB4SkxHTkJRVUZCTEZGQlFWRXNRMEZCUXl4UlFVRkVMRU5CUVZJN1FVRkRSRHRCUVVOR096dEJRVU5FV0N4VlFVRkJRU3hUUVVGVExFZEJRVWRVTEVsQlFWbzdPMEZCUTBFc2FVSkJRVTlNTEVkQlFVY3NRMEZCUXpGQ0xGVkJRVW9zUTBGQlpYZERMRk5CUVZNc1IwRkJSeXhEUVVFelFpeE5RVUZyUTNSRExGTkJRWHBETEVWQlFXOUVPMEZCUTJ4RWMwTXNXVUZCUVVFc1UwRkJVeXhKUVVGSkxFTkJRV0k3UVVGRFFVUXNXVUZCUVVFc1QwRkJUeXhIUVVGSExFTkJRVU5CTEU5QlFWZzdRVUZEUkR0QlFVTkdMRk5CYUVKRUxGRkJaMEpUUVN4UFFXaENWRHM3UVVGclFrRktMRkZCUVVGQkxFOUJRVThzUjBGQlIxUXNSMEZCUnl4RFFVRkRhVU1zUzBGQlNpeERRVUZWV2l4SFFVRldMRVZCUVdWb1FpeEpRVUZKTEVkQlFVY3NRMEZCZEVJc1EwRkJWanRCUVVOQlJTeFJRVUZCUVN4TFFVRkxMRWRCUVVkRkxFOUJRVThzUTBGQlF6aENMRXRCUVZJc1EwRkJZeXhKUVVGa0xFTkJRVkk3UVVGRFFTOUNMRkZCUVVGQkxFbEJRVWtzUjBGQlIwUXNTMEZCU3l4RFFVRkRWeXhOUVVGT0xFZEJRV1VzUTBGQmRFSTdPMEZCUlVFc1dVRkJTVllzU1VGQlNTeEhRVUZITEVOQlFWZ3NSVUZCWXp0QlFVTmFSeXhWUVVGQlFTeFJRVUZSTEVkQlFVZFRMRWxCUVVrc1IwRkJSMW9zU1VGQmJFSTdRVUZEUVVrc1ZVRkJRVUVzVlVGQlZTeEhRVUZIVUN4SlFVRkpMRWRCUVVkRkxFdEJRVXNzUTBGQlEwTXNTVUZCUkN4RFFVRk1MRU5CUVZsVkxFMUJRV2hETzBGQlEwUXNVMEZJUkN4TlFVZFBPMEZCUTB4UUxGVkJRVUZCTEZGQlFWRXNSMEZCUjFNc1NVRkJXRHRCUVVOQlVpeFZRVUZCUVN4VlFVRlZMRWRCUVVkUExFMUJRV0k3UVVGRFJEczdRVUZGUkVZc1VVRkJRVUVzV1VGQldTeEhRVUZITEVOQlFVTXNVVUZCUkN4RlFVRlhha0lzUjBGQlJ5eERRVUZEYVVNc1MwRkJTaXhEUVVGVldpeEhRVUZXTEVWQlFXVm9RaXhKUVVGSkxFZEJRVWNzUTBGQmRFSXNRMEZCV0N4RlFVTmlaU3hKUVVSaExFVkJRMUJETEVkQlFVY3NSMEZCUjBZc1RVRkVReXhGUVVWaVVpeFJRVVpoTEVWQlJVaE9MRWxCUVVrc1IwRkJSMDhzVlVGR1NpeERRVUZtTzBGQlMwRlBMRkZCUVVGQkxFMUJRVTBzUjBGQlIxQXNWVUZCVkR0QlFVTkJVU3hSUVVGQlFTeEpRVUZKTEVkQlFVZFVMRkZCUVZBN1FVRkRRVlVzVVVGQlFVRXNSMEZCUnl4SFFVRkhhRUlzU1VGQlRqdEJRVU5CT3p0QlFVVkdMRmRCUVV0aUxFVkJRVXc3UVVGRFJVTXNVVUZCUVVFc1UwRkJVeXhEUVVGREswTXNVMEZCVml4SFFVRnpRbTVDTEVkQlFVY3NSMEZCUnl4RFFVRTFRanRCUVVOQk5VSXNVVUZCUVVFc1UwRkJVeXhEUVVGRE5rTXNTVUZCVml4RFFVRmxkRU1zUjBGQlpqczdRVUZEUVN4WlFVRkpVQ3hUUVVGVExFTkJRVU1yUXl4VFFVRldMRXRCUVhkQ0xFTkJRVFZDTEVWQlFTdENPMEZCUXpkQ2JrTXNWVUZCUVVFc1NVRkJTU3hIUVVGSFRDeEhRVUZITEVOQlFVTnJRaXhOUVVGS0xFZEJRV0VzUTBGQmNFSTdRVUZEUkN4VFFVWkVMRTFCUlU4N1FVRkRUR0lzVlVGQlFVRXNTVUZCU1N4SFFVRkhXaXhUUVVGVExFTkJRVU1yUXl4VFFVRldMRWRCUVhOQ0xFTkJRVGRDTzBGQlEwUTdPMEZCUlVSMlFpeFJRVUZCUVN4WlFVRlpMRWRCUVVjc1EwRkJReXhUUVVGRUxFVkJRVmxxUWl4SFFVRkhMRU5CUVVOcFF5eExRVUZLTEVOQlFWVmFMRWRCUVZZc1JVRkJaV2hDTEVsQlFVa3NSMEZCUnl4RFFVRjBRaXhEUVVGYUxFVkJRMkpsTEVsQlJHRXNSVUZEVUVNc1IwRkJSeXhIUVVGSFJpeE5RVVJETEVWQlJXSkRMRWxCUm1Fc1JVRkZVR1lzU1VGQlNTeEhRVUZIWXl4TlFVWkJMRU5CUVdZN1FVRkxRVVVzVVVGQlFVRXNSMEZCUnl4SFFVRkhhRUlzU1VGQlRqdEJRVU5CT3p0QlFVVkdMRmRCUVVzM1FpeFRRVUZNTzBGQlEwVTJRaXhSUVVGQlFTeEpRVUZKTEVkQlFVZG5RaXhIUVVGUU8wRkJRMEZZTEZGQlFVRkJMRTFCUVUwc1IwRkJSeXhKUVVGVU96dEJRVU5CTEdWQlFVOVdMRWRCUVVjc1EwRkJRekZDTEZWQlFVb3NRMEZCWlN0Q0xFbEJRVWtzUjBGQlJ5eERRVUYwUWl4TlFVRTJRamRDTEZOQlFYQkRMRVZCUVN0RE8wRkJRemRETmtJc1ZVRkJRVUVzU1VGQlNTeEpRVUZKTEVOQlFWSTdRVUZEUVVzc1ZVRkJRVUVzVFVGQlRTeEhRVUZITEVOQlFVTkJMRTFCUVZZN1FVRkRSRHM3UVVGRFJFNHNVVUZCUVVFc1NVRkJTU3hIUVVGSFNpeEhRVUZITEVOQlFVTXhRaXhWUVVGS0xFTkJRV1VyUWl4SlFVRkpMRWRCUVVjc1EwRkJkRUlzUTBGQlVEczdRVUZEUVN4WlFVTkZTeXhOUVVGTkxFbEJRMDVPTEVsQlFVa3NTMEZCU3pOQ0xFdEJSRlFzU1VGRlFUSkNMRWxCUVVrc1MwRkJTM3BDTEV0QlJsUXNTVUZIUVhsQ0xFbEJRVWtzUzBGQlN6RkNMRTlCU0ZRc1NVRkpRVEJDTEVsQlFVa3NTMEZCUzNaQ0xFZEJTbFFzU1VGTFFYVkNMRWxCUVVrc1MwRkJTM1JDTEVWQlRGUXNTVUZOUVhOQ0xFbEJRVWtzUzBGQlMzaENMRWxCVUZnc1JVRlJSVHRCUVVOQmVVSXNWVUZCUVVFc1NVRkJTU3hKUVVGSkxFTkJRVkk3TzBGQlEwRXNZMEZCU1ZRc1lVRkJZU3hEUVVGRE1FTXNTVUZCWkN4RFFVRnRRblJETEVkQlFVY3NRMEZCUTNsRExFMUJRVW9zUTBGQlYzQkRMRWxCUVZnc1EwRkJia0lzUTBGQlNpeEZRVUV3UXp0QlFVTjRReXh0UWtGQlQxUXNZVUZCWVN4RFFVRkRNRU1zU1VGQlpDeERRVUZ0UW5SRExFZEJRVWNzUTBGQlEzbERMRTFCUVVvc1EwRkJWM0JETEVsQlFVa3NSMEZCUnl4RFFVRnNRaXhEUVVGdVFpeERRVUZRTEVWQlFXbEVPMEZCUXk5RFFTeGpRVUZCUVN4SlFVRkpMRWxCUVVrc1EwRkJVanRCUVVORU96dEJRVU5FTEdkQ1FVRkpUQ3hIUVVGSExFTkJRVU14UWl4VlFVRktMRU5CUVdVclFpeEpRVUZKTEVkQlFVY3NRMEZCZEVJc1RVRkJOa0l4UWl4TFFVRnFReXhGUVVGM1F6dEJRVU4wUXpCQ0xHTkJRVUZCTEVsQlFVa3NTVUZCU1N4RFFVRlNPMEZCUTBRN1FVRkRSanRCUVVOR096dEJRVVZFV1N4UlFVRkJRU3haUVVGWkxFZEJRVWNzUTBGQlF5eE5RVUZFTEVWQlFWTnFRaXhIUVVGSExFTkJRVU5wUXl4TFFVRktMRU5CUVZWYUxFZEJRVllzUlVGQlpXaENMRWxCUVVrc1IwRkJSeXhEUVVGMFFpeERRVUZVTEVWQlEySmxMRWxCUkdFc1JVRkRVRU1zUjBGQlJ5eEhRVUZIUml4TlFVUkRMRVZCUldKRExFbEJSbUVzUlVGRlVHWXNTVUZCU1N4SFFVRkhZeXhOUVVaQkxFTkJRV1k3UVVGTFFVVXNVVUZCUVVFc1IwRkJSeXhIUVVGSGFFSXNTVUZCVGp0QlFVTkJPenRCUVVWR08wRkJRMFVzV1VGQlNVUXNTVUZCU1N4TFFVRkxNMElzUzBGQlZDeEpRVUZyUW5WQ0xFZEJRVWNzUTBGQlF6RkNMRlZCUVVvc1EwRkJaU3RETEVkQlFVY3NSMEZCUnl4RFFVRnlRaXhOUVVFMFFpOUNMRkZCUVd4RUxFVkJRVFJFTzBGQlF6RkVaU3hWUVVGQlFTeEpRVUZKTEVkQlFVZE1MRWRCUVVjc1EwRkJRM0ZETEU5QlFVb3NRMEZCV1N4SlFVRmFMRVZCUVd0Q2FFSXNSMEZCUnl4SFFVRkhMRU5CUVhoQ0xFbEJRVFpDTEVOQlFYQkRPenRCUVVOQkxHTkJRVWxvUWl4SlFVRkpMRXRCUVVzc1EwRkJZaXhGUVVGblFqdEJRVU5rTEdkQ1FVRkpTQ3hOUVVGTkxFbEJRVWs0UWl4alFVRmtMRVZCUVRoQ08wRkJRelZDTTBJc1kwRkJRVUVzU1VGQlNTeEhRVUZIVEN4SFFVRkhMRU5CUVVOclFpeE5RVUZZTzBGQlEwUXNZVUZHUkN4TlFVVlBPMEZCUTB4UExHTkJRVUZCTEZGQlFWRXNRMEZCUXl4VFFVRkVMRU5CUVZJN1FVRkRSRHRCUVVOR096dEJRVVZFYUVJc1ZVRkJRVUVzVDBGQlR5eEhRVUZIVkN4SFFVRkhMRU5CUVVOcFF5eExRVUZLTEVOQlFWVmFMRWRCUVZZc1JVRkJaV2hDTEVsQlFVa3NSMEZCUnl4RFFVRjBRaXhEUVVGV08wRkJRMEZGTEZWQlFVRkJMRXRCUVVzc1IwRkJSMFVzVDBGQlR5eERRVUZET0VJc1MwRkJVaXhEUVVGakxFbEJRV1FzUTBGQlVqdEJRVU5CTDBJc1ZVRkJRVUVzU1VGQlNTeEhRVUZIUkN4TFFVRkxMRU5CUVVOWExFMUJRVTRzUjBGQlpTeERRVUYwUWpzN1FVRkZRU3hqUVVGSlZpeEpRVUZKTEVkQlFVY3NRMEZCV0N4RlFVRmpPMEZCUTFwSExGbEJRVUZCTEZGQlFWRXNSMEZCUjFNc1NVRkJTU3hIUVVGSFdpeEpRVUZzUWp0QlFVTkJTU3haUVVGQlFTeFZRVUZWTEVkQlFVZFFMRWxCUVVrc1IwRkJSMFVzUzBGQlN5eERRVUZEUXl4SlFVRkVMRU5CUVV3c1EwRkJXVlVzVFVGQmFFTTdRVUZEUkN4WFFVaEVMRTFCUjA4N1FVRkRURkFzV1VGQlFVRXNVVUZCVVN4SFFVRkhVeXhKUVVGWU8wRkJRMEZTTEZsQlFVRkJMRlZCUVZVc1IwRkJSMDhzVFVGQllqdEJRVU5FT3p0QlFVVkVSaXhWUVVGQlFTeFpRVUZaTEVkQlFVY3NRMEZCUXl4VFFVRkVMRVZCUVZsU0xFOUJRVm9zUlVGRFlsY3NTVUZFWVN4RlFVTlFReXhIUVVGSExFZEJRVWRHTEUxQlJFTXNSVUZGWWxJc1VVRkdZU3hGUVVWSVRpeEpRVUZKTEVkQlFVZFBMRlZCUmtvc1EwRkJaanRCUVV0QlR5eFZRVUZCUVN4TlFVRk5MRWRCUVVkUUxGVkJRVlE3UVVGRFFWRXNWVUZCUVVFc1NVRkJTU3hIUVVGSFZDeFJRVUZRTzBGQlEwRlZMRlZCUVVGQkxFZEJRVWNzUjBGQlIyaENMRWxCUVU0N1FVRkRSQ3hUUVRsQ1JDeE5RVGhDVHp0QlFVTk1XQ3hWUVVGQlFTeFhRVUZYTEVOQlFVTTRReXhUUVVGYUxFZEJRWGRDYmtJc1IwRkJSeXhIUVVGSExFTkJRVGxDTzBGQlEwRXpRaXhWUVVGQlFTeFhRVUZYTEVOQlFVTTBReXhKUVVGYUxFTkJRV2xDZEVNc1IwRkJha0k3TzBGQlEwRXNZMEZCU1U0c1YwRkJWeXhEUVVGRE9FTXNVMEZCV2l4TFFVRXdRaXhEUVVFNVFpeEZRVUZwUXp0QlFVTXZRbTVETEZsQlFVRkJMRWxCUVVrc1IwRkJSMHdzUjBGQlJ5eERRVUZEYTBJc1RVRkJTaXhIUVVGaExFTkJRWEJDTzBGQlEwUXNWMEZHUkN4TlFVVlBPMEZCUTB4aUxGbEJRVUZCTEVsQlFVa3NSMEZCUjFnc1YwRkJWeXhEUVVGRE9FTXNVMEZCV2l4SFFVRjNRaXhEUVVFdlFqdEJRVU5FT3p0QlFVVkVka0lzVlVGQlFVRXNXVUZCV1N4SFFVRkhMRU5CUVVNc1RVRkJSQ3hGUVVGVGFrSXNSMEZCUnl4RFFVRkRhVU1zUzBGQlNpeERRVUZWV2l4SFFVRldMRVZCUVdWb1FpeEpRVUZKTEVkQlFVY3NRMEZCZEVJc1EwRkJWQ3hGUVVOaVpTeEpRVVJoTEVWQlExQkRMRWRCUVVjc1IwRkJSMFlzVFVGRVF5eEZRVVZpUXl4SlFVWmhMRVZCUlZCbUxFbEJRVWtzUjBGQlIyTXNUVUZHUVN4RFFVRm1PMEZCUzBGSExGVkJRVUZCTEUxQlFVMHNRMEZCUTI5Q0xFbEJRVkFzUTBGQldYcENMRmxCUVZvN1FVRkZRVWtzVlVGQlFVRXNSMEZCUnl4SFFVRkhhRUlzU1VGQlRqdEJRVU5FT3p0QlFVVkVPMEZCTTA5S096dEJRVGhQUVdkQ0xFbEJRVUZCTEVkQlFVYzdRVUZEU0N4WFFVRlBTaXhaUVVGUU8wRkJRMFE3TzBGQlJVUXNWMEZCVXpCQ0xFbEJRVlFzUTBGQlpVTXNTMEZCWml4RlFVRnpRanRCUVVOd1FuSkNMRWxCUVVGQkxGRkJRVkVzUTBGQlEyMUNMRWxCUVZRc1EwRkJZMFVzUzBGQlpEdEJRVU5FT3p0QlFVVkVMRk5CUVU4N1FVRkRURVFzU1VGQlFVRXNTVUZCU1N4RlFVRktRU3hKUVVSTE8wRkJSVXhrTEVsQlFVRkJMRk5CUVZNc1JVRkJWRUVzVTBGR1N6dEJRVWRNUkN4SlFVRkJRU3hUUVVGVExFVkJRVlJCTEZOQlNFczdRVUZKVEVvc1NVRkJRVUVzVVVGQlVTeEZRVUZTUVR0QlFVcExMRWRCUVZBN1FVRk5SQ0lzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1OdmJuTjBJRk5KVGtkTVJWOVJWVTlVUlNBOUlDZGNYQ2NuTG1Ob1lYSkRiMlJsUVhRb01DbGNibU52Ym5OMElFUlBWVUpNUlY5UlZVOVVSU0E5SUNkY0lpY3VZMmhoY2tOdlpHVkJkQ2d3S1Z4dVkyOXVjM1FnUWtGRFMxTk1RVk5JSUQwZ0oxeGNYRnduTG1Ob1lYSkRiMlJsUVhRb01DbGNibU52Ym5OMElGTk1RVk5JSUQwZ0p5OG5MbU5vWVhKRGIyUmxRWFFvTUNsY2JtTnZibk4wSUU1RlYweEpUa1VnUFNBblhGeHVKeTVqYUdGeVEyOWtaVUYwS0RBcFhHNWpiMjV6ZENCVFVFRkRSU0E5SUNjZ0p5NWphR0Z5UTI5a1pVRjBLREFwWEc1amIyNXpkQ0JHUlVWRUlEMGdKMXhjWmljdVkyaGhja052WkdWQmRDZ3dLVnh1WTI5dWMzUWdWRUZDSUQwZ0oxeGNkQ2N1WTJoaGNrTnZaR1ZCZENnd0tWeHVZMjl1YzNRZ1ExSWdQU0FuWEZ4eUp5NWphR0Z5UTI5a1pVRjBLREFwWEc1amIyNXpkQ0JQVUVWT1gxTlJWVUZTUlNBOUlDZGJKeTVqYUdGeVEyOWtaVUYwS0RBcFhHNWpiMjV6ZENCRFRFOVRSVjlUVVZWQlVrVWdQU0FuWFNjdVkyaGhja052WkdWQmRDZ3dLVnh1WTI5dWMzUWdUMUJGVGw5UVFWSkZUbFJJUlZORlV5QTlJQ2NvSnk1amFHRnlRMjlrWlVGMEtEQXBYRzVqYjI1emRDQkRURTlUUlY5UVFWSkZUbFJJUlZORlV5QTlJQ2NwSnk1amFHRnlRMjlrWlVGMEtEQXBYRzVqYjI1emRDQlBVRVZPWDBOVlVreFpJRDBnSjNzbkxtTm9ZWEpEYjJSbFFYUW9NQ2xjYm1OdmJuTjBJRU5NVDFORlgwTlZVa3haSUQwZ0ozMG5MbU5vWVhKRGIyUmxRWFFvTUNsY2JtTnZibk4wSUZORlRVbERUMHhQVGlBOUlDYzdKeTVqYUdGeVEyOWtaVUYwS0RBcFhHNWpiMjV6ZENCQlUxUkZVa2xUU3lBOUlDY3FKeTVqYUdGeVEyOWtaVUYwS0RBcFhHNWpiMjV6ZENCRFQweFBUaUE5SUNjNkp5NWphR0Z5UTI5a1pVRjBLREFwWEc1amIyNXpkQ0JCVkNBOUlDZEFKeTVqYUdGeVEyOWtaVUYwS0RBcFhHNWNibU52Ym5OMElGSkZYMEZVWDBWT1JDQTlJQzliSUZ4Y2JseGNkRnhjY2x4Y1pudDlLQ2tuWENKY1hGeGNPeTliWEZ4ZEkxMHZaMXh1WTI5dWMzUWdVa1ZmVjA5U1JGOUZUa1FnUFNBdld5QmNYRzVjWEhSY1hISmNYR1lvS1h0OU9qdEFJU2RjSWx4Y1hGeGNYRjFiSTExOFhGd3ZLRDg5WEZ3cUtTOW5YRzVqYjI1emRDQlNSVjlDUVVSZlFsSkJRMHRGVkNBOUlDOHVXMXhjWEZ3dktGd2lKMXhjYmwwdlhHNWpiMjV6ZENCU1JWOUlSVmhmUlZORFFWQkZJRDBnTDF0aExXWXdMVGxkTDJsY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1puVnVZM1JwYjI0Z2RHOXJaVzVwZW1WeUlDaHBibkIxZEN3Z2IzQjBhVzl1Y3lBOUlIdDlLU0I3WEc0Z0lHeGxkQ0JqYzNNZ1BTQnBibkIxZEM1amMzTXVkbUZzZFdWUFppZ3BYRzRnSUd4bGRDQnBaMjV2Y21VZ1BTQnZjSFJwYjI1ekxtbG5ibTl5WlVWeWNtOXljMXh1WEc0Z0lHeGxkQ0JqYjJSbExDQnVaWGgwTENCeGRXOTBaU3dnYkdsdVpYTXNJR3hoYzNRc0lHTnZiblJsYm5Rc0lHVnpZMkZ3WlZ4dUlDQnNaWFFnYm1WNGRFeHBibVVzSUc1bGVIUlBabVp6WlhRc0lHVnpZMkZ3WldRc0lHVnpZMkZ3WlZCdmN5d2djSEpsZGl3Z2Jpd2dZM1Z5Y21WdWRGUnZhMlZ1WEc1Y2JpQWdiR1YwSUd4bGJtZDBhQ0E5SUdOemN5NXNaVzVuZEdoY2JpQWdiR1YwSUc5bVpuTmxkQ0E5SUMweFhHNGdJR3hsZENCc2FXNWxJRDBnTVZ4dUlDQnNaWFFnY0c5eklEMGdNRnh1SUNCc1pYUWdZblZtWm1WeUlEMGdXMTFjYmlBZ2JHVjBJSEpsZEhWeWJtVmtJRDBnVzExY2JseHVJQ0JtZFc1amRHbHZiaUJ3YjNOcGRHbHZiaUFvS1NCN1hHNGdJQ0FnY21WMGRYSnVJSEJ2YzF4dUlDQjlYRzVjYmlBZ1puVnVZM1JwYjI0Z2RXNWpiRzl6WldRZ0tIZG9ZWFFwSUh0Y2JpQWdJQ0IwYUhKdmR5QnBibkIxZEM1bGNuSnZjaWduVlc1amJHOXpaV1FnSnlBcklIZG9ZWFFzSUd4cGJtVXNJSEJ2Y3lBdElHOW1abk5sZENsY2JpQWdmVnh1WEc0Z0lHWjFibU4wYVc5dUlHVnVaRTltUm1sc1pTQW9LU0I3WEc0Z0lDQWdjbVYwZFhKdUlISmxkSFZ5Ym1Wa0xteGxibWQwYUNBOVBUMGdNQ0FtSmlCd2IzTWdQajBnYkdWdVozUm9YRzRnSUgxY2JseHVJQ0JtZFc1amRHbHZiaUJ1WlhoMFZHOXJaVzRnS0c5d2RITXBJSHRjYmlBZ0lDQnBaaUFvY21WMGRYSnVaV1F1YkdWdVozUm9LU0J5WlhSMWNtNGdjbVYwZFhKdVpXUXVjRzl3S0NsY2JpQWdJQ0JwWmlBb2NHOXpJRDQ5SUd4bGJtZDBhQ2tnY21WMGRYSnVYRzVjYmlBZ0lDQnNaWFFnYVdkdWIzSmxWVzVqYkc5elpXUWdQU0J2Y0hSeklEOGdiM0IwY3k1cFoyNXZjbVZWYm1Oc2IzTmxaQ0E2SUdaaGJITmxYRzVjYmlBZ0lDQmpiMlJsSUQwZ1kzTnpMbU5vWVhKRGIyUmxRWFFvY0c5ektWeHVJQ0FnSUdsbUlDaGNiaUFnSUNBZ0lHTnZaR1VnUFQwOUlFNUZWMHhKVGtVZ2ZId2dZMjlrWlNBOVBUMGdSa1ZGUkNCOGZGeHVJQ0FnSUNBZ0tHTnZaR1VnUFQwOUlFTlNJQ1ltSUdOemN5NWphR0Z5UTI5a1pVRjBLSEJ2Y3lBcklERXBJQ0U5UFNCT1JWZE1TVTVGS1Z4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnYjJabWMyVjBJRDBnY0c5elhHNGdJQ0FnSUNCc2FXNWxJQ3M5SURGY2JpQWdJQ0I5WEc1Y2JpQWdJQ0J6ZDJsMFkyZ2dLR052WkdVcElIdGNiaUFnSUNBZ0lHTmhjMlVnVGtWWFRFbE9SVHBjYmlBZ0lDQWdJR05oYzJVZ1UxQkJRMFU2WEc0Z0lDQWdJQ0JqWVhObElGUkJRanBjYmlBZ0lDQWdJR05oYzJVZ1ExSTZYRzRnSUNBZ0lDQmpZWE5sSUVaRlJVUTZYRzRnSUNBZ0lDQWdJRzVsZUhRZ1BTQndiM05jYmlBZ0lDQWdJQ0FnWkc4Z2UxeHVJQ0FnSUNBZ0lDQWdJRzVsZUhRZ0t6MGdNVnh1SUNBZ0lDQWdJQ0FnSUdOdlpHVWdQU0JqYzNNdVkyaGhja052WkdWQmRDaHVaWGgwS1Z4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2hqYjJSbElEMDlQU0JPUlZkTVNVNUZLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQnZabVp6WlhRZ1BTQnVaWGgwWEc0Z0lDQWdJQ0FnSUNBZ0lDQnNhVzVsSUNzOUlERmNiaUFnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUgwZ2QyaHBiR1VnS0Z4dUlDQWdJQ0FnSUNBZ0lHTnZaR1VnUFQwOUlGTlFRVU5GSUh4OFhHNGdJQ0FnSUNBZ0lDQWdZMjlrWlNBOVBUMGdUa1ZYVEVsT1JTQjhmRnh1SUNBZ0lDQWdJQ0FnSUdOdlpHVWdQVDA5SUZSQlFpQjhmRnh1SUNBZ0lDQWdJQ0FnSUdOdlpHVWdQVDA5SUVOU0lIeDhYRzRnSUNBZ0lDQWdJQ0FnWTI5a1pTQTlQVDBnUmtWRlJGeHVJQ0FnSUNBZ0lDQXBYRzVjYmlBZ0lDQWdJQ0FnWTNWeWNtVnVkRlJ2YTJWdUlEMGdXeWR6Y0dGalpTY3NJR056Y3k1emJHbGpaU2h3YjNNc0lHNWxlSFFwWFZ4dUlDQWdJQ0FnSUNCd2IzTWdQU0J1WlhoMElDMGdNVnh1SUNBZ0lDQWdJQ0JpY21WaGExeHVYRzRnSUNBZ0lDQmpZWE5sSUU5UVJVNWZVMUZWUVZKRk9seHVJQ0FnSUNBZ1kyRnpaU0JEVEU5VFJWOVRVVlZCVWtVNlhHNGdJQ0FnSUNCallYTmxJRTlRUlU1ZlExVlNURms2WEc0Z0lDQWdJQ0JqWVhObElFTk1UMU5GWDBOVlVreFpPbHh1SUNBZ0lDQWdZMkZ6WlNCRFQweFBUanBjYmlBZ0lDQWdJR05oYzJVZ1UwVk5TVU5QVEU5T09seHVJQ0FnSUNBZ1kyRnpaU0JEVEU5VFJWOVFRVkpGVGxSSVJWTkZVenBjYmlBZ0lDQWdJQ0FnYkdWMElHTnZiblJ5YjJ4RGFHRnlJRDBnVTNSeWFXNW5MbVp5YjIxRGFHRnlRMjlrWlNoamIyUmxLVnh1SUNBZ0lDQWdJQ0JqZFhKeVpXNTBWRzlyWlc0Z1BTQmJZMjl1ZEhKdmJFTm9ZWElzSUdOdmJuUnliMnhEYUdGeUxDQnNhVzVsTENCd2IzTWdMU0J2Wm1aelpYUmRYRzRnSUNBZ0lDQWdJR0p5WldGclhHNWNiaUFnSUNBZ0lHTmhjMlVnVDFCRlRsOVFRVkpGVGxSSVJWTkZVenBjYmlBZ0lDQWdJQ0FnY0hKbGRpQTlJR0oxWm1abGNpNXNaVzVuZEdnZ1B5QmlkV1ptWlhJdWNHOXdLQ2xiTVYwZ09pQW5KMXh1SUNBZ0lDQWdJQ0J1SUQwZ1kzTnpMbU5vWVhKRGIyUmxRWFFvY0c5eklDc2dNU2xjYmlBZ0lDQWdJQ0FnYVdZZ0tGeHVJQ0FnSUNBZ0lDQWdJSEJ5WlhZZ1BUMDlJQ2QxY213bklDWW1YRzRnSUNBZ0lDQWdJQ0FnYmlBaFBUMGdVMGxPUjB4RlgxRlZUMVJGSUNZbUlHNGdJVDA5SUVSUFZVSk1SVjlSVlU5VVJTQW1KbHh1SUNBZ0lDQWdJQ0FnSUc0Z0lUMDlJRk5RUVVORklDWW1JRzRnSVQwOUlFNUZWMHhKVGtVZ0ppWWdiaUFoUFQwZ1ZFRkNJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ2JpQWhQVDBnUmtWRlJDQW1KaUJ1SUNFOVBTQkRVbHh1SUNBZ0lDQWdJQ0FwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnVaWGgwSUQwZ2NHOXpYRzRnSUNBZ0lDQWdJQ0FnWkc4Z2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWlhOallYQmxaQ0E5SUdaaGJITmxYRzRnSUNBZ0lDQWdJQ0FnSUNCdVpYaDBJRDBnWTNOekxtbHVaR1Y0VDJZb0p5a25MQ0J1WlhoMElDc2dNU2xjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h1WlhoMElEMDlQU0F0TVNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hV2R1YjNKbElIeDhJR2xuYm05eVpWVnVZMnh2YzJWa0tTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVY0ZENBOUlIQnZjMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGclhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZFc1amJHOXpaV1FvSjJKeVlXTnJaWFFuS1Z4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGMyTmhjR1ZRYjNNZ1BTQnVaWGgwWEc0Z0lDQWdJQ0FnSUNBZ0lDQjNhR2xzWlNBb1kzTnpMbU5vWVhKRGIyUmxRWFFvWlhOallYQmxVRzl6SUMwZ01Ta2dQVDA5SUVKQlEwdFRURUZUU0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGMyTmhjR1ZRYjNNZ0xUMGdNVnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQmxjMk5oY0dWa0lEMGdJV1Z6WTJGd1pXUmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ0lDQjlJSGRvYVd4bElDaGxjMk5oY0dWa0tWeHVYRzRnSUNBZ0lDQWdJQ0FnWTNWeWNtVnVkRlJ2YTJWdUlEMGdXeWRpY21GamEyVjBjeWNzSUdOemN5NXpiR2xqWlNod2IzTXNJRzVsZUhRZ0t5QXhLU3hjYmlBZ0lDQWdJQ0FnSUNBZ0lHeHBibVVzSUhCdmN5QXRJRzltWm5ObGRDeGNiaUFnSUNBZ0lDQWdJQ0FnSUd4cGJtVXNJRzVsZUhRZ0xTQnZabVp6WlhSY2JpQWdJQ0FnSUNBZ0lDQmRYRzVjYmlBZ0lDQWdJQ0FnSUNCd2IzTWdQU0J1WlhoMFhHNGdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdibVY0ZENBOUlHTnpjeTVwYm1SbGVFOW1LQ2NwSnl3Z2NHOXpJQ3NnTVNsY2JpQWdJQ0FnSUNBZ0lDQmpiMjUwWlc1MElEMGdZM056TG5Oc2FXTmxLSEJ2Y3l3Z2JtVjRkQ0FySURFcFhHNWNiaUFnSUNBZ0lDQWdJQ0JwWmlBb2JtVjRkQ0E5UFQwZ0xURWdmSHdnVWtWZlFrRkVYMEpTUVVOTFJWUXVkR1Z6ZENoamIyNTBaVzUwS1NrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnWTNWeWNtVnVkRlJ2YTJWdUlEMGdXeWNvSnl3Z0p5Z25MQ0JzYVc1bExDQndiM01nTFNCdlptWnpaWFJkWEc0Z0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQWdJR04xY25KbGJuUlViMnRsYmlBOUlGc25ZbkpoWTJ0bGRITW5MQ0JqYjI1MFpXNTBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnNhVzVsTENCd2IzTWdMU0J2Wm1aelpYUXNYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHeHBibVVzSUc1bGVIUWdMU0J2Wm1aelpYUmNiaUFnSUNBZ0lDQWdJQ0FnSUYxY2JpQWdJQ0FnSUNBZ0lDQWdJSEJ2Y3lBOUlHNWxlSFJjYmlBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lIMWNibHh1SUNBZ0lDQWdJQ0JpY21WaGExeHVYRzRnSUNBZ0lDQmpZWE5sSUZOSlRrZE1SVjlSVlU5VVJUcGNiaUFnSUNBZ0lHTmhjMlVnUkU5VlFreEZYMUZWVDFSRk9seHVJQ0FnSUNBZ0lDQnhkVzkwWlNBOUlHTnZaR1VnUFQwOUlGTkpUa2RNUlY5UlZVOVVSU0EvSUNkY1hDY25JRG9nSjF3aUoxeHVJQ0FnSUNBZ0lDQnVaWGgwSUQwZ2NHOXpYRzRnSUNBZ0lDQWdJR1J2SUh0Y2JpQWdJQ0FnSUNBZ0lDQmxjMk5oY0dWa0lEMGdabUZzYzJWY2JpQWdJQ0FnSUNBZ0lDQnVaWGgwSUQwZ1kzTnpMbWx1WkdWNFQyWW9jWFZ2ZEdVc0lHNWxlSFFnS3lBeEtWeHVJQ0FnSUNBZ0lDQWdJR2xtSUNodVpYaDBJRDA5UFNBdE1Ta2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR2xuYm05eVpTQjhmQ0JwWjI1dmNtVlZibU5zYjNObFpDa2dlMXh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQnVaWGgwSUQwZ2NHOXpJQ3NnTVZ4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0JpY21WaGExeHVJQ0FnSUNBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdkVzVqYkc5elpXUW9KM04wY21sdVp5Y3BYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhHNGdJQ0FnSUNBZ0lDQWdmVnh1SUNBZ0lDQWdJQ0FnSUdWelkyRndaVkJ2Y3lBOUlHNWxlSFJjYmlBZ0lDQWdJQ0FnSUNCM2FHbHNaU0FvWTNOekxtTm9ZWEpEYjJSbFFYUW9aWE5qWVhCbFVHOXpJQzBnTVNrZ1BUMDlJRUpCUTB0VFRFRlRTQ2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdaWE5qWVhCbFVHOXpJQzA5SURGY2JpQWdJQ0FnSUNBZ0lDQWdJR1Z6WTJGd1pXUWdQU0FoWlhOallYQmxaRnh1SUNBZ0lDQWdJQ0FnSUgxY2JpQWdJQ0FnSUNBZ2ZTQjNhR2xzWlNBb1pYTmpZWEJsWkNsY2JseHVJQ0FnSUNBZ0lDQmpiMjUwWlc1MElEMGdZM056TG5Oc2FXTmxLSEJ2Y3l3Z2JtVjRkQ0FySURFcFhHNGdJQ0FnSUNBZ0lHeHBibVZ6SUQwZ1kyOXVkR1Z1ZEM1emNHeHBkQ2duWEZ4dUp5bGNiaUFnSUNBZ0lDQWdiR0Z6ZENBOUlHeHBibVZ6TG14bGJtZDBhQ0F0SURGY2JseHVJQ0FnSUNBZ0lDQnBaaUFvYkdGemRDQStJREFwSUh0Y2JpQWdJQ0FnSUNBZ0lDQnVaWGgwVEdsdVpTQTlJR3hwYm1VZ0t5QnNZWE4wWEc0Z0lDQWdJQ0FnSUNBZ2JtVjRkRTltWm5ObGRDQTlJRzVsZUhRZ0xTQnNhVzVsYzF0c1lYTjBYUzVzWlc1bmRHaGNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0J1WlhoMFRHbHVaU0E5SUd4cGJtVmNiaUFnSUNBZ0lDQWdJQ0J1WlhoMFQyWm1jMlYwSUQwZ2IyWm1jMlYwWEc0Z0lDQWdJQ0FnSUgxY2JseHVJQ0FnSUNBZ0lDQmpkWEp5Wlc1MFZHOXJaVzRnUFNCYkozTjBjbWx1Wnljc0lHTnpjeTV6YkdsalpTaHdiM01zSUc1bGVIUWdLeUF4S1N4Y2JpQWdJQ0FnSUNBZ0lDQnNhVzVsTENCd2IzTWdMU0J2Wm1aelpYUXNYRzRnSUNBZ0lDQWdJQ0FnYm1WNGRFeHBibVVzSUc1bGVIUWdMU0J1WlhoMFQyWm1jMlYwWEc0Z0lDQWdJQ0FnSUYxY2JseHVJQ0FnSUNBZ0lDQnZabVp6WlhRZ1BTQnVaWGgwVDJabWMyVjBYRzRnSUNBZ0lDQWdJR3hwYm1VZ1BTQnVaWGgwVEdsdVpWeHVJQ0FnSUNBZ0lDQndiM01nUFNCdVpYaDBYRzRnSUNBZ0lDQWdJR0p5WldGclhHNWNiaUFnSUNBZ0lHTmhjMlVnUVZRNlhHNGdJQ0FnSUNBZ0lGSkZYMEZVWDBWT1JDNXNZWE4wU1c1a1pYZ2dQU0J3YjNNZ0t5QXhYRzRnSUNBZ0lDQWdJRkpGWDBGVVgwVk9SQzUwWlhOMEtHTnpjeWxjYmlBZ0lDQWdJQ0FnYVdZZ0tGSkZYMEZVWDBWT1JDNXNZWE4wU1c1a1pYZ2dQVDA5SURBcElIdGNiaUFnSUNBZ0lDQWdJQ0J1WlhoMElEMGdZM056TG14bGJtZDBhQ0F0SURGY2JpQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2JpQWdJQ0FnSUNBZ0lDQnVaWGgwSUQwZ1VrVmZRVlJmUlU1RUxteGhjM1JKYm1SbGVDQXRJREpjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHTjFjbkpsYm5SVWIydGxiaUE5SUZzbllYUXRkMjl5WkNjc0lHTnpjeTV6YkdsalpTaHdiM01zSUc1bGVIUWdLeUF4S1N4Y2JpQWdJQ0FnSUNBZ0lDQnNhVzVsTENCd2IzTWdMU0J2Wm1aelpYUXNYRzRnSUNBZ0lDQWdJQ0FnYkdsdVpTd2dibVY0ZENBdElHOW1abk5sZEZ4dUlDQWdJQ0FnSUNCZFhHNWNiaUFnSUNBZ0lDQWdjRzl6SUQwZ2JtVjRkRnh1SUNBZ0lDQWdJQ0JpY21WaGExeHVYRzRnSUNBZ0lDQmpZWE5sSUVKQlEwdFRURUZUU0RwY2JpQWdJQ0FnSUNBZ2JtVjRkQ0E5SUhCdmMxeHVJQ0FnSUNBZ0lDQmxjMk5oY0dVZ1BTQjBjblZsWEc0Z0lDQWdJQ0FnSUhkb2FXeGxJQ2hqYzNNdVkyaGhja052WkdWQmRDaHVaWGgwSUNzZ01Ta2dQVDA5SUVKQlEwdFRURUZUU0NrZ2UxeHVJQ0FnSUNBZ0lDQWdJRzVsZUhRZ0t6MGdNVnh1SUNBZ0lDQWdJQ0FnSUdWelkyRndaU0E5SUNGbGMyTmhjR1ZjYmlBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNCamIyUmxJRDBnWTNOekxtTm9ZWEpEYjJSbFFYUW9ibVY0ZENBcklERXBYRzRnSUNBZ0lDQWdJR2xtSUNoY2JpQWdJQ0FnSUNBZ0lDQmxjMk5oY0dVZ0ppWmNiaUFnSUNBZ0lDQWdJQ0JqYjJSbElDRTlQU0JUVEVGVFNDQW1KbHh1SUNBZ0lDQWdJQ0FnSUdOdlpHVWdJVDA5SUZOUVFVTkZJQ1ltWEc0Z0lDQWdJQ0FnSUNBZ1kyOWtaU0FoUFQwZ1RrVlhURWxPUlNBbUpseHVJQ0FnSUNBZ0lDQWdJR052WkdVZ0lUMDlJRlJCUWlBbUpseHVJQ0FnSUNBZ0lDQWdJR052WkdVZ0lUMDlJRU5TSUNZbVhHNGdJQ0FnSUNBZ0lDQWdZMjlrWlNBaFBUMGdSa1ZGUkZ4dUlDQWdJQ0FnSUNBcElIdGNiaUFnSUNBZ0lDQWdJQ0J1WlhoMElDczlJREZjYmlBZ0lDQWdJQ0FnSUNCcFppQW9Va1ZmU0VWWVgwVlRRMEZRUlM1MFpYTjBLR056Y3k1amFHRnlRWFFvYm1WNGRDa3BLU0I3WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNhR2xzWlNBb1VrVmZTRVZZWDBWVFEwRlFSUzUwWlhOMEtHTnpjeTVqYUdGeVFYUW9ibVY0ZENBcklERXBLU2tnZTF4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0J1WlhoMElDczlJREZjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaGpjM011WTJoaGNrTnZaR1ZCZENodVpYaDBJQ3NnTVNrZ1BUMDlJRk5RUVVORktTQjdYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxlSFFnS3owZ01WeHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4dUlDQWdJQ0FnSUNBZ0lIMWNiaUFnSUNBZ0lDQWdmVnh1WEc0Z0lDQWdJQ0FnSUdOMWNuSmxiblJVYjJ0bGJpQTlJRnNuZDI5eVpDY3NJR056Y3k1emJHbGpaU2h3YjNNc0lHNWxlSFFnS3lBeEtTeGNiaUFnSUNBZ0lDQWdJQ0JzYVc1bExDQndiM01nTFNCdlptWnpaWFFzWEc0Z0lDQWdJQ0FnSUNBZ2JHbHVaU3dnYm1WNGRDQXRJRzltWm5ObGRGeHVJQ0FnSUNBZ0lDQmRYRzVjYmlBZ0lDQWdJQ0FnY0c5eklEMGdibVY0ZEZ4dUlDQWdJQ0FnSUNCaWNtVmhhMXh1WEc0Z0lDQWdJQ0JrWldaaGRXeDBPbHh1SUNBZ0lDQWdJQ0JwWmlBb1kyOWtaU0E5UFQwZ1UweEJVMGdnSmlZZ1kzTnpMbU5vWVhKRGIyUmxRWFFvY0c5eklDc2dNU2tnUFQwOUlFRlRWRVZTU1ZOTEtTQjdYRzRnSUNBZ0lDQWdJQ0FnYm1WNGRDQTlJR056Y3k1cGJtUmxlRTltS0NjcUx5Y3NJSEJ2Y3lBcklESXBJQ3NnTVZ4dUlDQWdJQ0FnSUNBZ0lHbG1JQ2h1WlhoMElEMDlQU0F3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2FXZHViM0psSUh4OElHbG5ibTl5WlZWdVkyeHZjMlZrS1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUc1bGVIUWdQU0JqYzNNdWJHVnVaM1JvWEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnSUNCMWJtTnNiM05sWkNnblkyOXRiV1Z1ZENjcFhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEc0Z0lDQWdJQ0FnSUNBZ2ZWeHVYRzRnSUNBZ0lDQWdJQ0FnWTI5dWRHVnVkQ0E5SUdOemN5NXpiR2xqWlNod2IzTXNJRzVsZUhRZ0t5QXhLVnh1SUNBZ0lDQWdJQ0FnSUd4cGJtVnpJRDBnWTI5dWRHVnVkQzV6Y0d4cGRDZ25YRnh1SnlsY2JpQWdJQ0FnSUNBZ0lDQnNZWE4wSUQwZ2JHbHVaWE11YkdWdVozUm9JQzBnTVZ4dVhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0d4aGMzUWdQaUF3S1NCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhoMFRHbHVaU0E5SUd4cGJtVWdLeUJzWVhOMFhHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhoMFQyWm1jMlYwSUQwZ2JtVjRkQ0F0SUd4cGJtVnpXMnhoYzNSZExteGxibWQwYUZ4dUlDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hHNGdJQ0FnSUNBZ0lDQWdJQ0J1WlhoMFRHbHVaU0E5SUd4cGJtVmNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGVIUlBabVp6WlhRZ1BTQnZabVp6WlhSY2JpQWdJQ0FnSUNBZ0lDQjlYRzVjYmlBZ0lDQWdJQ0FnSUNCamRYSnlaVzUwVkc5clpXNGdQU0JiSjJOdmJXMWxiblFuTENCamIyNTBaVzUwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiR2x1WlN3Z2NHOXpJQzBnYjJabWMyVjBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjRkRXhwYm1Vc0lHNWxlSFFnTFNCdVpYaDBUMlptYzJWMFhHNGdJQ0FnSUNBZ0lDQWdYVnh1WEc0Z0lDQWdJQ0FnSUNBZ2IyWm1jMlYwSUQwZ2JtVjRkRTltWm5ObGRGeHVJQ0FnSUNBZ0lDQWdJR3hwYm1VZ1BTQnVaWGgwVEdsdVpWeHVJQ0FnSUNBZ0lDQWdJSEJ2Y3lBOUlHNWxlSFJjYmlBZ0lDQWdJQ0FnZlNCbGJITmxJSHRjYmlBZ0lDQWdJQ0FnSUNCU1JWOVhUMUpFWDBWT1JDNXNZWE4wU1c1a1pYZ2dQU0J3YjNNZ0t5QXhYRzRnSUNBZ0lDQWdJQ0FnVWtWZlYwOVNSRjlGVGtRdWRHVnpkQ2hqYzNNcFhHNGdJQ0FnSUNBZ0lDQWdhV1lnS0ZKRlgxZFBVa1JmUlU1RUxteGhjM1JKYm1SbGVDQTlQVDBnTUNrZ2UxeHVJQ0FnSUNBZ0lDQWdJQ0FnYm1WNGRDQTlJR056Y3k1c1pXNW5kR2dnTFNBeFhHNGdJQ0FnSUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdJQ0FnSUc1bGVIUWdQU0JTUlY5WFQxSkVYMFZPUkM1c1lYTjBTVzVrWlhnZ0xTQXlYRzRnSUNBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lDQWdZM1Z5Y21WdWRGUnZhMlZ1SUQwZ1d5ZDNiM0prSnl3Z1kzTnpMbk5zYVdObEtIQnZjeXdnYm1WNGRDQXJJREVwTEZ4dUlDQWdJQ0FnSUNBZ0lDQWdiR2x1WlN3Z2NHOXpJQzBnYjJabWMyVjBMRnh1SUNBZ0lDQWdJQ0FnSUNBZ2JHbHVaU3dnYm1WNGRDQXRJRzltWm5ObGRGeHVJQ0FnSUNBZ0lDQWdJRjFjYmx4dUlDQWdJQ0FnSUNBZ0lHSjFabVpsY2k1d2RYTm9LR04xY25KbGJuUlViMnRsYmlsY2JseHVJQ0FnSUNBZ0lDQWdJSEJ2Y3lBOUlHNWxlSFJjYmlBZ0lDQWdJQ0FnZlZ4dVhHNGdJQ0FnSUNBZ0lHSnlaV0ZyWEc0Z0lDQWdmVnh1WEc0Z0lDQWdjRzl6S3l0Y2JpQWdJQ0J5WlhSMWNtNGdZM1Z5Y21WdWRGUnZhMlZ1WEc0Z0lIMWNibHh1SUNCbWRXNWpkR2x2YmlCaVlXTnJJQ2gwYjJ0bGJpa2dlMXh1SUNBZ0lISmxkSFZ5Ym1Wa0xuQjFjMmdvZEc5clpXNHBYRzRnSUgxY2JseHVJQ0J5WlhSMWNtNGdlMXh1SUNBZ0lHSmhZMnNzWEc0Z0lDQWdibVY0ZEZSdmEyVnVMRnh1SUNBZ0lHVnVaRTltUm1sc1pTeGNiaUFnSUNCd2IzTnBkR2x2Ymx4dUlDQjlYRzU5WEc0aVhTd2labWxzWlNJNkluUnZhMlZ1YVhwbExtcHpJbjA9XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9wYXRoID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicGF0aFwiKSk7XG5cbnZhciBfY3NzU3ludGF4RXJyb3IgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2Nzcy1zeW50YXgtZXJyb3JcIikpO1xuXG52YXIgX3ByZXZpb3VzTWFwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9wcmV2aW91cy1tYXBcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbnZhciBzZXF1ZW5jZSA9IDA7XG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHNvdXJjZSBDU1MuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHJvb3QgID0gcG9zdGNzcy5wYXJzZShjc3MsIHsgZnJvbTogZmlsZSB9KVxuICogY29uc3QgaW5wdXQgPSByb290LnNvdXJjZS5pbnB1dFxuICovXG5cbnZhciBJbnB1dCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY3NzICAgIElucHV0IENTUyBzb3VyY2UuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0c10ge0BsaW5rIFByb2Nlc3NvciNwcm9jZXNzfSBvcHRpb25zLlxuICAgKi9cbiAgZnVuY3Rpb24gSW5wdXQoY3NzLCBvcHRzKSB7XG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIGlmIChjc3MgPT09IG51bGwgfHwgdHlwZW9mIGNzcyA9PT0gJ3VuZGVmaW5lZCcgfHwgdHlwZW9mIGNzcyA9PT0gJ29iamVjdCcgJiYgIWNzcy50b1N0cmluZykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUG9zdENTUyByZWNlaXZlZCBcIiArIGNzcyArIFwiIGluc3RlYWQgb2YgQ1NTIHN0cmluZ1wiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5wdXQgQ1NTIHNvdXJjZVxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3QgaW5wdXQgPSBwb3N0Y3NzLnBhcnNlKCdhe30nLCB7IGZyb206IGZpbGUgfSkuaW5wdXRcbiAgICAgKiBpbnB1dC5jc3MgLy89PiBcImF7fVwiXG4gICAgICovXG5cblxuICAgIHRoaXMuY3NzID0gY3NzLnRvU3RyaW5nKCk7XG5cbiAgICBpZiAodGhpcy5jc3NbMF0gPT09IFwiXFx1RkVGRlwiIHx8IHRoaXMuY3NzWzBdID09PSBcIlxcdUZGRkVcIikge1xuICAgICAgdGhpcy5oYXNCT00gPSB0cnVlO1xuICAgICAgdGhpcy5jc3MgPSB0aGlzLmNzcy5zbGljZSgxKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oYXNCT00gPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAob3B0cy5mcm9tKSB7XG4gICAgICBpZiAoL15cXHcrOlxcL1xcLy8udGVzdChvcHRzLmZyb20pIHx8IF9wYXRoLmRlZmF1bHQuaXNBYnNvbHV0ZShvcHRzLmZyb20pKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgYWJzb2x1dGUgcGF0aCB0byB0aGUgQ1NTIHNvdXJjZSBmaWxlIGRlZmluZWRcbiAgICAgICAgICogd2l0aCB0aGUgYGZyb21gIG9wdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgICAgICpcbiAgICAgICAgICogQGV4YW1wbGVcbiAgICAgICAgICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoY3NzLCB7IGZyb206ICdhLmNzcycgfSlcbiAgICAgICAgICogcm9vdC5zb3VyY2UuaW5wdXQuZmlsZSAvLz0+ICcvaG9tZS9haS9hLmNzcydcbiAgICAgICAgICovXG4gICAgICAgIHRoaXMuZmlsZSA9IG9wdHMuZnJvbTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZmlsZSA9IF9wYXRoLmRlZmF1bHQucmVzb2x2ZShvcHRzLmZyb20pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBtYXAgPSBuZXcgX3ByZXZpb3VzTWFwLmRlZmF1bHQodGhpcy5jc3MsIG9wdHMpO1xuXG4gICAgaWYgKG1hcC50ZXh0KSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSBpbnB1dCBzb3VyY2UgbWFwIHBhc3NlZCBmcm9tIGEgY29tcGlsYXRpb24gc3RlcCBiZWZvcmUgUG9zdENTU1xuICAgICAgICogKGZvciBleGFtcGxlLCBmcm9tIFNhc3MgY29tcGlsZXIpLlxuICAgICAgICpcbiAgICAgICAqIEB0eXBlIHtQcmV2aW91c01hcH1cbiAgICAgICAqXG4gICAgICAgKiBAZXhhbXBsZVxuICAgICAgICogcm9vdC5zb3VyY2UuaW5wdXQubWFwLmNvbnN1bWVyKCkuc291cmNlcyAvLz0+IFsnYS5zYXNzJ11cbiAgICAgICAqL1xuICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICB2YXIgZmlsZSA9IG1hcC5jb25zdW1lcigpLmZpbGU7XG4gICAgICBpZiAoIXRoaXMuZmlsZSAmJiBmaWxlKSB0aGlzLmZpbGUgPSB0aGlzLm1hcFJlc29sdmUoZmlsZSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmZpbGUpIHtcbiAgICAgIHNlcXVlbmNlICs9IDE7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSB1bmlxdWUgSUQgb2YgdGhlIENTUyBzb3VyY2UuIEl0IHdpbGwgYmUgY3JlYXRlZCBpZiBgZnJvbWAgb3B0aW9uXG4gICAgICAgKiBpcyBub3QgcHJvdmlkZWQgKGJlY2F1c2UgUG9zdENTUyBkb2VzIG5vdCBrbm93IHRoZSBmaWxlIHBhdGgpLlxuICAgICAgICpcbiAgICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICAgKlxuICAgICAgICogQGV4YW1wbGVcbiAgICAgICAqIGNvbnN0IHJvb3QgPSBwb3N0Y3NzLnBhcnNlKGNzcylcbiAgICAgICAqIHJvb3Quc291cmNlLmlucHV0LmZpbGUgLy89PiB1bmRlZmluZWRcbiAgICAgICAqIHJvb3Quc291cmNlLmlucHV0LmlkICAgLy89PiBcIjxpbnB1dCBjc3MgMT5cIlxuICAgICAgICovXG5cbiAgICAgIHRoaXMuaWQgPSAnPGlucHV0IGNzcyAnICsgc2VxdWVuY2UgKyAnPic7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMubWFwKSB0aGlzLm1hcC5maWxlID0gdGhpcy5mcm9tO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IElucHV0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uZXJyb3IgPSBmdW5jdGlvbiBlcnJvcihtZXNzYWdlLCBsaW5lLCBjb2x1bW4sIG9wdHMpIHtcbiAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRzID0ge307XG4gICAgfVxuXG4gICAgdmFyIHJlc3VsdDtcbiAgICB2YXIgb3JpZ2luID0gdGhpcy5vcmlnaW4obGluZSwgY29sdW1uKTtcblxuICAgIGlmIChvcmlnaW4pIHtcbiAgICAgIHJlc3VsdCA9IG5ldyBfY3NzU3ludGF4RXJyb3IuZGVmYXVsdChtZXNzYWdlLCBvcmlnaW4ubGluZSwgb3JpZ2luLmNvbHVtbiwgb3JpZ2luLnNvdXJjZSwgb3JpZ2luLmZpbGUsIG9wdHMucGx1Z2luKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0ID0gbmV3IF9jc3NTeW50YXhFcnJvci5kZWZhdWx0KG1lc3NhZ2UsIGxpbmUsIGNvbHVtbiwgdGhpcy5jc3MsIHRoaXMuZmlsZSwgb3B0cy5wbHVnaW4pO1xuICAgIH1cblxuICAgIHJlc3VsdC5pbnB1dCA9IHtcbiAgICAgIGxpbmU6IGxpbmUsXG4gICAgICBjb2x1bW46IGNvbHVtbixcbiAgICAgIHNvdXJjZTogdGhpcy5jc3NcbiAgICB9O1xuICAgIGlmICh0aGlzLmZpbGUpIHJlc3VsdC5pbnB1dC5maWxlID0gdGhpcy5maWxlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBpbnB1dCBzb3VyY2UgbWFwIGFuZCByZXR1cm5zIGEgc3ltYm9sIHBvc2l0aW9uXG4gICAqIGluIHRoZSBpbnB1dCBzb3VyY2UgKGUuZy4sIGluIGEgU2FzcyBmaWxlIHRoYXQgd2FzIGNvbXBpbGVkXG4gICAqIHRvIENTUyBiZWZvcmUgYmVpbmcgcGFzc2VkIHRvIFBvc3RDU1MpLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gbGluZSAgIExpbmUgaW4gaW5wdXQgQ1NTLlxuICAgKiBAcGFyYW0ge251bWJlcn0gY29sdW1uIENvbHVtbiBpbiBpbnB1dCBDU1MuXG4gICAqXG4gICAqIEByZXR1cm4ge2ZpbGVQb3NpdGlvbn0gUG9zaXRpb24gaW4gaW5wdXQgc291cmNlLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiByb290LnNvdXJjZS5pbnB1dC5vcmlnaW4oMSwgMSkgLy89PiB7IGZpbGU6ICdhLmNzcycsIGxpbmU6IDMsIGNvbHVtbjogMSB9XG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLm9yaWdpbiA9IGZ1bmN0aW9uIG9yaWdpbihsaW5lLCBjb2x1bW4pIHtcbiAgICBpZiAoIXRoaXMubWFwKSByZXR1cm4gZmFsc2U7XG4gICAgdmFyIGNvbnN1bWVyID0gdGhpcy5tYXAuY29uc3VtZXIoKTtcbiAgICB2YXIgZnJvbSA9IGNvbnN1bWVyLm9yaWdpbmFsUG9zaXRpb25Gb3Ioe1xuICAgICAgbGluZTogbGluZSxcbiAgICAgIGNvbHVtbjogY29sdW1uXG4gICAgfSk7XG4gICAgaWYgKCFmcm9tLnNvdXJjZSkgcmV0dXJuIGZhbHNlO1xuICAgIHZhciByZXN1bHQgPSB7XG4gICAgICBmaWxlOiB0aGlzLm1hcFJlc29sdmUoZnJvbS5zb3VyY2UpLFxuICAgICAgbGluZTogZnJvbS5saW5lLFxuICAgICAgY29sdW1uOiBmcm9tLmNvbHVtblxuICAgIH07XG4gICAgdmFyIHNvdXJjZSA9IGNvbnN1bWVyLnNvdXJjZUNvbnRlbnRGb3IoZnJvbS5zb3VyY2UpO1xuICAgIGlmIChzb3VyY2UpIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBfcHJvdG8ubWFwUmVzb2x2ZSA9IGZ1bmN0aW9uIG1hcFJlc29sdmUoZmlsZSkge1xuICAgIGlmICgvXlxcdys6XFwvXFwvLy50ZXN0KGZpbGUpKSB7XG4gICAgICByZXR1cm4gZmlsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3BhdGguZGVmYXVsdC5yZXNvbHZlKHRoaXMubWFwLmNvbnN1bWVyKCkuc291cmNlUm9vdCB8fCAnLicsIGZpbGUpO1xuICB9XG4gIC8qKlxuICAgKiBUaGUgQ1NTIHNvdXJjZSBpZGVudGlmaWVyLiBDb250YWlucyB7QGxpbmsgSW5wdXQjZmlsZX0gaWYgdGhlIHVzZXJcbiAgICogc2V0IHRoZSBgZnJvbWAgb3B0aW9uLCBvciB7QGxpbmsgSW5wdXQjaWR9IGlmIHRoZXkgZGlkIG5vdC5cbiAgICpcbiAgICogQHR5cGUge3N0cmluZ31cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3Qgcm9vdCA9IHBvc3Rjc3MucGFyc2UoY3NzLCB7IGZyb206ICdhLmNzcycgfSlcbiAgICogcm9vdC5zb3VyY2UuaW5wdXQuZnJvbSAvLz0+IFwiL2hvbWUvYWkvYS5jc3NcIlxuICAgKlxuICAgKiBjb25zdCByb290ID0gcG9zdGNzcy5wYXJzZShjc3MpXG4gICAqIHJvb3Quc291cmNlLmlucHV0LmZyb20gLy89PiBcIjxpbnB1dCBjc3MgMT5cIlxuICAgKi9cbiAgO1xuXG4gIF9jcmVhdGVDbGFzcyhJbnB1dCwgW3tcbiAgICBrZXk6IFwiZnJvbVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsZSB8fCB0aGlzLmlkO1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBJbnB1dDtcbn0oKTtcblxudmFyIF9kZWZhdWx0ID0gSW5wdXQ7XG4vKipcbiAqIEB0eXBlZGVmICB7b2JqZWN0fSBmaWxlUG9zaXRpb25cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBmaWxlICAgUGF0aCB0byBmaWxlLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGxpbmUgICBTb3VyY2UgbGluZSBpbiBmaWxlLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGNvbHVtbiBTb3VyY2UgY29sdW1uIGluIGZpbGUuXG4gKi9cblxuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdWNIVjBMbVZ6TmlKZExDSnVZVzFsY3lJNld5SnpaWEYxWlc1alpTSXNJa2x1Y0hWMElpd2lZM056SWl3aWIzQjBjeUlzSW5SdlUzUnlhVzVuSWl3aVJYSnliM0lpTENKb1lYTkNUMDBpTENKemJHbGpaU0lzSW1aeWIyMGlMQ0owWlhOMElpd2ljR0YwYUNJc0ltbHpRV0p6YjJ4MWRHVWlMQ0ptYVd4bElpd2ljbVZ6YjJ4MlpTSXNJbTFoY0NJc0lsQnlaWFpwYjNWelRXRndJaXdpZEdWNGRDSXNJbU52Ym5OMWJXVnlJaXdpYldGd1VtVnpiMngyWlNJc0ltbGtJaXdpWlhKeWIzSWlMQ0p0WlhOellXZGxJaXdpYkdsdVpTSXNJbU52YkhWdGJpSXNJbkpsYzNWc2RDSXNJbTl5YVdkcGJpSXNJa056YzFONWJuUmhlRVZ5Y205eUlpd2ljMjkxY21ObElpd2ljR3gxWjJsdUlpd2lhVzV3ZFhRaUxDSnZjbWxuYVc1aGJGQnZjMmwwYVc5dVJtOXlJaXdpYzI5MWNtTmxRMjl1ZEdWdWRFWnZjaUlzSW5OdmRYSmpaVkp2YjNRaVhTd2liV0Z3Y0dsdVozTWlPaUk3T3pzN08wRkJRVUU3TzBGQlJVRTdPMEZCUTBFN096czdPenM3TzBGQlJVRXNTVUZCU1VFc1VVRkJVU3hIUVVGSExFTkJRV1k3UVVGRlFUczdPenM3T3pzN1NVRlBUVU1zU3pzN08wRkJRMG83T3pzN1FVRkpRU3hwUWtGQllVTXNSMEZCWWl4RlFVRnJRa01zU1VGQmJFSXNSVUZCT0VJN1FVRkJRU3hSUVVGYVFTeEpRVUZaTzBGQlFWcEJMRTFCUVVGQkxFbEJRVmtzUjBGQlRDeEZRVUZMTzBGQlFVRTdPMEZCUXpWQ0xGRkJRMFZFTEVkQlFVY3NTMEZCU3l4SlFVRlNMRWxCUTBFc1QwRkJUMEVzUjBGQlVDeExRVUZsTEZkQlJHWXNTVUZGUXl4UFFVRlBRU3hIUVVGUUxFdEJRV1VzVVVGQlppeEpRVUV5UWl4RFFVRkRRU3hIUVVGSExFTkJRVU5GTEZGQlNHNURMRVZCU1VVN1FVRkRRU3haUVVGTkxFbEJRVWxETEV0QlFVb3NkVUpCUVN0Q1NDeEhRVUV2UWl3MFFrRkJUanRCUVVORU8wRkJSVVE3T3pzN096czdPenM3TzBGQlUwRXNVMEZCUzBFc1IwRkJUQ3hIUVVGWFFTeEhRVUZITEVOQlFVTkZMRkZCUVVvc1JVRkJXRHM3UVVGRlFTeFJRVUZKTEV0QlFVdEdMRWRCUVV3c1EwRkJVeXhEUVVGVUxFMUJRV2RDTEZGQlFXaENMRWxCUVRSQ0xFdEJRVXRCTEVkQlFVd3NRMEZCVXl4RFFVRlVMRTFCUVdkQ0xGRkJRV2hFTEVWQlFUQkVPMEZCUTNoRUxGZEJRVXRKTEUxQlFVd3NSMEZCWXl4SlFVRmtPMEZCUTBFc1YwRkJTMG9zUjBGQlRDeEhRVUZYTEV0QlFVdEJMRWRCUVV3c1EwRkJVMHNzUzBGQlZDeERRVUZsTEVOQlFXWXNRMEZCV0R0QlFVTkVMRXRCU0VRc1RVRkhUenRCUVVOTUxGZEJRVXRFTEUxQlFVd3NSMEZCWXl4TFFVRmtPMEZCUTBRN08wRkJSVVFzVVVGQlNVZ3NTVUZCU1N4RFFVRkRTeXhKUVVGVUxFVkJRV1U3UVVGRFlpeFZRVUZKTEZsQlFWbERMRWxCUVZvc1EwRkJhVUpPTEVsQlFVa3NRMEZCUTBzc1NVRkJkRUlzUzBGQkswSkZMR05CUVV0RExGVkJRVXdzUTBGQlowSlNMRWxCUVVrc1EwRkJRMHNzU1VGQmNrSXNRMEZCYmtNc1JVRkJLMFE3UVVGRE4wUTdPenM3T3pzN096czdRVUZWUVN4aFFVRkxTU3hKUVVGTUxFZEJRVmxVTEVsQlFVa3NRMEZCUTBzc1NVRkJha0k3UVVGRFJDeFBRVnBFTEUxQldVODdRVUZEVEN4aFFVRkxTU3hKUVVGTUxFZEJRVmxHTEdOQlFVdEhMRTlCUVV3c1EwRkJZVllzU1VGQlNTeERRVUZEU3l4SlFVRnNRaXhEUVVGYU8wRkJRMFE3UVVGRFJqczdRVUZGUkN4UlFVRkpUU3hIUVVGSExFZEJRVWNzU1VGQlNVTXNiMEpCUVVvc1EwRkJaMElzUzBGQlMySXNSMEZCY2tJc1JVRkJNRUpETEVsQlFURkNMRU5CUVZZN08wRkJRMEVzVVVGQlNWY3NSMEZCUnl4RFFVRkRSU3hKUVVGU0xFVkJRV003UVVGRFdqczdPenM3T3pzN08wRkJVMEVzVjBGQlMwWXNSMEZCVEN4SFFVRlhRU3hIUVVGWU8wRkJRMEVzVlVGQlNVWXNTVUZCU1N4SFFVRkhSU3hIUVVGSExFTkJRVU5ITEZGQlFVb3NSMEZCWlV3c1NVRkJNVUk3UVVGRFFTeFZRVUZKTEVOQlFVTXNTMEZCUzBFc1NVRkJUaXhKUVVGalFTeEpRVUZzUWl4RlFVRjNRaXhMUVVGTFFTeEpRVUZNTEVkQlFWa3NTMEZCUzAwc1ZVRkJUQ3hEUVVGblFrNHNTVUZCYUVJc1EwRkJXanRCUVVONlFqczdRVUZGUkN4UlFVRkpMRU5CUVVNc1MwRkJTMEVzU1VGQlZpeEZRVUZuUWp0QlFVTmtXaXhOUVVGQlFTeFJRVUZSTEVsQlFVa3NRMEZCV2p0QlFVTkJPenM3T3pzN096czdPenM3UVVGWFFTeFhRVUZMYlVJc1JVRkJUQ3hIUVVGVkxHZENRVUZuUW01Q0xGRkJRV2hDTEVkQlFUSkNMRWRCUVhKRE8wRkJRMFE3TzBGQlEwUXNVVUZCU1N4TFFVRkxZeXhIUVVGVUxFVkJRV01zUzBGQlMwRXNSMEZCVEN4RFFVRlRSaXhKUVVGVUxFZEJRV2RDTEV0QlFVdEtMRWxCUVhKQ08wRkJRMlk3T3pzN1UwRkZSRmtzU3l4SFFVRkJMR1ZCUVU5RExFOUJRVkFzUlVGQlowSkRMRWxCUVdoQ0xFVkJRWE5DUXl4TlFVRjBRaXhGUVVFNFFuQkNMRWxCUVRsQ0xFVkJRVEJETzBGQlFVRXNVVUZCV2tFc1NVRkJXVHRCUVVGYVFTeE5RVUZCUVN4SlFVRlpMRWRCUVV3c1JVRkJTenRCUVVGQk96dEJRVU40UXl4UlFVRkpjVUlzVFVGQlNqdEJRVU5CTEZGQlFVbERMRTFCUVUwc1IwRkJSeXhMUVVGTFFTeE5RVUZNTEVOQlFWbElMRWxCUVZvc1JVRkJhMEpETEUxQlFXeENMRU5CUVdJN08wRkJRMEVzVVVGQlNVVXNUVUZCU2l4RlFVRlpPMEZCUTFaRUxFMUJRVUZCTEUxQlFVMHNSMEZCUnl4SlFVRkpSU3gxUWtGQlNpeERRVU5RVEN4UFFVUlBMRVZCUTBWSkxFMUJRVTBzUTBGQlEwZ3NTVUZFVkN4RlFVTmxSeXhOUVVGTkxFTkJRVU5HTEUxQlJIUkNMRVZCUlZCRkxFMUJRVTBzUTBGQlEwVXNUVUZHUVN4RlFVVlJSaXhOUVVGTkxFTkJRVU5pTEVsQlJtWXNSVUZGY1VKVUxFbEJRVWtzUTBGQlEzbENMRTFCUmpGQ0xFTkJRVlE3UVVGSlJDeExRVXhFTEUxQlMwODdRVUZEVEVvc1RVRkJRVUVzVFVGQlRTeEhRVUZITEVsQlFVbEZMSFZDUVVGS0xFTkJRMUJNTEU5QlJFOHNSVUZEUlVNc1NVRkVSaXhGUVVOUlF5eE5RVVJTTEVWQlEyZENMRXRCUVV0eVFpeEhRVVJ5UWl4RlFVTXdRaXhMUVVGTFZTeEpRVVF2UWl4RlFVTnhRMVFzU1VGQlNTeERRVUZEZVVJc1RVRkVNVU1zUTBGQlZEdEJRVVZFT3p0QlFVVkVTaXhKUVVGQlFTeE5RVUZOTEVOQlFVTkxMRXRCUVZBc1IwRkJaVHRCUVVGRlVDeE5RVUZCUVN4SlFVRkpMRVZCUVVwQkxFbEJRVVk3UVVGQlVVTXNUVUZCUVVFc1RVRkJUU3hGUVVGT1FTeE5RVUZTTzBGQlFXZENTU3hOUVVGQlFTeE5RVUZOTEVWQlFVVXNTMEZCUzNwQ08wRkJRVGRDTEV0QlFXWTdRVUZEUVN4UlFVRkpMRXRCUVV0VkxFbEJRVlFzUlVGQlpWa3NUVUZCVFN4RFFVRkRTeXhMUVVGUUxFTkJRV0ZxUWl4SlFVRmlMRWRCUVc5Q0xFdEJRVXRCTEVsQlFYcENPMEZCUldZc1YwRkJUMWtzVFVGQlVEdEJRVU5FTzBGQlJVUTdPenM3T3pzN096czdPenM3T3p0VFFXRkJReXhOTEVkQlFVRXNaMEpCUVZGSUxFbEJRVklzUlVGQlkwTXNUVUZCWkN4RlFVRnpRanRCUVVOd1FpeFJRVUZKTEVOQlFVTXNTMEZCUzFRc1IwRkJWaXhGUVVGbExFOUJRVThzUzBGQlVEdEJRVU5tTEZGQlFVbEhMRkZCUVZFc1IwRkJSeXhMUVVGTFNDeEhRVUZNTEVOQlFWTkhMRkZCUVZRc1JVRkJaanRCUVVWQkxGRkJRVWxVTEVsQlFVa3NSMEZCUjFNc1VVRkJVU3hEUVVGRFlTeHRRa0ZCVkN4RFFVRTJRanRCUVVGRlVpeE5RVUZCUVN4SlFVRkpMRVZCUVVwQkxFbEJRVVk3UVVGQlVVTXNUVUZCUVVFc1RVRkJUU3hGUVVGT1FUdEJRVUZTTEV0QlFUZENMRU5CUVZnN1FVRkRRU3hSUVVGSkxFTkJRVU5tTEVsQlFVa3NRMEZCUTIxQ0xFMUJRVllzUlVGQmEwSXNUMEZCVHl4TFFVRlFPMEZCUld4Q0xGRkJRVWxJTEUxQlFVMHNSMEZCUnp0QlFVTllXaXhOUVVGQlFTeEpRVUZKTEVWQlFVVXNTMEZCUzAwc1ZVRkJUQ3hEUVVGblFsWXNTVUZCU1N4RFFVRkRiVUlzVFVGQmNrSXNRMEZFU3p0QlFVVllUQ3hOUVVGQlFTeEpRVUZKTEVWQlFVVmtMRWxCUVVrc1EwRkJRMk1zU1VGR1FUdEJRVWRZUXl4TlFVRkJRU3hOUVVGTkxFVkJRVVZtTEVsQlFVa3NRMEZCUTJVN1FVRklSaXhMUVVGaU8wRkJUVUVzVVVGQlNVa3NUVUZCVFN4SFFVRkhWaXhSUVVGUkxFTkJRVU5qTEdkQ1FVRlVMRU5CUVRCQ2RrSXNTVUZCU1N4RFFVRkRiVUlzVFVGQkwwSXNRMEZCWWp0QlFVTkJMRkZCUVVsQkxFMUJRVW9zUlVGQldVZ3NUVUZCVFN4RFFVRkRSeXhOUVVGUUxFZEJRV2RDUVN4TlFVRm9RanRCUVVWYUxGZEJRVTlJTEUxQlFWQTdRVUZEUkN4SE96dFRRVVZFVGl4VkxFZEJRVUVzYjBKQlFWbE9MRWxCUVZvc1JVRkJhMEk3UVVGRGFFSXNVVUZCU1N4WlFVRlpTQ3hKUVVGYUxFTkJRV2xDUnl4SlFVRnFRaXhEUVVGS0xFVkJRVFJDTzBGQlF6RkNMR0ZCUVU5QkxFbEJRVkE3UVVGRFJEczdRVUZEUkN4WFFVRlBSaXhqUVVGTFJ5eFBRVUZNTEVOQlFXRXNTMEZCUzBNc1IwRkJUQ3hEUVVGVFJ5eFJRVUZVTEVkQlFXOUNaU3hWUVVGd1FpeEpRVUZyUXl4SFFVRXZReXhGUVVGdlJIQkNMRWxCUVhCRUxFTkJRVkE3UVVGRFJEdEJRVVZFT3pzN096czdPenM3T3pzN096czdPenQzUWtGaFdUdEJRVU5XTEdGQlFVOHNTMEZCUzBFc1NVRkJUQ3hKUVVGaExFdEJRVXRQTEVWQlFYcENPMEZCUTBRN096czdPenRsUVVkWmJFSXNTenRCUVVWbUlpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lhVzF3YjNKMElIQmhkR2dnWm5KdmJTQW5jR0YwYUNkY2JseHVhVzF3YjNKMElFTnpjMU41Ym5SaGVFVnljbTl5SUdaeWIyMGdKeTR2WTNOekxYTjViblJoZUMxbGNuSnZjaWRjYm1sdGNHOXlkQ0JRY21WMmFXOTFjMDFoY0NCbWNtOXRJQ2N1TDNCeVpYWnBiM1Z6TFcxaGNDZGNibHh1YkdWMElITmxjWFZsYm1ObElEMGdNRnh1WEc0dktpcGNiaUFxSUZKbGNISmxjMlZ1ZEhNZ2RHaGxJSE52ZFhKalpTQkRVMU11WEc0Z0tseHVJQ29nUUdWNFlXMXdiR1ZjYmlBcUlHTnZibk4wSUhKdmIzUWdJRDBnY0c5emRHTnpjeTV3WVhKelpTaGpjM01zSUhzZ1puSnZiVG9nWm1sc1pTQjlLVnh1SUNvZ1kyOXVjM1FnYVc1d2RYUWdQU0J5YjI5MExuTnZkWEpqWlM1cGJuQjFkRnh1SUNvdlhHNWpiR0Z6Y3lCSmJuQjFkQ0I3WEc0Z0lDOHFLbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UzTjBjbWx1WjMwZ1kzTnpJQ0FnSUVsdWNIVjBJRU5UVXlCemIzVnlZMlV1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiMkpxWldOMGZTQmJiM0IwYzEwZ2UwQnNhVzVySUZCeWIyTmxjM052Y2lOd2NtOWpaWE56ZlNCdmNIUnBiMjV6TGx4dUlDQWdLaTljYmlBZ1kyOXVjM1J5ZFdOMGIzSWdLR056Y3l3Z2IzQjBjeUE5SUhzZ2ZTa2dlMXh1SUNBZ0lHbG1JQ2hjYmlBZ0lDQWdJR056Y3lBOVBUMGdiblZzYkNCOGZGeHVJQ0FnSUNBZ2RIbHdaVzltSUdOemN5QTlQVDBnSjNWdVpHVm1hVzVsWkNjZ2ZIeGNiaUFnSUNBZ0lDaDBlWEJsYjJZZ1kzTnpJRDA5UFNBbmIySnFaV04wSnlBbUppQWhZM056TG5SdlUzUnlhVzVuS1Z4dUlDQWdJQ2tnZTF4dUlDQWdJQ0FnZEdoeWIzY2dibVYzSUVWeWNtOXlLR0JRYjNOMFExTlRJSEpsWTJWcGRtVmtJQ1I3SUdOemN5QjlJR2x1YzNSbFlXUWdiMllnUTFOVElITjBjbWx1WjJBcFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1NXNXdkWFFnUTFOVElITnZkWEpqWlZ4dUlDQWdJQ0FxWEc0Z0lDQWdJQ29nUUhSNWNHVWdlM04wY21sdVozMWNiaUFnSUNBZ0tseHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhHNGdJQ0FnSUNvZ1kyOXVjM1FnYVc1d2RYUWdQU0J3YjNOMFkzTnpMbkJoY25ObEtDZGhlMzBuTENCN0lHWnliMjA2SUdacGJHVWdmU2t1YVc1d2RYUmNiaUFnSUNBZ0tpQnBibkIxZEM1amMzTWdMeTg5UGlCY0ltRjdmVndpWEc0Z0lDQWdJQ292WEc0Z0lDQWdkR2hwY3k1amMzTWdQU0JqYzNNdWRHOVRkSEpwYm1jb0tWeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdVkzTnpXekJkSUQwOVBTQW5YRngxUmtWR1JpY2dmSHdnZEdocGN5NWpjM05iTUYwZ1BUMDlJQ2RjWEhWR1JrWkZKeWtnZTF4dUlDQWdJQ0FnZEdocGN5NW9ZWE5DVDAwZ1BTQjBjblZsWEc0Z0lDQWdJQ0IwYUdsekxtTnpjeUE5SUhSb2FYTXVZM056TG5Oc2FXTmxLREVwWEc0Z0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lIUm9hWE11YUdGelFrOU5JRDBnWm1Gc2MyVmNiaUFnSUNCOVhHNWNiaUFnSUNCcFppQW9iM0IwY3k1bWNtOXRLU0I3WEc0Z0lDQWdJQ0JwWmlBb0wxNWNYSGNyT2x4Y0wxeGNMeTh1ZEdWemRDaHZjSFJ6TG1aeWIyMHBJSHg4SUhCaGRHZ3VhWE5CWW5OdmJIVjBaU2h2Y0hSekxtWnliMjBwS1NCN1hHNGdJQ0FnSUNBZ0lDOHFLbHh1SUNBZ0lDQWdJQ0FnS2lCVWFHVWdZV0p6YjJ4MWRHVWdjR0YwYUNCMGJ5QjBhR1VnUTFOVElITnZkWEpqWlNCbWFXeGxJR1JsWm1sdVpXUmNiaUFnSUNBZ0lDQWdJQ29nZDJsMGFDQjBhR1VnWUdaeWIyMWdJRzl3ZEdsdmJpNWNiaUFnSUNBZ0lDQWdJQ3BjYmlBZ0lDQWdJQ0FnSUNvZ1FIUjVjR1VnZTNOMGNtbHVaMzFjYmlBZ0lDQWdJQ0FnSUNwY2JpQWdJQ0FnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNBZ0lDQWdJQ29nWTI5dWMzUWdjbTl2ZENBOUlIQnZjM1JqYzNNdWNHRnljMlVvWTNOekxDQjdJR1p5YjIwNklDZGhMbU56Y3ljZ2ZTbGNiaUFnSUNBZ0lDQWdJQ29nY205dmRDNXpiM1Z5WTJVdWFXNXdkWFF1Wm1sc1pTQXZMejArSUNjdmFHOXRaUzloYVM5aExtTnpjeWRjYmlBZ0lDQWdJQ0FnSUNvdlhHNGdJQ0FnSUNBZ0lIUm9hWE11Wm1sc1pTQTlJRzl3ZEhNdVpuSnZiVnh1SUNBZ0lDQWdmU0JsYkhObElIdGNiaUFnSUNBZ0lDQWdkR2hwY3k1bWFXeGxJRDBnY0dGMGFDNXlaWE52YkhabEtHOXdkSE11Wm5KdmJTbGNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNWNiaUFnSUNCc1pYUWdiV0Z3SUQwZ2JtVjNJRkJ5WlhacGIzVnpUV0Z3S0hSb2FYTXVZM056TENCdmNIUnpLVnh1SUNBZ0lHbG1JQ2h0WVhBdWRHVjRkQ2tnZTF4dUlDQWdJQ0FnTHlvcVhHNGdJQ0FnSUNBZ0tpQlVhR1VnYVc1d2RYUWdjMjkxY21ObElHMWhjQ0J3WVhOelpXUWdabkp2YlNCaElHTnZiWEJwYkdGMGFXOXVJSE4wWlhBZ1ltVm1iM0psSUZCdmMzUkRVMU5jYmlBZ0lDQWdJQ0FxSUNobWIzSWdaWGhoYlhCc1pTd2dabkp2YlNCVFlYTnpJR052YlhCcGJHVnlLUzVjYmlBZ0lDQWdJQ0FxWEc0Z0lDQWdJQ0FnS2lCQWRIbHdaU0I3VUhKbGRtbHZkWE5OWVhCOVhHNGdJQ0FnSUNBZ0tseHVJQ0FnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNBZ0lDQXFJSEp2YjNRdWMyOTFjbU5sTG1sdWNIVjBMbTFoY0M1amIyNXpkVzFsY2lncExuTnZkWEpqWlhNZ0x5ODlQaUJiSjJFdWMyRnpjeWRkWEc0Z0lDQWdJQ0FnS2k5Y2JpQWdJQ0FnSUhSb2FYTXViV0Z3SUQwZ2JXRndYRzRnSUNBZ0lDQnNaWFFnWm1sc1pTQTlJRzFoY0M1amIyNXpkVzFsY2lncExtWnBiR1ZjYmlBZ0lDQWdJR2xtSUNnaGRHaHBjeTVtYVd4bElDWW1JR1pwYkdVcElIUm9hWE11Wm1sc1pTQTlJSFJvYVhNdWJXRndVbVZ6YjJ4MlpTaG1hV3hsS1Z4dUlDQWdJSDFjYmx4dUlDQWdJR2xtSUNnaGRHaHBjeTVtYVd4bEtTQjdYRzRnSUNBZ0lDQnpaWEYxWlc1alpTQXJQU0F4WEc0Z0lDQWdJQ0F2S2lwY2JpQWdJQ0FnSUNBcUlGUm9aU0IxYm1seGRXVWdTVVFnYjJZZ2RHaGxJRU5UVXlCemIzVnlZMlV1SUVsMElIZHBiR3dnWW1VZ1kzSmxZWFJsWkNCcFppQmdabkp2YldBZ2IzQjBhVzl1WEc0Z0lDQWdJQ0FnS2lCcGN5QnViM1FnY0hKdmRtbGtaV1FnS0dKbFkyRjFjMlVnVUc5emRFTlRVeUJrYjJWeklHNXZkQ0JyYm05M0lIUm9aU0JtYVd4bElIQmhkR2dwTGx4dUlDQWdJQ0FnSUNwY2JpQWdJQ0FnSUNBcUlFQjBlWEJsSUh0emRISnBibWQ5WEc0Z0lDQWdJQ0FnS2x4dUlDQWdJQ0FnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ0FnSUNBcUlHTnZibk4wSUhKdmIzUWdQU0J3YjNOMFkzTnpMbkJoY25ObEtHTnpjeWxjYmlBZ0lDQWdJQ0FxSUhKdmIzUXVjMjkxY21ObExtbHVjSFYwTG1acGJHVWdMeTg5UGlCMWJtUmxabWx1WldSY2JpQWdJQ0FnSUNBcUlISnZiM1F1YzI5MWNtTmxMbWx1Y0hWMExtbGtJQ0FnTHk4OVBpQmNJanhwYm5CMWRDQmpjM01nTVQ1Y0lseHVJQ0FnSUNBZ0lDb3ZYRzRnSUNBZ0lDQjBhR2x6TG1sa0lEMGdKenhwYm5CMWRDQmpjM01nSnlBcklITmxjWFZsYm1ObElDc2dKejRuWEc0Z0lDQWdmVnh1SUNBZ0lHbG1JQ2gwYUdsekxtMWhjQ2tnZEdocGN5NXRZWEF1Wm1sc1pTQTlJSFJvYVhNdVpuSnZiVnh1SUNCOVhHNWNiaUFnWlhKeWIzSWdLRzFsYzNOaFoyVXNJR3hwYm1Vc0lHTnZiSFZ0Yml3Z2IzQjBjeUE5SUhzZ2ZTa2dlMXh1SUNBZ0lHeGxkQ0J5WlhOMWJIUmNiaUFnSUNCc1pYUWdiM0pwWjJsdUlEMGdkR2hwY3k1dmNtbG5hVzRvYkdsdVpTd2dZMjlzZFcxdUtWeHVJQ0FnSUdsbUlDaHZjbWxuYVc0cElIdGNiaUFnSUNBZ0lISmxjM1ZzZENBOUlHNWxkeUJEYzNOVGVXNTBZWGhGY25KdmNpaGNiaUFnSUNBZ0lDQWdiV1Z6YzJGblpTd2diM0pwWjJsdUxteHBibVVzSUc5eWFXZHBiaTVqYjJ4MWJXNHNYRzRnSUNBZ0lDQWdJRzl5YVdkcGJpNXpiM1Z5WTJVc0lHOXlhV2RwYmk1bWFXeGxMQ0J2Y0hSekxuQnNkV2RwYmx4dUlDQWdJQ0FnS1Z4dUlDQWdJSDBnWld4elpTQjdYRzRnSUNBZ0lDQnlaWE4xYkhRZ1BTQnVaWGNnUTNOelUzbHVkR0Y0UlhKeWIzSW9YRzRnSUNBZ0lDQWdJRzFsYzNOaFoyVXNJR3hwYm1Vc0lHTnZiSFZ0Yml3Z2RHaHBjeTVqYzNNc0lIUm9hWE11Wm1sc1pTd2diM0IwY3k1d2JIVm5hVzRwWEc0Z0lDQWdmVnh1WEc0Z0lDQWdjbVZ6ZFd4MExtbHVjSFYwSUQwZ2V5QnNhVzVsTENCamIyeDFiVzRzSUhOdmRYSmpaVG9nZEdocGN5NWpjM01nZlZ4dUlDQWdJR2xtSUNoMGFHbHpMbVpwYkdVcElISmxjM1ZzZEM1cGJuQjFkQzVtYVd4bElEMGdkR2hwY3k1bWFXeGxYRzVjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwWEc0Z0lIMWNibHh1SUNBdktpcGNiaUFnSUNvZ1VtVmhaSE1nZEdobElHbHVjSFYwSUhOdmRYSmpaU0J0WVhBZ1lXNWtJSEpsZEhWeWJuTWdZU0J6ZVcxaWIyd2djRzl6YVhScGIyNWNiaUFnSUNvZ2FXNGdkR2hsSUdsdWNIVjBJSE52ZFhKalpTQW9aUzVuTGl3Z2FXNGdZU0JUWVhOeklHWnBiR1VnZEdoaGRDQjNZWE1nWTI5dGNHbHNaV1JjYmlBZ0lDb2dkRzhnUTFOVElHSmxabTl5WlNCaVpXbHVaeUJ3WVhOelpXUWdkRzhnVUc5emRFTlRVeWt1WEc0Z0lDQXFYRzRnSUNBcUlFQndZWEpoYlNCN2JuVnRZbVZ5ZlNCc2FXNWxJQ0FnVEdsdVpTQnBiaUJwYm5CMWRDQkRVMU11WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiblZ0WW1WeWZTQmpiMngxYlc0Z1EyOXNkVzF1SUdsdUlHbHVjSFYwSUVOVFV5NWNiaUFnSUNwY2JpQWdJQ29nUUhKbGRIVnliaUI3Wm1sc1pWQnZjMmwwYVc5dWZTQlFiM05wZEdsdmJpQnBiaUJwYm5CMWRDQnpiM1Z5WTJVdVhHNGdJQ0FxWEc0Z0lDQXFJRUJsZUdGdGNHeGxYRzRnSUNBcUlISnZiM1F1YzI5MWNtTmxMbWx1Y0hWMExtOXlhV2RwYmlneExDQXhLU0F2THowK0lIc2dabWxzWlRvZ0oyRXVZM056Snl3Z2JHbHVaVG9nTXl3Z1kyOXNkVzF1T2lBeElIMWNiaUFnSUNvdlhHNGdJRzl5YVdkcGJpQW9iR2x1WlN3Z1kyOXNkVzF1S1NCN1hHNGdJQ0FnYVdZZ0tDRjBhR2x6TG0xaGNDa2djbVYwZFhKdUlHWmhiSE5sWEc0Z0lDQWdiR1YwSUdOdmJuTjFiV1Z5SUQwZ2RHaHBjeTV0WVhBdVkyOXVjM1Z0WlhJb0tWeHVYRzRnSUNBZ2JHVjBJR1p5YjIwZ1BTQmpiMjV6ZFcxbGNpNXZjbWxuYVc1aGJGQnZjMmwwYVc5dVJtOXlLSHNnYkdsdVpTd2dZMjlzZFcxdUlIMHBYRzRnSUNBZ2FXWWdLQ0ZtY205dExuTnZkWEpqWlNrZ2NtVjBkWEp1SUdaaGJITmxYRzVjYmlBZ0lDQnNaWFFnY21WemRXeDBJRDBnZTF4dUlDQWdJQ0FnWm1sc1pUb2dkR2hwY3k1dFlYQlNaWE52YkhabEtHWnliMjB1YzI5MWNtTmxLU3hjYmlBZ0lDQWdJR3hwYm1VNklHWnliMjB1YkdsdVpTeGNiaUFnSUNBZ0lHTnZiSFZ0YmpvZ1puSnZiUzVqYjJ4MWJXNWNiaUFnSUNCOVhHNWNiaUFnSUNCc1pYUWdjMjkxY21ObElEMGdZMjl1YzNWdFpYSXVjMjkxY21ObFEyOXVkR1Z1ZEVadmNpaG1jbTl0TG5OdmRYSmpaU2xjYmlBZ0lDQnBaaUFvYzI5MWNtTmxLU0J5WlhOMWJIUXVjMjkxY21ObElEMGdjMjkxY21ObFhHNWNiaUFnSUNCeVpYUjFjbTRnY21WemRXeDBYRzRnSUgxY2JseHVJQ0J0WVhCU1pYTnZiSFpsSUNobWFXeGxLU0I3WEc0Z0lDQWdhV1lnS0M5ZVhGeDNLenBjWEM5Y1hDOHZMblJsYzNRb1ptbHNaU2twSUh0Y2JpQWdJQ0FnSUhKbGRIVnliaUJtYVd4bFhHNGdJQ0FnZlZ4dUlDQWdJSEpsZEhWeWJpQndZWFJvTG5KbGMyOXNkbVVvZEdocGN5NXRZWEF1WTI5dWMzVnRaWElvS1M1emIzVnlZMlZTYjI5MElIeDhJQ2N1Snl3Z1ptbHNaU2xjYmlBZ2ZWeHVYRzRnSUM4cUtseHVJQ0FnS2lCVWFHVWdRMU5USUhOdmRYSmpaU0JwWkdWdWRHbG1hV1Z5TGlCRGIyNTBZV2x1Y3lCN1FHeHBibXNnU1c1d2RYUWpabWxzWlgwZ2FXWWdkR2hsSUhWelpYSmNiaUFnSUNvZ2MyVjBJSFJvWlNCZ1puSnZiV0FnYjNCMGFXOXVMQ0J2Y2lCN1FHeHBibXNnU1c1d2RYUWphV1I5SUdsbUlIUm9aWGtnWkdsa0lHNXZkQzVjYmlBZ0lDcGNiaUFnSUNvZ1FIUjVjR1VnZTNOMGNtbHVaMzFjYmlBZ0lDcGNiaUFnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ29nWTI5dWMzUWdjbTl2ZENBOUlIQnZjM1JqYzNNdWNHRnljMlVvWTNOekxDQjdJR1p5YjIwNklDZGhMbU56Y3ljZ2ZTbGNiaUFnSUNvZ2NtOXZkQzV6YjNWeVkyVXVhVzV3ZFhRdVpuSnZiU0F2THowK0lGd2lMMmh2YldVdllXa3ZZUzVqYzNOY0lseHVJQ0FnS2x4dUlDQWdLaUJqYjI1emRDQnliMjkwSUQwZ2NHOXpkR056Y3k1d1lYSnpaU2hqYzNNcFhHNGdJQ0FxSUhKdmIzUXVjMjkxY21ObExtbHVjSFYwTG1aeWIyMGdMeTg5UGlCY0lqeHBibkIxZENCamMzTWdNVDVjSWx4dUlDQWdLaTljYmlBZ1oyVjBJR1p5YjIwZ0tDa2dlMXh1SUNBZ0lISmxkSFZ5YmlCMGFHbHpMbVpwYkdVZ2ZId2dkR2hwY3k1cFpGeHVJQ0I5WEc1OVhHNWNibVY0Y0c5eWRDQmtaV1poZFd4MElFbHVjSFYwWEc1Y2JpOHFLbHh1SUNvZ1FIUjVjR1ZrWldZZ0lIdHZZbXBsWTNSOUlHWnBiR1ZRYjNOcGRHbHZibHh1SUNvZ1FIQnliM0JsY25SNUlIdHpkSEpwYm1kOUlHWnBiR1VnSUNCUVlYUm9JSFJ2SUdacGJHVXVYRzRnS2lCQWNISnZjR1Z5ZEhrZ2UyNTFiV0psY24wZ2JHbHVaU0FnSUZOdmRYSmpaU0JzYVc1bElHbHVJR1pwYkdVdVhHNGdLaUJBY0hKdmNHVnlkSGtnZTI1MWJXSmxjbjBnWTI5c2RXMXVJRk52ZFhKalpTQmpiMngxYlc0Z2FXNGdabWxzWlM1Y2JpQXFMMXh1SWwwc0ltWnBiR1VpT2lKcGJuQjFkQzVxY3lKOVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfc291cmNlTWFwID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwic291cmNlLW1hcFwiKSk7XG5cbnZhciBfcGF0aCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInBhdGhcIikpO1xuXG52YXIgX2ZzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiZnNcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBmcm9tQmFzZTY0KHN0cikge1xuICBpZiAoQnVmZmVyKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHN0ciwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHdpbmRvdy5hdG9iKHN0cik7XG4gIH1cbn1cbi8qKlxuICogU291cmNlIG1hcCBpbmZvcm1hdGlvbiBmcm9tIGlucHV0IENTUy5cbiAqIEZvciBleGFtcGxlLCBzb3VyY2UgbWFwIGFmdGVyIFNhc3MgY29tcGlsZXIuXG4gKlxuICogVGhpcyBjbGFzcyB3aWxsIGF1dG9tYXRpY2FsbHkgZmluZCBzb3VyY2UgbWFwIGluIGlucHV0IENTUyBvciBpbiBmaWxlIHN5c3RlbVxuICogbmVhciBpbnB1dCBmaWxlIChhY2NvcmRpbmcgYGZyb21gIG9wdGlvbikuXG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHJvb3QgPSBwb3N0Y3NzLnBhcnNlKGNzcywgeyBmcm9tOiAnYS5zYXNzLmNzcycgfSlcbiAqIHJvb3QuaW5wdXQubWFwIC8vPT4gUHJldmlvdXNNYXBcbiAqL1xuXG5cbnZhciBQcmV2aW91c01hcCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIC8qKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gICAgICAgICBjc3MgICAgSW5wdXQgQ1NTIHNvdXJjZS5cbiAgICogQHBhcmFtIHtwcm9jZXNzT3B0aW9uc30gW29wdHNdIHtAbGluayBQcm9jZXNzb3IjcHJvY2Vzc30gb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIFByZXZpb3VzTWFwKGNzcywgb3B0cykge1xuICAgIHRoaXMubG9hZEFubm90YXRpb24oY3NzKTtcbiAgICAvKipcbiAgICAgKiBXYXMgc291cmNlIG1hcCBpbmxpbmVkIGJ5IGRhdGEtdXJpIHRvIGlucHV0IENTUy5cbiAgICAgKlxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuXG4gICAgdGhpcy5pbmxpbmUgPSB0aGlzLnN0YXJ0V2l0aCh0aGlzLmFubm90YXRpb24sICdkYXRhOicpO1xuICAgIHZhciBwcmV2ID0gb3B0cy5tYXAgPyBvcHRzLm1hcC5wcmV2IDogdW5kZWZpbmVkO1xuICAgIHZhciB0ZXh0ID0gdGhpcy5sb2FkTWFwKG9wdHMuZnJvbSwgcHJldik7XG4gICAgaWYgKHRleHQpIHRoaXMudGV4dCA9IHRleHQ7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGluc3RhbmNlIG9mIGBTb3VyY2VNYXBHZW5lcmF0b3JgIGNsYXNzXG4gICAqIGZyb20gdGhlIGBzb3VyY2UtbWFwYCBsaWJyYXJ5IHRvIHdvcmsgd2l0aCBzb3VyY2UgbWFwIGluZm9ybWF0aW9uLlxuICAgKlxuICAgKiBJdCBpcyBsYXp5IG1ldGhvZCwgc28gaXQgd2lsbCBjcmVhdGUgb2JqZWN0IG9ubHkgb24gZmlyc3QgY2FsbFxuICAgKiBhbmQgdGhlbiBpdCB3aWxsIHVzZSBjYWNoZS5cbiAgICpcbiAgICogQHJldHVybiB7U291cmNlTWFwR2VuZXJhdG9yfSBPYmplY3Qgd2l0aCBzb3VyY2UgbWFwIGluZm9ybWF0aW9uLlxuICAgKi9cblxuXG4gIHZhciBfcHJvdG8gPSBQcmV2aW91c01hcC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbnN1bWVyID0gZnVuY3Rpb24gY29uc3VtZXIoKSB7XG4gICAgaWYgKCF0aGlzLmNvbnN1bWVyQ2FjaGUpIHtcbiAgICAgIHRoaXMuY29uc3VtZXJDYWNoZSA9IG5ldyBfc291cmNlTWFwLmRlZmF1bHQuU291cmNlTWFwQ29uc3VtZXIodGhpcy50ZXh0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5jb25zdW1lckNhY2hlO1xuICB9XG4gIC8qKlxuICAgKiBEb2VzIHNvdXJjZSBtYXAgY29udGFpbnMgYHNvdXJjZXNDb250ZW50YCB3aXRoIGlucHV0IHNvdXJjZSB0ZXh0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtib29sZWFufSBJcyBgc291cmNlc0NvbnRlbnRgIHByZXNlbnQuXG4gICAqL1xuICA7XG5cbiAgX3Byb3RvLndpdGhDb250ZW50ID0gZnVuY3Rpb24gd2l0aENvbnRlbnQoKSB7XG4gICAgcmV0dXJuICEhKHRoaXMuY29uc3VtZXIoKS5zb3VyY2VzQ29udGVudCAmJiB0aGlzLmNvbnN1bWVyKCkuc291cmNlc0NvbnRlbnQubGVuZ3RoID4gMCk7XG4gIH07XG5cbiAgX3Byb3RvLnN0YXJ0V2l0aCA9IGZ1bmN0aW9uIHN0YXJ0V2l0aChzdHJpbmcsIHN0YXJ0KSB7XG4gICAgaWYgKCFzdHJpbmcpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gc3RyaW5nLnN1YnN0cigwLCBzdGFydC5sZW5ndGgpID09PSBzdGFydDtcbiAgfTtcblxuICBfcHJvdG8uZ2V0QW5ub3RhdGlvblVSTCA9IGZ1bmN0aW9uIGdldEFubm90YXRpb25VUkwoc291cmNlTWFwU3RyaW5nKSB7XG4gICAgcmV0dXJuIHNvdXJjZU1hcFN0cmluZy5tYXRjaCgvXFwvXFwqXFxzKiMgc291cmNlTWFwcGluZ1VSTD0oLiopXFxzKlxcKlxcLy8pWzFdLnRyaW0oKTtcbiAgfTtcblxuICBfcHJvdG8ubG9hZEFubm90YXRpb24gPSBmdW5jdGlvbiBsb2FkQW5ub3RhdGlvbihjc3MpIHtcbiAgICB2YXIgYW5ub3RhdGlvbnMgPSBjc3MubWF0Y2goL1xcL1xcKlxccyojIHNvdXJjZU1hcHBpbmdVUkw9KC4qKVxccypcXCpcXC8vbWcpO1xuXG4gICAgaWYgKGFubm90YXRpb25zICYmIGFubm90YXRpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIC8vIExvY2F0ZSB0aGUgbGFzdCBzb3VyY2VNYXBwaW5nVVJMIHRvIGF2b2lkIHBpY2tpbmcgdXBcbiAgICAgIC8vIHNvdXJjZU1hcHBpbmdVUkxzIGZyb20gY29tbWVudHMsIHN0cmluZ3MsIGV0Yy5cbiAgICAgIHZhciBsYXN0QW5ub3RhdGlvbiA9IGFubm90YXRpb25zW2Fubm90YXRpb25zLmxlbmd0aCAtIDFdO1xuXG4gICAgICBpZiAobGFzdEFubm90YXRpb24pIHtcbiAgICAgICAgdGhpcy5hbm5vdGF0aW9uID0gdGhpcy5nZXRBbm5vdGF0aW9uVVJMKGxhc3RBbm5vdGF0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmRlY29kZUlubGluZSA9IGZ1bmN0aW9uIGRlY29kZUlubGluZSh0ZXh0KSB7XG4gICAgdmFyIGJhc2VDaGFyc2V0VXJpID0gL15kYXRhOmFwcGxpY2F0aW9uXFwvanNvbjtjaGFyc2V0PXV0Zi0/ODtiYXNlNjQsLztcbiAgICB2YXIgYmFzZVVyaSA9IC9eZGF0YTphcHBsaWNhdGlvblxcL2pzb247YmFzZTY0LC87XG4gICAgdmFyIHVyaSA9ICdkYXRhOmFwcGxpY2F0aW9uL2pzb24sJztcblxuICAgIGlmICh0aGlzLnN0YXJ0V2l0aCh0ZXh0LCB1cmkpKSB7XG4gICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHRleHQuc3Vic3RyKHVyaS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICBpZiAoYmFzZUNoYXJzZXRVcmkudGVzdCh0ZXh0KSB8fCBiYXNlVXJpLnRlc3QodGV4dCkpIHtcbiAgICAgIHJldHVybiBmcm9tQmFzZTY0KHRleHQuc3Vic3RyKFJlZ0V4cC5sYXN0TWF0Y2gubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgdmFyIGVuY29kaW5nID0gdGV4dC5tYXRjaCgvZGF0YTphcHBsaWNhdGlvblxcL2pzb247KFteLF0rKSwvKVsxXTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHNvdXJjZSBtYXAgZW5jb2RpbmcgJyArIGVuY29kaW5nKTtcbiAgfTtcblxuICBfcHJvdG8ubG9hZE1hcCA9IGZ1bmN0aW9uIGxvYWRNYXAoZmlsZSwgcHJldikge1xuICAgIGlmIChwcmV2ID09PSBmYWxzZSkgcmV0dXJuIGZhbHNlO1xuXG4gICAgaWYgKHByZXYpIHtcbiAgICAgIGlmICh0eXBlb2YgcHJldiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwcmV2ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhciBwcmV2UGF0aCA9IHByZXYoZmlsZSk7XG5cbiAgICAgICAgaWYgKHByZXZQYXRoICYmIF9mcy5kZWZhdWx0LmV4aXN0c1N5bmMgJiYgX2ZzLmRlZmF1bHQuZXhpc3RzU3luYyhwcmV2UGF0aCkpIHtcbiAgICAgICAgICByZXR1cm4gX2ZzLmRlZmF1bHQucmVhZEZpbGVTeW5jKHByZXZQYXRoLCAndXRmLTgnKS50b1N0cmluZygpLnRyaW0oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuYWJsZSB0byBsb2FkIHByZXZpb3VzIHNvdXJjZSBtYXA6ICcgKyBwcmV2UGF0aC50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChwcmV2IGluc3RhbmNlb2YgX3NvdXJjZU1hcC5kZWZhdWx0LlNvdXJjZU1hcENvbnN1bWVyKSB7XG4gICAgICAgIHJldHVybiBfc291cmNlTWFwLmRlZmF1bHQuU291cmNlTWFwR2VuZXJhdG9yLmZyb21Tb3VyY2VNYXAocHJldikudG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSBpZiAocHJldiBpbnN0YW5jZW9mIF9zb3VyY2VNYXAuZGVmYXVsdC5Tb3VyY2VNYXBHZW5lcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuIHByZXYudG9TdHJpbmcoKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pc01hcChwcmV2KSkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocHJldik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vuc3VwcG9ydGVkIHByZXZpb3VzIHNvdXJjZSBtYXAgZm9ybWF0OiAnICsgcHJldi50b1N0cmluZygpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRoaXMuaW5saW5lKSB7XG4gICAgICByZXR1cm4gdGhpcy5kZWNvZGVJbmxpbmUodGhpcy5hbm5vdGF0aW9uKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuYW5ub3RhdGlvbikge1xuICAgICAgdmFyIG1hcCA9IHRoaXMuYW5ub3RhdGlvbjtcbiAgICAgIGlmIChmaWxlKSBtYXAgPSBfcGF0aC5kZWZhdWx0LmpvaW4oX3BhdGguZGVmYXVsdC5kaXJuYW1lKGZpbGUpLCBtYXApO1xuICAgICAgdGhpcy5yb290ID0gX3BhdGguZGVmYXVsdC5kaXJuYW1lKG1hcCk7XG5cbiAgICAgIGlmIChfZnMuZGVmYXVsdC5leGlzdHNTeW5jICYmIF9mcy5kZWZhdWx0LmV4aXN0c1N5bmMobWFwKSkge1xuICAgICAgICByZXR1cm4gX2ZzLmRlZmF1bHQucmVhZEZpbGVTeW5jKG1hcCwgJ3V0Zi04JykudG9TdHJpbmcoKS50cmltKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc01hcCA9IGZ1bmN0aW9uIGlzTWFwKG1hcCkge1xuICAgIGlmICh0eXBlb2YgbWFwICE9PSAnb2JqZWN0JykgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0eXBlb2YgbWFwLm1hcHBpbmdzID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgbWFwLl9tYXBwaW5ncyA9PT0gJ3N0cmluZyc7XG4gIH07XG5cbiAgcmV0dXJuIFByZXZpb3VzTWFwO1xufSgpO1xuXG52YXIgX2RlZmF1bHQgPSBQcmV2aW91c01hcDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzLmRlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGY4O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluQnlaWFpwYjNWekxXMWhjQzVsY3pZaVhTd2libUZ0WlhNaU9sc2labkp2YlVKaGMyVTJOQ0lzSW5OMGNpSXNJa0oxWm1abGNpSXNJbVp5YjIwaUxDSjBiMU4wY21sdVp5SXNJbmRwYm1SdmR5SXNJbUYwYjJJaUxDSlFjbVYyYVc5MWMwMWhjQ0lzSW1OemN5SXNJbTl3ZEhNaUxDSnNiMkZrUVc1dWIzUmhkR2x2YmlJc0ltbHViR2x1WlNJc0luTjBZWEowVjJsMGFDSXNJbUZ1Ym05MFlYUnBiMjRpTENKd2NtVjJJaXdpYldGd0lpd2lkVzVrWldacGJtVmtJaXdpZEdWNGRDSXNJbXh2WVdSTllYQWlMQ0pqYjI1emRXMWxjaUlzSW1OdmJuTjFiV1Z5UTJGamFHVWlMQ0p0YjNwcGJHeGhJaXdpVTI5MWNtTmxUV0Z3UTI5dWMzVnRaWElpTENKM2FYUm9RMjl1ZEdWdWRDSXNJbk52ZFhKalpYTkRiMjUwWlc1MElpd2liR1Z1WjNSb0lpd2ljM1J5YVc1bklpd2ljM1JoY25RaUxDSnpkV0p6ZEhJaUxDSm5aWFJCYm01dmRHRjBhVzl1VlZKTUlpd2ljMjkxY21ObFRXRndVM1J5YVc1bklpd2liV0YwWTJnaUxDSjBjbWx0SWl3aVlXNXViM1JoZEdsdmJuTWlMQ0pzWVhOMFFXNXViM1JoZEdsdmJpSXNJbVJsWTI5a1pVbHViR2x1WlNJc0ltSmhjMlZEYUdGeWMyVjBWWEpwSWl3aVltRnpaVlZ5YVNJc0luVnlhU0lzSW1SbFkyOWtaVlZTU1VOdmJYQnZibVZ1ZENJc0luUmxjM1FpTENKU1pXZEZlSEFpTENKc1lYTjBUV0YwWTJnaUxDSmxibU52WkdsdVp5SXNJa1Z5Y205eUlpd2labWxzWlNJc0luQnlaWFpRWVhSb0lpd2labk1pTENKbGVHbHpkSE5UZVc1aklpd2ljbVZoWkVacGJHVlRlVzVqSWl3aVUyOTFjbU5sVFdGd1IyVnVaWEpoZEc5eUlpd2labkp2YlZOdmRYSmpaVTFoY0NJc0ltbHpUV0Z3SWl3aVNsTlBUaUlzSW5OMGNtbHVaMmxtZVNJc0luQmhkR2dpTENKcWIybHVJaXdpWkdseWJtRnRaU0lzSW5KdmIzUWlMQ0p0WVhCd2FXNW5jeUlzSWw5dFlYQndhVzVuY3lKZExDSnRZWEJ3YVc1bmN5STZJanM3T3pzN1FVRkJRVHM3UVVGRFFUczdRVUZEUVRzN096dEJRVVZCTEZOQlFWTkJMRlZCUVZRc1EwRkJjVUpETEVkQlFYSkNMRVZCUVRCQ08wRkJRM2hDTEUxQlFVbERMRTFCUVVvc1JVRkJXVHRCUVVOV0xGZEJRVTlCTEUxQlFVMHNRMEZCUTBNc1NVRkJVQ3hEUVVGWlJpeEhRVUZhTEVWQlFXbENMRkZCUVdwQ0xFVkJRVEpDUnl4UlFVRXpRaXhGUVVGUU8wRkJRMFFzUjBGR1JDeE5RVVZQTzBGQlEwd3NWMEZCVDBNc1RVRkJUU3hEUVVGRFF5eEpRVUZRTEVOQlFWbE1MRWRCUVZvc1EwRkJVRHRCUVVORU8wRkJRMFk3UVVGRlJEczdPenM3T3pzN096czdPenRKUVZkTlRTeFhPenM3UVVGRFNqczdPenRCUVVsQkxIVkNRVUZoUXl4SFFVRmlMRVZCUVd0Q1F5eEpRVUZzUWl4RlFVRjNRanRCUVVOMFFpeFRRVUZMUXl4alFVRk1MRU5CUVc5Q1JpeEhRVUZ3UWp0QlFVTkJPenM3T3pzN1FVRkxRU3hUUVVGTFJ5eE5RVUZNTEVkQlFXTXNTMEZCUzBNc1UwRkJUQ3hEUVVGbExFdEJRVXRETEZWQlFYQkNMRVZCUVdkRExFOUJRV2hETEVOQlFXUTdRVUZGUVN4UlFVRkpReXhKUVVGSkxFZEJRVWRNTEVsQlFVa3NRMEZCUTAwc1IwRkJUQ3hIUVVGWFRpeEpRVUZKTEVOQlFVTk5MRWRCUVV3c1EwRkJVMFFzU1VGQmNFSXNSMEZCTWtKRkxGTkJRWFJETzBGQlEwRXNVVUZCU1VNc1NVRkJTU3hIUVVGSExFdEJRVXRETEU5QlFVd3NRMEZCWVZRc1NVRkJTU3hEUVVGRFRpeEpRVUZzUWl4RlFVRjNRbGNzU1VGQmVFSXNRMEZCV0R0QlFVTkJMRkZCUVVsSExFbEJRVW9zUlVGQlZTeExRVUZMUVN4SlFVRk1MRWRCUVZsQkxFbEJRVm83UVVGRFdEdEJRVVZFT3pzN096czdPenM3T3pzN08xTkJVMEZGTEZFc1IwRkJRU3h2UWtGQldUdEJRVU5XTEZGQlFVa3NRMEZCUXl4TFFVRkxReXhoUVVGV0xFVkJRWGxDTzBGQlEzWkNMRmRCUVV0QkxHRkJRVXdzUjBGQmNVSXNTVUZCU1VNc2JVSkJRVkZETEdsQ1FVRmFMRU5CUVRoQ0xFdEJRVXRNTEVsQlFXNURMRU5CUVhKQ08wRkJRMFE3TzBGQlEwUXNWMEZCVHl4TFFVRkxSeXhoUVVGYU8wRkJRMFE3UVVGRlJEczdPenM3T3p0VFFVdEJSeXhYTEVkQlFVRXNkVUpCUVdVN1FVRkRZaXhYUVVGUExFTkJRVU1zUlVGQlJTeExRVUZMU2l4UlFVRk1MRWRCUVdkQ1N5eGpRVUZvUWl4SlFVTkJMRXRCUVV0TUxGRkJRVXdzUjBGQlowSkxMR05CUVdoQ0xFTkJRU3RDUXl4TlFVRXZRaXhIUVVGM1F5eERRVVF4UXl4RFFVRlNPMEZCUlVRc1J6czdVMEZGUkdJc1V5eEhRVUZCTEcxQ1FVRlhZeXhOUVVGWUxFVkJRVzFDUXl4TFFVRnVRaXhGUVVFd1FqdEJRVU40UWl4UlFVRkpMRU5CUVVORUxFMUJRVXdzUlVGQllTeFBRVUZQTEV0QlFWQTdRVUZEWWl4WFFVRlBRU3hOUVVGTkxFTkJRVU5GTEUxQlFWQXNRMEZCWXl4RFFVRmtMRVZCUVdsQ1JDeExRVUZMTEVOQlFVTkdMRTFCUVhaQ0xFMUJRVzFEUlN4TFFVRXhRenRCUVVORUxFYzdPMU5CUlVSRkxHZENMRWRCUVVFc01FSkJRV3RDUXl4bFFVRnNRaXhGUVVGdFF6dEJRVU5xUXl4WFFVRlBRU3hsUVVGbExFTkJRMjVDUXl4TFFVUkpMRU5CUTBVc2RVTkJSRVlzUlVGRE1rTXNRMEZFTTBNc1JVRkZTa01zU1VGR1NTeEZRVUZRTzBGQlIwUXNSenM3VTBGRlJIUkNMR01zUjBGQlFTeDNRa0ZCWjBKR0xFZEJRV2hDTEVWQlFYRkNPMEZCUTI1Q0xGRkJRVWw1UWl4WFFVRlhMRWRCUVVkNlFpeEhRVUZITEVOQlFVTjFRaXhMUVVGS0xFTkJRVlVzZVVOQlFWWXNRMEZCYkVJN08wRkJSVUVzVVVGQlNVVXNWMEZCVnl4SlFVRkpRU3hYUVVGWExFTkJRVU5TTEUxQlFWb3NSMEZCY1VJc1EwRkJlRU1zUlVGQk1rTTdRVUZEZWtNN1FVRkRRVHRCUVVOQkxGVkJRVWxUTEdOQlFXTXNSMEZCUjBRc1YwRkJWeXhEUVVGRFFTeFhRVUZYTEVOQlFVTlNMRTFCUVZvc1IwRkJjVUlzUTBGQmRFSXNRMEZCYUVNN08wRkJRMEVzVlVGQlNWTXNZMEZCU2l4RlFVRnZRanRCUVVOc1FpeGhRVUZMY2tJc1ZVRkJUQ3hIUVVGclFpeExRVUZMWjBJc1owSkJRVXdzUTBGQmMwSkxMR05CUVhSQ0xFTkJRV3hDTzBGQlEwUTdRVUZEUmp0QlFVTkdMRWM3TzFOQlJVUkRMRmtzUjBGQlFTeHpRa0ZCWTJ4Q0xFbEJRV1FzUlVGQmIwSTdRVUZEYkVJc1VVRkJTVzFDTEdOQlFXTXNSMEZCUnl4blJFRkJja0k3UVVGRFFTeFJRVUZKUXl4UFFVRlBMRWRCUVVjc2FVTkJRV1E3UVVGRFFTeFJRVUZKUXl4SFFVRkhMRWRCUVVjc2QwSkJRVlk3TzBGQlJVRXNVVUZCU1N4TFFVRkxNVUlzVTBGQlRDeERRVUZsU3l4SlFVRm1MRVZCUVhGQ2NVSXNSMEZCY2tJc1EwRkJTaXhGUVVFclFqdEJRVU0zUWl4aFFVRlBReXhyUWtGQmEwSXNRMEZCUTNSQ0xFbEJRVWtzUTBGQlExY3NUVUZCVEN4RFFVRlpWU3hIUVVGSExFTkJRVU5pTEUxQlFXaENMRU5CUVVRc1EwRkJla0k3UVVGRFJEczdRVUZGUkN4UlFVRkpWeXhqUVVGakxFTkJRVU5KTEVsQlFXWXNRMEZCYjBKMlFpeEpRVUZ3UWl4TFFVRTJRbTlDTEU5QlFVOHNRMEZCUTBjc1NVRkJVaXhEUVVGaGRrSXNTVUZCWWl4RFFVRnFReXhGUVVGeFJEdEJRVU51UkN4aFFVRlBha0lzVlVGQlZTeERRVUZEYVVJc1NVRkJTU3hEUVVGRFZ5eE5RVUZNTEVOQlFWbGhMRTFCUVUwc1EwRkJRME1zVTBGQlVDeERRVUZwUW1wQ0xFMUJRVGRDTEVOQlFVUXNRMEZCYWtJN1FVRkRSRHM3UVVGRlJDeFJRVUZKYTBJc1VVRkJVU3hIUVVGSE1VSXNTVUZCU1N4RFFVRkRZeXhMUVVGTUxFTkJRVmNzYVVOQlFWZ3NSVUZCT0VNc1EwRkJPVU1zUTBGQlpqdEJRVU5CTEZWQlFVMHNTVUZCU1dFc1MwRkJTaXhEUVVGVkxIRkRRVUZ4UTBRc1VVRkJMME1zUTBGQlRqdEJRVU5FTEVjN08xTkJSVVI2UWl4UExFZEJRVUVzYVVKQlFWTXlRaXhKUVVGVUxFVkJRV1V2UWl4SlFVRm1MRVZCUVhGQ08wRkJRMjVDTEZGQlFVbEJMRWxCUVVrc1MwRkJTeXhMUVVGaUxFVkJRVzlDTEU5QlFVOHNTMEZCVURzN1FVRkZjRUlzVVVGQlNVRXNTVUZCU2l4RlFVRlZPMEZCUTFJc1ZVRkJTU3hQUVVGUFFTeEpRVUZRTEV0QlFXZENMRkZCUVhCQ0xFVkJRVGhDTzBGQlF6VkNMR1ZCUVU5QkxFbEJRVkE3UVVGRFJDeFBRVVpFTEUxQlJVOHNTVUZCU1N4UFFVRlBRU3hKUVVGUUxFdEJRV2RDTEZWQlFYQkNMRVZCUVdkRE8wRkJRM0pETEZsQlFVbG5ReXhSUVVGUkxFZEJRVWRvUXl4SlFVRkpMRU5CUVVNclFpeEpRVUZFTEVOQlFXNUNPenRCUVVOQkxGbEJRVWxETEZGQlFWRXNTVUZCU1VNc1dVRkJSME1zVlVGQlppeEpRVUUyUWtRc1dVRkJSME1zVlVGQlNDeERRVUZqUml4UlFVRmtMRU5CUVdwRExFVkJRVEJFTzBGQlEzaEVMR2xDUVVGUFF5eFpRVUZIUlN4WlFVRklMRU5CUVdkQ1NDeFJRVUZvUWl4RlFVRXdRaXhQUVVFeFFpeEZRVUZ0UXpGRExGRkJRVzVETEVkQlFUaERORUlzU1VGQk9VTXNSVUZCVUR0QlFVTkVMRk5CUmtRc1RVRkZUenRCUVVOTUxHZENRVUZOTEVsQlFVbFpMRXRCUVVvc1EwRkRTaXg1UTBGQmVVTkZMRkZCUVZFc1EwRkJRekZETEZGQlFWUXNSVUZFY2tNc1EwRkJUanRCUVVWRU8wRkJRMFlzVDBGU1RTeE5RVkZCTEVsQlFVbFZMRWxCUVVrc1dVRkJXVThzYlVKQlFWRkRMR2xDUVVFMVFpeEZRVUVyUXp0QlFVTndSQ3hsUVVGUFJDeHRRa0ZCVVRaQ0xHdENRVUZTTEVOQlFUSkNReXhoUVVFelFpeERRVUY1UTNKRExFbEJRWHBETEVWQlFTdERWaXhSUVVFdlF5eEZRVUZRTzBGQlEwUXNUMEZHVFN4TlFVVkJMRWxCUVVsVkxFbEJRVWtzV1VGQldVOHNiVUpCUVZFMlFpeHJRa0ZCTlVJc1JVRkJaMFE3UVVGRGNrUXNaVUZCVDNCRExFbEJRVWtzUTBGQlExWXNVVUZCVEN4RlFVRlFPMEZCUTBRc1QwRkdUU3hOUVVWQkxFbEJRVWtzUzBGQlMyZEVMRXRCUVV3c1EwRkJWM1JETEVsQlFWZ3NRMEZCU2l4RlFVRnpRanRCUVVNelFpeGxRVUZQZFVNc1NVRkJTU3hEUVVGRFF5eFRRVUZNTEVOQlFXVjRReXhKUVVGbUxFTkJRVkE3UVVGRFJDeFBRVVpOTEUxQlJVRTdRVUZEVEN4alFVRk5MRWxCUVVrNFFpeExRVUZLTEVOQlEwb3NOa05CUVRaRE9VSXNTVUZCU1N4RFFVRkRWaXhSUVVGTUxFVkJSSHBETEVOQlFVNDdRVUZGUkR0QlFVTkdMRXRCY2tKRUxFMUJjVUpQTEVsQlFVa3NTMEZCUzA4c1RVRkJWQ3hGUVVGcFFqdEJRVU4wUWl4aFFVRlBMRXRCUVV0M1FpeFpRVUZNTEVOQlFXdENMRXRCUVV0MFFpeFZRVUYyUWl4RFFVRlFPMEZCUTBRc1MwRkdUU3hOUVVWQkxFbEJRVWtzUzBGQlMwRXNWVUZCVkN4RlFVRnhRanRCUVVNeFFpeFZRVUZKUlN4SFFVRkhMRWRCUVVjc1MwRkJTMFlzVlVGQlpqdEJRVU5CTEZWQlFVbG5ReXhKUVVGS0xFVkJRVlU1UWl4SFFVRkhMRWRCUVVkM1F5eGpRVUZMUXl4SlFVRk1MRU5CUVZWRUxHTkJRVXRGTEU5QlFVd3NRMEZCWVZvc1NVRkJZaXhEUVVGV0xFVkJRVGhDT1VJc1IwRkJPVUlzUTBGQlRqdEJRVVZXTEZkQlFVc3lReXhKUVVGTUxFZEJRVmxJTEdOQlFVdEZMRTlCUVV3c1EwRkJZVEZETEVkQlFXSXNRMEZCV2pzN1FVRkRRU3hWUVVGSlowTXNXVUZCUjBNc1ZVRkJTQ3hKUVVGcFFrUXNXVUZCUjBNc1ZVRkJTQ3hEUVVGamFrTXNSMEZCWkN4RFFVRnlRaXhGUVVGNVF6dEJRVU4yUXl4bFFVRlBaME1zV1VGQlIwVXNXVUZCU0N4RFFVRm5RbXhETEVkQlFXaENMRVZCUVhGQ0xFOUJRWEpDTEVWQlFUaENXQ3hSUVVFNVFpeEhRVUY1UXpSQ0xFbEJRWHBETEVWQlFWQTdRVUZEUkN4UFFVWkVMRTFCUlU4N1FVRkRUQ3hsUVVGUExFdEJRVkE3UVVGRFJEdEJRVU5HTzBGQlEwWXNSenM3VTBGRlJHOUNMRXNzUjBGQlFTeGxRVUZQY2tNc1IwRkJVQ3hGUVVGWk8wRkJRMVlzVVVGQlNTeFBRVUZQUVN4SFFVRlFMRXRCUVdVc1VVRkJia0lzUlVGQk5rSXNUMEZCVHl4TFFVRlFPMEZCUXpkQ0xGZEJRVThzVDBGQlQwRXNSMEZCUnl4RFFVRkRORU1zVVVGQldDeExRVUYzUWl4UlFVRjRRaXhKUVVGdlF5eFBRVUZQTlVNc1IwRkJSeXhEUVVGRE5rTXNVMEZCV0N4TFFVRjVRaXhSUVVGd1JUdEJRVU5FTEVjN096czdPMlZCUjFseVJDeFhJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVcxd2IzSjBJRzF2ZW1sc2JHRWdabkp2YlNBbmMyOTFjbU5sTFcxaGNDZGNibWx0Y0c5eWRDQndZWFJvSUdaeWIyMGdKM0JoZEdnblhHNXBiWEJ2Y25RZ1puTWdabkp2YlNBblpuTW5YRzVjYm1aMWJtTjBhVzl1SUdaeWIyMUNZWE5sTmpRZ0tITjBjaWtnZTF4dUlDQnBaaUFvUW5WbVptVnlLU0I3WEc0Z0lDQWdjbVYwZFhKdUlFSjFabVpsY2k1bWNtOXRLSE4wY2l3Z0oySmhjMlUyTkNjcExuUnZVM1J5YVc1bktDbGNiaUFnZlNCbGJITmxJSHRjYmlBZ0lDQnlaWFIxY200Z2QybHVaRzkzTG1GMGIySW9jM1J5S1Z4dUlDQjlYRzU5WEc1Y2JpOHFLbHh1SUNvZ1UyOTFjbU5sSUcxaGNDQnBibVp2Y20xaGRHbHZiaUJtY205dElHbHVjSFYwSUVOVFV5NWNiaUFxSUVadmNpQmxlR0Z0Y0d4bExDQnpiM1Z5WTJVZ2JXRndJR0ZtZEdWeUlGTmhjM01nWTI5dGNHbHNaWEl1WEc0Z0tseHVJQ29nVkdocGN5QmpiR0Z6Y3lCM2FXeHNJR0YxZEc5dFlYUnBZMkZzYkhrZ1ptbHVaQ0J6YjNWeVkyVWdiV0Z3SUdsdUlHbHVjSFYwSUVOVFV5QnZjaUJwYmlCbWFXeGxJSE41YzNSbGJWeHVJQ29nYm1WaGNpQnBibkIxZENCbWFXeGxJQ2hoWTJOdmNtUnBibWNnWUdaeWIyMWdJRzl3ZEdsdmJpa3VYRzRnS2x4dUlDb2dRR1Y0WVcxd2JHVmNiaUFxSUdOdmJuTjBJSEp2YjNRZ1BTQndiM04wWTNOekxuQmhjbk5sS0dOemN5d2dleUJtY205dE9pQW5ZUzV6WVhOekxtTnpjeWNnZlNsY2JpQXFJSEp2YjNRdWFXNXdkWFF1YldGd0lDOHZQVDRnVUhKbGRtbHZkWE5OWVhCY2JpQXFMMXh1WTJ4aGMzTWdVSEpsZG1sdmRYTk5ZWEFnZTF4dUlDQXZLaXBjYmlBZ0lDb2dRSEJoY21GdElIdHpkSEpwYm1kOUlDQWdJQ0FnSUNBZ1kzTnpJQ0FnSUVsdWNIVjBJRU5UVXlCemIzVnlZMlV1WEc0Z0lDQXFJRUJ3WVhKaGJTQjdjSEp2WTJWemMwOXdkR2x2Ym5OOUlGdHZjSFJ6WFNCN1FHeHBibXNnVUhKdlkyVnpjMjl5STNCeWIyTmxjM045SUc5d2RHbHZibk11WEc0Z0lDQXFMMXh1SUNCamIyNXpkSEoxWTNSdmNpQW9ZM056TENCdmNIUnpLU0I3WEc0Z0lDQWdkR2hwY3k1c2IyRmtRVzV1YjNSaGRHbHZiaWhqYzNNcFhHNGdJQ0FnTHlvcVhHNGdJQ0FnSUNvZ1YyRnpJSE52ZFhKalpTQnRZWEFnYVc1c2FXNWxaQ0JpZVNCa1lYUmhMWFZ5YVNCMGJ5QnBibkIxZENCRFUxTXVYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFkSGx3WlNCN1ltOXZiR1ZoYm4xY2JpQWdJQ0FnS2k5Y2JpQWdJQ0IwYUdsekxtbHViR2x1WlNBOUlIUm9hWE11YzNSaGNuUlhhWFJvS0hSb2FYTXVZVzV1YjNSaGRHbHZiaXdnSjJSaGRHRTZKeWxjYmx4dUlDQWdJR3hsZENCd2NtVjJJRDBnYjNCMGN5NXRZWEFnUHlCdmNIUnpMbTFoY0M1d2NtVjJJRG9nZFc1a1pXWnBibVZrWEc0Z0lDQWdiR1YwSUhSbGVIUWdQU0IwYUdsekxteHZZV1JOWVhBb2IzQjBjeTVtY205dExDQndjbVYyS1Z4dUlDQWdJR2xtSUNoMFpYaDBLU0IwYUdsekxuUmxlSFFnUFNCMFpYaDBYRzRnSUgxY2JseHVJQ0F2S2lwY2JpQWdJQ29nUTNKbFlYUmxJR0VnYVc1emRHRnVZMlVnYjJZZ1lGTnZkWEpqWlUxaGNFZGxibVZ5WVhSdmNtQWdZMnhoYzNOY2JpQWdJQ29nWm5KdmJTQjBhR1VnWUhOdmRYSmpaUzF0WVhCZ0lHeHBZbkpoY25rZ2RHOGdkMjl5YXlCM2FYUm9JSE52ZFhKalpTQnRZWEFnYVc1bWIzSnRZWFJwYjI0dVhHNGdJQ0FxWEc0Z0lDQXFJRWwwSUdseklHeGhlbmtnYldWMGFHOWtMQ0J6YnlCcGRDQjNhV3hzSUdOeVpXRjBaU0J2WW1wbFkzUWdiMjVzZVNCdmJpQm1hWEp6ZENCallXeHNYRzRnSUNBcUlHRnVaQ0IwYUdWdUlHbDBJSGRwYkd3Z2RYTmxJR05oWTJobExseHVJQ0FnS2x4dUlDQWdLaUJBY21WMGRYSnVJSHRUYjNWeVkyVk5ZWEJIWlc1bGNtRjBiM0o5SUU5aWFtVmpkQ0IzYVhSb0lITnZkWEpqWlNCdFlYQWdhVzVtYjNKdFlYUnBiMjR1WEc0Z0lDQXFMMXh1SUNCamIyNXpkVzFsY2lBb0tTQjdYRzRnSUNBZ2FXWWdLQ0YwYUdsekxtTnZibk4xYldWeVEyRmphR1VwSUh0Y2JpQWdJQ0FnSUhSb2FYTXVZMjl1YzNWdFpYSkRZV05vWlNBOUlHNWxkeUJ0YjNwcGJHeGhMbE52ZFhKalpVMWhjRU52Ym5OMWJXVnlLSFJvYVhNdWRHVjRkQ2xjYmlBZ0lDQjlYRzRnSUNBZ2NtVjBkWEp1SUhSb2FYTXVZMjl1YzNWdFpYSkRZV05vWlZ4dUlDQjlYRzVjYmlBZ0x5b3FYRzRnSUNBcUlFUnZaWE1nYzI5MWNtTmxJRzFoY0NCamIyNTBZV2x1Y3lCZ2MyOTFjbU5sYzBOdmJuUmxiblJnSUhkcGRHZ2dhVzV3ZFhRZ2MyOTFjbU5sSUhSbGVIUXVYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTJKdmIyeGxZVzU5SUVseklHQnpiM1Z5WTJWelEyOXVkR1Z1ZEdBZ2NISmxjMlZ1ZEM1Y2JpQWdJQ292WEc0Z0lIZHBkR2hEYjI1MFpXNTBJQ2dwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdJU0VvZEdocGN5NWpiMjV6ZFcxbGNpZ3BMbk52ZFhKalpYTkRiMjUwWlc1MElDWW1YRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WTI5dWMzVnRaWElvS1M1emIzVnlZMlZ6UTI5dWRHVnVkQzVzWlc1bmRHZ2dQaUF3S1Z4dUlDQjlYRzVjYmlBZ2MzUmhjblJYYVhSb0lDaHpkSEpwYm1jc0lITjBZWEowS1NCN1hHNGdJQ0FnYVdZZ0tDRnpkSEpwYm1jcElISmxkSFZ5YmlCbVlXeHpaVnh1SUNBZ0lISmxkSFZ5YmlCemRISnBibWN1YzNWaWMzUnlLREFzSUhOMFlYSjBMbXhsYm1kMGFDa2dQVDA5SUhOMFlYSjBYRzRnSUgxY2JseHVJQ0JuWlhSQmJtNXZkR0YwYVc5dVZWSk1JQ2h6YjNWeVkyVk5ZWEJUZEhKcGJtY3BJSHRjYmlBZ0lDQnlaWFIxY200Z2MyOTFjbU5sVFdGd1UzUnlhVzVuWEc0Z0lDQWdJQ0F1YldGMFkyZ29MMXhjTDF4Y0tseGNjeW9qSUhOdmRYSmpaVTFoY0hCcGJtZFZVa3c5S0M0cUtWeGNjeXBjWENwY1hDOHZLVnN4WFZ4dUlDQWdJQ0FnTG5SeWFXMG9LVnh1SUNCOVhHNWNiaUFnYkc5aFpFRnVibTkwWVhScGIyNGdLR056Y3lrZ2UxeHVJQ0FnSUd4bGRDQmhibTV2ZEdGMGFXOXVjeUE5SUdOemN5NXRZWFJqYUNndlhGd3ZYRndxWEZ4ektpTWdjMjkxY21ObFRXRndjR2x1WjFWU1REMG9MaW9wWEZ4ektseGNLbHhjTHk5dFp5bGNibHh1SUNBZ0lHbG1JQ2hoYm01dmRHRjBhVzl1Y3lBbUppQmhibTV2ZEdGMGFXOXVjeTVzWlc1bmRHZ2dQaUF3S1NCN1hHNGdJQ0FnSUNBdkx5Qk1iMk5oZEdVZ2RHaGxJR3hoYzNRZ2MyOTFjbU5sVFdGd2NHbHVaMVZTVENCMGJ5QmhkbTlwWkNCd2FXTnJhVzVuSUhWd1hHNGdJQ0FnSUNBdkx5QnpiM1Z5WTJWTllYQndhVzVuVlZKTWN5Qm1jbTl0SUdOdmJXMWxiblJ6TENCemRISnBibWR6TENCbGRHTXVYRzRnSUNBZ0lDQnNaWFFnYkdGemRFRnVibTkwWVhScGIyNGdQU0JoYm01dmRHRjBhVzl1YzF0aGJtNXZkR0YwYVc5dWN5NXNaVzVuZEdnZ0xTQXhYVnh1SUNBZ0lDQWdhV1lnS0d4aGMzUkJibTV2ZEdGMGFXOXVLU0I3WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZVzV1YjNSaGRHbHZiaUE5SUhSb2FYTXVaMlYwUVc1dWIzUmhkR2x2YmxWU1RDaHNZWE4wUVc1dWIzUmhkR2x2YmlsY2JpQWdJQ0FnSUgxY2JpQWdJQ0I5WEc0Z0lIMWNibHh1SUNCa1pXTnZaR1ZKYm14cGJtVWdLSFJsZUhRcElIdGNiaUFnSUNCc1pYUWdZbUZ6WlVOb1lYSnpaWFJWY21rZ1BTQXZYbVJoZEdFNllYQndiR2xqWVhScGIyNWNYQzlxYzI5dU8yTm9ZWEp6WlhROWRYUm1MVDg0TzJKaGMyVTJOQ3d2WEc0Z0lDQWdiR1YwSUdKaGMyVlZjbWtnUFNBdlhtUmhkR0U2WVhCd2JHbGpZWFJwYjI1Y1hDOXFjMjl1TzJKaGMyVTJOQ3d2WEc0Z0lDQWdiR1YwSUhWeWFTQTlJQ2RrWVhSaE9tRndjR3hwWTJGMGFXOXVMMnB6YjI0c0oxeHVYRzRnSUNBZ2FXWWdLSFJvYVhNdWMzUmhjblJYYVhSb0tIUmxlSFFzSUhWeWFTa3BJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQmtaV052WkdWVlVrbERiMjF3YjI1bGJuUW9kR1Y0ZEM1emRXSnpkSElvZFhKcExteGxibWQwYUNrcFhHNGdJQ0FnZlZ4dVhHNGdJQ0FnYVdZZ0tHSmhjMlZEYUdGeWMyVjBWWEpwTG5SbGMzUW9kR1Y0ZENrZ2ZId2dZbUZ6WlZWeWFTNTBaWE4wS0hSbGVIUXBLU0I3WEc0Z0lDQWdJQ0J5WlhSMWNtNGdabkp2YlVKaGMyVTJOQ2gwWlhoMExuTjFZbk4wY2loU1pXZEZlSEF1YkdGemRFMWhkR05vTG14bGJtZDBhQ2twWEc0Z0lDQWdmVnh1WEc0Z0lDQWdiR1YwSUdWdVkyOWthVzVuSUQwZ2RHVjRkQzV0WVhSamFDZ3ZaR0YwWVRwaGNIQnNhV05oZEdsdmJseGNMMnB6YjI0N0tGdGVMRjByS1N3dktWc3hYVnh1SUNBZ0lIUm9jbTkzSUc1bGR5QkZjbkp2Y2lnblZXNXpkWEJ3YjNKMFpXUWdjMjkxY21ObElHMWhjQ0JsYm1OdlpHbHVaeUFuSUNzZ1pXNWpiMlJwYm1jcFhHNGdJSDFjYmx4dUlDQnNiMkZrVFdGd0lDaG1hV3hsTENCd2NtVjJLU0I3WEc0Z0lDQWdhV1lnS0hCeVpYWWdQVDA5SUdaaGJITmxLU0J5WlhSMWNtNGdabUZzYzJWY2JseHVJQ0FnSUdsbUlDaHdjbVYyS1NCN1hHNGdJQ0FnSUNCcFppQW9kSGx3Wlc5bUlIQnlaWFlnUFQwOUlDZHpkSEpwYm1jbktTQjdYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQndjbVYyWEc0Z0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0hSNWNHVnZaaUJ3Y21WMklEMDlQU0FuWm5WdVkzUnBiMjRuS1NCN1hHNGdJQ0FnSUNBZ0lHeGxkQ0J3Y21WMlVHRjBhQ0E5SUhCeVpYWW9abWxzWlNsY2JpQWdJQ0FnSUNBZ2FXWWdLSEJ5WlhaUVlYUm9JQ1ltSUdaekxtVjRhWE4wYzFONWJtTWdKaVlnWm5NdVpYaHBjM1J6VTNsdVl5aHdjbVYyVUdGMGFDa3BJSHRjYmlBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm5NdWNtVmhaRVpwYkdWVGVXNWpLSEJ5WlhaUVlYUm9MQ0FuZFhSbUxUZ25LUzUwYjFOMGNtbHVaeWdwTG5SeWFXMG9LVnh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdlMXh1SUNBZ0lDQWdJQ0FnSUhSb2NtOTNJRzVsZHlCRmNuSnZjaWhjYmlBZ0lDQWdJQ0FnSUNBZ0lDZFZibUZpYkdVZ2RHOGdiRzloWkNCd2NtVjJhVzkxY3lCemIzVnlZMlVnYldGd09pQW5JQ3NnY0hKbGRsQmhkR2d1ZEc5VGRISnBibWNvS1NsY2JpQWdJQ0FnSUNBZ2ZWeHVJQ0FnSUNBZ2ZTQmxiSE5sSUdsbUlDaHdjbVYySUdsdWMzUmhibU5sYjJZZ2JXOTZhV3hzWVM1VGIzVnlZMlZOWVhCRGIyNXpkVzFsY2lrZ2UxeHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXOTZhV3hzWVM1VGIzVnlZMlZOWVhCSFpXNWxjbUYwYjNJdVpuSnZiVk52ZFhKalpVMWhjQ2h3Y21WMktTNTBiMU4wY21sdVp5Z3BYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2FXWWdLSEJ5WlhZZ2FXNXpkR0Z1WTJWdlppQnRiM3BwYkd4aExsTnZkWEpqWlUxaGNFZGxibVZ5WVhSdmNpa2dlMXh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdjSEpsZGk1MGIxTjBjbWx1WnlncFhHNGdJQ0FnSUNCOUlHVnNjMlVnYVdZZ0tIUm9hWE11YVhOTllYQW9jSEpsZGlrcElIdGNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlFcFRUMDR1YzNSeWFXNW5hV1o1S0hCeVpYWXBYRzRnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHVJQ0FnSUNBZ0lDQjBhSEp2ZHlCdVpYY2dSWEp5YjNJb1hHNGdJQ0FnSUNBZ0lDQWdKMVZ1YzNWd2NHOXlkR1ZrSUhCeVpYWnBiM1Z6SUhOdmRYSmpaU0J0WVhBZ1ptOXliV0YwT2lBbklDc2djSEpsZGk1MGIxTjBjbWx1WnlncEtWeHVJQ0FnSUNBZ2ZWeHVJQ0FnSUgwZ1pXeHpaU0JwWmlBb2RHaHBjeTVwYm14cGJtVXBJSHRjYmlBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TG1SbFkyOWtaVWx1YkdsdVpTaDBhR2x6TG1GdWJtOTBZWFJwYjI0cFhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMGFHbHpMbUZ1Ym05MFlYUnBiMjRwSUh0Y2JpQWdJQ0FnSUd4bGRDQnRZWEFnUFNCMGFHbHpMbUZ1Ym05MFlYUnBiMjVjYmlBZ0lDQWdJR2xtSUNobWFXeGxLU0J0WVhBZ1BTQndZWFJvTG1wdmFXNG9jR0YwYUM1a2FYSnVZVzFsS0dacGJHVXBMQ0J0WVhBcFhHNWNiaUFnSUNBZ0lIUm9hWE11Y205dmRDQTlJSEJoZEdndVpHbHlibUZ0WlNodFlYQXBYRzRnSUNBZ0lDQnBaaUFvWm5NdVpYaHBjM1J6VTNsdVl5QW1KaUJtY3k1bGVHbHpkSE5UZVc1aktHMWhjQ2twSUh0Y2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaekxuSmxZV1JHYVd4bFUzbHVZeWh0WVhBc0lDZDFkR1l0T0NjcExuUnZVM1J5YVc1bktDa3VkSEpwYlNncFhHNGdJQ0FnSUNCOUlHVnNjMlVnZTF4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVmNiaUFnSUNBZ0lIMWNiaUFnSUNCOVhHNGdJSDFjYmx4dUlDQnBjMDFoY0NBb2JXRndLU0I3WEc0Z0lDQWdhV1lnS0hSNWNHVnZaaUJ0WVhBZ0lUMDlJQ2R2WW1wbFkzUW5LU0J5WlhSMWNtNGdabUZzYzJWY2JpQWdJQ0J5WlhSMWNtNGdkSGx3Wlc5bUlHMWhjQzV0WVhCd2FXNW5jeUE5UFQwZ0ozTjBjbWx1WnljZ2ZId2dkSGx3Wlc5bUlHMWhjQzVmYldGd2NHbHVaM01nUFQwOUlDZHpkSEpwYm1jblhHNGdJSDFjYm4xY2JseHVaWGh3YjNKMElHUmxabUYxYkhRZ1VISmxkbWx2ZFhOTllYQmNiaUpkTENKbWFXeGxJam9pY0hKbGRtbHZkWE10YldGd0xtcHpJbjA9XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxuLyoqXG4gKiBDb250YWlucyBoZWxwZXJzIGZvciB3b3JraW5nIHdpdGggdmVuZG9yIHByZWZpeGVzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBjb25zdCB2ZW5kb3IgPSBwb3N0Y3NzLnZlbmRvclxuICpcbiAqIEBuYW1lc3BhY2UgdmVuZG9yXG4gKi9cbnZhciB2ZW5kb3IgPSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2ZW5kb3IgcHJlZml4IGV4dHJhY3RlZCBmcm9tIGFuIGlucHV0IHN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb3AgU3RyaW5nIHdpdGggb3Igd2l0aG91dCB2ZW5kb3IgcHJlZml4LlxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9IHZlbmRvciBwcmVmaXggb3IgZW1wdHkgc3RyaW5nXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIHBvc3Rjc3MudmVuZG9yLnByZWZpeCgnLW1vei10YWItc2l6ZScpIC8vPT4gJy1tb3otJ1xuICAgKiBwb3N0Y3NzLnZlbmRvci5wcmVmaXgoJ3RhYi1zaXplJykgICAgICAvLz0+ICcnXG4gICAqL1xuICBwcmVmaXg6IGZ1bmN0aW9uIHByZWZpeChwcm9wKSB7XG4gICAgdmFyIG1hdGNoID0gcHJvcC5tYXRjaCgvXigtXFx3Ky0pLyk7XG5cbiAgICBpZiAobWF0Y2gpIHtcbiAgICAgIHJldHVybiBtYXRjaFswXTtcbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH0sXG5cbiAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaW5wdXQgc3RyaW5nIHN0cmlwcGVkIG9mIGl0cyB2ZW5kb3IgcHJlZml4LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHByb3AgU3RyaW5nIHdpdGggb3Igd2l0aG91dCB2ZW5kb3IgcHJlZml4LlxuICAgICAqXG4gICAgICogQHJldHVybiB7c3RyaW5nfSBTdHJpbmcgbmFtZSB3aXRob3V0IHZlbmRvciBwcmVmaXhlcy5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogcG9zdGNzcy52ZW5kb3IudW5wcmVmaXhlZCgnLW1vei10YWItc2l6ZScpIC8vPT4gJ3RhYi1zaXplJ1xuICAgICAqL1xuICB1bnByZWZpeGVkOiBmdW5jdGlvbiB1bnByZWZpeGVkKHByb3ApIHtcbiAgICByZXR1cm4gcHJvcC5yZXBsYWNlKC9eLVxcdystLywgJycpO1xuICB9XG59O1xudmFyIF9kZWZhdWx0ID0gdmVuZG9yO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zjg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW5abGJtUnZjaTVsY3pZaVhTd2libUZ0WlhNaU9sc2lkbVZ1Wkc5eUlpd2ljSEpsWm1sNElpd2ljSEp2Y0NJc0ltMWhkR05vSWl3aWRXNXdjbVZtYVhobFpDSXNJbkpsY0d4aFkyVWlYU3dpYldGd2NHbHVaM01pT2lJN096czdPMEZCUVVFN096czdPenM3TzBGQlVVRXNTVUZCU1VFc1RVRkJUU3hIUVVGSE8wRkJSVmc3T3pzN096czdPenM3TzBGQlYwRkRMRVZCUVVGQkxFMUJZbGNzYTBKQllVaERMRWxCWWtjc1JVRmhSenRCUVVOYUxGRkJRVWxETEV0QlFVc3NSMEZCUjBRc1NVRkJTU3hEUVVGRFF5eExRVUZNTEVOQlFWY3NWVUZCV0N4RFFVRmFPenRCUVVOQkxGRkJRVWxCTEV0QlFVb3NSVUZCVnp0QlFVTlVMR0ZCUVU5QkxFdEJRVXNzUTBGQlF5eERRVUZFTEVOQlFWbzdRVUZEUkRzN1FVRkZSQ3hYUVVGUExFVkJRVkE3UVVGRFJDeEhRWEJDVlRzN1FVRnpRbGc3T3pzN096czdPenM3UVVGVlFVTXNSVUZCUVVFc1ZVRm9RMWNzYzBKQlowTkRSaXhKUVdoRFJDeEZRV2REVHp0QlFVTm9RaXhYUVVGUFFTeEpRVUZKTEVOQlFVTkhMRTlCUVV3c1EwRkJZU3hSUVVGaUxFVkJRWFZDTEVWQlFYWkNMRU5CUVZBN1FVRkRSRHRCUVd4RFZTeERRVUZpTzJWQmMwTmxUQ3hOSWl3aWMyOTFjbU5sYzBOdmJuUmxiblFpT2xzaUx5b3FYRzRnS2lCRGIyNTBZV2x1Y3lCb1pXeHdaWEp6SUdadmNpQjNiM0pyYVc1bklIZHBkR2dnZG1WdVpHOXlJSEJ5WldacGVHVnpMbHh1SUNwY2JpQXFJRUJsZUdGdGNHeGxYRzRnS2lCamIyNXpkQ0IyWlc1a2IzSWdQU0J3YjNOMFkzTnpMblpsYm1SdmNseHVJQ3BjYmlBcUlFQnVZVzFsYzNCaFkyVWdkbVZ1Wkc5eVhHNGdLaTljYm14bGRDQjJaVzVrYjNJZ1BTQjdYRzVjYmlBZ0x5b3FYRzRnSUNBcUlGSmxkSFZ5Ym5NZ2RHaGxJSFpsYm1SdmNpQndjbVZtYVhnZ1pYaDBjbUZqZEdWa0lHWnliMjBnWVc0Z2FXNXdkWFFnYzNSeWFXNW5MbHh1SUNBZ0tseHVJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnY0hKdmNDQlRkSEpwYm1jZ2QybDBhQ0J2Y2lCM2FYUm9iM1YwSUhabGJtUnZjaUJ3Y21WbWFYZ3VYRzRnSUNBcVhHNGdJQ0FxSUVCeVpYUjFjbTRnZTNOMGNtbHVaMzBnZG1WdVpHOXlJSEJ5WldacGVDQnZjaUJsYlhCMGVTQnpkSEpwYm1kY2JpQWdJQ3BjYmlBZ0lDb2dRR1Y0WVcxd2JHVmNiaUFnSUNvZ2NHOXpkR056Y3k1MlpXNWtiM0l1Y0hKbFptbDRLQ2N0Ylc5NkxYUmhZaTF6YVhwbEp5a2dMeTg5UGlBbkxXMXZlaTBuWEc0Z0lDQXFJSEJ2YzNSamMzTXVkbVZ1Wkc5eUxuQnlaV1pwZUNnbmRHRmlMWE5wZW1VbktTQWdJQ0FnSUM4dlBUNGdKeWRjYmlBZ0lDb3ZYRzRnSUhCeVpXWnBlQ0FvY0hKdmNDa2dlMXh1SUNBZ0lHeGxkQ0J0WVhSamFDQTlJSEJ5YjNBdWJXRjBZMmdvTDE0b0xWeGNkeXN0S1M4cFhHNGdJQ0FnYVdZZ0tHMWhkR05vS1NCN1hHNGdJQ0FnSUNCeVpYUjFjbTRnYldGMFkyaGJNRjFjYmlBZ0lDQjlYRzVjYmlBZ0lDQnlaWFIxY200Z0p5ZGNiaUFnZlN4Y2JseHVJQ0F2S2lwY2JpQWdJQ0FnS2lCU1pYUjFjbTV6SUhSb1pTQnBibkIxZENCemRISnBibWNnYzNSeWFYQndaV1FnYjJZZ2FYUnpJSFpsYm1SdmNpQndjbVZtYVhndVhHNGdJQ0FnSUNwY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTNOMGNtbHVaMzBnY0hKdmNDQlRkSEpwYm1jZ2QybDBhQ0J2Y2lCM2FYUm9iM1YwSUhabGJtUnZjaUJ3Y21WbWFYZ3VYRzRnSUNBZ0lDcGNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdHpkSEpwYm1kOUlGTjBjbWx1WnlCdVlXMWxJSGRwZEdodmRYUWdkbVZ1Wkc5eUlIQnlaV1pwZUdWekxseHVJQ0FnSUNBcVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdWY2JpQWdJQ0FnS2lCd2IzTjBZM056TG5abGJtUnZjaTUxYm5CeVpXWnBlR1ZrS0NjdGJXOTZMWFJoWWkxemFYcGxKeWtnTHk4OVBpQW5kR0ZpTFhOcGVtVW5YRzRnSUNBZ0lDb3ZYRzRnSUhWdWNISmxabWw0WldRZ0tIQnliM0FwSUh0Y2JpQWdJQ0J5WlhSMWNtNGdjSEp2Y0M1eVpYQnNZV05sS0M5ZUxWeGNkeXN0THl3Z0p5Y3BYRzRnSUgxY2JseHVmVnh1WEc1bGVIQnZjblFnWkdWbVlYVnNkQ0IyWlc1a2IzSmNiaUpkTENKbWFXeGxJam9pZG1WdVpHOXlMbXB6SW4wPVxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogTG9kYXNoIDxodHRwczovL2xvZGFzaC5jb20vPlxuICogQ29weXJpZ2h0IE9wZW5KUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vb3BlbmpzZi5vcmcvPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UgPGh0dHBzOi8vbG9kYXNoLmNvbS9saWNlbnNlPlxuICogQmFzZWQgb24gVW5kZXJzY29yZS5qcyAxLjguMyA8aHR0cDovL3VuZGVyc2NvcmVqcy5vcmcvTElDRU5TRT5cbiAqIENvcHlyaWdodCBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuICovXG47KGZ1bmN0aW9uKCkge1xuXG4gIC8qKiBVc2VkIGFzIGEgc2FmZSByZWZlcmVuY2UgZm9yIGB1bmRlZmluZWRgIGluIHByZS1FUzUgZW52aXJvbm1lbnRzLiAqL1xuICB2YXIgdW5kZWZpbmVkO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci4gKi9cbiAgdmFyIFZFUlNJT04gPSAnNC4xNy4xOSc7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG4gIHZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4gIC8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbiAgdmFyIENPUkVfRVJST1JfVEVYVCA9ICdVbnN1cHBvcnRlZCBjb3JlLWpzIHVzZS4gVHJ5IGh0dHBzOi8vbnBtcy5pby9zZWFyY2g/cT1wb255ZmlsbC4nLFxuICAgICAgRlVOQ19FUlJPUl9URVhUID0gJ0V4cGVjdGVkIGEgZnVuY3Rpb24nO1xuXG4gIC8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbiAgdmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4gIC8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbiAgdmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbiAgLyoqIFVzZWQgYXMgdGhlIGludGVybmFsIGFyZ3VtZW50IHBsYWNlaG9sZGVyLiAqL1xuICB2YXIgUExBQ0VIT0xERVIgPSAnX19sb2Rhc2hfcGxhY2Vob2xkZXJfXyc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbiAgdmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbiAgdmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4gIC8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICB2YXIgV1JBUF9CSU5EX0ZMQUcgPSAxLFxuICAgICAgV1JBUF9CSU5EX0tFWV9GTEFHID0gMixcbiAgICAgIFdSQVBfQ1VSUllfQk9VTkRfRkxBRyA9IDQsXG4gICAgICBXUkFQX0NVUlJZX0ZMQUcgPSA4LFxuICAgICAgV1JBUF9DVVJSWV9SSUdIVF9GTEFHID0gMTYsXG4gICAgICBXUkFQX1BBUlRJQUxfRkxBRyA9IDMyLFxuICAgICAgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgPSA2NCxcbiAgICAgIFdSQVBfQVJZX0ZMQUcgPSAxMjgsXG4gICAgICBXUkFQX1JFQVJHX0ZMQUcgPSAyNTYsXG4gICAgICBXUkFQX0ZMSVBfRkxBRyA9IDUxMjtcblxuICAvKiogVXNlZCBhcyBkZWZhdWx0IG9wdGlvbnMgZm9yIGBfLnRydW5jYXRlYC4gKi9cbiAgdmFyIERFRkFVTFRfVFJVTkNfTEVOR1RIID0gMzAsXG4gICAgICBERUZBVUxUX1RSVU5DX09NSVNTSU9OID0gJy4uLic7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGhvdCBmdW5jdGlvbnMgYnkgbnVtYmVyIG9mIGNhbGxzIHdpdGhpbiBhIHNwYW4gb2YgbWlsbGlzZWNvbmRzLiAqL1xuICB2YXIgSE9UX0NPVU5UID0gODAwLFxuICAgICAgSE9UX1NQQU4gPSAxNjtcblxuICAvKiogVXNlZCB0byBpbmRpY2F0ZSB0aGUgdHlwZSBvZiBsYXp5IGl0ZXJhdGVlcy4gKi9cbiAgdmFyIExBWllfRklMVEVSX0ZMQUcgPSAxLFxuICAgICAgTEFaWV9NQVBfRkxBRyA9IDIsXG4gICAgICBMQVpZX1dISUxFX0ZMQUcgPSAzO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xuICB2YXIgSU5GSU5JVFkgPSAxIC8gMCxcbiAgICAgIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxLFxuICAgICAgTUFYX0lOVEVHRVIgPSAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOCxcbiAgICAgIE5BTiA9IDAgLyAwO1xuXG4gIC8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHRoZSBtYXhpbXVtIGxlbmd0aCBhbmQgaW5kZXggb2YgYW4gYXJyYXkuICovXG4gIHZhciBNQVhfQVJSQVlfTEVOR1RIID0gNDI5NDk2NzI5NSxcbiAgICAgIE1BWF9BUlJBWV9JTkRFWCA9IE1BWF9BUlJBWV9MRU5HVEggLSAxLFxuICAgICAgSEFMRl9NQVhfQVJSQVlfTEVOR1RIID0gTUFYX0FSUkFZX0xFTkdUSCA+Pj4gMTtcblxuICAvKiogVXNlZCB0byBhc3NvY2lhdGUgd3JhcCBtZXRob2RzIHdpdGggdGhlaXIgYml0IGZsYWdzLiAqL1xuICB2YXIgd3JhcEZsYWdzID0gW1xuICAgIFsnYXJ5JywgV1JBUF9BUllfRkxBR10sXG4gICAgWydiaW5kJywgV1JBUF9CSU5EX0ZMQUddLFxuICAgIFsnYmluZEtleScsIFdSQVBfQklORF9LRVlfRkxBR10sXG4gICAgWydjdXJyeScsIFdSQVBfQ1VSUllfRkxBR10sXG4gICAgWydjdXJyeVJpZ2h0JywgV1JBUF9DVVJSWV9SSUdIVF9GTEFHXSxcbiAgICBbJ2ZsaXAnLCBXUkFQX0ZMSVBfRkxBR10sXG4gICAgWydwYXJ0aWFsJywgV1JBUF9QQVJUSUFMX0ZMQUddLFxuICAgIFsncGFydGlhbFJpZ2h0JywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUddLFxuICAgIFsncmVhcmcnLCBXUkFQX1JFQVJHX0ZMQUddXG4gIF07XG5cbiAgLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xuICB2YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgICAgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICAgIGRvbUV4Y1RhZyA9ICdbb2JqZWN0IERPTUV4Y2VwdGlvbl0nLFxuICAgICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgICBnZW5UYWcgPSAnW29iamVjdCBHZW5lcmF0b3JGdW5jdGlvbl0nLFxuICAgICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICAgIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XScsXG4gICAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICAgIHVuZGVmaW5lZFRhZyA9ICdbb2JqZWN0IFVuZGVmaW5lZF0nLFxuICAgICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJyxcbiAgICAgIHdlYWtTZXRUYWcgPSAnW29iamVjdCBXZWFrU2V0XSc7XG5cbiAgdmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlLiAqL1xuICB2YXIgcmVFbXB0eVN0cmluZ0xlYWRpbmcgPSAvXFxiX19wIFxcKz0gJyc7L2csXG4gICAgICByZUVtcHR5U3RyaW5nTWlkZGxlID0gL1xcYihfX3AgXFwrPSkgJycgXFwrL2csXG4gICAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbiAgdmFyIHJlRXNjYXBlZEh0bWwgPSAvJig/OmFtcHxsdHxndHxxdW90fCMzOSk7L2csXG4gICAgICByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ10vZyxcbiAgICAgIHJlSGFzRXNjYXBlZEh0bWwgPSBSZWdFeHAocmVFc2NhcGVkSHRtbC5zb3VyY2UpLFxuICAgICAgcmVIYXNVbmVzY2FwZWRIdG1sID0gUmVnRXhwKHJlVW5lc2NhcGVkSHRtbC5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZUVzY2FwZSA9IC88JS0oW1xcc1xcU10rPyklPi9nLFxuICAgICAgcmVFdmFsdWF0ZSA9IC88JShbXFxzXFxTXSs/KSU+L2csXG4gICAgICByZUludGVycG9sYXRlID0gLzwlPShbXFxzXFxTXSs/KSU+L2c7XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xuICB2YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLyxcbiAgICAgIHJlUHJvcE5hbWUgPSAvW14uW1xcXV0rfFxcWyg/OigtP1xcZCsoPzpcXC5cXGQrKT8pfChbXCInXSkoKD86KD8hXFwyKVteXFxcXF18XFxcXC4pKj8pXFwyKVxcXXwoPz0oPzpcXC58XFxbXFxdKSg/OlxcLnxcXFtcXF18JCkpL2c7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAgICogW3N5bnRheCBjaGFyYWN0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wYXR0ZXJucykuXG4gICAqL1xuICB2YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nLFxuICAgICAgcmVIYXNSZWdFeHBDaGFyID0gUmVnRXhwKHJlUmVnRXhwQ2hhci5zb3VyY2UpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG4gIHZhciByZVRyaW0gPSAvXlxccyt8XFxzKyQvZyxcbiAgICAgIHJlVHJpbVN0YXJ0ID0gL15cXHMrLyxcbiAgICAgIHJlVHJpbUVuZCA9IC9cXHMrJC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd3JhcCBkZXRhaWwgY29tbWVudHMuICovXG4gIHZhciByZVdyYXBDb21tZW50ID0gL1xceyg/OlxcblxcL1xcKiBcXFt3cmFwcGVkIHdpdGggLitcXF0gXFwqXFwvKT9cXG4/LyxcbiAgICAgIHJlV3JhcERldGFpbHMgPSAvXFx7XFxuXFwvXFwqIFxcW3dyYXBwZWQgd2l0aCAoLispXFxdIFxcKi8sXG4gICAgICByZVNwbGl0RGV0YWlscyA9IC8sPyAmIC87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG4gIHZhciByZUFzY2lpV29yZCA9IC9bXlxceDAwLVxceDJmXFx4M2EtXFx4NDBcXHg1Yi1cXHg2MFxceDdiLVxceDdmXSsvZztcblxuICAvKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbiAgdmFyIHJlRXNjYXBlQ2hhciA9IC9cXFxcKFxcXFwpPy9nO1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIG1hdGNoXG4gICAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gICAqL1xuICB2YXIgcmVFc1RlbXBsYXRlID0gL1xcJFxceyhbXlxcXFx9XSooPzpcXFxcLlteXFxcXH1dKikqKVxcfS9nO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xuICB2YXIgcmVGbGFncyA9IC9cXHcqJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IGJhZCBzaWduZWQgaGV4YWRlY2ltYWwgc3RyaW5nIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNCYWRIZXggPSAvXlstK10weFswLTlhLWZdKyQvaTtcblxuICAvKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzQmluYXJ5ID0gL14wYlswMV0rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBob3N0IGNvbnN0cnVjdG9ycyAoU2FmYXJpKS4gKi9cbiAgdmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG4gIHZhciByZUlzT2N0YWwgPSAvXjBvWzAtN10rJC9pO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbiAgdmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuICAvKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbiAgdmFyIHJlTGF0aW4gPSAvW1xceGMwLVxceGQ2XFx4ZDgtXFx4ZjZcXHhmOC1cXHhmZlxcdTAxMDAtXFx1MDE3Zl0vZztcblxuICAvKiogVXNlZCB0byBlbnN1cmUgY2FwdHVyaW5nIG9yZGVyIG9mIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG4gIHZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbiAgLyoqIFVzZWQgdG8gbWF0Y2ggdW5lc2NhcGVkIGNoYXJhY3RlcnMgaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgcmVVbmVzY2FwZWRTdHJpbmcgPSAvWydcXG5cXHJcXHUyMDI4XFx1MjAyOVxcXFxdL2c7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xuICB2YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgICByc01hdGhPcFJhbmdlID0gJ1xcXFx4YWNcXFxceGIxXFxcXHhkN1xcXFx4ZjcnLFxuICAgICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICAgIHJzU3BhY2VSYW5nZSA9ICcgXFxcXHRcXFxceDBiXFxcXGZcXFxceGEwXFxcXHVmZWZmXFxcXG5cXFxcclxcXFx1MjAyOFxcXFx1MjAyOVxcXFx1MTY4MFxcXFx1MTgwZVxcXFx1MjAwMFxcXFx1MjAwMVxcXFx1MjAwMlxcXFx1MjAwM1xcXFx1MjAwNFxcXFx1MjAwNVxcXFx1MjAwNlxcXFx1MjAwN1xcXFx1MjAwOFxcXFx1MjAwOVxcXFx1MjAwYVxcXFx1MjAyZlxcXFx1MjA1ZlxcXFx1MzAwMCcsXG4gICAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICAgIHJzQnJlYWtSYW5nZSA9IHJzTWF0aE9wUmFuZ2UgKyByc05vbkNoYXJSYW5nZSArIHJzUHVuY3R1YXRpb25SYW5nZSArIHJzU3BhY2VSYW5nZTtcblxuICAvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG4gIHZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICAgIHJzQXN0cmFsID0gJ1snICsgcnNBc3RyYWxSYW5nZSArICddJyxcbiAgICAgIHJzQnJlYWsgPSAnWycgKyByc0JyZWFrUmFuZ2UgKyAnXScsXG4gICAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICAgIHJzRGluZ2JhdCA9ICdbJyArIHJzRGluZ2JhdFJhbmdlICsgJ10nLFxuICAgICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzRml0eiA9ICdcXFxcdWQ4M2NbXFxcXHVkZmZiLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgICByc1JlZ2lvbmFsID0gJyg/OlxcXFx1ZDgzY1tcXFxcdWRkZTYtXFxcXHVkZGZmXSl7Mn0nLFxuICAgICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbiAgLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG4gIHZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICAgIHJzTWlzY1VwcGVyID0gJyg/OicgKyByc1VwcGVyICsgJ3wnICsgcnNNaXNjICsgJyknLFxuICAgICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICAgIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgICAgcnNPcmRMb3dlciA9ICdcXFxcZCooPzoxc3R8Mm5kfDNyZHwoPyFbMTIzXSlcXFxcZHRoKSg/PVxcXFxifFtBLVpfXSknLFxuICAgICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgICAgcnNFbW9qaSA9ICcoPzonICsgW3JzRGluZ2JhdCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNTZXEsXG4gICAgICByc1N5bWJvbCA9ICcoPzonICsgW3JzTm9uQXN0cmFsICsgcnNDb21ibyArICc/JywgcnNDb21ibywgcnNSZWdpb25hbCwgcnNTdXJyUGFpciwgcnNBc3RyYWxdLmpvaW4oJ3wnKSArICcpJztcblxuICAvKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbiAgdmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAgICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrcyBmb3Igc3ltYm9sc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzX2Zvcl9TeW1ib2xzKS5cbiAgICovXG4gIHZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4gIC8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG4gIHZhciByZVVuaWNvZGUgPSBSZWdFeHAocnNGaXR6ICsgJyg/PScgKyByc0ZpdHogKyAnKXwnICsgcnNTeW1ib2wgKyByc1NlcSwgJ2cnKTtcblxuICAvKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xuICB2YXIgcmVVbmljb2RlV29yZCA9IFJlZ0V4cChbXG4gICAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gICAgcnNVcHBlciArICc/JyArIHJzTWlzY0xvd2VyICsgJysnICsgcnNPcHRDb250ckxvd2VyLFxuICAgIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gICAgcnNPcmRVcHBlcixcbiAgICByc09yZExvd2VyLFxuICAgIHJzRGlnaXRzLFxuICAgIHJzRW1vamlcbiAgXS5qb2luKCd8JyksICdnJyk7XG5cbiAgLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG4gIHZhciByZUhhc1VuaWNvZGUgPSBSZWdFeHAoJ1snICsgcnNaV0ogKyByc0FzdHJhbFJhbmdlICArIHJzQ29tYm9SYW5nZSArIHJzVmFyUmFuZ2UgKyAnXScpO1xuXG4gIC8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHRoYXQgbmVlZCBhIG1vcmUgcm9idXN0IHJlZ2V4cCB0byBtYXRjaCB3b3Jkcy4gKi9cbiAgdmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuICAvKiogVXNlZCB0byBhc3NpZ24gZGVmYXVsdCBgY29udGV4dGAgb2JqZWN0IHByb3BlcnRpZXMuICovXG4gIHZhciBjb250ZXh0UHJvcHMgPSBbXG4gICAgJ0FycmF5JywgJ0J1ZmZlcicsICdEYXRhVmlldycsICdEYXRlJywgJ0Vycm9yJywgJ0Zsb2F0MzJBcnJheScsICdGbG9hdDY0QXJyYXknLFxuICAgICdGdW5jdGlvbicsICdJbnQ4QXJyYXknLCAnSW50MTZBcnJheScsICdJbnQzMkFycmF5JywgJ01hcCcsICdNYXRoJywgJ09iamVjdCcsXG4gICAgJ1Byb21pc2UnLCAnUmVnRXhwJywgJ1NldCcsICdTdHJpbmcnLCAnU3ltYm9sJywgJ1R5cGVFcnJvcicsICdVaW50OEFycmF5JyxcbiAgICAnVWludDhDbGFtcGVkQXJyYXknLCAnVWludDE2QXJyYXknLCAnVWludDMyQXJyYXknLCAnV2Vha01hcCcsXG4gICAgJ18nLCAnY2xlYXJUaW1lb3V0JywgJ2lzRmluaXRlJywgJ3BhcnNlSW50JywgJ3NldFRpbWVvdXQnXG4gIF07XG5cbiAgLyoqIFVzZWQgdG8gbWFrZSB0ZW1wbGF0ZSBzb3VyY2VVUkxzIGVhc2llciB0byBpZGVudGlmeS4gKi9cbiAgdmFyIHRlbXBsYXRlQ291bnRlciA9IC0xO1xuXG4gIC8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIG9mIHR5cGVkIGFycmF5cy4gKi9cbiAgdmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG4gIHR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tpbnQ4VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2ludDE2VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG4gIHR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tkYXRhVmlld1RhZ10gPSB0eXBlZEFycmF5VGFnc1tkYXRlVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbiAgdHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxuICB0eXBlZEFycmF5VGFnc1tvYmplY3RUYWddID0gdHlwZWRBcnJheVRhZ3NbcmVnZXhwVGFnXSA9XG4gIHR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbiAgdHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuICAvKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBzdXBwb3J0ZWQgYnkgYF8uY2xvbmVgLiAqL1xuICB2YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuICBjbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2FycmF5QnVmZmVyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0YVZpZXdUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuICBjbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW2ludDE2VGFnXSA9XG4gIGNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tyZWdleHBUYWddID0gY2xvbmVhYmxlVGFnc1tzZXRUYWddID1cbiAgY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbiAgY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuICBjbG9uZWFibGVUYWdzW3VpbnQxNlRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xuICBjbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuICBjbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbiAgLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xuICB2YXIgZGVidXJyZWRMZXR0ZXJzID0ge1xuICAgIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgICAnXFx4ZTAnOiAnYScsICAnXFx4ZTEnOiAnYScsICdcXHhlMic6ICdhJywgJ1xceGUzJzogJ2EnLCAnXFx4ZTQnOiAnYScsICdcXHhlNSc6ICdhJyxcbiAgICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAgICdcXHhjOCc6ICdFJywgICdcXHhjOSc6ICdFJywgJ1xceGNhJzogJ0UnLCAnXFx4Y2InOiAnRScsXG4gICAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAgICdcXHhlYyc6ICdpJywgICdcXHhlZCc6ICdpJywgJ1xceGVlJzogJ2knLCAnXFx4ZWYnOiAnaScsXG4gICAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAgICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAgICdcXHhmMic6ICdvJywgICdcXHhmMyc6ICdvJywgJ1xceGY0JzogJ28nLCAnXFx4ZjUnOiAnbycsICdcXHhmNic6ICdvJywgJ1xceGY4JzogJ28nLFxuICAgICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgICAnXFx4ZGQnOiAnWScsICAnXFx4ZmQnOiAneScsICdcXHhmZic6ICd5JyxcbiAgICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAgICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICAgJ1xceGRmJzogJ3NzJyxcbiAgICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAgICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAgICdcXHUwMTAxJzogJ2EnLCAgJ1xcdTAxMDMnOiAnYScsICdcXHUwMTA1JzogJ2EnLFxuICAgICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICAgJ1xcdTAxMGUnOiAnRCcsICAnXFx1MDExMCc6ICdEJywgJ1xcdTAxMGYnOiAnZCcsICdcXHUwMTExJzogJ2QnLFxuICAgICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgICAnXFx1MDExYyc6ICdHJywgICdcXHUwMTFlJzogJ0cnLCAnXFx1MDEyMCc6ICdHJywgJ1xcdTAxMjInOiAnRycsXG4gICAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAgICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgICAnXFx1MDEyOCc6ICdJJywgICdcXHUwMTJhJzogJ0knLCAnXFx1MDEyYyc6ICdJJywgJ1xcdTAxMmUnOiAnSScsICdcXHUwMTMwJzogJ0knLFxuICAgICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgICAnXFx1MDEzNic6ICdLJywgICdcXHUwMTM3JzogJ2snLCAnXFx1MDEzOCc6ICdrJyxcbiAgICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAgICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICAgJ1xcdTAxNDMnOiAnTicsICAnXFx1MDE0NSc6ICdOJywgJ1xcdTAxNDcnOiAnTicsICdcXHUwMTRhJzogJ04nLFxuICAgICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgICAnXFx1MDE0ZCc6ICdvJywgICdcXHUwMTRmJzogJ28nLCAnXFx1MDE1MSc6ICdvJyxcbiAgICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgICAnXFx1MDE1YSc6ICdTJywgICdcXHUwMTVjJzogJ1MnLCAnXFx1MDE1ZSc6ICdTJywgJ1xcdTAxNjAnOiAnUycsXG4gICAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAgICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAgICdcXHUwMTYzJzogJ3QnLCAgJ1xcdTAxNjUnOiAndCcsICdcXHUwMTY3JzogJ3QnLFxuICAgICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAgICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAgICdcXHUwMTc0JzogJ1cnLCAgJ1xcdTAxNzUnOiAndycsXG4gICAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICAgJ1xcdTAxN2EnOiAneicsICAnXFx1MDE3Yyc6ICd6JywgJ1xcdTAxN2UnOiAneicsXG4gICAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICAgJ1xcdTAxNDknOiBcIiduXCIsICdcXHUwMTdmJzogJ3MnXG4gIH07XG5cbiAgLyoqIFVzZWQgdG8gbWFwIGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy4gKi9cbiAgdmFyIGh0bWxFc2NhcGVzID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjMzk7J1xuICB9O1xuXG4gIC8qKiBVc2VkIHRvIG1hcCBIVE1MIGVudGl0aWVzIHRvIGNoYXJhY3RlcnMuICovXG4gIHZhciBodG1sVW5lc2NhcGVzID0ge1xuICAgICcmYW1wOyc6ICcmJyxcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuXG4gIC8qKiBVc2VkIHRvIGVzY2FwZSBjaGFyYWN0ZXJzIGZvciBpbmNsdXNpb24gaW4gY29tcGlsZWQgc3RyaW5nIGxpdGVyYWxzLiAqL1xuICB2YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgICAnXFxcXCc6ICdcXFxcJyxcbiAgICBcIidcIjogXCInXCIsXG4gICAgJ1xcbic6ICduJyxcbiAgICAnXFxyJzogJ3InLFxuICAgICdcXHUyMDI4JzogJ3UyMDI4JyxcbiAgICAnXFx1MjAyOSc6ICd1MjAyOSdcbiAgfTtcblxuICAvKiogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgd2l0aG91dCBhIGRlcGVuZGVuY3kgb24gYHJvb3RgLiAqL1xuICB2YXIgZnJlZVBhcnNlRmxvYXQgPSBwYXJzZUZsb2F0LFxuICAgICAgZnJlZVBhcnNlSW50ID0gcGFyc2VJbnQ7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbiAgdmFyIGZyZWVHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnICYmIGdsb2JhbCAmJiBnbG9iYWwuT2JqZWN0ID09PSBPYmplY3QgJiYgZ2xvYmFsO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgc2VsZmAuICovXG4gIHZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4gIC8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xuICB2YXIgcm9vdCA9IGZyZWVHbG9iYWwgfHwgZnJlZVNlbGYgfHwgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblxuICAvKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xuICB2YXIgZnJlZUV4cG9ydHMgPSB0eXBlb2YgZXhwb3J0cyA9PSAnb2JqZWN0JyAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XG5cbiAgLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xuICB2YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4gIC8qKiBEZXRlY3QgdGhlIHBvcHVsYXIgQ29tbW9uSlMgZXh0ZW5zaW9uIGBtb2R1bGUuZXhwb3J0c2AuICovXG4gIHZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4gIC8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xuICB2YXIgZnJlZVByb2Nlc3MgPSBtb2R1bGVFeHBvcnRzICYmIGZyZWVHbG9iYWwucHJvY2VzcztcblxuICAvKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbiAgdmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICAgIHRyeSB7XG4gICAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgICBpZiAodHlwZXMpIHtcbiAgICAgICAgcmV0dXJuIHR5cGVzO1xuICAgICAgfVxuXG4gICAgICAvLyBMZWdhY3kgYHByb2Nlc3MuYmluZGluZygndXRpbCcpYCBmb3IgTm9kZS5qcyA8IDEwLlxuICAgICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH0oKSk7XG5cbiAgLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbiAgdmFyIG5vZGVJc0FycmF5QnVmZmVyID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNBcnJheUJ1ZmZlcixcbiAgICAgIG5vZGVJc0RhdGUgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc0RhdGUsXG4gICAgICBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcCxcbiAgICAgIG5vZGVJc1JlZ0V4cCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzUmVnRXhwLFxuICAgICAgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQsXG4gICAgICBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIGB0aGlzQXJnYCBhbmQgdGhlIGFyZ3VtZW50cyBvZiBgYXJnc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGZ1bmNgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgIGNhc2UgMDogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnKTtcbiAgICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICAgIGNhc2UgMjogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgIGNhc2UgMzogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICB9XG4gICAgcmV0dXJuIGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlQWdncmVnYXRvcmAgZm9yIGFycmF5cy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXR0ZXIgVGhlIGZ1bmN0aW9uIHRvIHNldCBgYWNjdW11bGF0b3JgIHZhbHVlcy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgYWNjdW11bGF0b3JgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlBZ2dyZWdhdG9yKGFycmF5LCBzZXR0ZXIsIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBzZXR0ZXIoYWNjdW11bGF0b3IsIHZhbHVlLCBpdGVyYXRlZSh2YWx1ZSksIGFycmF5KTtcbiAgICB9XG4gICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5mb3JFYWNoYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSA9PT0gZmFsc2UpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaFJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RWFjaFJpZ2h0KGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W2xlbmd0aF0sIGxlbmd0aCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5ldmVyeWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbGwgZWxlbWVudHMgcGFzcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlFdmVyeShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmICghcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5RmlsdGVyKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uaW5jbHVkZXNgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBzcGVjaWZ5aW5nIGFuIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHRhcmdldCBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB0YXJnZXRgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheUluY2x1ZGVzKGFycmF5LCB2YWx1ZSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICByZXR1cm4gISFsZW5ndGggJiYgYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCAwKSA+IC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYXJyYXlJbmNsdWRlc2AgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBhIGNvbXBhcmF0b3IuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdGFyZ2V0IFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdGFyZ2V0YCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlJbmNsdWRlc1dpdGgoYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChjb21wYXJhdG9yKHZhbHVlLCBhcnJheVtpbmRleF0pKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQXBwZW5kcyB0aGUgZWxlbWVudHMgb2YgYHZhbHVlc2AgdG8gYGFycmF5YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtvZmZzZXQgKyBpbmRleF0gPSB2YWx1ZXNbaW5kZXhdO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpbml0QWNjdW1dIFNwZWNpZnkgdXNpbmcgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YCBhc1xuICAgKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICAgIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICAgIH1cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICAgIH1cbiAgICByZXR1cm4gYWNjdW11bGF0b3I7XG4gIH1cblxuICAvKipcbiAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZVJpZ2h0YCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3JcbiAgICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgbGFzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAgICogIHRoZSBpbml0aWFsIHZhbHVlLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBhcnJheVJlZHVjZVJpZ2h0KGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICBpZiAoaW5pdEFjY3VtICYmIGxlbmd0aCkge1xuICAgICAgYWNjdW11bGF0b3IgPSBhcnJheVstLWxlbmd0aF07XG4gICAgfVxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbbGVuZ3RoXSwgbGVuZ3RoLCBhcnJheSk7XG4gICAgfVxuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc29tZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gICAqIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbnkgZWxlbWVudCBwYXNzZXMgdGhlIHByZWRpY2F0ZSBjaGVjayxcbiAgICogIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGFycmF5U29tZShhcnJheSwgcHJlZGljYXRlKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGUgc2l6ZSBvZiBhbiBBU0NJSSBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgdmFyIGFzY2lpU2l6ZSA9IGJhc2VQcm9wZXJ0eSgnbGVuZ3RoJyk7XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJyk7XG4gIH1cblxuICAvKipcbiAgICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgKi9cbiAgZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlQXNjaWlXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZmluZEtleWAgYW5kIGBfLmZpbmRMYXN0S2V5YCxcbiAgICogd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLCB3aGljaCBpdGVyYXRlcyBvdmVyIGBjb2xsZWN0aW9uYFxuICAgKiB1c2luZyBgZWFjaEZ1bmNgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZWFjaEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGl0ZXJhdGUgb3ZlciBgY29sbGVjdGlvbmAuXG4gICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmb3VuZCBlbGVtZW50IG9yIGl0cyBrZXksIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlRmluZEtleShjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGVhY2hGdW5jKSB7XG4gICAgdmFyIHJlc3VsdDtcbiAgICBlYWNoRnVuYyhjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgIHJlc3VsdCA9IGtleTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmluZEluZGV4YCBhbmQgYF8uZmluZExhc3RJbmRleGAgd2l0aG91dFxuICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VGaW5kSW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4LCBmcm9tUmlnaHQpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICBpbmRleCA9IGZyb21JbmRleCArIChmcm9tUmlnaHQgPyAxIDogLTEpO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmluZGV4T2ZgIHdpdGhvdXQgYGZyb21JbmRleGAgYm91bmRzIGNoZWNrcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlXG4gICAgICA/IHN0cmljdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpXG4gICAgICA6IGJhc2VGaW5kSW5kZXgoYXJyYXksIGJhc2VJc05hTiwgZnJvbUluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2UgYGJhc2VJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGEgY29tcGFyYXRvci5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlSW5kZXhPZldpdGgoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgsIGNvbXBhcmF0b3IpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggLSAxLFxuICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYU5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbnVtYmVyIG9iamVjdHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgTmFOYCwgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gYmFzZUlzTmFOKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZWFuYCBhbmQgYF8ubWVhbkJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yXG4gICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlTWVhbihhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgcmV0dXJuIGxlbmd0aCA/IChiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkgLyBsZW5ndGgpIDogTkFOO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVkdWNlYCBhbmQgYF8ucmVkdWNlUmlnaHRgLCB3aXRob3V0IHN1cHBvcnRcbiAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYGNvbGxlY3Rpb25gIHVzaW5nIGBlYWNoRnVuY2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICogQHBhcmFtIHsqfSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICogQHBhcmFtIHtib29sZWFufSBpbml0QWNjdW0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3Qgb3IgbGFzdCBlbGVtZW50IG9mXG4gICAqICBgY29sbGVjdGlvbmAgYXMgdGhlIGluaXRpYWwgdmFsdWUuXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYGNvbGxlY3Rpb25gLlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlUmVkdWNlKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtLCBlYWNoRnVuYykge1xuICAgIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgYWNjdW11bGF0b3IgPSBpbml0QWNjdW1cbiAgICAgICAgPyAoaW5pdEFjY3VtID0gZmFsc2UsIHZhbHVlKVxuICAgICAgICA6IGl0ZXJhdGVlKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2N1bXVsYXRvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gICAqIHNvcnQgb3JkZXIgb2YgYGFycmF5YCBhbmQgcmVwbGFjZXMgY3JpdGVyaWEgb2JqZWN0cyB3aXRoIHRoZWlyIGNvcnJlc3BvbmRpbmdcbiAgICogdmFsdWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc29ydC5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIGFycmF5LnNvcnQoY29tcGFyZXIpO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgYXJyYXlbbGVuZ3RoXSA9IGFycmF5W2xlbmd0aF0udmFsdWU7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zdW1gIGFuZCBgXy5zdW1CeWAgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlU3VtKGFycmF5LCBpdGVyYXRlZSkge1xuICAgIHZhciByZXN1bHQsXG4gICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSk7XG4gICAgICBpZiAoY3VycmVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gY3VycmVudCA6IChyZXN1bHQgKyBjdXJyZW50KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50aW1lc2Agd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzXG4gICAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShpbmRleCk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9QYWlyc2AgYW5kIGBfLnRvUGFpcnNJbmAgd2hpY2ggY3JlYXRlcyBhbiBhcnJheVxuICAgKiBvZiBrZXktdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzIG9mIGBwcm9wc2AuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IG5hbWVzIHRvIGdldCB2YWx1ZXMgZm9yLlxuICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAqL1xuICBmdW5jdGlvbiBiYXNlVG9QYWlycyhvYmplY3QsIHByb3BzKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHByb3BzLCBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHJldHVybiBba2V5LCBvYmplY3Rba2V5XV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udW5hcnlgIHdpdGhvdXQgc3VwcG9ydCBmb3Igc3RvcmluZyBtZXRhZGF0YS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VVbmFyeShmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICAgKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAgICogb2YgYHByb3BzYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICAgIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gb2JqZWN0W2tleV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgKi9cbiAgZnVuY3Rpb24gY2FjaGVIYXMoY2FjaGUsIGtleSkge1xuICAgIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltU3RhcnRgIHRvIGdldCB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgdW5tYXRjaGVkIHN0cmluZyBzeW1ib2wuXG4gICAqL1xuICBmdW5jdGlvbiBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBzdHJTeW1ib2xzLmxlbmd0aDtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNoclN5bWJvbHMsIHN0clN5bWJvbHNbaW5kZXhdLCAwKSA+IC0xKSB7fVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRyaW1gIGFuZCBgXy50cmltRW5kYCB0byBnZXQgdGhlIGluZGV4IG9mIHRoZSBsYXN0IHN0cmluZyBzeW1ib2xcbiAgICogdGhhdCBpcyBub3QgZm91bmQgaW4gdGhlIGNoYXJhY3RlciBzeW1ib2xzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBzdHJTeW1ib2xzIFRoZSBzdHJpbmcgc3ltYm9scyB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0ge0FycmF5fSBjaHJTeW1ib2xzIFRoZSBjaGFyYWN0ZXIgc3ltYm9scyB0byBmaW5kLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbGFzdCB1bm1hdGNoZWQgc3RyaW5nIHN5bWJvbC5cbiAgICovXG4gIGZ1bmN0aW9uIGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scykge1xuICAgIHZhciBpbmRleCA9IHN0clN5bWJvbHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGluZGV4LS0gJiYgYmFzZUluZGV4T2YoY2hyU3ltYm9scywgc3RyU3ltYm9sc1tpbmRleF0sIDApID4gLTEpIHt9XG4gICAgcmV0dXJuIGluZGV4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIG51bWJlciBvZiBgcGxhY2Vob2xkZXJgIG9jY3VycmVuY2VzIGluIGBhcnJheWAuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byBzZWFyY2ggZm9yLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBjb3VudC5cbiAgICovXG4gIGZ1bmN0aW9uIGNvdW50SG9sZGVycyhhcnJheSwgcGxhY2Vob2xkZXIpIHtcbiAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICByZXN1bHQgPSAwO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICBpZiAoYXJyYXlbbGVuZ3RoXSA9PT0gcGxhY2Vob2xkZXIpIHtcbiAgICAgICAgKytyZXN1bHQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBsZXR0ZXIuXG4gICAqL1xuICB2YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuICAvKipcbiAgICogVXNlZCBieSBgXy5lc2NhcGVgIHRvIGNvbnZlcnQgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byBlc2NhcGUuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICAgKi9cbiAgdmFyIGVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbEVzY2FwZXMpO1xuXG4gIC8qKlxuICAgKiBVc2VkIGJ5IGBfLnRlbXBsYXRlYCB0byBlc2NhcGUgY2hhcmFjdGVycyBmb3IgaW5jbHVzaW9uIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBlc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIGZ1bmN0aW9uIGVzY2FwZVN0cmluZ0NoYXIoY2hyKSB7XG4gICAgcmV0dXJuICdcXFxcJyArIHN0cmluZ0VzY2FwZXNbY2hyXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICovXG4gIGZ1bmN0aW9uIGhhc1VuaWNvZGUoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIGEgd29yZCBjb21wb3NlZCBvZiBVbmljb2RlIHN5bWJvbHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAqL1xuICBmdW5jdGlvbiBoYXNVbmljb2RlV29yZChzdHJpbmcpIHtcbiAgICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYGl0ZXJhdG9yYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IGl0ZXJhdG9yIFRoZSBpdGVyYXRvciB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIGl0ZXJhdG9yVG9BcnJheShpdGVyYXRvcikge1xuICAgIHZhciBkYXRhLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICghKGRhdGEgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICAgIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAqL1xuICBmdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIFJlcGxhY2VzIGFsbCBgcGxhY2Vob2xkZXJgIGVsZW1lbnRzIGluIGBhcnJheWAgd2l0aCBhbiBpbnRlcm5hbCBwbGFjZWhvbGRlclxuICAgKiBhbmQgcmV0dXJucyBhbiBhcnJheSBvZiB0aGVpciBpbmRleGVzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgKiBAcGFyYW0geyp9IHBsYWNlaG9sZGVyIFRoZSBwbGFjZWhvbGRlciB0byByZXBsYWNlLlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVwbGFjZUhvbGRlcnMoYXJyYXksIHBsYWNlaG9sZGVyKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICBpZiAodmFsdWUgPT09IHBsYWNlaG9sZGVyIHx8IHZhbHVlID09PSBQTEFDRUhPTERFUikge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBQTEFDRUhPTERFUjtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICAgKi9cbiAgZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gICAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICAgIH0pO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHNldGAgdG8gaXRzIHZhbHVlLXZhbHVlIHBhaXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZS12YWx1ZSBwYWlycy5cbiAgICovXG4gIGZ1bmN0aW9uIHNldFRvUGFpcnMoc2V0KSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICAgIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICByZXN1bHRbKytpbmRleF0gPSBbdmFsdWUsIHZhbHVlXTtcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5pbmRleE9mYCB3aGljaCBwZXJmb3JtcyBzdHJpY3QgZXF1YWxpdHlcbiAgICogY29tcGFyaXNvbnMgb2YgdmFsdWVzLCBpLmUuIGA9PT1gLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICogQHBhcmFtIHtudW1iZXJ9IGZyb21JbmRleCBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpY3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgZnJvbUluZGV4KSB7XG4gICAgdmFyIGluZGV4ID0gZnJvbUluZGV4IC0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGlmIChhcnJheVtpbmRleF0gPT09IHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5sYXN0SW5kZXhPZmAgd2hpY2ggcGVyZm9ybXMgc3RyaWN0IGVxdWFsaXR5XG4gICAqIGNvbXBhcmlzb25zIG9mIHZhbHVlcywgaS5lLiBgPT09YC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBmcm9tSW5kZXggVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaWN0TGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICB2YXIgaW5kZXggPSBmcm9tSW5kZXggKyAxO1xuICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICBpZiAoYXJyYXlbaW5kZXhdID09PSB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBudW1iZXIgb2Ygc3ltYm9scyBpbiBgc3RyaW5nYC5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHN0cmluZyBzaXplLlxuICAgKi9cbiAgZnVuY3Rpb24gc3RyaW5nU2l6ZShzdHJpbmcpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZShzdHJpbmcpXG4gICAgICA/IHVuaWNvZGVTaXplKHN0cmluZylcbiAgICAgIDogYXNjaWlTaXplKHN0cmluZyk7XG4gIH1cblxuICAvKipcbiAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICovXG4gIGZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyB1bmljb2RlVG9BcnJheShzdHJpbmcpXG4gICAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgYnkgYF8udW5lc2NhcGVgIHRvIGNvbnZlcnQgSFRNTCBlbnRpdGllcyB0byBjaGFyYWN0ZXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gY2hyIFRoZSBtYXRjaGVkIGNoYXJhY3RlciB0byB1bmVzY2FwZS5cbiAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIGNoYXJhY3Rlci5cbiAgICovXG4gIHZhciB1bmVzY2FwZUh0bWxDaGFyID0gYmFzZVByb3BlcnR5T2YoaHRtbFVuZXNjYXBlcyk7XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHNpemUgb2YgYSBVbmljb2RlIGBzdHJpbmdgLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgaW5zcGVjdC5cbiAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3RyaW5nIHNpemUuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlU2l6ZShzdHJpbmcpIHtcbiAgICB2YXIgcmVzdWx0ID0gcmVVbmljb2RlLmxhc3RJbmRleCA9IDA7XG4gICAgd2hpbGUgKHJlVW5pY29kZS50ZXN0KHN0cmluZykpIHtcbiAgICAgICsrcmVzdWx0O1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAgICpcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICAgKi9cbiAgZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gICAqL1xuICBmdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGVXb3JkKSB8fCBbXTtcbiAgfVxuXG4gIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdXNpbmcgdGhlIGBjb250ZXh0YCBvYmplY3QuXG4gICAqXG4gICAqIEBzdGF0aWNcbiAgICogQG1lbWJlck9mIF9cbiAgICogQHNpbmNlIDEuMS4wXG4gICAqIEBjYXRlZ29yeSBVdGlsXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dD1yb290XSBUaGUgY29udGV4dCBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBhIG5ldyBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICogQGV4YW1wbGVcbiAgICpcbiAgICogXy5taXhpbih7ICdmb28nOiBfLmNvbnN0YW50KCdmb28nKSB9KTtcbiAgICpcbiAgICogdmFyIGxvZGFzaCA9IF8ucnVuSW5Db250ZXh0KCk7XG4gICAqIGxvZGFzaC5taXhpbih7ICdiYXInOiBsb2Rhc2guY29uc3RhbnQoJ2JhcicpIH0pO1xuICAgKlxuICAgKiBfLmlzRnVuY3Rpb24oXy5mb28pO1xuICAgKiAvLyA9PiB0cnVlXG4gICAqIF8uaXNGdW5jdGlvbihfLmJhcik7XG4gICAqIC8vID0+IGZhbHNlXG4gICAqXG4gICAqIGxvZGFzaC5pc0Z1bmN0aW9uKGxvZGFzaC5mb28pO1xuICAgKiAvLyA9PiBmYWxzZVxuICAgKiBsb2Rhc2guaXNGdW5jdGlvbihsb2Rhc2guYmFyKTtcbiAgICogLy8gPT4gdHJ1ZVxuICAgKlxuICAgKiAvLyBDcmVhdGUgYSBzdXBlZC11cCBgZGVmZXJgIGluIE5vZGUuanMuXG4gICAqIHZhciBkZWZlciA9IF8ucnVuSW5Db250ZXh0KHsgJ3NldFRpbWVvdXQnOiBzZXRJbW1lZGlhdGUgfSkuZGVmZXI7XG4gICAqL1xuICB2YXIgcnVuSW5Db250ZXh0ID0gKGZ1bmN0aW9uIHJ1bkluQ29udGV4dChjb250ZXh0KSB7XG4gICAgY29udGV4dCA9IGNvbnRleHQgPT0gbnVsbCA/IHJvb3QgOiBfLmRlZmF1bHRzKHJvb3QuT2JqZWN0KCksIGNvbnRleHQsIF8ucGljayhyb290LCBjb250ZXh0UHJvcHMpKTtcblxuICAgIC8qKiBCdWlsdC1pbiBjb25zdHJ1Y3RvciByZWZlcmVuY2VzLiAqL1xuICAgIHZhciBBcnJheSA9IGNvbnRleHQuQXJyYXksXG4gICAgICAgIERhdGUgPSBjb250ZXh0LkRhdGUsXG4gICAgICAgIEVycm9yID0gY29udGV4dC5FcnJvcixcbiAgICAgICAgRnVuY3Rpb24gPSBjb250ZXh0LkZ1bmN0aW9uLFxuICAgICAgICBNYXRoID0gY29udGV4dC5NYXRoLFxuICAgICAgICBPYmplY3QgPSBjb250ZXh0Lk9iamVjdCxcbiAgICAgICAgUmVnRXhwID0gY29udGV4dC5SZWdFeHAsXG4gICAgICAgIFN0cmluZyA9IGNvbnRleHQuU3RyaW5nLFxuICAgICAgICBUeXBlRXJyb3IgPSBjb250ZXh0LlR5cGVFcnJvcjtcblxuICAgIC8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbiAgICB2YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZSxcbiAgICAgICAgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgICAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbiAgICAvKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG4gICAgdmFyIGNvcmVKc0RhdGEgPSBjb250ZXh0WydfX2NvcmUtanNfc2hhcmVkX18nXTtcblxuICAgIC8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbiAgICB2YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4gICAgLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG4gICAgdmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgICAvKiogVXNlZCB0byBnZW5lcmF0ZSB1bmlxdWUgSURzLiAqL1xuICAgIHZhciBpZENvdW50ZXIgPSAwO1xuXG4gICAgLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbiAgICB2YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgICAgIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gICAgICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAgICAgKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAgICAgKiBvZiB2YWx1ZXMuXG4gICAgICovXG4gICAgdmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbiAgICAvKiogVXNlZCB0byBpbmZlciB0aGUgYE9iamVjdGAgY29uc3RydWN0b3IuICovXG4gICAgdmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4gICAgLyoqIFVzZWQgdG8gcmVzdG9yZSB0aGUgb3JpZ2luYWwgYF9gIHJlZmVyZW5jZSBpbiBgXy5ub0NvbmZsaWN0YC4gKi9cbiAgICB2YXIgb2xkRGFzaCA9IHJvb3QuXztcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG4gICAgdmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKGhhc093blByb3BlcnR5KS5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbiAgICApO1xuXG4gICAgLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG4gICAgdmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyBjb250ZXh0LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICAgICAgU3ltYm9sID0gY29udGV4dC5TeW1ib2wsXG4gICAgICAgIFVpbnQ4QXJyYXkgPSBjb250ZXh0LlVpbnQ4QXJyYXksXG4gICAgICAgIGFsbG9jVW5zYWZlID0gQnVmZmVyID8gQnVmZmVyLmFsbG9jVW5zYWZlIDogdW5kZWZpbmVkLFxuICAgICAgICBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KSxcbiAgICAgICAgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZSxcbiAgICAgICAgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZSxcbiAgICAgICAgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2UsXG4gICAgICAgIHNwcmVhZGFibGVTeW1ib2wgPSBTeW1ib2wgPyBTeW1ib2wuaXNDb25jYXRTcHJlYWRhYmxlIDogdW5kZWZpbmVkLFxuICAgICAgICBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbiAgICB2YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgICAgICBmdW5jKHt9LCAnJywge30pO1xuICAgICAgICByZXR1cm4gZnVuYztcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfSgpKTtcblxuICAgIC8qKiBNb2NrZWQgYnVpbHQtaW5zLiAqL1xuICAgIHZhciBjdHhDbGVhclRpbWVvdXQgPSBjb250ZXh0LmNsZWFyVGltZW91dCAhPT0gcm9vdC5jbGVhclRpbWVvdXQgJiYgY29udGV4dC5jbGVhclRpbWVvdXQsXG4gICAgICAgIGN0eE5vdyA9IERhdGUgJiYgRGF0ZS5ub3cgIT09IHJvb3QuRGF0ZS5ub3cgJiYgRGF0ZS5ub3csXG4gICAgICAgIGN0eFNldFRpbWVvdXQgPSBjb250ZXh0LnNldFRpbWVvdXQgIT09IHJvb3Quc2V0VGltZW91dCAmJiBjb250ZXh0LnNldFRpbWVvdXQ7XG5cbiAgICAvKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG4gICAgdmFyIG5hdGl2ZUNlaWwgPSBNYXRoLmNlaWwsXG4gICAgICAgIG5hdGl2ZUZsb29yID0gTWF0aC5mbG9vcixcbiAgICAgICAgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMsXG4gICAgICAgIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkLFxuICAgICAgICBuYXRpdmVJc0Zpbml0ZSA9IGNvbnRleHQuaXNGaW5pdGUsXG4gICAgICAgIG5hdGl2ZUpvaW4gPSBhcnJheVByb3RvLmpvaW4sXG4gICAgICAgIG5hdGl2ZUtleXMgPSBvdmVyQXJnKE9iamVjdC5rZXlzLCBPYmplY3QpLFxuICAgICAgICBuYXRpdmVNYXggPSBNYXRoLm1heCxcbiAgICAgICAgbmF0aXZlTWluID0gTWF0aC5taW4sXG4gICAgICAgIG5hdGl2ZU5vdyA9IERhdGUubm93LFxuICAgICAgICBuYXRpdmVQYXJzZUludCA9IGNvbnRleHQucGFyc2VJbnQsXG4gICAgICAgIG5hdGl2ZVJhbmRvbSA9IE1hdGgucmFuZG9tLFxuICAgICAgICBuYXRpdmVSZXZlcnNlID0gYXJyYXlQcm90by5yZXZlcnNlO1xuXG4gICAgLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xuICAgIHZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShjb250ZXh0LCAnRGF0YVZpZXcnKSxcbiAgICAgICAgTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdNYXAnKSxcbiAgICAgICAgUHJvbWlzZSA9IGdldE5hdGl2ZShjb250ZXh0LCAnUHJvbWlzZScpLFxuICAgICAgICBTZXQgPSBnZXROYXRpdmUoY29udGV4dCwgJ1NldCcpLFxuICAgICAgICBXZWFrTWFwID0gZ2V0TmF0aXZlKGNvbnRleHQsICdXZWFrTWFwJyksXG4gICAgICAgIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuICAgIC8qKiBVc2VkIHRvIHN0b3JlIGZ1bmN0aW9uIG1ldGFkYXRhLiAqL1xuICAgIHZhciBtZXRhTWFwID0gV2Vha01hcCAmJiBuZXcgV2Vha01hcDtcblxuICAgIC8qKiBVc2VkIHRvIGxvb2t1cCB1bm1pbmlmaWVkIGZ1bmN0aW9uIG5hbWVzLiAqL1xuICAgIHZhciByZWFsTmFtZXMgPSB7fTtcblxuICAgIC8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG4gICAgdmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICAgICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgICAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4gICAgLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG4gICAgdmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZCxcbiAgICAgICAgc3ltYm9sVG9TdHJpbmcgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnRvU3RyaW5nIDogdW5kZWZpbmVkO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBsb2Rhc2hgIG9iamVjdCB3aGljaCB3cmFwcyBgdmFsdWVgIHRvIGVuYWJsZSBpbXBsaWNpdCBtZXRob2RcbiAgICAgKiBjaGFpbiBzZXF1ZW5jZXMuIE1ldGhvZHMgdGhhdCBvcGVyYXRlIG9uIGFuZCByZXR1cm4gYXJyYXlzLCBjb2xsZWN0aW9ucyxcbiAgICAgKiBhbmQgZnVuY3Rpb25zIGNhbiBiZSBjaGFpbmVkIHRvZ2V0aGVyLiBNZXRob2RzIHRoYXQgcmV0cmlldmUgYSBzaW5nbGUgdmFsdWVcbiAgICAgKiBvciBtYXkgcmV0dXJuIGEgcHJpbWl0aXZlIHZhbHVlIHdpbGwgYXV0b21hdGljYWxseSBlbmQgdGhlIGNoYWluIHNlcXVlbmNlXG4gICAgICogYW5kIHJldHVybiB0aGUgdW53cmFwcGVkIHZhbHVlLiBPdGhlcndpc2UsIHRoZSB2YWx1ZSBtdXN0IGJlIHVud3JhcHBlZFxuICAgICAqIHdpdGggYF8jdmFsdWVgLlxuICAgICAqXG4gICAgICogRXhwbGljaXQgY2hhaW4gc2VxdWVuY2VzLCB3aGljaCBtdXN0IGJlIHVud3JhcHBlZCB3aXRoIGBfI3ZhbHVlYCwgbWF5IGJlXG4gICAgICogZW5hYmxlZCB1c2luZyBgXy5jaGFpbmAuXG4gICAgICpcbiAgICAgKiBUaGUgZXhlY3V0aW9uIG9mIGNoYWluZWQgbWV0aG9kcyBpcyBsYXp5LCB0aGF0IGlzLCBpdCdzIGRlZmVycmVkIHVudGlsXG4gICAgICogYF8jdmFsdWVgIGlzIGltcGxpY2l0bHkgb3IgZXhwbGljaXRseSBjYWxsZWQuXG4gICAgICpcbiAgICAgKiBMYXp5IGV2YWx1YXRpb24gYWxsb3dzIHNldmVyYWwgbWV0aG9kcyB0byBzdXBwb3J0IHNob3J0Y3V0IGZ1c2lvbi5cbiAgICAgKiBTaG9ydGN1dCBmdXNpb24gaXMgYW4gb3B0aW1pemF0aW9uIHRvIG1lcmdlIGl0ZXJhdGVlIGNhbGxzOyB0aGlzIGF2b2lkc1xuICAgICAqIHRoZSBjcmVhdGlvbiBvZiBpbnRlcm1lZGlhdGUgYXJyYXlzIGFuZCBjYW4gZ3JlYXRseSByZWR1Y2UgdGhlIG51bWJlciBvZlxuICAgICAqIGl0ZXJhdGVlIGV4ZWN1dGlvbnMuIFNlY3Rpb25zIG9mIGEgY2hhaW4gc2VxdWVuY2UgcXVhbGlmeSBmb3Igc2hvcnRjdXRcbiAgICAgKiBmdXNpb24gaWYgdGhlIHNlY3Rpb24gaXMgYXBwbGllZCB0byBhbiBhcnJheSBhbmQgaXRlcmF0ZWVzIGFjY2VwdCBvbmx5XG4gICAgICogb25lIGFyZ3VtZW50LiBUaGUgaGV1cmlzdGljIGZvciB3aGV0aGVyIGEgc2VjdGlvbiBxdWFsaWZpZXMgZm9yIHNob3J0Y3V0XG4gICAgICogZnVzaW9uIGlzIHN1YmplY3QgdG8gY2hhbmdlLlxuICAgICAqXG4gICAgICogQ2hhaW5pbmcgaXMgc3VwcG9ydGVkIGluIGN1c3RvbSBidWlsZHMgYXMgbG9uZyBhcyB0aGUgYF8jdmFsdWVgIG1ldGhvZCBpc1xuICAgICAqIGRpcmVjdGx5IG9yIGluZGlyZWN0bHkgaW5jbHVkZWQgaW4gdGhlIGJ1aWxkLlxuICAgICAqXG4gICAgICogSW4gYWRkaXRpb24gdG8gbG9kYXNoIG1ldGhvZHMsIHdyYXBwZXJzIGhhdmUgYEFycmF5YCBhbmQgYFN0cmluZ2AgbWV0aG9kcy5cbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIGBBcnJheWAgbWV0aG9kcyBhcmU6XG4gICAgICogYGNvbmNhdGAsIGBqb2luYCwgYHBvcGAsIGBwdXNoYCwgYHNoaWZ0YCwgYHNvcnRgLCBgc3BsaWNlYCwgYW5kIGB1bnNoaWZ0YFxuICAgICAqXG4gICAgICogVGhlIHdyYXBwZXIgYFN0cmluZ2AgbWV0aG9kcyBhcmU6XG4gICAgICogYHJlcGxhY2VgIGFuZCBgc3BsaXRgXG4gICAgICpcbiAgICAgKiBUaGUgd3JhcHBlciBtZXRob2RzIHRoYXQgc3VwcG9ydCBzaG9ydGN1dCBmdXNpb24gYXJlOlxuICAgICAqIGBhdGAsIGBjb21wYWN0YCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCwgYGRyb3BXaGlsZWAsIGBmaWx0ZXJgLCBgZmluZGAsXG4gICAgICogYGZpbmRMYXN0YCwgYGhlYWRgLCBgaW5pdGlhbGAsIGBsYXN0YCwgYG1hcGAsIGByZWplY3RgLCBgcmV2ZXJzZWAsIGBzbGljZWAsXG4gICAgICogYHRhaWxgLCBgdGFrZWAsIGB0YWtlUmlnaHRgLCBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYW5kIGB0b0FycmF5YFxuICAgICAqXG4gICAgICogVGhlIGNoYWluYWJsZSB3cmFwcGVyIG1ldGhvZHMgYXJlOlxuICAgICAqIGBhZnRlcmAsIGBhcnlgLCBgYXNzaWduYCwgYGFzc2lnbkluYCwgYGFzc2lnbkluV2l0aGAsIGBhc3NpZ25XaXRoYCwgYGF0YCxcbiAgICAgKiBgYmVmb3JlYCwgYGJpbmRgLCBgYmluZEFsbGAsIGBiaW5kS2V5YCwgYGNhc3RBcnJheWAsIGBjaGFpbmAsIGBjaHVua2AsXG4gICAgICogYGNvbW1pdGAsIGBjb21wYWN0YCwgYGNvbmNhdGAsIGBjb25mb3Jtc2AsIGBjb25zdGFudGAsIGBjb3VudEJ5YCwgYGNyZWF0ZWAsXG4gICAgICogYGN1cnJ5YCwgYGRlYm91bmNlYCwgYGRlZmF1bHRzYCwgYGRlZmF1bHRzRGVlcGAsIGBkZWZlcmAsIGBkZWxheWAsXG4gICAgICogYGRpZmZlcmVuY2VgLCBgZGlmZmVyZW5jZUJ5YCwgYGRpZmZlcmVuY2VXaXRoYCwgYGRyb3BgLCBgZHJvcFJpZ2h0YCxcbiAgICAgKiBgZHJvcFJpZ2h0V2hpbGVgLCBgZHJvcFdoaWxlYCwgYGV4dGVuZGAsIGBleHRlbmRXaXRoYCwgYGZpbGxgLCBgZmlsdGVyYCxcbiAgICAgKiBgZmxhdE1hcGAsIGBmbGF0TWFwRGVlcGAsIGBmbGF0TWFwRGVwdGhgLCBgZmxhdHRlbmAsIGBmbGF0dGVuRGVlcGAsXG4gICAgICogYGZsYXR0ZW5EZXB0aGAsIGBmbGlwYCwgYGZsb3dgLCBgZmxvd1JpZ2h0YCwgYGZyb21QYWlyc2AsIGBmdW5jdGlvbnNgLFxuICAgICAqIGBmdW5jdGlvbnNJbmAsIGBncm91cEJ5YCwgYGluaXRpYWxgLCBgaW50ZXJzZWN0aW9uYCwgYGludGVyc2VjdGlvbkJ5YCxcbiAgICAgKiBgaW50ZXJzZWN0aW9uV2l0aGAsIGBpbnZlcnRgLCBgaW52ZXJ0QnlgLCBgaW52b2tlTWFwYCwgYGl0ZXJhdGVlYCwgYGtleUJ5YCxcbiAgICAgKiBga2V5c2AsIGBrZXlzSW5gLCBgbWFwYCwgYG1hcEtleXNgLCBgbWFwVmFsdWVzYCwgYG1hdGNoZXNgLCBgbWF0Y2hlc1Byb3BlcnR5YCxcbiAgICAgKiBgbWVtb2l6ZWAsIGBtZXJnZWAsIGBtZXJnZVdpdGhgLCBgbWV0aG9kYCwgYG1ldGhvZE9mYCwgYG1peGluYCwgYG5lZ2F0ZWAsXG4gICAgICogYG50aEFyZ2AsIGBvbWl0YCwgYG9taXRCeWAsIGBvbmNlYCwgYG9yZGVyQnlgLCBgb3ZlcmAsIGBvdmVyQXJnc2AsXG4gICAgICogYG92ZXJFdmVyeWAsIGBvdmVyU29tZWAsIGBwYXJ0aWFsYCwgYHBhcnRpYWxSaWdodGAsIGBwYXJ0aXRpb25gLCBgcGlja2AsXG4gICAgICogYHBpY2tCeWAsIGBwbGFudGAsIGBwcm9wZXJ0eWAsIGBwcm9wZXJ0eU9mYCwgYHB1bGxgLCBgcHVsbEFsbGAsIGBwdWxsQWxsQnlgLFxuICAgICAqIGBwdWxsQWxsV2l0aGAsIGBwdWxsQXRgLCBgcHVzaGAsIGByYW5nZWAsIGByYW5nZVJpZ2h0YCwgYHJlYXJnYCwgYHJlamVjdGAsXG4gICAgICogYHJlbW92ZWAsIGByZXN0YCwgYHJldmVyc2VgLCBgc2FtcGxlU2l6ZWAsIGBzZXRgLCBgc2V0V2l0aGAsIGBzaHVmZmxlYCxcbiAgICAgKiBgc2xpY2VgLCBgc29ydGAsIGBzb3J0QnlgLCBgc3BsaWNlYCwgYHNwcmVhZGAsIGB0YWlsYCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGFrZVJpZ2h0V2hpbGVgLCBgdGFrZVdoaWxlYCwgYHRhcGAsIGB0aHJvdHRsZWAsIGB0aHJ1YCwgYHRvQXJyYXlgLFxuICAgICAqIGB0b1BhaXJzYCwgYHRvUGFpcnNJbmAsIGB0b1BhdGhgLCBgdG9QbGFpbk9iamVjdGAsIGB0cmFuc2Zvcm1gLCBgdW5hcnlgLFxuICAgICAqIGB1bmlvbmAsIGB1bmlvbkJ5YCwgYHVuaW9uV2l0aGAsIGB1bmlxYCwgYHVuaXFCeWAsIGB1bmlxV2l0aGAsIGB1bnNldGAsXG4gICAgICogYHVuc2hpZnRgLCBgdW56aXBgLCBgdW56aXBXaXRoYCwgYHVwZGF0ZWAsIGB1cGRhdGVXaXRoYCwgYHZhbHVlc2AsXG4gICAgICogYHZhbHVlc0luYCwgYHdpdGhvdXRgLCBgd3JhcGAsIGB4b3JgLCBgeG9yQnlgLCBgeG9yV2l0aGAsIGB6aXBgLFxuICAgICAqIGB6aXBPYmplY3RgLCBgemlwT2JqZWN0RGVlcGAsIGFuZCBgemlwV2l0aGBcbiAgICAgKlxuICAgICAqIFRoZSB3cmFwcGVyIG1ldGhvZHMgdGhhdCBhcmUgKipub3QqKiBjaGFpbmFibGUgYnkgZGVmYXVsdCBhcmU6XG4gICAgICogYGFkZGAsIGBhdHRlbXB0YCwgYGNhbWVsQ2FzZWAsIGBjYXBpdGFsaXplYCwgYGNlaWxgLCBgY2xhbXBgLCBgY2xvbmVgLFxuICAgICAqIGBjbG9uZURlZXBgLCBgY2xvbmVEZWVwV2l0aGAsIGBjbG9uZVdpdGhgLCBgY29uZm9ybXNUb2AsIGBkZWJ1cnJgLFxuICAgICAqIGBkZWZhdWx0VG9gLCBgZGl2aWRlYCwgYGVhY2hgLCBgZWFjaFJpZ2h0YCwgYGVuZHNXaXRoYCwgYGVxYCwgYGVzY2FwZWAsXG4gICAgICogYGVzY2FwZVJlZ0V4cGAsIGBldmVyeWAsIGBmaW5kYCwgYGZpbmRJbmRleGAsIGBmaW5kS2V5YCwgYGZpbmRMYXN0YCxcbiAgICAgKiBgZmluZExhc3RJbmRleGAsIGBmaW5kTGFzdEtleWAsIGBmaXJzdGAsIGBmbG9vcmAsIGBmb3JFYWNoYCwgYGZvckVhY2hSaWdodGAsXG4gICAgICogYGZvckluYCwgYGZvckluUmlnaHRgLCBgZm9yT3duYCwgYGZvck93blJpZ2h0YCwgYGdldGAsIGBndGAsIGBndGVgLCBgaGFzYCxcbiAgICAgKiBgaGFzSW5gLCBgaGVhZGAsIGBpZGVudGl0eWAsIGBpbmNsdWRlc2AsIGBpbmRleE9mYCwgYGluUmFuZ2VgLCBgaW52b2tlYCxcbiAgICAgKiBgaXNBcmd1bWVudHNgLCBgaXNBcnJheWAsIGBpc0FycmF5QnVmZmVyYCwgYGlzQXJyYXlMaWtlYCwgYGlzQXJyYXlMaWtlT2JqZWN0YCxcbiAgICAgKiBgaXNCb29sZWFuYCwgYGlzQnVmZmVyYCwgYGlzRGF0ZWAsIGBpc0VsZW1lbnRgLCBgaXNFbXB0eWAsIGBpc0VxdWFsYCxcbiAgICAgKiBgaXNFcXVhbFdpdGhgLCBgaXNFcnJvcmAsIGBpc0Zpbml0ZWAsIGBpc0Z1bmN0aW9uYCwgYGlzSW50ZWdlcmAsIGBpc0xlbmd0aGAsXG4gICAgICogYGlzTWFwYCwgYGlzTWF0Y2hgLCBgaXNNYXRjaFdpdGhgLCBgaXNOYU5gLCBgaXNOYXRpdmVgLCBgaXNOaWxgLCBgaXNOdWxsYCxcbiAgICAgKiBgaXNOdW1iZXJgLCBgaXNPYmplY3RgLCBgaXNPYmplY3RMaWtlYCwgYGlzUGxhaW5PYmplY3RgLCBgaXNSZWdFeHBgLFxuICAgICAqIGBpc1NhZmVJbnRlZ2VyYCwgYGlzU2V0YCwgYGlzU3RyaW5nYCwgYGlzVW5kZWZpbmVkYCwgYGlzVHlwZWRBcnJheWAsXG4gICAgICogYGlzV2Vha01hcGAsIGBpc1dlYWtTZXRgLCBgam9pbmAsIGBrZWJhYkNhc2VgLCBgbGFzdGAsIGBsYXN0SW5kZXhPZmAsXG4gICAgICogYGxvd2VyQ2FzZWAsIGBsb3dlckZpcnN0YCwgYGx0YCwgYGx0ZWAsIGBtYXhgLCBgbWF4QnlgLCBgbWVhbmAsIGBtZWFuQnlgLFxuICAgICAqIGBtaW5gLCBgbWluQnlgLCBgbXVsdGlwbHlgLCBgbm9Db25mbGljdGAsIGBub29wYCwgYG5vd2AsIGBudGhgLCBgcGFkYCxcbiAgICAgKiBgcGFkRW5kYCwgYHBhZFN0YXJ0YCwgYHBhcnNlSW50YCwgYHBvcGAsIGByYW5kb21gLCBgcmVkdWNlYCwgYHJlZHVjZVJpZ2h0YCxcbiAgICAgKiBgcmVwZWF0YCwgYHJlc3VsdGAsIGByb3VuZGAsIGBydW5JbkNvbnRleHRgLCBgc2FtcGxlYCwgYHNoaWZ0YCwgYHNpemVgLFxuICAgICAqIGBzbmFrZUNhc2VgLCBgc29tZWAsIGBzb3J0ZWRJbmRleGAsIGBzb3J0ZWRJbmRleEJ5YCwgYHNvcnRlZExhc3RJbmRleGAsXG4gICAgICogYHNvcnRlZExhc3RJbmRleEJ5YCwgYHN0YXJ0Q2FzZWAsIGBzdGFydHNXaXRoYCwgYHN0dWJBcnJheWAsIGBzdHViRmFsc2VgLFxuICAgICAqIGBzdHViT2JqZWN0YCwgYHN0dWJTdHJpbmdgLCBgc3R1YlRydWVgLCBgc3VidHJhY3RgLCBgc3VtYCwgYHN1bUJ5YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdGltZXNgLCBgdG9GaW5pdGVgLCBgdG9JbnRlZ2VyYCwgYHRvSlNPTmAsIGB0b0xlbmd0aGAsXG4gICAgICogYHRvTG93ZXJgLCBgdG9OdW1iZXJgLCBgdG9TYWZlSW50ZWdlcmAsIGB0b1N0cmluZ2AsIGB0b1VwcGVyYCwgYHRyaW1gLFxuICAgICAqIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGB0cnVuY2F0ZWAsIGB1bmVzY2FwZWAsIGB1bmlxdWVJZGAsIGB1cHBlckNhc2VgLFxuICAgICAqIGB1cHBlckZpcnN0YCwgYHZhbHVlYCwgYW5kIGB3b3Jkc2BcbiAgICAgKlxuICAgICAqIEBuYW1lIF9cbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcCBpbiBhIGBsb2Rhc2hgIGluc3RhbmNlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMiwgM10pO1xuICAgICAqXG4gICAgICogLy8gUmV0dXJucyBhbiB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogd3JhcHBlZC5yZWR1Y2UoXy5hZGQpO1xuICAgICAqIC8vID0+IDZcbiAgICAgKlxuICAgICAqIC8vIFJldHVybnMgYSB3cmFwcGVkIHZhbHVlLlxuICAgICAqIHZhciBzcXVhcmVzID0gd3JhcHBlZC5tYXAoc3F1YXJlKTtcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShzcXVhcmVzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KHNxdWFyZXMudmFsdWUoKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxvZGFzaCh2YWx1ZSkge1xuICAgICAgaWYgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzQXJyYXkodmFsdWUpICYmICEodmFsdWUgaW5zdGFuY2VvZiBMYXp5V3JhcHBlcikpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTG9kYXNoV3JhcHBlcikge1xuICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ19fd3JhcHBlZF9fJykpIHtcbiAgICAgICAgICByZXR1cm4gd3JhcHBlckNsb25lKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gICAgICogcHJvcGVydGllcyB0byB0aGUgY3JlYXRlZCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBwcm90byBUaGUgb2JqZWN0IHRvIGluaGVyaXQgZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICAgICAqL1xuICAgIHZhciBiYXNlQ3JlYXRlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgICAgIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgICAgICBpZiAoIWlzT2JqZWN0KHByb3RvKSkge1xuICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob2JqZWN0Q3JlYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHByb3RvO1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICAgICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmdW5jdGlvbiB3aG9zZSBwcm90b3R5cGUgY2hhaW4gc2VxdWVuY2Ugd3JhcHBlcnMgaW5oZXJpdCBmcm9tLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlTG9kYXNoKCkge1xuICAgICAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBjb25zdHJ1Y3RvciBmb3IgY3JlYXRpbmcgYGxvZGFzaGAgd3JhcHBlciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2NoYWluQWxsXSBFbmFibGUgZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBMb2Rhc2hXcmFwcGVyKHZhbHVlLCBjaGFpbkFsbCkge1xuICAgICAgdGhpcy5fX3dyYXBwZWRfXyA9IHZhbHVlO1xuICAgICAgdGhpcy5fX2FjdGlvbnNfXyA9IFtdO1xuICAgICAgdGhpcy5fX2NoYWluX18gPSAhIWNoYWluQWxsO1xuICAgICAgdGhpcy5fX2luZGV4X18gPSAwO1xuICAgICAgdGhpcy5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzIHVzZWQgYnkgbG9kYXNoIGFyZSBsaWtlIHRob3NlIGluXG4gICAgICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gICAgICogZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKi9cbiAgICBsb2Rhc2gudGVtcGxhdGVTZXR0aW5ncyA9IHtcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnZXNjYXBlJzogcmVFc2NhcGUsXG5cbiAgICAgIC8qKlxuICAgICAgICogVXNlZCB0byBkZXRlY3QgY29kZSB0byBiZSBldmFsdWF0ZWQuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge1JlZ0V4cH1cbiAgICAgICAqL1xuICAgICAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGluamVjdC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgICAgICovXG4gICAgICAnaW50ZXJwb2xhdGUnOiByZUludGVycG9sYXRlLFxuXG4gICAgICAvKipcbiAgICAgICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICAgICAqXG4gICAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzXG4gICAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAgICovXG4gICAgICAndmFyaWFibGUnOiAnJyxcblxuICAgICAgLyoqXG4gICAgICAgKiBVc2VkIHRvIGltcG9ydCB2YXJpYWJsZXMgaW50byB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICAgKlxuICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAqL1xuICAgICAgJ2ltcG9ydHMnOiB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEEgcmVmZXJlbmNlIHRvIHRoZSBgbG9kYXNoYCBmdW5jdGlvbi5cbiAgICAgICAgICpcbiAgICAgICAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5ncy5pbXBvcnRzXG4gICAgICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgICAgICovXG4gICAgICAgICdfJzogbG9kYXNoXG4gICAgICB9XG4gICAgfTtcblxuICAgIC8vIEVuc3VyZSB3cmFwcGVycyBhcmUgaW5zdGFuY2VzIG9mIGBiYXNlTG9kYXNoYC5cbiAgICBsb2Rhc2gucHJvdG90eXBlID0gYmFzZUxvZGFzaC5wcm90b3R5cGU7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGxvZGFzaDtcblxuICAgIExvZGFzaFdyYXBwZXIucHJvdG90eXBlID0gYmFzZUNyZWF0ZShiYXNlTG9kYXNoLnByb3RvdHlwZSk7XG4gICAgTG9kYXNoV3JhcHBlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBMb2Rhc2hXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGxhenkgd3JhcHBlciBvYmplY3Qgd2hpY2ggd3JhcHMgYHZhbHVlYCB0byBlbmFibGUgbGF6eSBldmFsdWF0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExhenlXcmFwcGVyKHZhbHVlKSB7XG4gICAgICB0aGlzLl9fd3JhcHBlZF9fID0gdmFsdWU7XG4gICAgICB0aGlzLl9fYWN0aW9uc19fID0gW107XG4gICAgICB0aGlzLl9fZGlyX18gPSAxO1xuICAgICAgdGhpcy5fX2ZpbHRlcmVkX18gPSBmYWxzZTtcbiAgICAgIHRoaXMuX19pdGVyYXRlZXNfXyA9IFtdO1xuICAgICAgdGhpcy5fX3Rha2VDb3VudF9fID0gTUFYX0FSUkFZX0xFTkdUSDtcbiAgICAgIHRoaXMuX192aWV3c19fID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBsYXp5IHdyYXBwZXIgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBjbG9uZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5Q2xvbmUoKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMuX193cmFwcGVkX18pO1xuICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fID0gY29weUFycmF5KHRoaXMuX19hY3Rpb25zX18pO1xuICAgICAgcmVzdWx0Ll9fZGlyX18gPSB0aGlzLl9fZGlyX187XG4gICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdGhpcy5fX2ZpbHRlcmVkX187XG4gICAgICByZXN1bHQuX19pdGVyYXRlZXNfXyA9IGNvcHlBcnJheSh0aGlzLl9faXRlcmF0ZWVzX18pO1xuICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSB0aGlzLl9fdGFrZUNvdW50X187XG4gICAgICByZXN1bHQuX192aWV3c19fID0gY29weUFycmF5KHRoaXMuX192aWV3c19fKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV2ZXJzZXMgdGhlIGRpcmVjdGlvbiBvZiBsYXp5IGl0ZXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyByZXZlcnNlZCBgTGF6eVdyYXBwZXJgIG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsYXp5UmV2ZXJzZSgpIHtcbiAgICAgIGlmICh0aGlzLl9fZmlsdGVyZWRfXykge1xuICAgICAgICB2YXIgcmVzdWx0ID0gbmV3IExhenlXcmFwcGVyKHRoaXMpO1xuICAgICAgICByZXN1bHQuX19kaXJfXyA9IC0xO1xuICAgICAgICByZXN1bHQuX19maWx0ZXJlZF9fID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9fZGlyX18gKj0gLTE7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSB1bndyYXBwZWQgdmFsdWUgZnJvbSBpdHMgbGF6eSB3cmFwcGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSB2YWx1ZVxuICAgICAqIEBtZW1iZXJPZiBMYXp5V3JhcHBlclxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bndyYXBwZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGF6eVZhbHVlKCkge1xuICAgICAgdmFyIGFycmF5ID0gdGhpcy5fX3dyYXBwZWRfXy52YWx1ZSgpLFxuICAgICAgICAgIGRpciA9IHRoaXMuX19kaXJfXyxcbiAgICAgICAgICBpc0FyciA9IGlzQXJyYXkoYXJyYXkpLFxuICAgICAgICAgIGlzUmlnaHQgPSBkaXIgPCAwLFxuICAgICAgICAgIGFyckxlbmd0aCA9IGlzQXJyID8gYXJyYXkubGVuZ3RoIDogMCxcbiAgICAgICAgICB2aWV3ID0gZ2V0VmlldygwLCBhcnJMZW5ndGgsIHRoaXMuX192aWV3c19fKSxcbiAgICAgICAgICBzdGFydCA9IHZpZXcuc3RhcnQsXG4gICAgICAgICAgZW5kID0gdmlldy5lbmQsXG4gICAgICAgICAgbGVuZ3RoID0gZW5kIC0gc3RhcnQsXG4gICAgICAgICAgaW5kZXggPSBpc1JpZ2h0ID8gZW5kIDogKHN0YXJ0IC0gMSksXG4gICAgICAgICAgaXRlcmF0ZWVzID0gdGhpcy5fX2l0ZXJhdGVlc19fLFxuICAgICAgICAgIGl0ZXJMZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICB0YWtlQ291bnQgPSBuYXRpdmVNaW4obGVuZ3RoLCB0aGlzLl9fdGFrZUNvdW50X18pO1xuXG4gICAgICBpZiAoIWlzQXJyIHx8ICghaXNSaWdodCAmJiBhcnJMZW5ndGggPT0gbGVuZ3RoICYmIHRha2VDb3VudCA9PSBsZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKGFycmF5LCB0aGlzLl9fYWN0aW9uc19fKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBbXTtcblxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAobGVuZ3RoLS0gJiYgcmVzSW5kZXggPCB0YWtlQ291bnQpIHtcbiAgICAgICAgaW5kZXggKz0gZGlyO1xuXG4gICAgICAgIHZhciBpdGVySW5kZXggPSAtMSxcbiAgICAgICAgICAgIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuXG4gICAgICAgIHdoaWxlICgrK2l0ZXJJbmRleCA8IGl0ZXJMZW5ndGgpIHtcbiAgICAgICAgICB2YXIgZGF0YSA9IGl0ZXJhdGVlc1tpdGVySW5kZXhdLFxuICAgICAgICAgICAgICBpdGVyYXRlZSA9IGRhdGEuaXRlcmF0ZWUsXG4gICAgICAgICAgICAgIHR5cGUgPSBkYXRhLnR5cGUsXG4gICAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9NQVBfRkxBRykge1xuICAgICAgICAgICAgdmFsdWUgPSBjb21wdXRlZDtcbiAgICAgICAgICB9IGVsc2UgaWYgKCFjb21wdXRlZCkge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRykge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIGBMYXp5V3JhcHBlcmAgaXMgYW4gaW5zdGFuY2Ugb2YgYGJhc2VMb2Rhc2hgLlxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZSA9IGJhc2VDcmVhdGUoYmFzZUxvZGFzaC5wcm90b3R5cGUpO1xuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IExhenlXcmFwcGVyO1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICAgICAgdGhpcy5jbGVhcigpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgSGFzaFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgICAgIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgICAgIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBIYXNoXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gICAgICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICAgICAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG4gICAgSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG4gICAgSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbiAgICBIYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuICAgIEhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG4gICAgSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgICAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxpc3RDYWNoZUNsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICAgICAgdGhpcy5zaXplID0gMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICAgICAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgICAgICBkYXRhLnBvcCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICAgICAgfVxuICAgICAgLS10aGlzLnNpemU7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZ2V0XG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICAgICAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIExpc3RDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgKyt0aGlzLnNpemU7XG4gICAgICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuICAgIExpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbiAgICBMaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLmNsZWFyKCk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICAgICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGNsZWFyXG4gICAgICogQG1lbWJlck9mIE1hcENhY2hlXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgICAgIHRoaXMuc2l6ZSA9IDA7XG4gICAgICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAgICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGRlbGV0ZVxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgICAgIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gICAgICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGdldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIGhhc1xuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgICAgIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBuYW1lIHNldFxuICAgICAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbiAgICBNYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG4gICAgTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuICAgIE1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbiAgICBNYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gICAgICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBgdmFsdWVgIHRvIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgYWRkXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQGFsaWFzIHB1c2hcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjYWNoZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRDYWNoZUFkZCh2YWx1ZSkge1xuICAgICAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGluIHRoZSBhcnJheSBjYWNoZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgaGFzXG4gICAgICogQG1lbWJlck9mIFNldENhY2hlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcbiAgICBTZXRDYWNoZS5wcm90b3R5cGUuaGFzID0gc2V0Q2FjaGVIYXM7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgY2xlYXJcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGU7XG4gICAgICB0aGlzLnNpemUgPSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBzdGFjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQG5hbWUgZGVsZXRlXG4gICAgICogQG1lbWJlck9mIFN0YWNrXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBnZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tHZXQoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBoYXNcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAbmFtZSBzZXRcbiAgICAgKiBAbWVtYmVyT2YgU3RhY2tcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICAgICAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICAgICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICAgICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gICAgICB9XG4gICAgICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgICAgIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG4gICAgU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcbiAgICBTdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG4gICAgU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuICAgIFN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcbiAgICBTdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5oZXJpdGVkIFNwZWNpZnkgcmV0dXJuaW5nIGluaGVyaXRlZCBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5TGlrZUtleXModmFsdWUsIGluaGVyaXRlZCkge1xuICAgICAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiAhaXNBcmcgJiYgaXNCdWZmZXIodmFsdWUpLFxuICAgICAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgICAgICByZXN1bHQgPSBza2lwSW5kZXhlcyA/IGJhc2VUaW1lcyh2YWx1ZS5sZW5ndGgsIFN0cmluZykgOiBbXSxcbiAgICAgICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgICAgaWYgKChpbmhlcml0ZWQgfHwgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkgJiZcbiAgICAgICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICAgICAga2V5ID09ICdsZW5ndGgnIHx8XG4gICAgICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAgICAgLy8gUGhhbnRvbUpTIDIgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gdHlwZWQgYXJyYXlzLlxuICAgICAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgICBpc0luZGV4KGtleSwgbGVuZ3RoKVxuICAgICAgICAgICAgKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVgIGZvciBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlKGFycmF5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGFycmF5W2Jhc2VSYW5kb20oMCwgbGVuZ3RoIC0gMSldIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zYW1wbGVTaXplYCBmb3IgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2FtcGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFycmF5U2FtcGxlU2l6ZShhcnJheSwgbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGNvcHlBcnJheShhcnJheSksIGJhc2VDbGFtcChuLCAwLCBhcnJheS5sZW5ndGgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgZm9yIGFycmF5cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYXJyYXlTaHVmZmxlKGFycmF5KSB7XG4gICAgICByZXR1cm4gc2h1ZmZsZVNlbGYoY29weUFycmF5KGFycmF5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAgICAgKiBgdW5kZWZpbmVkYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gICAgICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAgICAgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkpIHtcbiAgICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldO1xuICAgICAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICAgICAgcmV0dXJuIGxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFnZ3JlZ2F0ZXMgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIG9uIGBhY2N1bXVsYXRvcmAgd2l0aCBrZXlzIHRyYW5zZm9ybWVkXG4gICAgICogYnkgYGl0ZXJhdGVlYCBhbmQgdmFsdWVzIHNldCBieSBgc2V0dGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0ga2V5cy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gYWNjdW11bGF0b3IgVGhlIGluaXRpYWwgYWdncmVnYXRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFnZ3JlZ2F0b3IoY29sbGVjdGlvbiwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaXRlcmF0ZWUodmFsdWUpLCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gICAgICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICAgICAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnbkluKG9iamVjdCwgc291cmNlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYXNzaWduVmFsdWVgIGFuZCBgYXNzaWduTWVyZ2VWYWx1ZWAgd2l0aG91dFxuICAgICAqIHZhbHVlIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJyAmJiBkZWZpbmVQcm9wZXJ0eSkge1xuICAgICAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAgICdlbnVtZXJhYmxlJzogdHJ1ZSxcbiAgICAgICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5hdGAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIGVsZW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VBdChvYmplY3QsIHBhdGhzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRocy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKSxcbiAgICAgICAgICBza2lwID0gb2JqZWN0ID09IG51bGw7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFtpbmRleF0gPSBza2lwID8gdW5kZWZpbmVkIDogZ2V0KG9iamVjdCwgcGF0aHNbaW5kZXhdKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xhbXBgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG51bWJlciBUaGUgbnVtYmVyIHRvIGNsYW1wLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbG93ZXJdIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNsYW1wZWQgbnVtYmVyLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKG51bWJlciA9PT0gbnVtYmVyKSB7XG4gICAgICAgIGlmICh1cHBlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgbnVtYmVyID0gbnVtYmVyIDw9IHVwcGVyID8gbnVtYmVyIDogdXBwZXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvd2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBudW1iZXIgPSBudW1iZXIgPj0gbG93ZXIgPyBudW1iZXIgOiBsb3dlcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG51bWJlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jbG9uZWAgYW5kIGBfLmNsb25lRGVlcGAgd2hpY2ggdHJhY2tzXG4gICAgICogdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIERlZXAgY2xvbmVcbiAgICAgKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAgICAgKiAgNCAtIENsb25lIHN5bWJvbHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjbG9uaW5nLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGFuZCB0aGVpciBjbG9uZSBjb3VudGVycGFydHMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ2xvbmUodmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgb2JqZWN0LCBzdGFjaykge1xuICAgICAgdmFyIHJlc3VsdCxcbiAgICAgICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgICAgIGlzRmxhdCA9IGJpdG1hc2sgJiBDTE9ORV9GTEFUX0ZMQUcsXG4gICAgICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgcmVzdWx0ID0gb2JqZWN0ID8gY3VzdG9taXplcih2YWx1ZSwga2V5LCBvYmplY3QsIHN0YWNrKSA6IGN1c3RvbWl6ZXIodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgICAgIGlmIChpc0Fycikge1xuICAgICAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgICAgIGlmICghaXNEZWVwKSB7XG4gICAgICAgICAgcmV0dXJuIGNvcHlBcnJheSh2YWx1ZSwgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyh2YWx1ZSksXG4gICAgICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gY2xvbmVCdWZmZXIodmFsdWUsIGlzRGVlcCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdCA9IChpc0ZsYXQgfHwgaXNGdW5jKSA/IHt9IDogaW5pdENsb25lT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgICAgICA/IGNvcHlTeW1ib2xzSW4odmFsdWUsIGJhc2VBc3NpZ25JbihyZXN1bHQsIHZhbHVlKSlcbiAgICAgICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldCh2YWx1ZSk7XG4gICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gc3RhY2tlZDtcbiAgICAgIH1cbiAgICAgIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICAgICAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlKSB7XG4gICAgICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzTWFwKHZhbHVlKSkge1xuICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgICAgID8gKGlzRmxhdCA/IGdldEFsbEtleXNJbiA6IGdldEFsbEtleXMpXG4gICAgICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gICAgICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgICAgIGFycmF5RWFjaChwcm9wcyB8fCB2YWx1ZSwgZnVuY3Rpb24oc3ViVmFsdWUsIGtleSkge1xuICAgICAgICBpZiAocHJvcHMpIHtcbiAgICAgICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgICAgICBzdWJWYWx1ZSA9IHZhbHVlW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgYXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGJhc2VDbG9uZShzdWJWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCB2YWx1ZSwgc3RhY2spKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jb25mb3Jtc2Agd2hpY2ggZG9lc24ndCBjbG9uZSBgc291cmNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VDb25mb3Jtcyhzb3VyY2UpIHtcbiAgICAgIHZhciBwcm9wcyA9IGtleXMoc291cmNlKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VDb25mb3Jtc1RvKG9iamVjdCwgc291cmNlLCBwcm9wcyk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNvbmZvcm1zVG9gIHdoaWNoIGFjY2VwdHMgYHByb3BzYCB0byBjaGVjay5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHByZWRpY2F0ZXMgdG8gY29uZm9ybSB0by5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgY29uZm9ybXMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwgcHJvcHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG4gICAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuICFsZW5ndGg7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICB2YXIga2V5ID0gcHJvcHNbbGVuZ3RoXSxcbiAgICAgICAgICAgIHByZWRpY2F0ZSA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICBpZiAoKHZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkgfHwgIXByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmRlbGF5YCBhbmQgYF8uZGVmZXJgIHdoaWNoIGFjY2VwdHMgYGFyZ3NgXG4gICAgICogdG8gcHJvdmlkZSB0byBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3YWl0IFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5IGludm9jYXRpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJncyBUaGUgYXJndW1lbnRzIHRvIHByb3ZpZGUgdG8gYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ8T2JqZWN0fSBSZXR1cm5zIHRoZSB0aW1lciBpZCBvciB0aW1lb3V0IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRGVsYXkoZnVuYywgd2FpdCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7IGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTsgfSwgd2FpdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLmRpZmZlcmVuY2VgIHdpdGhvdXQgc3VwcG9ydFxuICAgICAqIGZvciBleGNsdWRpbmcgbXVsdGlwbGUgYXJyYXlzIG9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlcyxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IFtdLFxuICAgICAgICAgIHZhbHVlc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG5cbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFsdWVzID0gYXJyYXlNYXAodmFsdWVzLCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb21wYXJhdG9yKSB7XG4gICAgICAgIGluY2x1ZGVzID0gYXJyYXlJbmNsdWRlc1dpdGg7XG4gICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh2YWx1ZXMubGVuZ3RoID49IExBUkdFX0FSUkFZX1NJWkUpIHtcbiAgICAgICAgaW5jbHVkZXMgPSBjYWNoZUhhcztcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgdmFsdWVzID0gbmV3IFNldENhY2hlKHZhbHVlcyk7XG4gICAgICB9XG4gICAgICBvdXRlcjpcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPT0gbnVsbCA/IHZhbHVlIDogaXRlcmF0ZWUodmFsdWUpO1xuXG4gICAgICAgIHZhbHVlID0gKGNvbXBhcmF0b3IgfHwgdmFsdWUgIT09IDApID8gdmFsdWUgOiAwO1xuICAgICAgICBpZiAoaXNDb21tb24gJiYgY29tcHV0ZWQgPT09IGNvbXB1dGVkKSB7XG4gICAgICAgICAgdmFyIHZhbHVlc0luZGV4ID0gdmFsdWVzTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICh2YWx1ZXNJbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAodmFsdWVzW3ZhbHVlc0luZGV4XSA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICAgICAgY29udGludWUgb3V0ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghaW5jbHVkZXModmFsdWVzLCBjb21wdXRlZCwgY29tcGFyYXRvcikpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2ggPSBjcmVhdGVCYXNlRWFjaChiYXNlRm9yT3duKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvckVhY2hSaWdodGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUVhY2hSaWdodCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd25SaWdodCwgdHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5ldmVyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFdmVyeShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKSB7XG4gICAgICAgIHJlc3VsdCA9ICEhcHJlZGljYXRlKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbik7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgbWV0aG9kcyBsaWtlIGBfLm1heGAgYW5kIGBfLm1pbmAgd2hpY2ggYWNjZXB0cyBhXG4gICAgICogYGNvbXBhcmF0b3JgIHRvIGRldGVybWluZSB0aGUgZXh0cmVtdW0gdmFsdWUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjb21wYXJhdG9yIFRoZSBjb21wYXJhdG9yIHVzZWQgdG8gY29tcGFyZSB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGV4dHJlbXVtIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VFeHRyZW11bShhcnJheSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY3VycmVudCA9IGl0ZXJhdGVlKHZhbHVlKTtcblxuICAgICAgICBpZiAoY3VycmVudCAhPSBudWxsICYmIChjb21wdXRlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgID8gKGN1cnJlbnQgPT09IGN1cnJlbnQgJiYgIWlzU3ltYm9sKGN1cnJlbnQpKVxuICAgICAgICAgICAgICA6IGNvbXBhcmF0b3IoY3VycmVudCwgY29tcHV0ZWQpXG4gICAgICAgICAgICApKSB7XG4gICAgICAgICAgdmFyIGNvbXB1dGVkID0gY3VycmVudCxcbiAgICAgICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmlsbGAgd2l0aG91dCBhbiBpdGVyYXRlZSBjYWxsIGd1YXJkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmlsbC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBmaWxsIGBhcnJheWAgd2l0aC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBwb3NpdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuXG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gICAgICB9XG4gICAgICBlbmQgPSAoZW5kID09PSB1bmRlZmluZWQgfHwgZW5kID4gbGVuZ3RoKSA/IGxlbmd0aCA6IHRvSW50ZWdlcihlbmQpO1xuICAgICAgaWYgKGVuZCA8IDApIHtcbiAgICAgICAgZW5kICs9IGxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGVuZCA9IHN0YXJ0ID4gZW5kID8gMCA6IHRvTGVuZ3RoKGVuZCk7XG4gICAgICB3aGlsZSAoc3RhcnQgPCBlbmQpIHtcbiAgICAgICAgYXJyYXlbc3RhcnQrK10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5maWx0ZXJgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGaWx0ZXIoY29sbGVjdGlvbiwgcHJlZGljYXRlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZmxhdHRlbmAgd2l0aCBzdXBwb3J0IGZvciByZXN0cmljdGluZyBmbGF0dGVuaW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGVwdGggVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3ByZWRpY2F0ZT1pc0ZsYXR0ZW5hYmxlXSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzU3RyaWN0XSBSZXN0cmljdCB0byB2YWx1ZXMgdGhhdCBwYXNzIGBwcmVkaWNhdGVgIGNoZWNrcy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcmVzdWx0PVtdXSBUaGUgaW5pdGlhbCByZXN1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSB8fCAocHJlZGljYXRlID0gaXNGbGF0dGVuYWJsZSk7XG4gICAgICByZXN1bHQgfHwgKHJlc3VsdCA9IFtdKTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdO1xuICAgICAgICBpZiAoZGVwdGggPiAwICYmIHByZWRpY2F0ZSh2YWx1ZSkpIHtcbiAgICAgICAgICBpZiAoZGVwdGggPiAxKSB7XG4gICAgICAgICAgICAvLyBSZWN1cnNpdmVseSBmbGF0dGVuIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgICAgYmFzZUZsYXR0ZW4odmFsdWUsIGRlcHRoIC0gMSwgcHJlZGljYXRlLCBpc1N0cmljdCwgcmVzdWx0KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYXJyYXlQdXNoKHJlc3VsdCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghaXNTdHJpY3QpIHtcbiAgICAgICAgICByZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgYmFzZUZvck93bmAgd2hpY2ggaXRlcmF0ZXMgb3ZlciBgb2JqZWN0YFxuICAgICAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZSBgYmFzZUZvcmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzXG4gICAgICogaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIHZhciBiYXNlRm9yUmlnaHQgPSBjcmVhdGVCYXNlRm9yKHRydWUpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmZvck93blJpZ2h0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JSaWdodChvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mdW5jdGlvbnNgIHdoaWNoIGNyZWF0ZXMgYW4gYXJyYXkgb2ZcbiAgICAgKiBgb2JqZWN0YCBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmaWx0ZXJlZCBmcm9tIGBwcm9wc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBmaWx0ZXIuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlRnVuY3Rpb25zKG9iamVjdCwgcHJvcHMpIHtcbiAgICAgIHJldHVybiBhcnJheUZpbHRlcihwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iamVjdFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmdldGAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWZhdWx0IHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICAgICAgdmFyIGluZGV4ID0gMCxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFt0b0tleShwYXRoW2luZGV4KytdKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gICAgICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgICAgIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0VGFnYCB3aXRob3V0IGZhbGxiYWNrcyBmb3IgYnVnZ3kgZW52aXJvbm1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHZXRUYWcodmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgICAgIH1cbiAgICAgIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICAgICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgICAgIDogb2JqZWN0VG9TdHJpbmcodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmd0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VHdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA+IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXMob2JqZWN0LCBrZXkpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5oYXNJbmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pblJhbmdlYCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgbnVtYmVyYCBpcyBpbiB0aGUgcmFuZ2UsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSW5SYW5nZShudW1iZXIsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHJldHVybiBudW1iZXIgPj0gbmF0aXZlTWluKHN0YXJ0LCBlbmQpICYmIG51bWJlciA8IG5hdGl2ZU1heChzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCwgd2l0aG91dCBzdXBwb3J0XG4gICAgICogZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHNoYXJlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludGVyc2VjdGlvbihhcnJheXMsIGl0ZXJhdGVlLCBjb21wYXJhdG9yKSB7XG4gICAgICB2YXIgaW5jbHVkZXMgPSBjb21wYXJhdG9yID8gYXJyYXlJbmNsdWRlc1dpdGggOiBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5c1swXS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gYXJyYXlzLmxlbmd0aCxcbiAgICAgICAgICBvdGhJbmRleCA9IG90aExlbmd0aCxcbiAgICAgICAgICBjYWNoZXMgPSBBcnJheShvdGhMZW5ndGgpLFxuICAgICAgICAgIG1heExlbmd0aCA9IEluZmluaXR5LFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAob3RoSW5kZXgtLSkge1xuICAgICAgICB2YXIgYXJyYXkgPSBhcnJheXNbb3RoSW5kZXhdO1xuICAgICAgICBpZiAob3RoSW5kZXggJiYgaXRlcmF0ZWUpIHtcbiAgICAgICAgICBhcnJheSA9IGFycmF5TWFwKGFycmF5LCBiYXNlVW5hcnkoaXRlcmF0ZWUpKTtcbiAgICAgICAgfVxuICAgICAgICBtYXhMZW5ndGggPSBuYXRpdmVNaW4oYXJyYXkubGVuZ3RoLCBtYXhMZW5ndGgpO1xuICAgICAgICBjYWNoZXNbb3RoSW5kZXhdID0gIWNvbXBhcmF0b3IgJiYgKGl0ZXJhdGVlIHx8IChsZW5ndGggPj0gMTIwICYmIGFycmF5Lmxlbmd0aCA+PSAxMjApKVxuICAgICAgICAgID8gbmV3IFNldENhY2hlKG90aEluZGV4ICYmIGFycmF5KVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJyYXkgPSBhcnJheXNbMF07XG5cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHNlZW4gPSBjYWNoZXNbMF07XG5cbiAgICAgIG91dGVyOlxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGggJiYgcmVzdWx0Lmxlbmd0aCA8IG1heExlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmICghKHNlZW5cbiAgICAgICAgICAgICAgPyBjYWNoZUhhcyhzZWVuLCBjb21wdXRlZClcbiAgICAgICAgICAgICAgOiBpbmNsdWRlcyhyZXN1bHQsIGNvbXB1dGVkLCBjb21wYXJhdG9yKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIG90aEluZGV4ID0gb3RoTGVuZ3RoO1xuICAgICAgICAgIHdoaWxlICgtLW90aEluZGV4KSB7XG4gICAgICAgICAgICB2YXIgY2FjaGUgPSBjYWNoZXNbb3RoSW5kZXhdO1xuICAgICAgICAgICAgaWYgKCEoY2FjaGVcbiAgICAgICAgICAgICAgICAgID8gY2FjaGVIYXMoY2FjaGUsIGNvbXB1dGVkKVxuICAgICAgICAgICAgICAgICAgOiBpbmNsdWRlcyhhcnJheXNbb3RoSW5kZXhdLCBjb21wdXRlZCwgY29tcGFyYXRvcikpXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgIGNvbnRpbnVlIG91dGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgICAgc2Vlbi5wdXNoKGNvbXB1dGVkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludmVydGAgYW5kIGBfLmludmVydEJ5YCB3aGljaCBpbnZlcnRzXG4gICAgICogYG9iamVjdGAgd2l0aCB2YWx1ZXMgdHJhbnNmb3JtZWQgYnkgYGl0ZXJhdGVlYCBhbmQgc2V0IGJ5IGBzZXR0ZXJgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHNldHRlciBUaGUgZnVuY3Rpb24gdG8gc2V0IGBhY2N1bXVsYXRvcmAgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSB0byB0cmFuc2Zvcm0gdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBhY2N1bXVsYXRvciBUaGUgaW5pdGlhbCBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBhY2N1bXVsYXRvcmAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUludmVydGVyKG9iamVjdCwgc2V0dGVyLCBpdGVyYXRlZSwgYWNjdW11bGF0b3IpIHtcbiAgICAgIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgICAgc2V0dGVyKGFjY3VtdWxhdG9yLCBpdGVyYXRlZSh2YWx1ZSksIGtleSwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmludm9rZWAgd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogbWV0aG9kIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgdGhlIG1ldGhvZCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJbnZva2Uob2JqZWN0LCBwYXRoLCBhcmdzKSB7XG4gICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgIG9iamVjdCA9IHBhcmVudChvYmplY3QsIHBhdGgpO1xuICAgICAgdmFyIGZ1bmMgPSBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IG9iamVjdFt0b0tleShsYXN0KHBhdGgpKV07XG4gICAgICByZXR1cm4gZnVuYyA9PSBudWxsID8gdW5kZWZpbmVkIDogYXBwbHkoZnVuYywgb2JqZWN0LCBhcmdzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcnJheUJ1ZmZlcmAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5IGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0FycmF5QnVmZmVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcnJheUJ1ZmZlclRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0RhdGVgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGRhdGUgb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRGF0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gZGF0ZVRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gICAgICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAgICAgKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gICAgICogIDIgLSBQYXJ0aWFsIGNvbXBhcmlzb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIGlmICh2YWx1ZSA9PT0gb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCBvdGhlciA9PSBudWxsIHx8ICghaXNPYmplY3RMaWtlKHZhbHVlKSAmJiAhaXNPYmplY3RMaWtlKG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWxEZWVwKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgYmFzZUlzRXF1YWwsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsYCBmb3IgYXJyYXlzIGFuZCBvYmplY3RzIHdoaWNoIHBlcmZvcm1zXG4gICAgICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICAgICAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgICAgIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgICAgICBvdGhJc0FyciA9IGlzQXJyYXkob3RoZXIpLFxuICAgICAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICAgICAgb2JqVGFnID0gb2JqVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvYmpUYWc7XG4gICAgICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICAgICAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgICAgICBvdGhJc09iaiA9IG90aFRhZyA9PSBvYmplY3RUYWcsXG4gICAgICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICAgICAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgICAgIGlmICghaXNCdWZmZXIob3RoZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIG9iaklzQXJyID0gdHJ1ZTtcbiAgICAgICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1NhbWVUYWcgJiYgIW9iaklzT2JqKSB7XG4gICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICAgICAgPyBlcXVhbEFycmF5cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKVxuICAgICAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgfVxuICAgICAgaWYgKCEoYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHKSkge1xuICAgICAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICAgICAgaWYgKG9iaklzV3JhcHBlZCB8fCBvdGhJc1dyYXBwZWQpIHtcbiAgICAgICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoIWlzU2FtZVRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hcGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzTWFwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtBcnJheX0gbWF0Y2hEYXRhIFRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyB0byBtYXRjaC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICAgICAgbGVuZ3RoID0gaW5kZXgsXG4gICAgICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gIWxlbmd0aDtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgICAgICA/IGRhdGFbMV0gIT09IG9iamVjdFtkYXRhWzBdXVxuICAgICAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgICAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgICAgIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICAgICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICAgICAgaWYgKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgIShrZXkgaW4gb2JqZWN0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgID8gYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcsIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgICAgICkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlSXNOYXRpdmUodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1JlZ0V4cGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcmVnZXhwLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUlzUmVnRXhwKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSByZWdleHBUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNTZXRgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1NldCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmXG4gICAgICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAgICAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgICAgIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICAgICAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBuYXRpdmVLZXlzKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICBmb3IgKHZhciBrZXkgaW4gT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgICAgIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gICAgICB9XG4gICAgICB2YXIgaXNQcm90byA9IGlzUHJvdG90eXBlKG9iamVjdCksXG4gICAgICAgICAgcmVzdWx0ID0gW107XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgaWYgKCEoa2V5ID09ICdjb25zdHJ1Y3RvcicgJiYgKGlzUHJvdG8gfHwgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmx0YCB3aGljaCBkb2Vzbid0IGNvZXJjZSBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VMdCh2YWx1ZSwgb3RoZXIpIHtcbiAgICAgIHJldHVybiB2YWx1ZSA8IG90aGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUsIGtleSwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHRbKytpbmRleF0gPSBpdGVyYXRlZSh2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gICAgICB2YXIgbWF0Y2hEYXRhID0gZ2V0TWF0Y2hEYXRhKHNvdXJjZSk7XG4gICAgICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgICAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgaWYgKGlzS2V5KHBhdGgpICYmIGlzU3RyaWN0Q29tcGFyYWJsZShzcmNWYWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgICAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgICAgID8gaGFzSW4ob2JqZWN0LCBwYXRoKVxuICAgICAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKSB7XG4gICAgICBpZiAob2JqZWN0ID09PSBzb3VyY2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgYmFzZUZvcihzb3VyY2UsIGZ1bmN0aW9uKHNyY1ZhbHVlLCBrZXkpIHtcbiAgICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSwga2V5c0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VNZXJnZWAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICAgICAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gICAgICogcmVmZXJlbmNlcyB0byBiZSBtZXJnZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXJnZUZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1lcmdlIHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBzb3VyY2UgdmFsdWVzIGFuZCB0aGVpciBtZXJnZWRcbiAgICAgKiAgY291bnRlcnBhcnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIG1lcmdlRnVuYywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgICAgIHZhciBvYmpWYWx1ZSA9IHNhZmVHZXQob2JqZWN0LCBrZXkpLFxuICAgICAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICAgICAgc3RhY2tlZCA9IHN0YWNrLmdldChzcmNWYWx1ZSk7XG5cbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChpc0NvbW1vbikge1xuICAgICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KHNyY1ZhbHVlKSxcbiAgICAgICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgICAgICBpc1R5cGVkID0gIWlzQXJyICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHNyY1ZhbHVlKTtcblxuICAgICAgICBuZXdWYWx1ZSA9IHNyY1ZhbHVlO1xuICAgICAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgICAgICBpZiAoaXNBcnJheShvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gb2JqVmFsdWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KG9ialZhbHVlKSkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBjb3B5QXJyYXkob2JqVmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIGlmIChpc0J1ZmYpIHtcbiAgICAgICAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoaXNUeXBlZCkge1xuICAgICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2xvbmVUeXBlZEFycmF5KHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IFtdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHNyY1ZhbHVlKSB8fCBpc0FyZ3VtZW50cyhzcmNWYWx1ZSkpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdG9QbGFpbk9iamVjdChvYmpWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gaW5pdENsb25lT2JqZWN0KHNyY1ZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzQ29tbW9uKSB7XG4gICAgICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBzdGFjay5zZXQoc3JjVmFsdWUsIG5ld1ZhbHVlKTtcbiAgICAgICAgbWVyZ2VGdW5jKG5ld1ZhbHVlLCBzcmNWYWx1ZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5udGhgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBpbmRleCBvZiB0aGUgZWxlbWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG50aCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZU50aChhcnJheSwgbikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIG4gKz0gbiA8IDAgPyBsZW5ndGggOiAwO1xuICAgICAgcmV0dXJuIGlzSW5kZXgobiwgbGVuZ3RoKSA/IGFycmF5W25dIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBpdGVyYXRlZXMgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IG9yZGVycyBUaGUgc29ydCBvcmRlcnMgb2YgYGl0ZXJhdGVlc2AuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzKSB7XG4gICAgICBpZiAoaXRlcmF0ZWVzLmxlbmd0aCkge1xuICAgICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgaWYgKGlzQXJyYXkoaXRlcmF0ZWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2VHZXQodmFsdWUsIGl0ZXJhdGVlLmxlbmd0aCA9PT0gMSA/IGl0ZXJhdGVlWzBdIDogaXRlcmF0ZWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gaXRlcmF0ZWU7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gW2lkZW50aXR5XTtcbiAgICAgIH1cblxuICAgICAgdmFyIGluZGV4ID0gLTE7XG4gICAgICBpdGVyYXRlZXMgPSBhcnJheU1hcChpdGVyYXRlZXMsIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciByZXN1bHQgPSBiYXNlTWFwKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBrZXksIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgdmFyIGNyaXRlcmlhID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgICAgIHJldHVybiBpdGVyYXRlZSh2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVNvcnRCeShyZXN1bHQsIGZ1bmN0aW9uKG9iamVjdCwgb3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucGlja2Agd2l0aG91dCBzdXBwb3J0IGZvciBpbmRpdmlkdWFsXG4gICAgICogcHJvcGVydHkgaWRlbnRpZmllcnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGF0aHMgVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUGljayhvYmplY3QsIHBhdGhzKSB7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gaGFzSW4ob2JqZWN0LCBwYXRoKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mICBgXy5waWNrQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBwYXRocyBUaGUgcHJvcGVydHkgcGF0aHMgdG8gcGljay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVBpY2tCeShvYmplY3QsIHBhdGhzLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSB7fTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHBhdGggPSBwYXRoc1tpbmRleF0sXG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcblxuICAgICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBwYXRoKSkge1xuICAgICAgICAgIGJhc2VTZXQocmVzdWx0LCBjYXN0UGF0aChwYXRoLCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnB1bGxBbGxCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICAgICAqIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBpbmRleE9mID0gY29tcGFyYXRvciA/IGJhc2VJbmRleE9mV2l0aCA6IGJhc2VJbmRleE9mLFxuICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgICAgICBzZWVuID0gYXJyYXk7XG5cbiAgICAgIGlmIChhcnJheSA9PT0gdmFsdWVzKSB7XG4gICAgICAgIHZhbHVlcyA9IGNvcHlBcnJheSh2YWx1ZXMpO1xuICAgICAgfVxuICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgIHNlZW4gPSBhcnJheU1hcChhcnJheSwgYmFzZVVuYXJ5KGl0ZXJhdGVlKSk7XG4gICAgICB9XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZnJvbUluZGV4ID0gMCxcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWVzW2luZGV4XSxcbiAgICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSkgOiB2YWx1ZTtcblxuICAgICAgICB3aGlsZSAoKGZyb21JbmRleCA9IGluZGV4T2Yoc2VlbiwgY29tcHV0ZWQsIGZyb21JbmRleCwgY29tcGFyYXRvcikpID4gLTEpIHtcbiAgICAgICAgICBpZiAoc2VlbiAhPT0gYXJyYXkpIHtcbiAgICAgICAgICAgIHNwbGljZS5jYWxsKHNlZW4sIGZyb21JbmRleCwgMSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHNwbGljZS5jYWxsKGFycmF5LCBmcm9tSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHVsbEF0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGluZGl2aWR1YWxcbiAgICAgKiBpbmRleGVzIG9yIGNhcHR1cmluZyB0aGUgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcltdfSBpbmRleGVzIFRoZSBpbmRleGVzIG9mIGVsZW1lbnRzIHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUHVsbEF0KGFycmF5LCBpbmRleGVzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPyBpbmRleGVzLmxlbmd0aCA6IDAsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGluZGV4ZXNbbGVuZ3RoXTtcbiAgICAgICAgaWYgKGxlbmd0aCA9PSBsYXN0SW5kZXggfHwgaW5kZXggIT09IHByZXZpb3VzKSB7XG4gICAgICAgICAgdmFyIHByZXZpb3VzID0gaW5kZXg7XG4gICAgICAgICAgaWYgKGlzSW5kZXgoaW5kZXgpKSB7XG4gICAgICAgICAgICBzcGxpY2UuY2FsbChhcnJheSwgaW5kZXgsIDEpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBiYXNlVW5zZXQoYXJyYXksIGluZGV4KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yYW5kb21gIHdpdGhvdXQgc3VwcG9ydCBmb3IgcmV0dXJuaW5nXG4gICAgICogZmxvYXRpbmctcG9pbnQgbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGxvd2VyIFRoZSBsb3dlciBib3VuZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdXBwZXIgVGhlIHVwcGVyIGJvdW5kLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmRvbShsb3dlciwgdXBwZXIpIHtcbiAgICAgIHJldHVybiBsb3dlciArIG5hdGl2ZUZsb29yKG5hdGl2ZVJhbmRvbSgpICogKHVwcGVyIC0gbG93ZXIgKyAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmFuZ2VgIGFuZCBgXy5yYW5nZVJpZ2h0YCB3aGljaCBkb2Vzbid0XG4gICAgICogY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RlcCBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVJhbmdlKHN0YXJ0LCBlbmQsIHN0ZXAsIGZyb21SaWdodCkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KG5hdGl2ZUNlaWwoKGVuZCAtIHN0YXJ0KSAvIChzdGVwIHx8IDEpKSwgMCksXG4gICAgICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtmcm9tUmlnaHQgPyBsZW5ndGggOiArK2luZGV4XSA9IHN0YXJ0O1xuICAgICAgICBzdGFydCArPSBzdGVwO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5yZXBlYXRgIHdoaWNoIGRvZXNuJ3QgY29lcmNlIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgc3RyaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVwZWF0KHN0cmluZywgbikge1xuICAgICAgdmFyIHJlc3VsdCA9ICcnO1xuICAgICAgaWYgKCFzdHJpbmcgfHwgbiA8IDEgfHwgbiA+IE1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIC8vIExldmVyYWdlIHRoZSBleHBvbmVudGlhdGlvbiBieSBzcXVhcmluZyBhbGdvcml0aG0gZm9yIGEgZmFzdGVyIHJlcGVhdC5cbiAgICAgIC8vIFNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FeHBvbmVudGlhdGlvbl9ieV9zcXVhcmluZyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgZG8ge1xuICAgICAgICBpZiAobiAlIDIpIHtcbiAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nO1xuICAgICAgICB9XG4gICAgICAgIG4gPSBuYXRpdmVGbG9vcihuIC8gMik7XG4gICAgICAgIGlmIChuKSB7XG4gICAgICAgICAgc3RyaW5nICs9IHN0cmluZztcbiAgICAgICAgfVxuICAgICAgfSB3aGlsZSAobik7XG5cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucmVzdGAgd2hpY2ggZG9lc24ndCB2YWxpZGF0ZSBvciBjb2VyY2UgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKG92ZXJSZXN0KGZ1bmMsIHN0YXJ0LCBpZGVudGl0eSksIGZ1bmMgKyAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2FtcGxlYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gc2FtcGxlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU2FtcGxlKGNvbGxlY3Rpb24pIHtcbiAgICAgIHJldHVybiBhcnJheVNhbXBsZSh2YWx1ZXMoY29sbGVjdGlvbikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNhbXBsZVNpemVgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5kb20gZWxlbWVudHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNhbXBsZVNpemUoY29sbGVjdGlvbiwgbikge1xuICAgICAgdmFyIGFycmF5ID0gdmFsdWVzKGNvbGxlY3Rpb24pO1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKGFycmF5LCBiYXNlQ2xhbXAobiwgMCwgYXJyYXkubGVuZ3RoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2V0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICBsYXN0SW5kZXggPSBsZW5ndGggLSAxLFxuICAgICAgICAgIG5lc3RlZCA9IG9iamVjdDtcblxuICAgICAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKSxcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gdmFsdWU7XG5cbiAgICAgICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycgfHwga2V5ID09PSAnY29uc3RydWN0b3InIHx8IGtleSA9PT0gJ3Byb3RvdHlwZScpIHtcbiAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgICAgIHZhciBvYmpWYWx1ZSA9IG5lc3RlZFtrZXldO1xuICAgICAgICAgIG5ld1ZhbHVlID0gY3VzdG9taXplciA/IGN1c3RvbWl6ZXIob2JqVmFsdWUsIGtleSwgbmVzdGVkKSA6IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3VmFsdWUgPSBpc09iamVjdChvYmpWYWx1ZSlcbiAgICAgICAgICAgICAgPyBvYmpWYWx1ZVxuICAgICAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICAgICAgbmVzdGVkID0gbmVzdGVkW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXREYXRhYCB3aXRob3V0IHN1cHBvcnQgZm9yIGhvdCBsb29wIHNob3J0aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NvY2lhdGUgbWV0YWRhdGEgd2l0aC5cbiAgICAgKiBAcGFyYW0geyp9IGRhdGEgVGhlIG1ldGFkYXRhLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGJhc2VTZXREYXRhID0gIW1ldGFNYXAgPyBpZGVudGl0eSA6IGZ1bmN0aW9uKGZ1bmMsIGRhdGEpIHtcbiAgICAgIG1ldGFNYXAuc2V0KGZ1bmMsIGRhdGEpO1xuICAgICAgcmV0dXJuIGZ1bmM7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBzZXRUb1N0cmluZ2Agd2l0aG91dCBzdXBwb3J0IGZvciBob3QgbG9vcCBzaG9ydGluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIGBmdW5jYC5cbiAgICAgKi9cbiAgICB2YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgICAgIHJldHVybiBkZWZpbmVQcm9wZXJ0eShmdW5jLCAndG9TdHJpbmcnLCB7XG4gICAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICAgICAndmFsdWUnOiBjb25zdGFudChzdHJpbmcpLFxuICAgICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2h1ZmZsZWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgcmV0dXJuIHNodWZmbGVTZWxmKHZhbHVlcyhjb2xsZWN0aW9uKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIGVuZCA9IGVuZCA+IGxlbmd0aCA/IGxlbmd0aCA6IGVuZDtcbiAgICAgIGlmIChlbmQgPCAwKSB7XG4gICAgICAgIGVuZCArPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gICAgICBzdGFydCA+Pj49IDA7XG5cbiAgICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb21lYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29tZShjb2xsZWN0aW9uLCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQ7XG5cbiAgICAgIGJhc2VFYWNoKGNvbGxlY3Rpb24sIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgY29sbGVjdGlvbikge1xuICAgICAgICByZXN1bHQgPSBwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgICAgcmV0dXJuICFyZXN1bHQ7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiAhIXJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleGAgYW5kIGBfLnNvcnRlZExhc3RJbmRleGAgd2hpY2hcbiAgICAgKiBwZXJmb3JtcyBhIGJpbmFyeSBzZWFyY2ggb2YgYGFycmF5YCB0byBkZXRlcm1pbmUgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWBcbiAgICAgKiBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvIG1haW50YWluIGl0cyBzb3J0IG9yZGVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbcmV0SGlnaGVzdF0gU3BlY2lmeSByZXR1cm5pbmcgdGhlIGhpZ2hlc3QgcXVhbGlmaWVkIGluZGV4LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCByZXRIaWdoZXN0KSB7XG4gICAgICB2YXIgbG93ID0gMCxcbiAgICAgICAgICBoaWdoID0gYXJyYXkgPT0gbnVsbCA/IGxvdyA6IGFycmF5Lmxlbmd0aDtcblxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiB2YWx1ZSA9PT0gdmFsdWUgJiYgaGlnaCA8PSBIQUxGX01BWF9BUlJBWV9MRU5HVEgpIHtcbiAgICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgICB2YXIgbWlkID0gKGxvdyArIGhpZ2gpID4+PiAxLFxuICAgICAgICAgICAgICBjb21wdXRlZCA9IGFycmF5W21pZF07XG5cbiAgICAgICAgICBpZiAoY29tcHV0ZWQgIT09IG51bGwgJiYgIWlzU3ltYm9sKGNvbXB1dGVkKSAmJlxuICAgICAgICAgICAgICAocmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSkpKSB7XG4gICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaWdoID0gbWlkO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGlnaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlU29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGlkZW50aXR5LCByZXRIaWdoZXN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0ZWRJbmRleEJ5YCBhbmQgYF8uc29ydGVkTGFzdEluZGV4QnlgXG4gICAgICogd2hpY2ggaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBgdmFsdWVgIGFuZCBlYWNoIGVsZW1lbnQgb2YgYGFycmF5YCB0byBjb21wdXRlXG4gICAgICogdGhlaXIgc29ydCByYW5raW5nLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3JldEhpZ2hlc3RdIFNwZWNpZnkgcmV0dXJuaW5nIHRoZSBoaWdoZXN0IHF1YWxpZmllZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSwgcmV0SGlnaGVzdCkge1xuICAgICAgdmFyIGxvdyA9IDAsXG4gICAgICAgICAgaGlnaCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGhpZ2ggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG5cbiAgICAgIHZhbHVlID0gaXRlcmF0ZWUodmFsdWUpO1xuICAgICAgdmFyIHZhbElzTmFOID0gdmFsdWUgIT09IHZhbHVlLFxuICAgICAgICAgIHZhbElzTnVsbCA9IHZhbHVlID09PSBudWxsLFxuICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpLFxuICAgICAgICAgIHZhbElzVW5kZWZpbmVkID0gdmFsdWUgPT09IHVuZGVmaW5lZDtcblxuICAgICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgICAgdmFyIG1pZCA9IG5hdGl2ZUZsb29yKChsb3cgKyBoaWdoKSAvIDIpLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZShhcnJheVttaWRdKSxcbiAgICAgICAgICAgIG90aElzRGVmaW5lZCA9IGNvbXB1dGVkICE9PSB1bmRlZmluZWQsXG4gICAgICAgICAgICBvdGhJc051bGwgPSBjb21wdXRlZCA9PT0gbnVsbCxcbiAgICAgICAgICAgIG90aElzUmVmbGV4aXZlID0gY29tcHV0ZWQgPT09IGNvbXB1dGVkLFxuICAgICAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChjb21wdXRlZCk7XG5cbiAgICAgICAgaWYgKHZhbElzTmFOKSB7XG4gICAgICAgICAgdmFyIHNldExvdyA9IHJldEhpZ2hlc3QgfHwgb3RoSXNSZWZsZXhpdmU7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsSXNVbmRlZmluZWQpIHtcbiAgICAgICAgICBzZXRMb3cgPSBvdGhJc1JlZmxleGl2ZSAmJiAocmV0SGlnaGVzdCB8fCBvdGhJc0RlZmluZWQpO1xuICAgICAgICB9IGVsc2UgaWYgKHZhbElzTnVsbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAocmV0SGlnaGVzdCB8fCAhb3RoSXNOdWxsKTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWxJc1N5bWJvbCkge1xuICAgICAgICAgIHNldExvdyA9IG90aElzUmVmbGV4aXZlICYmIG90aElzRGVmaW5lZCAmJiAhb3RoSXNOdWxsICYmIChyZXRIaWdoZXN0IHx8ICFvdGhJc1N5bWJvbCk7XG4gICAgICAgIH0gZWxzZSBpZiAob3RoSXNOdWxsIHx8IG90aElzU3ltYm9sKSB7XG4gICAgICAgICAgc2V0TG93ID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgc2V0TG93ID0gcmV0SGlnaGVzdCA/IChjb21wdXRlZCA8PSB2YWx1ZSkgOiAoY29tcHV0ZWQgPCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNldExvdykge1xuICAgICAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaGlnaCA9IG1pZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZU1pbihoaWdoLCBNQVhfQVJSQVlfSU5ERVgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNvcnRlZFVuaXFgIGFuZCBgXy5zb3J0ZWRVbmlxQnlgIHdpdGhvdXRcbiAgICAgKiBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VTb3J0ZWRVbmlxKGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc0luZGV4ID0gMCxcbiAgICAgICAgICByZXN1bHQgPSBbXTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICAgICAgY29tcHV0ZWQgPSBpdGVyYXRlZSA/IGl0ZXJhdGVlKHZhbHVlKSA6IHZhbHVlO1xuXG4gICAgICAgIGlmICghaW5kZXggfHwgIWVxKGNvbXB1dGVkLCBzZWVuKSkge1xuICAgICAgICAgIHZhciBzZWVuID0gY29tcHV0ZWQ7XG4gICAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9OdW1iZXJgIHdoaWNoIGRvZXNuJ3QgZW5zdXJlIGNvcnJlY3RcbiAgICAgKiBjb252ZXJzaW9ucyBvZiBiaW5hcnksIGhleGFkZWNpbWFsLCBvciBvY3RhbCBzdHJpbmcgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlVG9OdW1iZXIodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzU3ltYm9sKHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gTkFOO1xuICAgICAgfVxuICAgICAgcmV0dXJuICt2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAgICAgKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdHJpbmcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gICAgICAvLyBFeGl0IGVhcmx5IGZvciBzdHJpbmdzIHRvIGF2b2lkIGEgcGVyZm9ybWFuY2UgaGl0IGluIHNvbWUgZW52aXJvbm1lbnRzLlxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCBiYXNlVG9TdHJpbmcpICsgJyc7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBzeW1ib2xUb1N0cmluZyA/IHN5bWJvbFRvU3RyaW5nLmNhbGwodmFsdWUpIDogJyc7XG4gICAgICB9XG4gICAgICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICAgICAgcmV0dXJuIChyZXN1bHQgPT0gJzAnICYmICgxIC8gdmFsdWUpID09IC1JTkZJTklUWSkgPyAnLTAnIDogcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuaXFCeWAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGJhc2VVbmlxKGFycmF5LCBpdGVyYXRlZSwgY29tcGFyYXRvcikge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzLFxuICAgICAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBpc0NvbW1vbiA9IHRydWUsXG4gICAgICAgICAgcmVzdWx0ID0gW10sXG4gICAgICAgICAgc2VlbiA9IHJlc3VsdDtcblxuICAgICAgaWYgKGNvbXBhcmF0b3IpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgaW5jbHVkZXMgPSBhcnJheUluY2x1ZGVzV2l0aDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGxlbmd0aCA+PSBMQVJHRV9BUlJBWV9TSVpFKSB7XG4gICAgICAgIHZhciBzZXQgPSBpdGVyYXRlZSA/IG51bGwgOiBjcmVhdGVTZXQoYXJyYXkpO1xuICAgICAgICBpZiAoc2V0KSB7XG4gICAgICAgICAgcmV0dXJuIHNldFRvQXJyYXkoc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBpbmNsdWRlcyA9IGNhY2hlSGFzO1xuICAgICAgICBzZWVuID0gbmV3IFNldENhY2hlO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIHNlZW4gPSBpdGVyYXRlZSA/IFtdIDogcmVzdWx0O1xuICAgICAgfVxuICAgICAgb3V0ZXI6XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlID8gaXRlcmF0ZWUodmFsdWUpIDogdmFsdWU7XG5cbiAgICAgICAgdmFsdWUgPSAoY29tcGFyYXRvciB8fCB2YWx1ZSAhPT0gMCkgPyB2YWx1ZSA6IDA7XG4gICAgICAgIGlmIChpc0NvbW1vbiAmJiBjb21wdXRlZCA9PT0gY29tcHV0ZWQpIHtcbiAgICAgICAgICB2YXIgc2VlbkluZGV4ID0gc2Vlbi5sZW5ndGg7XG4gICAgICAgICAgd2hpbGUgKHNlZW5JbmRleC0tKSB7XG4gICAgICAgICAgICBpZiAoc2VlbltzZWVuSW5kZXhdID09PSBjb21wdXRlZCkge1xuICAgICAgICAgICAgICBjb250aW51ZSBvdXRlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICBzZWVuLnB1c2goY29tcHV0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWluY2x1ZGVzKHNlZW4sIGNvbXB1dGVkLCBjb21wYXJhdG9yKSkge1xuICAgICAgICAgIGlmIChzZWVuICE9PSByZXN1bHQpIHtcbiAgICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bnNldGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHByb3BlcnR5IHBhdGggdG8gdW5zZXQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBwcm9wZXJ0eSBpcyBkZWxldGVkLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVuc2V0KG9iamVjdCwgcGF0aCkge1xuICAgICAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG4gICAgICBvYmplY3QgPSBwYXJlbnQob2JqZWN0LCBwYXRoKTtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCB8fCBkZWxldGUgb2JqZWN0W3RvS2V5KGxhc3QocGF0aCkpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51cGRhdGVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byB1cGRhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gdXBkYXRlciBUaGUgZnVuY3Rpb24gdG8gcHJvZHVjZSB0aGUgdXBkYXRlZCB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIHVwZGF0ZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIHJldHVybiBiYXNlU2V0KG9iamVjdCwgcGF0aCwgdXBkYXRlcihiYXNlR2V0KG9iamVjdCwgcGF0aCkpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8uZHJvcFdoaWxlYCBhbmQgYF8udGFrZVdoaWxlYFxuICAgICAqIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRHJvcF0gU3BlY2lmeSBkcm9wcGluZyBlbGVtZW50cyBpbnN0ZWFkIG9mIHRha2luZyB0aGVtLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSwgaXNEcm9wLCBmcm9tUmlnaHQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgaW5kZXggPSBmcm9tUmlnaHQgPyBsZW5ndGggOiAtMTtcblxuICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkgJiZcbiAgICAgICAgcHJlZGljYXRlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KSkge31cblxuICAgICAgcmV0dXJuIGlzRHJvcFxuICAgICAgICA/IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IDAgOiBpbmRleCksIChmcm9tUmlnaHQgPyBpbmRleCArIDEgOiBsZW5ndGgpKVxuICAgICAgICA6IGJhc2VTbGljZShhcnJheSwgKGZyb21SaWdodCA/IGluZGV4ICsgMSA6IDApLCAoZnJvbVJpZ2h0ID8gbGVuZ3RoIDogaW5kZXgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgd3JhcHBlclZhbHVlYCB3aGljaCByZXR1cm5zIHRoZSByZXN1bHQgb2ZcbiAgICAgKiBwZXJmb3JtaW5nIGEgc2VxdWVuY2Ugb2YgYWN0aW9ucyBvbiB0aGUgdW53cmFwcGVkIGB2YWx1ZWAsIHdoZXJlIGVhY2hcbiAgICAgKiBzdWNjZXNzaXZlIGFjdGlvbiBpcyBzdXBwbGllZCB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBwcmV2aW91cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdW53cmFwcGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFjdGlvbnMgQWN0aW9ucyB0byBwZXJmb3JtIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVdyYXBwZXJWYWx1ZSh2YWx1ZSwgYWN0aW9ucykge1xuICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC52YWx1ZSgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UmVkdWNlKGFjdGlvbnMsIGZ1bmN0aW9uKHJlc3VsdCwgYWN0aW9uKSB7XG4gICAgICAgIHJldHVybiBhY3Rpb24uZnVuYy5hcHBseShhY3Rpb24udGhpc0FyZywgYXJyYXlQdXNoKFtyZXN1bHRdLCBhY3Rpb24uYXJncykpO1xuICAgICAgfSwgcmVzdWx0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBtZXRob2RzIGxpa2UgYF8ueG9yYCwgd2l0aG91dCBzdXBwb3J0IGZvclxuICAgICAqIGl0ZXJhdGVlIHNob3J0aGFuZHMsIHRoYXQgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXlzIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWVdIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHZhbHVlcy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBiYXNlWG9yKGFycmF5cywgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VVbmlxKGFycmF5c1swXSkgOiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFycmF5c1tpbmRleF0sXG4gICAgICAgICAgICBvdGhJbmRleCA9IC0xO1xuXG4gICAgICAgIHdoaWxlICgrK290aEluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKG90aEluZGV4ICE9IGluZGV4KSB7XG4gICAgICAgICAgICByZXN1bHRbaW5kZXhdID0gYmFzZURpZmZlcmVuY2UocmVzdWx0W2luZGV4XSB8fCBhcnJheSwgYXJyYXlzW290aEluZGV4XSwgaXRlcmF0ZWUsIGNvbXBhcmF0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VVbmlxKGJhc2VGbGF0dGVuKHJlc3VsdCwgMSksIGl0ZXJhdGVlLCBjb21wYXJhdG9yKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uemlwT2JqZWN0YCB3aGljaCBhc3NpZ25zIHZhbHVlcyB1c2luZyBgYXNzaWduRnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25GdW5jIFRoZSBmdW5jdGlvbiB0byBhc3NpZ24gdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmFzZVppcE9iamVjdChwcm9wcywgdmFsdWVzLCBhc3NpZ25GdW5jKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGgsXG4gICAgICAgICAgdmFsc0xlbmd0aCA9IHZhbHVlcy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IGluZGV4IDwgdmFsc0xlbmd0aCA/IHZhbHVlc1tpbmRleF0gOiB1bmRlZmluZWQ7XG4gICAgICAgIGFzc2lnbkZ1bmMocmVzdWx0LCBwcm9wc1tpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYHZhbHVlYCB0byBhbiBlbXB0eSBhcnJheSBpZiBpdCdzIG5vdCBhbiBhcnJheSBsaWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIHRoZSBjYXN0IGFycmF5LWxpa2Ugb2JqZWN0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdCh2YWx1ZSkgPyB2YWx1ZSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgdG8gYGlkZW50aXR5YCBpZiBpdCdzIG5vdCBhIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNhc3RGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBpZGVudGl0eTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gICAgICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgYGJhc2VSZXN0YCBhbGlhcyB3aGljaCBjYW4gYmUgcmVwbGFjZWQgd2l0aCBgaWRlbnRpdHlgIGJ5IG1vZHVsZVxuICAgICAqIHJlcGxhY2VtZW50IHBsdWdpbnMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEB0eXBlIHtGdW5jdGlvbn1cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIHZhciBjYXN0UmVzdCA9IGJhc2VSZXN0O1xuXG4gICAgLyoqXG4gICAgICogQ2FzdHMgYGFycmF5YCB0byBhIHNsaWNlIGlmIGl0J3MgbmVlZGVkLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3Qgc2xpY2UuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdFNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICAgICAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQ7XG4gICAgICByZXR1cm4gKCFzdGFydCAmJiBlbmQgPj0gbGVuZ3RoKSA/IGFycmF5IDogYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNpbXBsZSB3cmFwcGVyIGFyb3VuZCB0aGUgZ2xvYmFsIFtgY2xlYXJUaW1lb3V0YF0oaHR0cHM6Ly9tZG4uaW8vY2xlYXJUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ8T2JqZWN0fSBpZCBUaGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3Qgb2YgdGhlIHRpbWVyIHRvIGNsZWFyLlxuICAgICAqL1xuICAgIHZhciBjbGVhclRpbWVvdXQgPSBjdHhDbGVhclRpbWVvdXQgfHwgZnVuY3Rpb24oaWQpIHtcbiAgICAgIHJldHVybiByb290LmNsZWFyVGltZW91dChpZCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiAgYGJ1ZmZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QnVmZmVyfSBidWZmZXIgVGhlIGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgICAgIGlmIChpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlci5zbGljZSgpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gYWxsb2NVbnNhZmUgPyBhbGxvY1Vuc2FmZShsZW5ndGgpIDogbmV3IGJ1ZmZlci5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gICAgICBidWZmZXIuY29weShyZXN1bHQpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXlCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBhcnJheSBidWZmZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICAgICAgdmFyIHJlc3VsdCA9IG5ldyBhcnJheUJ1ZmZlci5jb25zdHJ1Y3RvcihhcnJheUJ1ZmZlci5ieXRlTGVuZ3RoKTtcbiAgICAgIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgZGF0YVZpZXdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YVZpZXcgVGhlIGRhdGEgdmlldyB0byBjbG9uZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gICAgICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICAgICAgcmV0dXJuIG5ldyBkYXRhVmlldy5jb25zdHJ1Y3RvcihidWZmZXIsIGRhdGFWaWV3LmJ5dGVPZmZzZXQsIGRhdGFWaWV3LmJ5dGVMZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gICAgICByZXN1bHQubGFzdEluZGV4ID0gcmVnZXhwLmxhc3RJbmRleDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHN5bWJvbCBvYmplY3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZiA/IE9iamVjdChzeW1ib2xWYWx1ZU9mLmNhbGwoc3ltYm9sKSkgOiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICAgICAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gICAgICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wYXJlcyB2YWx1ZXMgdG8gc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgdmFsdWVgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBhcmVBc2NlbmRpbmcodmFsdWUsIG90aGVyKSB7XG4gICAgICBpZiAodmFsdWUgIT09IG90aGVyKSB7XG4gICAgICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgdmFsSXNOdWxsID0gdmFsdWUgPT09IG51bGwsXG4gICAgICAgICAgICB2YWxJc1JlZmxleGl2ZSA9IHZhbHVlID09PSB2YWx1ZSxcbiAgICAgICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuXG4gICAgICAgIHZhciBvdGhJc0RlZmluZWQgPSBvdGhlciAhPT0gdW5kZWZpbmVkLFxuICAgICAgICAgICAgb3RoSXNOdWxsID0gb3RoZXIgPT09IG51bGwsXG4gICAgICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcixcbiAgICAgICAgICAgIG90aElzU3ltYm9sID0gaXNTeW1ib2wob3RoZXIpO1xuXG4gICAgICAgIGlmICgoIW90aElzTnVsbCAmJiAhb3RoSXNTeW1ib2wgJiYgIXZhbElzU3ltYm9sICYmIHZhbHVlID4gb3RoZXIpIHx8XG4gICAgICAgICAgICAodmFsSXNTeW1ib2wgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlICYmICFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKHZhbElzTnVsbCAmJiBvdGhJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIXZhbElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICF2YWxJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wgJiYgIW90aElzU3ltYm9sICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAgICAgICAob3RoSXNTeW1ib2wgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlICYmICF2YWxJc051bGwgJiYgIXZhbElzU3ltYm9sKSB8fFxuICAgICAgICAgICAgKG90aElzTnVsbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICAgICAoIW90aElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgICAgICFvdGhJc1JlZmxleGl2ZSkge1xuICAgICAgICAgIHJldHVybiAtMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5vcmRlckJ5YCB0byBjb21wYXJlIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSB2YWx1ZSB0byBhbm90aGVyXG4gICAgICogYW5kIHN0YWJsZSBzb3J0IHRoZW0uXG4gICAgICpcbiAgICAgKiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuICAgICAqIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yIGRlc2NlbmRpbmcgb3IgXCJhc2NcIiBmb3IgYXNjZW5kaW5nIHNvcnQgb3JkZXJcbiAgICAgKiBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW5bXXxzdHJpbmdbXX0gb3JkZXJzIFRoZSBvcmRlciB0byBzb3J0IGJ5IGZvciBlYWNoIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHNvcnQgb3JkZXIgaW5kaWNhdG9yIGZvciBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wYXJlTXVsdGlwbGUob2JqZWN0LCBvdGhlciwgb3JkZXJzKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSxcbiAgICAgICAgICBvdGhDcml0ZXJpYSA9IG90aGVyLmNyaXRlcmlhLFxuICAgICAgICAgIGxlbmd0aCA9IG9iakNyaXRlcmlhLmxlbmd0aCxcbiAgICAgICAgICBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY29tcGFyZUFzY2VuZGluZyhvYmpDcml0ZXJpYVtpbmRleF0sIG90aENyaXRlcmlhW2luZGV4XSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICBpZiAoaW5kZXggPj0gb3JkZXJzTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgb3JkZXIgPSBvcmRlcnNbaW5kZXhdO1xuICAgICAgICAgIHJldHVybiByZXN1bHQgKiAob3JkZXIgPT0gJ2Rlc2MnID8gLTEgOiAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gRml4ZXMgYW4gYEFycmF5I3NvcnRgIGJ1ZyBpbiB0aGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIGFwcGxpY2F0aW9uc1xuICAgICAgLy8gdGhhdCBjYXVzZXMgaXQsIHVuZGVyIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcywgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZSBmb3JcbiAgICAgIC8vIGBvYmplY3RgIGFuZCBgb3RoZXJgLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL3B1bGwvMTI0N1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIC8vXG4gICAgICAvLyBUaGlzIGFsc28gZW5zdXJlcyBhIHN0YWJsZSBzb3J0IGluIFY4IGFuZCBvdGhlciBlbmdpbmVzLlxuICAgICAgLy8gU2VlIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTkwIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMsXG4gICAgICogcGxhY2Vob2xkZXJzLCBhbmQgcHJvdmlkZWQgYXJndW1lbnRzIGludG8gYSBzaW5nbGUgYXJyYXkgb2YgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGhvbGRlcnMgVGhlIGBwYXJ0aWFsc2AgcGxhY2Vob2xkZXIgaW5kZXhlcy5cbiAgICAgKiBAcGFyYW1zIHtib29sZWFufSBbaXNDdXJyaWVkXSBTcGVjaWZ5IGNvbXBvc2luZyBmb3IgYSBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbXBvc2VkIGFyZ3VtZW50cy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKSB7XG4gICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgYXJnc0xlbmd0aCA9IGFyZ3MubGVuZ3RoLFxuICAgICAgICAgIGhvbGRlcnNMZW5ndGggPSBob2xkZXJzLmxlbmd0aCxcbiAgICAgICAgICBsZWZ0SW5kZXggPSAtMSxcbiAgICAgICAgICBsZWZ0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShsZWZ0TGVuZ3RoICsgcmFuZ2VMZW5ndGgpLFxuICAgICAgICAgIGlzVW5jdXJyaWVkID0gIWlzQ3VycmllZDtcblxuICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICByZXN1bHRbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICB9XG4gICAgICB3aGlsZSAoKythcmdzSW5kZXggPCBob2xkZXJzTGVuZ3RoKSB7XG4gICAgICAgIGlmIChpc1VuY3VycmllZCB8fCBhcmdzSW5kZXggPCBhcmdzTGVuZ3RoKSB7XG4gICAgICAgICAgcmVzdWx0W2hvbGRlcnNbYXJnc0luZGV4XV0gPSBhcmdzW2FyZ3NJbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHdoaWxlIChyYW5nZUxlbmd0aC0tKSB7XG4gICAgICAgIHJlc3VsdFtsZWZ0SW5kZXgrK10gPSBhcmdzW2FyZ3NJbmRleCsrXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBjb21wb3NlQXJnc2AgZXhjZXB0IHRoYXQgdGhlIGFyZ3VtZW50cyBjb21wb3NpdGlvblxuICAgICAqIGlzIHRhaWxvcmVkIGZvciBgXy5wYXJ0aWFsUmlnaHRgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcmdzIFRoZSBwcm92aWRlZCBhcmd1bWVudHMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBhcHBlbmQgdG8gdGhvc2UgcHJvdmlkZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gaG9sZGVycyBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbXMge2Jvb2xlYW59IFtpc0N1cnJpZWRdIFNwZWNpZnkgY29tcG9zaW5nIGZvciBhIGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgY29tcG9zZWQgYXJndW1lbnRzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbXBvc2VBcmdzUmlnaHQoYXJncywgcGFydGlhbHMsIGhvbGRlcnMsIGlzQ3VycmllZCkge1xuICAgICAgdmFyIGFyZ3NJbmRleCA9IC0xLFxuICAgICAgICAgIGFyZ3NMZW5ndGggPSBhcmdzLmxlbmd0aCxcbiAgICAgICAgICBob2xkZXJzSW5kZXggPSAtMSxcbiAgICAgICAgICBob2xkZXJzTGVuZ3RoID0gaG9sZGVycy5sZW5ndGgsXG4gICAgICAgICAgcmlnaHRJbmRleCA9IC0xLFxuICAgICAgICAgIHJpZ2h0TGVuZ3RoID0gcGFydGlhbHMubGVuZ3RoLFxuICAgICAgICAgIHJhbmdlTGVuZ3RoID0gbmF0aXZlTWF4KGFyZ3NMZW5ndGggLSBob2xkZXJzTGVuZ3RoLCAwKSxcbiAgICAgICAgICByZXN1bHQgPSBBcnJheShyYW5nZUxlbmd0aCArIHJpZ2h0TGVuZ3RoKSxcbiAgICAgICAgICBpc1VuY3VycmllZCA9ICFpc0N1cnJpZWQ7XG5cbiAgICAgIHdoaWxlICgrK2FyZ3NJbmRleCA8IHJhbmdlTGVuZ3RoKSB7XG4gICAgICAgIHJlc3VsdFthcmdzSW5kZXhdID0gYXJnc1thcmdzSW5kZXhdO1xuICAgICAgfVxuICAgICAgdmFyIG9mZnNldCA9IGFyZ3NJbmRleDtcbiAgICAgIHdoaWxlICgrK3JpZ2h0SW5kZXggPCByaWdodExlbmd0aCkge1xuICAgICAgICByZXN1bHRbb2Zmc2V0ICsgcmlnaHRJbmRleF0gPSBwYXJ0aWFsc1tyaWdodEluZGV4XTtcbiAgICAgIH1cbiAgICAgIHdoaWxlICgrK2hvbGRlcnNJbmRleCA8IGhvbGRlcnNMZW5ndGgpIHtcbiAgICAgICAgaWYgKGlzVW5jdXJyaWVkIHx8IGFyZ3NJbmRleCA8IGFyZ3NMZW5ndGgpIHtcbiAgICAgICAgICByZXN1bHRbb2Zmc2V0ICsgaG9sZGVyc1tob2xkZXJzSW5kZXhdXSA9IGFyZ3NbYXJnc0luZGV4KytdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyB0aGUgdmFsdWVzIG9mIGBzb3VyY2VgIHRvIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHNvdXJjZSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgZnJvbS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcblxuICAgICAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICBhcnJheVtpbmRleF0gPSBzb3VyY2VbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gICAgICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIHRvLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICAgICAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgICAgIG9iamVjdCB8fCAob2JqZWN0ID0ge30pO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgICAgID8gY3VzdG9taXplcihvYmplY3Rba2V5XSwgc291cmNlW2tleV0sIGtleSwgb2JqZWN0LCBzb3VyY2UpXG4gICAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBuZXdWYWx1ZSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05ldykge1xuICAgICAgICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgbmV3VmFsdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgICAgIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9scyhzb3VyY2UpLCBvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5ncm91cEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpbml0aWFsaXplcl0gVGhlIGFjY3VtdWxhdG9yIG9iamVjdCBpbml0aWFsaXplci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhZ2dyZWdhdG9yIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUFnZ3JlZ2F0b3Ioc2V0dGVyLCBpbml0aWFsaXplcikge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5QWdncmVnYXRvciA6IGJhc2VBZ2dyZWdhdG9yLFxuICAgICAgICAgICAgYWNjdW11bGF0b3IgPSBpbml0aWFsaXplciA/IGluaXRpYWxpemVyKCkgOiB7fTtcblxuICAgICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBzZXR0ZXIsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSwgYWNjdW11bGF0b3IpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhc3NpZ25lciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA+IDEgPyBzb3VyY2VzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgZ3VhcmQgPSBsZW5ndGggPiAyID8gc291cmNlc1syXSA6IHVuZGVmaW5lZDtcblxuICAgICAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICA/IChsZW5ndGgtLSwgY3VzdG9taXplcilcbiAgICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICAgICAgY3VzdG9taXplciA9IGxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiBjdXN0b21pemVyO1xuICAgICAgICAgIGxlbmd0aCA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICAgIGlmIChzb3VyY2UpIHtcbiAgICAgICAgICAgIGFzc2lnbmVyKG9iamVjdCwgc291cmNlLCBpbmRleCwgY3VzdG9taXplcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmFzZUVhY2goZWFjaEZ1bmMsIGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIGVhY2hGdW5jKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgICAgICBpbmRleCA9IGZyb21SaWdodCA/IGxlbmd0aCA6IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG5cbiAgICAgICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVbaW5kZXhdLCBpbmRleCwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgYmFzZSBmdW5jdGlvbiBmb3IgbWV0aG9kcyBsaWtlIGBfLmZvckluYCBhbmQgYF8uZm9yT3duYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVCYXNlRm9yKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgICAgaXRlcmFibGUgPSBPYmplY3Qob2JqZWN0KSxcbiAgICAgICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBpbnZva2UgaXQgd2l0aCB0aGUgb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQmluZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgZm4gPSAodGhpcyAmJiB0aGlzICE9PSByb290ICYmIHRoaXMgaW5zdGFuY2VvZiB3cmFwcGVyKSA/IEN0b3IgOiBmdW5jO1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoaXNCaW5kID8gdGhpc0FyZyA6IHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gd3JhcHBlcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5sb3dlckZpcnN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBTdHJpbmdgIGNhc2UgbWV0aG9kIHRvIHVzZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXNlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUNhc2VGaXJzdChtZXRob2ROYW1lKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgICAgdmFyIHN0clN5bWJvbHMgPSBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgICAgICA/IHN0cmluZ1RvQXJyYXkoc3RyaW5nKVxuICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHZhciBjaHIgPSBzdHJTeW1ib2xzXG4gICAgICAgICAgPyBzdHJTeW1ib2xzWzBdXG4gICAgICAgICAgOiBzdHJpbmcuY2hhckF0KDApO1xuXG4gICAgICAgIHZhciB0cmFpbGluZyA9IHN0clN5bWJvbHNcbiAgICAgICAgICA/IGNhc3RTbGljZShzdHJTeW1ib2xzLCAxKS5qb2luKCcnKVxuICAgICAgICAgIDogc3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgICAgIHJldHVybiBjaHJbbWV0aG9kTmFtZV0oKSArIHRyYWlsaW5nO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5jYW1lbENhc2VgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgZnVuY3Rpb24gdG8gY29tYmluZSBlYWNoIHdvcmQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG91bmRlciBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVDb21wb3VuZGVyKGNhbGxiYWNrKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcHJvZHVjZXMgYW4gaW5zdGFuY2Ugb2YgYEN0b3JgIHJlZ2FyZGxlc3Mgb2ZcbiAgICAgKiB3aGV0aGVyIGl0IHdhcyBpbnZva2VkIGFzIHBhcnQgb2YgYSBgbmV3YCBleHByZXNzaW9uIG9yIGJ5IGBjYWxsYCBvciBgYXBwbHlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBDdG9yIFRoZSBjb25zdHJ1Y3RvciB0byB3cmFwLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlQ3RvcihDdG9yKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIFVzZSBhIGBzd2l0Y2hgIHN0YXRlbWVudCB0byB3b3JrIHdpdGggY2xhc3MgY29uc3RydWN0b3JzLiBTZWVcbiAgICAgICAgLy8gaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1mdW5jdGlvbi1vYmplY3RzLWNhbGwtdGhpc2FyZ3VtZW50LWFyZ3VtZW50c2xpc3RcbiAgICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgdmFyIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcbiAgICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgQ3RvcjtcbiAgICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdKTtcbiAgICAgICAgICBjYXNlIDM6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcbiAgICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcbiAgICAgICAgICBjYXNlIDU6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdKTtcbiAgICAgICAgICBjYXNlIDY6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdKTtcbiAgICAgICAgICBjYXNlIDc6IHJldHVybiBuZXcgQ3RvcihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdLCBhcmdzWzRdLCBhcmdzWzVdLCBhcmdzWzZdKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGhpc0JpbmRpbmcgPSBiYXNlQ3JlYXRlKEN0b3IucHJvdG90eXBlKSxcbiAgICAgICAgICAgIHJlc3VsdCA9IEN0b3IuYXBwbHkodGhpc0JpbmRpbmcsIGFyZ3MpO1xuXG4gICAgICAgIC8vIE1pbWljIHRoZSBjb25zdHJ1Y3RvcidzIGByZXR1cm5gIGJlaGF2aW9yLlxuICAgICAgICAvLyBTZWUgaHR0cHM6Ly9lczUuZ2l0aHViLmlvLyN4MTMuMi4yIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogdGhpc0JpbmRpbmc7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHdyYXBzIGBmdW5jYCB0byBlbmFibGUgY3VycnlpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXJpdHkgVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUN1cnJ5KGZ1bmMsIGJpdG1hc2ssIGFyaXR5KSB7XG4gICAgICB2YXIgQ3RvciA9IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aCxcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpO1xuXG4gICAgICAgIHdoaWxlIChpbmRleC0tKSB7XG4gICAgICAgICAgYXJnc1tpbmRleF0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIHZhciBob2xkZXJzID0gKGxlbmd0aCA8IDMgJiYgYXJnc1swXSAhPT0gcGxhY2Vob2xkZXIgJiYgYXJnc1tsZW5ndGggLSAxXSAhPT0gcGxhY2Vob2xkZXIpXG4gICAgICAgICAgPyBbXVxuICAgICAgICAgIDogcmVwbGFjZUhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuXG4gICAgICAgIGxlbmd0aCAtPSBob2xkZXJzLmxlbmd0aDtcbiAgICAgICAgaWYgKGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGFyZ3MsIGhvbGRlcnMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSAtIGxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZuID0gKHRoaXMgJiYgdGhpcyAhPT0gcm9vdCAmJiB0aGlzIGluc3RhbmNlb2Ygd3JhcHBlcikgPyBDdG9yIDogZnVuYztcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZuLCB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5maW5kYCBvciBgXy5maW5kTGFzdGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZpbmRJbmRleEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGNvbGxlY3Rpb24gaW5kZXguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmluZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVGaW5kKGZpbmRJbmRleEZ1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgICB2YXIgaXRlcmFibGUgPSBPYmplY3QoY29sbGVjdGlvbik7XG4gICAgICAgIGlmICghaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpO1xuICAgICAgICAgIGNvbGxlY3Rpb24gPSBrZXlzKGNvbGxlY3Rpb24pO1xuICAgICAgICAgIHByZWRpY2F0ZSA9IGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSk7IH07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGluZGV4ID0gZmluZEluZGV4RnVuYyhjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGZyb21JbmRleCk7XG4gICAgICAgIHJldHVybiBpbmRleCA+IC0xID8gaXRlcmFibGVbaXRlcmF0ZWUgPyBjb2xsZWN0aW9uW2luZGV4XSA6IGluZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGBfLmZsb3dgIG9yIGBfLmZsb3dSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZsb3cgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlRmxvdyhmcm9tUmlnaHQpIHtcbiAgICAgIHJldHVybiBmbGF0UmVzdChmdW5jdGlvbihmdW5jcykge1xuICAgICAgICB2YXIgbGVuZ3RoID0gZnVuY3MubGVuZ3RoLFxuICAgICAgICAgICAgaW5kZXggPSBsZW5ndGgsXG4gICAgICAgICAgICBwcmVyZXEgPSBMb2Rhc2hXcmFwcGVyLnByb3RvdHlwZS50aHJ1O1xuXG4gICAgICAgIGlmIChmcm9tUmlnaHQpIHtcbiAgICAgICAgICBmdW5jcy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgICB2YXIgZnVuYyA9IGZ1bmNzW2luZGV4XTtcbiAgICAgICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocHJlcmVxICYmICF3cmFwcGVyICYmIGdldEZ1bmNOYW1lKGZ1bmMpID09ICd3cmFwcGVyJykge1xuICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSBuZXcgTG9kYXNoV3JhcHBlcihbXSwgdHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gd3JhcHBlciA/IGluZGV4IDogbGVuZ3RoO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGZ1bmMgPSBmdW5jc1tpbmRleF07XG5cbiAgICAgICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICAgICAgZGF0YSA9IGZ1bmNOYW1lID09ICd3cmFwcGVyJyA/IGdldERhdGEoZnVuYykgOiB1bmRlZmluZWQ7XG5cbiAgICAgICAgICBpZiAoZGF0YSAmJiBpc0xhemlhYmxlKGRhdGFbMF0pICYmXG4gICAgICAgICAgICAgICAgZGF0YVsxXSA9PSAoV1JBUF9BUllfRkxBRyB8IFdSQVBfQ1VSUllfRkxBRyB8IFdSQVBfUEFSVElBTF9GTEFHIHwgV1JBUF9SRUFSR19GTEFHKSAmJlxuICAgICAgICAgICAgICAgICFkYXRhWzRdLmxlbmd0aCAmJiBkYXRhWzldID09IDFcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICB3cmFwcGVyID0gd3JhcHBlcltnZXRGdW5jTmFtZShkYXRhWzBdKV0uYXBwbHkod3JhcHBlciwgZGF0YVszXSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdyYXBwZXIgPSAoZnVuYy5sZW5ndGggPT0gMSAmJiBpc0xhemlhYmxlKGZ1bmMpKVxuICAgICAgICAgICAgICA/IHdyYXBwZXJbZnVuY05hbWVdKClcbiAgICAgICAgICAgICAgOiB3cmFwcGVyLnRocnUoZnVuYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgICAgdmFsdWUgPSBhcmdzWzBdO1xuXG4gICAgICAgICAgaWYgKHdyYXBwZXIgJiYgYXJncy5sZW5ndGggPT0gMSAmJiBpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHdyYXBwZXIucGxhbnQodmFsdWUpLnZhbHVlKCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgICAgIHJlc3VsdCA9IGxlbmd0aCA/IGZ1bmNzW2luZGV4XS5hcHBseSh0aGlzLCBhcmdzKSA6IHZhbHVlO1xuXG4gICAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZ1bmNzW2luZGV4XS5jYWxsKHRoaXMsIHJlc3VsdCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggb3B0aW9uYWwgYHRoaXNgXG4gICAgICogYmluZGluZyBvZiBgdGhpc0FyZ2AsIHBhcnRpYWwgYXBwbGljYXRpb24sIGFuZCBjdXJyeWluZy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0geyp9IFt0aGlzQXJnXSBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW3BhcnRpYWxzUmlnaHRdIFRoZSBhcmd1bWVudHMgdG8gYXBwZW5kIHRvIHRob3NlIHByb3ZpZGVkXG4gICAgICogIHRvIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNSaWdodF0gVGhlIGBwYXJ0aWFsc1JpZ2h0YCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUh5YnJpZChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgcGFydGlhbHNSaWdodCwgaG9sZGVyc1JpZ2h0LCBhcmdQb3MsIGFyeSwgYXJpdHkpIHtcbiAgICAgIHZhciBpc0FyeSA9IGJpdG1hc2sgJiBXUkFQX0FSWV9GTEFHLFxuICAgICAgICAgIGlzQmluZCA9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyxcbiAgICAgICAgICBpc0JpbmRLZXkgPSBiaXRtYXNrICYgV1JBUF9CSU5EX0tFWV9GTEFHLFxuICAgICAgICAgIGlzQ3VycmllZCA9IGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSxcbiAgICAgICAgICBpc0ZsaXAgPSBiaXRtYXNrICYgV1JBUF9GTElQX0ZMQUcsXG4gICAgICAgICAgQ3RvciA9IGlzQmluZEtleSA/IHVuZGVmaW5lZCA6IGNyZWF0ZUN0b3IoZnVuYyk7XG5cbiAgICAgIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuICAgICAgICAgICAgYXJncyA9IEFycmF5KGxlbmd0aCksXG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcblxuICAgICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDdXJyaWVkKSB7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0SG9sZGVyKHdyYXBwZXIpLFxuICAgICAgICAgICAgICBob2xkZXJzQ291bnQgPSBjb3VudEhvbGRlcnMoYXJncywgcGxhY2Vob2xkZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0aWFscykge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJncyhhcmdzLCBwYXJ0aWFscywgaG9sZGVycywgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydGlhbHNSaWdodCkge1xuICAgICAgICAgIGFyZ3MgPSBjb21wb3NlQXJnc1JpZ2h0KGFyZ3MsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCwgaXNDdXJyaWVkKTtcbiAgICAgICAgfVxuICAgICAgICBsZW5ndGggLT0gaG9sZGVyc0NvdW50O1xuICAgICAgICBpZiAoaXNDdXJyaWVkICYmIGxlbmd0aCA8IGFyaXR5KSB7XG4gICAgICAgICAgdmFyIG5ld0hvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhhcmdzLCBwbGFjZWhvbGRlcik7XG4gICAgICAgICAgcmV0dXJuIGNyZWF0ZVJlY3VycnkoXG4gICAgICAgICAgICBmdW5jLCBiaXRtYXNrLCBjcmVhdGVIeWJyaWQsIHdyYXBwZXIucGxhY2Vob2xkZXIsIHRoaXNBcmcsXG4gICAgICAgICAgICBhcmdzLCBuZXdIb2xkZXJzLCBhcmdQb3MsIGFyeSwgYXJpdHkgLSBsZW5ndGhcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aGlzQmluZGluZyA9IGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLFxuICAgICAgICAgICAgZm4gPSBpc0JpbmRLZXkgPyB0aGlzQmluZGluZ1tmdW5jXSA6IGZ1bmM7XG5cbiAgICAgICAgbGVuZ3RoID0gYXJncy5sZW5ndGg7XG4gICAgICAgIGlmIChhcmdQb3MpIHtcbiAgICAgICAgICBhcmdzID0gcmVvcmRlcihhcmdzLCBhcmdQb3MpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRmxpcCAmJiBsZW5ndGggPiAxKSB7XG4gICAgICAgICAgYXJncy5yZXZlcnNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJ5ICYmIGFyeSA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3MubGVuZ3RoID0gYXJ5O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpIHtcbiAgICAgICAgICBmbiA9IEN0b3IgfHwgY3JlYXRlQ3Rvcihmbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNCaW5kaW5nLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmludmVydEJ5YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0dGVyIFRoZSBmdW5jdGlvbiB0byBzZXQgYWNjdW11bGF0b3IgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRvSXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgaXRlcmF0ZWVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGludmVydGVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmVydGVyKHNldHRlciwgdG9JdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgICAgcmV0dXJuIGJhc2VJbnZlcnRlcihvYmplY3QsIHNldHRlciwgdG9JdGVyYXRlZShpdGVyYXRlZSksIHt9KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSBtYXRoZW1hdGljYWwgb3BlcmF0aW9uIG9uIHR3byB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IG9wZXJhdG9yIFRoZSBmdW5jdGlvbiB0byBwZXJmb3JtIHRoZSBvcGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSB1c2VkIGZvciBgdW5kZWZpbmVkYCBhcmd1bWVudHMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWF0aGVtYXRpY2FsIG9wZXJhdGlvbiBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVNYXRoT3BlcmF0aW9uKG9wZXJhdG9yLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdDtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQgJiYgb3RoZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3RoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG90aGVyO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFsdWUgPSBiYXNlVG9TdHJpbmcodmFsdWUpO1xuICAgICAgICAgICAgb3RoZXIgPSBiYXNlVG9TdHJpbmcob3RoZXIpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGJhc2VUb051bWJlcih2YWx1ZSk7XG4gICAgICAgICAgICBvdGhlciA9IGJhc2VUb051bWJlcihvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IG9wZXJhdG9yKHZhbHVlLCBvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8ub3ZlcmAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGFycmF5RnVuYyBUaGUgZnVuY3Rpb24gdG8gaXRlcmF0ZSBvdmVyIGl0ZXJhdGVlcy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBvdmVyIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZU92ZXIoYXJyYXlGdW5jKSB7XG4gICAgICByZXR1cm4gZmxhdFJlc3QoZnVuY3Rpb24oaXRlcmF0ZWVzKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IGFycmF5TWFwKGl0ZXJhdGVlcywgYmFzZVVuYXJ5KGdldEl0ZXJhdGVlKCkpKTtcbiAgICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgICB2YXIgdGhpc0FyZyA9IHRoaXM7XG4gICAgICAgICAgcmV0dXJuIGFycmF5RnVuYyhpdGVyYXRlZXMsIGZ1bmN0aW9uKGl0ZXJhdGVlKSB7XG4gICAgICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHRoaXNBcmcsIGFyZ3MpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdGhlIHBhZGRpbmcgZm9yIGBzdHJpbmdgIGJhc2VkIG9uIGBsZW5ndGhgLiBUaGUgYGNoYXJzYCBzdHJpbmdcbiAgICAgKiBpcyB0cnVuY2F0ZWQgaWYgdGhlIG51bWJlciBvZiBjaGFyYWN0ZXJzIGV4Y2VlZHMgYGxlbmd0aGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBsZW5ndGggVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkaW5nIGZvciBgc3RyaW5nYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYWRkaW5nKGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIGNoYXJzID0gY2hhcnMgPT09IHVuZGVmaW5lZCA/ICcgJyA6IGJhc2VUb1N0cmluZyhjaGFycyk7XG5cbiAgICAgIHZhciBjaGFyc0xlbmd0aCA9IGNoYXJzLmxlbmd0aDtcbiAgICAgIGlmIChjaGFyc0xlbmd0aCA8IDIpIHtcbiAgICAgICAgcmV0dXJuIGNoYXJzTGVuZ3RoID8gYmFzZVJlcGVhdChjaGFycywgbGVuZ3RoKSA6IGNoYXJzO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VSZXBlYXQoY2hhcnMsIG5hdGl2ZUNlaWwobGVuZ3RoIC8gc3RyaW5nU2l6ZShjaGFycykpKTtcbiAgICAgIHJldHVybiBoYXNVbmljb2RlKGNoYXJzKVxuICAgICAgICA/IGNhc3RTbGljZShzdHJpbmdUb0FycmF5KHJlc3VsdCksIDAsIGxlbmd0aCkuam9pbignJylcbiAgICAgICAgOiByZXN1bHQuc2xpY2UoMCwgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCB3cmFwcyBgZnVuY2AgdG8gaW52b2tlIGl0IHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nXG4gICAgICogb2YgYHRoaXNBcmdgIGFuZCBgcGFydGlhbHNgIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHsqfSB0aGlzQXJnIFRoZSBgdGhpc2AgYmluZGluZyBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtBcnJheX0gcGFydGlhbHMgVGhlIGFyZ3VtZW50cyB0byBwcmVwZW5kIHRvIHRob3NlIHByb3ZpZGVkIHRvXG4gICAgICogIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgd3JhcHBlZCBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGVQYXJ0aWFsKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgaXNCaW5kID0gYml0bWFzayAmIFdSQVBfQklORF9GTEFHLFxuICAgICAgICAgIEN0b3IgPSBjcmVhdGVDdG9yKGZ1bmMpO1xuXG4gICAgICBmdW5jdGlvbiB3cmFwcGVyKCkge1xuICAgICAgICB2YXIgYXJnc0luZGV4ID0gLTEsXG4gICAgICAgICAgICBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgICAgIGxlZnRJbmRleCA9IC0xLFxuICAgICAgICAgICAgbGVmdExlbmd0aCA9IHBhcnRpYWxzLmxlbmd0aCxcbiAgICAgICAgICAgIGFyZ3MgPSBBcnJheShsZWZ0TGVuZ3RoICsgYXJnc0xlbmd0aCksXG4gICAgICAgICAgICBmbiA9ICh0aGlzICYmIHRoaXMgIT09IHJvb3QgJiYgdGhpcyBpbnN0YW5jZW9mIHdyYXBwZXIpID8gQ3RvciA6IGZ1bmM7XG5cbiAgICAgICAgd2hpbGUgKCsrbGVmdEluZGV4IDwgbGVmdExlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4XSA9IHBhcnRpYWxzW2xlZnRJbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGFyZ3NMZW5ndGgtLSkge1xuICAgICAgICAgIGFyZ3NbbGVmdEluZGV4KytdID0gYXJndW1lbnRzWysrYXJnc0luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXBwbHkoZm4sIGlzQmluZCA/IHRoaXNBcmcgOiB0aGlzLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB3cmFwcGVyO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy5yYW5nZWAgb3IgYF8ucmFuZ2VSaWdodGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJhbmdlIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJhbmdlKGZyb21SaWdodCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHN0YXJ0LCBlbmQsIHN0ZXApIHtcbiAgICAgICAgaWYgKHN0ZXAgJiYgdHlwZW9mIHN0ZXAgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoc3RhcnQsIGVuZCwgc3RlcCkpIHtcbiAgICAgICAgICBlbmQgPSBzdGVwID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIC8vIEVuc3VyZSB0aGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAgICAgICAgc3RhcnQgPSB0b0Zpbml0ZShzdGFydCk7XG4gICAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGVuZCA9IHN0YXJ0O1xuICAgICAgICAgIHN0YXJ0ID0gMDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBlbmQgPSB0b0Zpbml0ZShlbmQpO1xuICAgICAgICB9XG4gICAgICAgIHN0ZXAgPSBzdGVwID09PSB1bmRlZmluZWQgPyAoc3RhcnQgPCBlbmQgPyAxIDogLTEpIDogdG9GaW5pdGUoc3RlcCk7XG4gICAgICAgIHJldHVybiBiYXNlUmFuZ2Uoc3RhcnQsIGVuZCwgc3RlcCwgZnJvbVJpZ2h0KTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcGVyZm9ybXMgYSByZWxhdGlvbmFsIG9wZXJhdGlvbiBvbiB0d28gdmFsdWVzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcGVyYXRvciBUaGUgZnVuY3Rpb24gdG8gcGVyZm9ybSB0aGUgb3BlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlbGF0aW9uYWwgb3BlcmF0aW9uIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24ob3BlcmF0b3IpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSwgb3RoZXIpIHtcbiAgICAgICAgaWYgKCEodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnICYmIHR5cGVvZiBvdGhlciA9PSAnc3RyaW5nJykpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvTnVtYmVyKHZhbHVlKTtcbiAgICAgICAgICBvdGhlciA9IHRvTnVtYmVyKG90aGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3BlcmF0b3IodmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgd3JhcHMgYGZ1bmNgIHRvIGNvbnRpbnVlIGN1cnJ5aW5nLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGNyZWF0ZVdyYXBgIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gd3JhcEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNyZWF0ZSB0aGUgYGZ1bmNgIHdyYXBwZXIuXG4gICAgICogQHBhcmFtIHsqfSBwbGFjZWhvbGRlciBUaGUgcGxhY2Vob2xkZXIgdmFsdWUuXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gcHJlcGVuZCB0byB0aG9zZSBwcm92aWRlZCB0b1xuICAgICAqICB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtob2xkZXJzXSBUaGUgYHBhcnRpYWxzYCBwbGFjZWhvbGRlciBpbmRleGVzLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFthcmdQb3NdIFRoZSBhcmd1bWVudCBwb3NpdGlvbnMgb2YgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyeV0gVGhlIGFyaXR5IGNhcCBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eV0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB3cmFwcGVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVJlY3VycnkoZnVuYywgYml0bWFzaywgd3JhcEZ1bmMsIHBsYWNlaG9sZGVyLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNDdXJyeSA9IGJpdG1hc2sgJiBXUkFQX0NVUlJZX0ZMQUcsXG4gICAgICAgICAgbmV3SG9sZGVycyA9IGlzQ3VycnkgPyBob2xkZXJzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld0hvbGRlcnNSaWdodCA9IGlzQ3VycnkgPyB1bmRlZmluZWQgOiBob2xkZXJzLFxuICAgICAgICAgIG5ld1BhcnRpYWxzID0gaXNDdXJyeSA/IHBhcnRpYWxzIDogdW5kZWZpbmVkLFxuICAgICAgICAgIG5ld1BhcnRpYWxzUmlnaHQgPSBpc0N1cnJ5ID8gdW5kZWZpbmVkIDogcGFydGlhbHM7XG5cbiAgICAgIGJpdG1hc2sgfD0gKGlzQ3VycnkgPyBXUkFQX1BBUlRJQUxfRkxBRyA6IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgIGJpdG1hc2sgJj0gfihpc0N1cnJ5ID8gV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcgOiBXUkFQX1BBUlRJQUxfRkxBRyk7XG5cbiAgICAgIGlmICghKGJpdG1hc2sgJiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUcpKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX0JJTkRfRkxBRyB8IFdSQVBfQklORF9LRVlfRkxBRyk7XG4gICAgICB9XG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgbmV3UGFydGlhbHMsIG5ld0hvbGRlcnMsIG5ld1BhcnRpYWxzUmlnaHQsXG4gICAgICAgIG5ld0hvbGRlcnNSaWdodCwgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICB2YXIgcmVzdWx0ID0gd3JhcEZ1bmMuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIGlmIChpc0xhemlhYmxlKGZ1bmMpKSB7XG4gICAgICAgIHNldERhdGEocmVzdWx0LCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdC5wbGFjZWhvbGRlciA9IHBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhyZXN1bHQsIGZ1bmMsIGJpdG1hc2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLnJvdW5kYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBNYXRoYCBtZXRob2QgdG8gdXNlIHdoZW4gcm91bmRpbmcuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcm91bmQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlUm91bmQobWV0aG9kTmFtZSkge1xuICAgICAgdmFyIGZ1bmMgPSBNYXRoW21ldGhvZE5hbWVdO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKG51bWJlciwgcHJlY2lzaW9uKSB7XG4gICAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICAgIHByZWNpc2lvbiA9IHByZWNpc2lvbiA9PSBudWxsID8gMCA6IG5hdGl2ZU1pbih0b0ludGVnZXIocHJlY2lzaW9uKSwgMjkyKTtcbiAgICAgICAgaWYgKHByZWNpc2lvbiAmJiBuYXRpdmVJc0Zpbml0ZShudW1iZXIpKSB7XG4gICAgICAgICAgLy8gU2hpZnQgd2l0aCBleHBvbmVudGlhbCBub3RhdGlvbiB0byBhdm9pZCBmbG9hdGluZy1wb2ludCBpc3N1ZXMuXG4gICAgICAgICAgLy8gU2VlIFtNRE5dKGh0dHBzOi8vbWRuLmlvL3JvdW5kI0V4YW1wbGVzKSBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgICAgIHZhciBwYWlyID0gKHRvU3RyaW5nKG51bWJlcikgKyAnZScpLnNwbGl0KCdlJyksXG4gICAgICAgICAgICAgIHZhbHVlID0gZnVuYyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdICsgcHJlY2lzaW9uKSk7XG5cbiAgICAgICAgICBwYWlyID0gKHRvU3RyaW5nKHZhbHVlKSArICdlJykuc3BsaXQoJ2UnKTtcbiAgICAgICAgICByZXR1cm4gKyhwYWlyWzBdICsgJ2UnICsgKCtwYWlyWzFdIC0gcHJlY2lzaW9uKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMobnVtYmVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNldCBvYmplY3Qgb2YgYHZhbHVlc2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHZhbHVlcyBUaGUgdmFsdWVzIHRvIGFkZCB0byB0aGUgc2V0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBzZXQuXG4gICAgICovXG4gICAgdmFyIGNyZWF0ZVNldCA9ICEoU2V0ICYmICgxIC8gc2V0VG9BcnJheShuZXcgU2V0KFssLTBdKSlbMV0pID09IElORklOSVRZKSA/IG5vb3AgOiBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBuZXcgU2V0KHZhbHVlcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgXy50b1BhaXJzYCBvciBgXy50b1BhaXJzSW5gIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhaXJzIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNyZWF0ZVRvUGFpcnMoa2V5c0Z1bmMpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICAgICAgdmFyIHRhZyA9IGdldFRhZyhvYmplY3QpO1xuICAgICAgICBpZiAodGFnID09IG1hcFRhZykge1xuICAgICAgICAgIHJldHVybiBtYXBUb0FycmF5KG9iamVjdCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgICByZXR1cm4gc2V0VG9QYWlycyhvYmplY3QpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBiYXNlVG9QYWlycyhvYmplY3QsIGtleXNGdW5jKG9iamVjdCkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBlaXRoZXIgY3VycmllcyBvciBpbnZva2VzIGBmdW5jYCB3aXRoIG9wdGlvbmFsXG4gICAgICogYHRoaXNgIGJpbmRpbmcgYW5kIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IGZ1bmMgVGhlIGZ1bmN0aW9uIG9yIG1ldGhvZCBuYW1lIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gICAgICogICAgMSAtIGBfLmJpbmRgXG4gICAgICogICAgMiAtIGBfLmJpbmRLZXlgXG4gICAgICogICAgNCAtIGBfLmN1cnJ5YCBvciBgXy5jdXJyeVJpZ2h0YCBvZiBhIGJvdW5kIGZ1bmN0aW9uXG4gICAgICogICAgOCAtIGBfLmN1cnJ5YFxuICAgICAqICAgMTYgLSBgXy5jdXJyeVJpZ2h0YFxuICAgICAqICAgMzIgLSBgXy5wYXJ0aWFsYFxuICAgICAqICAgNjQgLSBgXy5wYXJ0aWFsUmlnaHRgXG4gICAgICogIDEyOCAtIGBfLnJlYXJnYFxuICAgICAqICAyNTYgLSBgXy5hcnlgXG4gICAgICogIDUxMiAtIGBfLmZsaXBgXG4gICAgICogQHBhcmFtIHsqfSBbdGhpc0FyZ10gVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2hvbGRlcnNdIFRoZSBgcGFydGlhbHNgIHBsYWNlaG9sZGVyIGluZGV4ZXMuXG4gICAgICogQHBhcmFtIHtBcnJheX0gW2FyZ1Bvc10gVGhlIGFyZ3VtZW50IHBvc2l0aW9ucyBvZiB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJ5XSBUaGUgYXJpdHkgY2FwIG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2FyaXR5XSBUaGUgYXJpdHkgb2YgYGZ1bmNgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHdyYXBwZWQgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3JlYXRlV3JhcChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscywgaG9sZGVycywgYXJnUG9zLCBhcnksIGFyaXR5KSB7XG4gICAgICB2YXIgaXNCaW5kS2V5ID0gYml0bWFzayAmIFdSQVBfQklORF9LRVlfRkxBRztcbiAgICAgIGlmICghaXNCaW5kS2V5ICYmIHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IHBhcnRpYWxzID8gcGFydGlhbHMubGVuZ3RoIDogMDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIGJpdG1hc2sgJj0gfihXUkFQX1BBUlRJQUxfRkxBRyB8IFdSQVBfUEFSVElBTF9SSUdIVF9GTEFHKTtcbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgYXJ5ID0gYXJ5ID09PSB1bmRlZmluZWQgPyBhcnkgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKGFyeSksIDApO1xuICAgICAgYXJpdHkgPSBhcml0eSA9PT0gdW5kZWZpbmVkID8gYXJpdHkgOiB0b0ludGVnZXIoYXJpdHkpO1xuICAgICAgbGVuZ3RoIC09IGhvbGRlcnMgPyBob2xkZXJzLmxlbmd0aCA6IDA7XG5cbiAgICAgIGlmIChiaXRtYXNrICYgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxzUmlnaHQgPSBwYXJ0aWFscyxcbiAgICAgICAgICAgIGhvbGRlcnNSaWdodCA9IGhvbGRlcnM7XG5cbiAgICAgICAgcGFydGlhbHMgPSBob2xkZXJzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBpc0JpbmRLZXkgPyB1bmRlZmluZWQgOiBnZXREYXRhKGZ1bmMpO1xuXG4gICAgICB2YXIgbmV3RGF0YSA9IFtcbiAgICAgICAgZnVuYywgYml0bWFzaywgdGhpc0FyZywgcGFydGlhbHMsIGhvbGRlcnMsIHBhcnRpYWxzUmlnaHQsIGhvbGRlcnNSaWdodCxcbiAgICAgICAgYXJnUG9zLCBhcnksIGFyaXR5XG4gICAgICBdO1xuXG4gICAgICBpZiAoZGF0YSkge1xuICAgICAgICBtZXJnZURhdGEobmV3RGF0YSwgZGF0YSk7XG4gICAgICB9XG4gICAgICBmdW5jID0gbmV3RGF0YVswXTtcbiAgICAgIGJpdG1hc2sgPSBuZXdEYXRhWzFdO1xuICAgICAgdGhpc0FyZyA9IG5ld0RhdGFbMl07XG4gICAgICBwYXJ0aWFscyA9IG5ld0RhdGFbM107XG4gICAgICBob2xkZXJzID0gbmV3RGF0YVs0XTtcbiAgICAgIGFyaXR5ID0gbmV3RGF0YVs5XSA9IG5ld0RhdGFbOV0gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IChpc0JpbmRLZXkgPyAwIDogZnVuYy5sZW5ndGgpXG4gICAgICAgIDogbmF0aXZlTWF4KG5ld0RhdGFbOV0gLSBsZW5ndGgsIDApO1xuXG4gICAgICBpZiAoIWFyaXR5ICYmIGJpdG1hc2sgJiAoV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKSkge1xuICAgICAgICBiaXRtYXNrICY9IH4oV1JBUF9DVVJSWV9GTEFHIHwgV1JBUF9DVVJSWV9SSUdIVF9GTEFHKTtcbiAgICAgIH1cbiAgICAgIGlmICghYml0bWFzayB8fCBiaXRtYXNrID09IFdSQVBfQklORF9GTEFHKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBjcmVhdGVCaW5kKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcpO1xuICAgICAgfSBlbHNlIGlmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRyB8fCBiaXRtYXNrID09IFdSQVBfQ1VSUllfUklHSFRfRkxBRykge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVDdXJyeShmdW5jLCBiaXRtYXNrLCBhcml0eSk7XG4gICAgICB9IGVsc2UgaWYgKChiaXRtYXNrID09IFdSQVBfUEFSVElBTF9GTEFHIHx8IGJpdG1hc2sgPT0gKFdSQVBfQklORF9GTEFHIHwgV1JBUF9QQVJUSUFMX0ZMQUcpKSAmJiAhaG9sZGVycy5sZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0ID0gY3JlYXRlUGFydGlhbChmdW5jLCBiaXRtYXNrLCB0aGlzQXJnLCBwYXJ0aWFscyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBjcmVhdGVIeWJyaWQuYXBwbHkodW5kZWZpbmVkLCBuZXdEYXRhKTtcbiAgICAgIH1cbiAgICAgIHZhciBzZXR0ZXIgPSBkYXRhID8gYmFzZVNldERhdGEgOiBzZXREYXRhO1xuICAgICAgcmV0dXJuIHNldFdyYXBUb1N0cmluZyhzZXR0ZXIocmVzdWx0LCBuZXdEYXRhKSwgZnVuYywgYml0bWFzayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCBieSBgXy5kZWZhdWx0c2AgdG8gY3VzdG9taXplIGl0cyBgXy5hc3NpZ25JbmAgdXNlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzXG4gICAgICogb2Ygc291cmNlIG9iamVjdHMgdG8gdGhlIGRlc3RpbmF0aW9uIG9iamVjdCBmb3IgYWxsIGRlc3RpbmF0aW9uIHByb3BlcnRpZXNcbiAgICAgKiB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gb2JqVmFsdWUgVGhlIGRlc3RpbmF0aW9uIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgKGVxKG9ialZhbHVlLCBvYmplY3RQcm90b1trZXldKSAmJiAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSB7XG4gICAgICAgIHJldHVybiBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLmRlZmF1bHRzRGVlcGAgdG8gY3VzdG9taXplIGl0cyBgXy5tZXJnZWAgdXNlIHRvIG1lcmdlIHNvdXJjZVxuICAgICAqIG9iamVjdHMgaW50byBkZXN0aW5hdGlvbiBvYmplY3RzIHRoYXQgYXJlIHBhc3NlZCB0aHJ1LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSBzb3VyY2UgdmFsdWUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBtZXJnZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBwYXJlbnQgb2JqZWN0IG9mIGBvYmpWYWx1ZWAuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgcGFyZW50IG9iamVjdCBvZiBgc3JjVmFsdWVgLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgc291cmNlIHZhbHVlcyBhbmQgdGhlaXIgbWVyZ2VkXG4gICAgICogIGNvdW50ZXJwYXJ0cy5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgdmFsdWUgdG8gYXNzaWduLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1c3RvbURlZmF1bHRzTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjaykge1xuICAgICAgaWYgKGlzT2JqZWN0KG9ialZhbHVlKSAmJiBpc09iamVjdChzcmNWYWx1ZSkpIHtcbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgbWVyZ2Ugb2JqZWN0cyBhbmQgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgb2JqVmFsdWUpO1xuICAgICAgICBiYXNlTWVyZ2Uob2JqVmFsdWUsIHNyY1ZhbHVlLCB1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UsIHN0YWNrKTtcbiAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpWYWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VkIGJ5IGBfLm9taXRgIHRvIGN1c3RvbWl6ZSBpdHMgYF8uY2xvbmVEZWVwYCB1c2UgdG8gb25seSBjbG9uZSBwbGFpblxuICAgICAqIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSB1bmNsb25lZCB2YWx1ZSBvciBgdW5kZWZpbmVkYCB0byBkZWZlciBjbG9uaW5nIHRvIGBfLmNsb25lRGVlcGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VzdG9tT21pdENsb25lKHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWx1ZSkgPyB1bmRlZmluZWQgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGFycmF5cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBhcnJheWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVxdWFsQXJyYXlzKGFycmF5LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgb3RoTGVuZ3RoID0gb3RoZXIubGVuZ3RoO1xuXG4gICAgICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgYXJyU3RhY2tlZCA9IHN0YWNrLmdldChhcnJheSk7XG4gICAgICB2YXIgb3RoU3RhY2tlZCA9IHN0YWNrLmdldChvdGhlcik7XG4gICAgICBpZiAoYXJyU3RhY2tlZCAmJiBvdGhTdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBhcnJTdGFja2VkID09IG90aGVyICYmIG90aFN0YWNrZWQgPT0gYXJyYXk7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gICAgICBzdGFjay5zZXQoYXJyYXksIG90aGVyKTtcbiAgICAgIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gICAgICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGFyckxlbmd0aCkge1xuICAgICAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgICAgICA6IGN1c3RvbWl6ZXIoYXJyVmFsdWUsIG90aFZhbHVlLCBpbmRleCwgYXJyYXksIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpZiAoY29tcGFyZWQpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICBpZiAoc2Vlbikge1xuICAgICAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWNhY2hlSGFzKHNlZW4sIG90aEluZGV4KSAmJlxuICAgICAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSkpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgICAgIGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fFxuICAgICAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICAgICAqIHRoZSBzYW1lIGB0b1N0cmluZ1RhZ2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gICAgICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgb3IgYFN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbEJ5VGFnKG9iamVjdCwgb3RoZXIsIHRhZywgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgc3dpdGNoICh0YWcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgICAgICBpZiAoKG9iamVjdC5ieXRlTGVuZ3RoICE9IG90aGVyLmJ5dGVMZW5ndGgpIHx8XG4gICAgICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSBib29sZWFucyB0byBgMWAgb3IgYDBgIGFuZCBkYXRlcyB0byBtaWxsaXNlY29uZHMuXG4gICAgICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgICAgICBjYXNlIGVycm9yVGFnOlxuICAgICAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICAgICAgY2FzZSByZWdleHBUYWc6XG4gICAgICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgICAgIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgdmFyIGNvbnZlcnQgPSBtYXBUb0FycmF5O1xuXG4gICAgICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICAgICAgY29udmVydCB8fCAoY29udmVydCA9IHNldFRvQXJyYXkpO1xuXG4gICAgICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgICAgICBpZiAoc3RhY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJpdG1hc2sgfD0gQ09NUEFSRV9VTk9SREVSRURfRkxBRztcblxuICAgICAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZXF1YWxBcnJheXMoY29udmVydChvYmplY3QpLCBjb252ZXJ0KG90aGVyKSwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjayk7XG4gICAgICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gICAgICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgICAgICBvYmpQcm9wcyA9IGdldEFsbEtleXMob2JqZWN0KSxcbiAgICAgICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgICAgICBvdGhMZW5ndGggPSBvdGhQcm9wcy5sZW5ndGg7XG5cbiAgICAgIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICAgICAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICAgICAgdmFyIGtleSA9IG9ialByb3BzW2luZGV4XTtcbiAgICAgICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIENoZWNrIHRoYXQgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgb2JqU3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgdmFyIG90aFN0YWNrZWQgPSBzdGFjay5nZXQob3RoZXIpO1xuICAgICAgaWYgKG9ialN0YWNrZWQgJiYgb3RoU3RhY2tlZCkge1xuICAgICAgICByZXR1cm4gb2JqU3RhY2tlZCA9PSBvdGhlciAmJiBvdGhTdGFja2VkID09IG9iamVjdDtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSB0cnVlO1xuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gICAgICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IG9iakxlbmd0aCkge1xuICAgICAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICAgICAgb3RoVmFsdWUgPSBvdGhlcltrZXldO1xuXG4gICAgICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIG9ialZhbHVlLCBrZXksIG90aGVyLCBvYmplY3QsIHN0YWNrKVxuICAgICAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBvYmplY3RzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICAgICAgOiBjb21wYXJlZFxuICAgICAgICAgICAgKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICAgICAgb3RoQ3RvciA9IG90aGVyLmNvbnN0cnVjdG9yO1xuXG4gICAgICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgICAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICAgICAoJ2NvbnN0cnVjdG9yJyBpbiBvYmplY3QgJiYgJ2NvbnN0cnVjdG9yJyBpbiBvdGhlcikgJiZcbiAgICAgICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBzdGFja1snZGVsZXRlJ10ob2JqZWN0KTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIGZsYXR0ZW5zIHRoZSByZXN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRSZXN0KGZ1bmMpIHtcbiAgICAgIHJldHVybiBzZXRUb1N0cmluZyhvdmVyUmVzdChmdW5jLCB1bmRlZmluZWQsIGZsYXR0ZW4pLCBmdW5jICsgJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gICAgICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gICAgICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0luLCBnZXRTeW1ib2xzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgbWV0YWRhdGEgZm9yIGBmdW5jYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIGdldERhdGEgPSAhbWV0YU1hcCA/IG5vb3AgOiBmdW5jdGlvbihmdW5jKSB7XG4gICAgICByZXR1cm4gbWV0YU1hcC5nZXQoZnVuYyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hbWUgb2YgYGZ1bmNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBuYW1lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEZ1bmNOYW1lKGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQgPSAoZnVuYy5uYW1lICsgJycpLFxuICAgICAgICAgIGFycmF5ID0gcmVhbE5hbWVzW3Jlc3VsdF0sXG4gICAgICAgICAgbGVuZ3RoID0gaGFzT3duUHJvcGVydHkuY2FsbChyZWFsTmFtZXMsIHJlc3VsdCkgPyBhcnJheS5sZW5ndGggOiAwO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGRhdGEgPSBhcnJheVtsZW5ndGhdLFxuICAgICAgICAgICAgb3RoZXJGdW5jID0gZGF0YS5mdW5jO1xuICAgICAgICBpZiAob3RoZXJGdW5jID09IG51bGwgfHwgb3RoZXJGdW5jID09IGZ1bmMpIHtcbiAgICAgICAgICByZXR1cm4gZGF0YS5uYW1lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGFyZ3VtZW50IHBsYWNlaG9sZGVyIHZhbHVlIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBsYWNlaG9sZGVyIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEhvbGRlcihmdW5jKSB7XG4gICAgICB2YXIgb2JqZWN0ID0gaGFzT3duUHJvcGVydHkuY2FsbChsb2Rhc2gsICdwbGFjZWhvbGRlcicpID8gbG9kYXNoIDogZnVuYztcbiAgICAgIHJldHVybiBvYmplY3QucGxhY2Vob2xkZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYXBwcm9wcmlhdGUgXCJpdGVyYXRlZVwiIGZ1bmN0aW9uLiBJZiBgXy5pdGVyYXRlZWAgaXMgY3VzdG9taXplZCxcbiAgICAgKiB0aGlzIGZ1bmN0aW9uIHJldHVybnMgdGhlIGN1c3RvbSBtZXRob2QsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBiYXNlSXRlcmF0ZWVgLlxuICAgICAqIElmIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQsIHRoZSBjaG9zZW4gZnVuY3Rpb24gaXMgaW52b2tlZCB3aXRoIHRoZW0gYW5kXG4gICAgICogaXRzIHJlc3VsdCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWVdIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHldIFRoZSBhcml0eSBvZiB0aGUgY3JlYXRlZCBpdGVyYXRlZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNob3NlbiBmdW5jdGlvbiBvciBpdHMgcmVzdWx0LlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldEl0ZXJhdGVlKCkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaC5pdGVyYXRlZSB8fCBpdGVyYXRlZTtcbiAgICAgIHJlc3VsdCA9IHJlc3VsdCA9PT0gaXRlcmF0ZWUgPyBiYXNlSXRlcmF0ZWUgOiByZXN1bHQ7XG4gICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA/IHJlc3VsdChhcmd1bWVudHNbMF0sIGFyZ3VtZW50c1sxXSkgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gICAgICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgICAgIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgICAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgICAgICA6IGRhdGEubWFwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgICAgIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgICAgIHZhbHVlID0gb2JqZWN0W2tleV07XG5cbiAgICAgICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZnVuY3Rpb24gaWYgaXQncyBuYXRpdmUsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gICAgICB2YXIgdmFsdWUgPSBnZXRWYWx1ZShvYmplY3QsIGtleSk7XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICAgICAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgICAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgICAgaWYgKHVubWFza2VkKSB7XG4gICAgICAgIGlmIChpc093bikge1xuICAgICAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHMgPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICAgICAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKG9iamVjdCwgc3ltYm9sKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gICAgICovXG4gICAgdmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgICB3aGlsZSAob2JqZWN0KSB7XG4gICAgICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICAgICAqL1xuICAgIHZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4gICAgLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuICAgIGlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAgICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgICAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAgICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICAgICAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgICAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHZpZXcsIGFwcGx5aW5nIGFueSBgdHJhbnNmb3Jtc2AgdG8gdGhlIGBzdGFydGAgYW5kIGBlbmRgIHBvc2l0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBvZiB0aGUgdmlldy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHZpZXcuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdHJhbnNmb3JtcyBUaGUgdHJhbnNmb3JtYXRpb25zIHRvIGFwcGx5IHRvIHRoZSB2aWV3LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGBzdGFydGAgYW5kIGBlbmRgXG4gICAgICogIHBvc2l0aW9ucyBvZiB0aGUgdmlldy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBnZXRWaWV3KHN0YXJ0LCBlbmQsIHRyYW5zZm9ybXMpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGxlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgZGF0YSA9IHRyYW5zZm9ybXNbaW5kZXhdLFxuICAgICAgICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICAgICAgICBzd2l0Y2ggKGRhdGEudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ2Ryb3AnOiAgICAgIHN0YXJ0ICs9IHNpemU7IGJyZWFrO1xuICAgICAgICAgIGNhc2UgJ2Ryb3BSaWdodCc6IGVuZCAtPSBzaXplOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlJzogICAgICBlbmQgPSBuYXRpdmVNaW4oZW5kLCBzdGFydCArIHNpemUpOyBicmVhaztcbiAgICAgICAgICBjYXNlICd0YWtlUmlnaHQnOiBzdGFydCA9IG5hdGl2ZU1heChzdGFydCwgZW5kIC0gc2l6ZSk7IGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4geyAnc3RhcnQnOiBzdGFydCwgJ2VuZCc6IGVuZCB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHdyYXBwZXIgZGV0YWlscyBmcm9tIHRoZSBgc291cmNlYCBib2R5IGNvbW1lbnQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzb3VyY2UgVGhlIHNvdXJjZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd3JhcHBlciBkZXRhaWxzLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGdldFdyYXBEZXRhaWxzKHNvdXJjZSkge1xuICAgICAgdmFyIG1hdGNoID0gc291cmNlLm1hdGNoKHJlV3JhcERldGFpbHMpO1xuICAgICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0uc3BsaXQocmVTcGxpdERldGFpbHMpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHQgPSBmYWxzZTtcblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICAgICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAgICAgKGlzQXJyYXkob2JqZWN0KSB8fCBpc0FyZ3VtZW50cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0gbmV3IGFycmF5LmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgICAgIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gICAgICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgICAgICByZXN1bHQuaW5kZXggPSBhcnJheS5pbmRleDtcbiAgICAgICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgICAgIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgICAgICA/IGJhc2VDcmVhdGUoZ2V0UHJvdG90eXBlKG9iamVjdCkpXG4gICAgICAgIDoge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lIGJhc2VkIG9uIGl0cyBgdG9TdHJpbmdUYWdgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgZnVuY3Rpb24gb25seSBzdXBwb3J0cyBjbG9uaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAgICAgKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE1hcGAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgYFNldGAsIG9yIGBTdHJpbmdgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5pdENsb25lQnlUYWcob2JqZWN0LCB0YWcsIGlzRGVlcCkge1xuICAgICAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICBzd2l0Y2ggKHRhZykge1xuICAgICAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICAgICAgY2FzZSBib29sVGFnOlxuICAgICAgICBjYXNlIGRhdGVUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lRGF0YVZpZXcob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgICAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgICAgIGNhc2UgdWludDhUYWc6IGNhc2UgdWludDhDbGFtcGVkVGFnOiBjYXNlIHVpbnQxNlRhZzogY2FzZSB1aW50MzJUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICAgICAgY2FzZSBtYXBUYWc6XG4gICAgICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3Iob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgICAgICBjYXNlIHNldFRhZzpcbiAgICAgICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICAgICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICAgICAgcmV0dXJuIGNsb25lU3ltYm9sKG9iamVjdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5zZXJ0cyB3cmFwcGVyIGBkZXRhaWxzYCBpbiBhIGNvbW1lbnQgYXQgdGhlIHRvcCBvZiB0aGUgYHNvdXJjZWAgYm9keS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZSBUaGUgc291cmNlIHRvIG1vZGlmeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IGRldGFpbHMgVGhlIGRldGFpbHMgdG8gaW5zZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIG1vZGlmaWVkIHNvdXJjZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpbnNlcnRXcmFwRGV0YWlscyhzb3VyY2UsIGRldGFpbHMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBkZXRhaWxzLmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICB9XG4gICAgICB2YXIgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcbiAgICAgIGRldGFpbHNbbGFzdEluZGV4XSA9IChsZW5ndGggPiAxID8gJyYgJyA6ICcnKSArIGRldGFpbHNbbGFzdEluZGV4XTtcbiAgICAgIGRldGFpbHMgPSBkZXRhaWxzLmpvaW4obGVuZ3RoID4gMiA/ICcsICcgOiAnICcpO1xuICAgICAgcmV0dXJuIHNvdXJjZS5yZXBsYWNlKHJlV3JhcENvbW1lbnQsICd7XFxuLyogW3dyYXBwZWQgd2l0aCAnICsgZGV0YWlscyArICddICovXFxuJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBmbGF0dGVuYWJsZSBgYXJndW1lbnRzYCBvYmplY3Qgb3IgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGZsYXR0ZW5hYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGbGF0dGVuYWJsZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpIHx8IGlzQXJndW1lbnRzKHZhbHVlKSB8fFxuICAgICAgICAhIShzcHJlYWRhYmxlU3ltYm9sICYmIHZhbHVlICYmIHZhbHVlW3NwcmVhZGFibGVTeW1ib2xdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICAgICAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZ2l2ZW4gYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHBvdGVudGlhbCBpdGVyYXRlZSB2YWx1ZSBhcmd1bWVudC5cbiAgICAgKiBAcGFyYW0geyp9IGluZGV4IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgaW5kZXggb3Iga2V5IGFyZ3VtZW50LlxuICAgICAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgYXJndW1lbnRzIGFyZSBmcm9tIGFuIGl0ZXJhdGVlIGNhbGwsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0l0ZXJhdGVlQ2FsbCh2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIGluZGV4O1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgICAgID8gKGlzQXJyYXlMaWtlKG9iamVjdCkgJiYgaXNJbmRleChpbmRleCwgb2JqZWN0Lmxlbmd0aCkpXG4gICAgICAgICAgICA6ICh0eXBlID09ICdzdHJpbmcnICYmIGluZGV4IGluIG9iamVjdClcbiAgICAgICAgICApIHtcbiAgICAgICAgcmV0dXJuIGVxKG9iamVjdFtpbmRleF0sIHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICAgICAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICAgICAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgICAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICAgICAgOiAodmFsdWUgPT09IG51bGwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGEgbGF6eSBjb3VudGVycGFydC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBoYXMgYSBsYXp5IGNvdW50ZXJwYXJ0LFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNMYXppYWJsZShmdW5jKSB7XG4gICAgICB2YXIgZnVuY05hbWUgPSBnZXRGdW5jTmFtZShmdW5jKSxcbiAgICAgICAgICBvdGhlciA9IGxvZGFzaFtmdW5jTmFtZV07XG5cbiAgICAgIGlmICh0eXBlb2Ygb3RoZXIgIT0gJ2Z1bmN0aW9uJyB8fCAhKGZ1bmNOYW1lIGluIExhenlXcmFwcGVyLnByb3RvdHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKGZ1bmMgPT09IG90aGVyKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIGRhdGEgPSBnZXREYXRhKG90aGVyKTtcbiAgICAgIHJldHVybiAhIWRhdGEgJiYgZnVuYyA9PT0gZGF0YVswXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gICAgICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgZnVuY2AgaXMgY2FwYWJsZSBvZiBiZWluZyBtYXNrZWQuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2FibGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICB2YXIgaXNNYXNrYWJsZSA9IGNvcmVKc0RhdGEgPyBpc0Z1bmN0aW9uIDogc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgcHJvdG90eXBlIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1Byb3RvdHlwZSh2YWx1ZSkge1xuICAgICAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICAgICAgcmV0dXJuIHZhbHVlID09PSBwcm90bztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gICAgICogIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBlbHNlIGBmYWxzZWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlICYmICFpc09iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gICAgICogZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb2JqZWN0W2tleV0gPT09IHNyY1ZhbHVlICYmXG4gICAgICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWVtb2l6ZWAgd2hpY2ggY2xlYXJzIHRoZSBtZW1vaXplZCBmdW5jdGlvbidzXG4gICAgICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICAgICAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgICAgIGlmIChjYWNoZS5zaXplID09PSBNQVhfTUVNT0laRV9TSVpFKSB7XG4gICAgICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ga2V5O1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTWVyZ2VzIHRoZSBmdW5jdGlvbiBtZXRhZGF0YSBvZiBgc291cmNlYCBpbnRvIGBkYXRhYC5cbiAgICAgKlxuICAgICAqIE1lcmdpbmcgbWV0YWRhdGEgcmVkdWNlcyB0aGUgbnVtYmVyIG9mIHdyYXBwZXJzIHVzZWQgdG8gaW52b2tlIGEgZnVuY3Rpb24uXG4gICAgICogVGhpcyBpcyBwb3NzaWJsZSBiZWNhdXNlIG1ldGhvZHMgbGlrZSBgXy5iaW5kYCwgYF8uY3VycnlgLCBhbmQgYF8ucGFydGlhbGBcbiAgICAgKiBtYXkgYmUgYXBwbGllZCByZWdhcmRsZXNzIG9mIGV4ZWN1dGlvbiBvcmRlci4gTWV0aG9kcyBsaWtlIGBfLmFyeWAgYW5kXG4gICAgICogYF8ucmVhcmdgIG1vZGlmeSBmdW5jdGlvbiBhcmd1bWVudHMsIG1ha2luZyB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSBhcmVcbiAgICAgKiBleGVjdXRlZCBpbXBvcnRhbnQsIHByZXZlbnRpbmcgdGhlIG1lcmdpbmcgb2YgbWV0YWRhdGEuIEhvd2V2ZXIsIHdlIG1ha2VcbiAgICAgKiBhbiBleGNlcHRpb24gZm9yIGEgc2FmZSBjb21iaW5lZCBjYXNlIHdoZXJlIGN1cnJpZWQgZnVuY3Rpb25zIGhhdmUgYF8uYXJ5YFxuICAgICAqIGFuZCBvciBgXy5yZWFyZ2AgYXBwbGllZC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF0YSBUaGUgZGVzdGluYXRpb24gbWV0YWRhdGEuXG4gICAgICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBzb3VyY2UgbWV0YWRhdGEuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBkYXRhYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZXJnZURhdGEoZGF0YSwgc291cmNlKSB7XG4gICAgICB2YXIgYml0bWFzayA9IGRhdGFbMV0sXG4gICAgICAgICAgc3JjQml0bWFzayA9IHNvdXJjZVsxXSxcbiAgICAgICAgICBuZXdCaXRtYXNrID0gYml0bWFzayB8IHNyY0JpdG1hc2ssXG4gICAgICAgICAgaXNDb21tb24gPSBuZXdCaXRtYXNrIDwgKFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHIHwgV1JBUF9BUllfRkxBRyk7XG5cbiAgICAgIHZhciBpc0NvbWJvID1cbiAgICAgICAgKChzcmNCaXRtYXNrID09IFdSQVBfQVJZX0ZMQUcpICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpIHx8XG4gICAgICAgICgoc3JjQml0bWFzayA9PSBXUkFQX0FSWV9GTEFHKSAmJiAoYml0bWFzayA9PSBXUkFQX1JFQVJHX0ZMQUcpICYmIChkYXRhWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pKSB8fFxuICAgICAgICAoKHNyY0JpdG1hc2sgPT0gKFdSQVBfQVJZX0ZMQUcgfCBXUkFQX1JFQVJHX0ZMQUcpKSAmJiAoc291cmNlWzddLmxlbmd0aCA8PSBzb3VyY2VbOF0pICYmIChiaXRtYXNrID09IFdSQVBfQ1VSUllfRkxBRykpO1xuXG4gICAgICAvLyBFeGl0IGVhcmx5IGlmIG1ldGFkYXRhIGNhbid0IGJlIG1lcmdlZC5cbiAgICAgIGlmICghKGlzQ29tbW9uIHx8IGlzQ29tYm8pKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgdGhpc0FyZ2AgaWYgYXZhaWxhYmxlLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRykge1xuICAgICAgICBkYXRhWzJdID0gc291cmNlWzJdO1xuICAgICAgICAvLyBTZXQgd2hlbiBjdXJyeWluZyBhIGJvdW5kIGZ1bmN0aW9uLlxuICAgICAgICBuZXdCaXRtYXNrIHw9IGJpdG1hc2sgJiBXUkFQX0JJTkRfRkxBRyA/IDAgOiBXUkFQX0NVUlJZX0JPVU5EX0ZMQUc7XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgYXJndW1lbnRzLlxuICAgICAgdmFyIHZhbHVlID0gc291cmNlWzNdO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFscyA9IGRhdGFbM107XG4gICAgICAgIGRhdGFbM10gPSBwYXJ0aWFscyA/IGNvbXBvc2VBcmdzKHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzRdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzRdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzNdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNF07XG4gICAgICB9XG4gICAgICAvLyBDb21wb3NlIHBhcnRpYWwgcmlnaHQgYXJndW1lbnRzLlxuICAgICAgdmFsdWUgPSBzb3VyY2VbNV07XG4gICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgcGFydGlhbHMgPSBkYXRhWzVdO1xuICAgICAgICBkYXRhWzVdID0gcGFydGlhbHMgPyBjb21wb3NlQXJnc1JpZ2h0KHBhcnRpYWxzLCB2YWx1ZSwgc291cmNlWzZdKSA6IHZhbHVlO1xuICAgICAgICBkYXRhWzZdID0gcGFydGlhbHMgPyByZXBsYWNlSG9sZGVycyhkYXRhWzVdLCBQTEFDRUhPTERFUikgOiBzb3VyY2VbNl07XG4gICAgICB9XG4gICAgICAvLyBVc2Ugc291cmNlIGBhcmdQb3NgIGlmIGF2YWlsYWJsZS5cbiAgICAgIHZhbHVlID0gc291cmNlWzddO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGRhdGFbN10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyeWAgaWYgaXQncyBzbWFsbGVyLlxuICAgICAgaWYgKHNyY0JpdG1hc2sgJiBXUkFQX0FSWV9GTEFHKSB7XG4gICAgICAgIGRhdGFbOF0gPSBkYXRhWzhdID09IG51bGwgPyBzb3VyY2VbOF0gOiBuYXRpdmVNaW4oZGF0YVs4XSwgc291cmNlWzhdKTtcbiAgICAgIH1cbiAgICAgIC8vIFVzZSBzb3VyY2UgYGFyaXR5YCBpZiBvbmUgaXMgbm90IHByb3ZpZGVkLlxuICAgICAgaWYgKGRhdGFbOV0gPT0gbnVsbCkge1xuICAgICAgICBkYXRhWzldID0gc291cmNlWzldO1xuICAgICAgfVxuICAgICAgLy8gVXNlIHNvdXJjZSBgZnVuY2AgYW5kIG1lcmdlIGJpdG1hc2tzLlxuICAgICAgZGF0YVswXSA9IHNvdXJjZVswXTtcbiAgICAgIGRhdGFbMV0gPSBuZXdCaXRtYXNrO1xuXG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGxpa2VcbiAgICAgKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gICAgICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVJlc3RgIHdoaWNoIHRyYW5zZm9ybXMgdGhlIHJlc3QgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGFwcGx5IGEgcmVzdCBwYXJhbWV0ZXIgdG8uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgcmVzdCBhcnJheSB0cmFuc2Zvcm0uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3ZlclJlc3QoZnVuYywgc3RhcnQsIHRyYW5zZm9ybSkge1xuICAgICAgc3RhcnQgPSBuYXRpdmVNYXgoc3RhcnQgPT09IHVuZGVmaW5lZCA/IChmdW5jLmxlbmd0aCAtIDEpIDogc3RhcnQsIDApO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAgICAgIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgICAgICBhcnJheSA9IEFycmF5KGxlbmd0aCk7XG5cbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGluZGV4ID0gLTE7XG4gICAgICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgICAgICB3aGlsZSAoKytpbmRleCA8IHN0YXJ0KSB7XG4gICAgICAgICAgb3RoZXJBcmdzW2luZGV4XSA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIG90aGVyQXJnc1tzdGFydF0gPSB0cmFuc2Zvcm0oYXJyYXkpO1xuICAgICAgICByZXR1cm4gYXBwbHkoZnVuYywgdGhpcywgb3RoZXJBcmdzKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgcGFyZW50IHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhdGggVGhlIHBhdGggdG8gZ2V0IHRoZSBwYXJlbnQgdmFsdWUgb2YuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHBhcmVudCB2YWx1ZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYXJlbnQob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5sZW5ndGggPCAyID8gb2JqZWN0IDogYmFzZUdldChvYmplY3QsIGJhc2VTbGljZShwYXRoLCAwLCAtMSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlb3JkZXIgYGFycmF5YCBhY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmllZCBpbmRleGVzIHdoZXJlIHRoZSBlbGVtZW50IGF0XG4gICAgICogdGhlIGZpcnN0IGluZGV4IGlzIGFzc2lnbmVkIGFzIHRoZSBmaXJzdCBlbGVtZW50LCB0aGUgZWxlbWVudCBhdFxuICAgICAqIHRoZSBzZWNvbmQgaW5kZXggaXMgYXNzaWduZWQgYXMgdGhlIHNlY29uZCBlbGVtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byByZW9yZGVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGluZGV4ZXMgVGhlIGFycmFuZ2VkIGFycmF5IGluZGV4ZXMuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVvcmRlcihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oaW5kZXhlcy5sZW5ndGgsIGFyckxlbmd0aCksXG4gICAgICAgICAgb2xkQXJyYXkgPSBjb3B5QXJyYXkoYXJyYXkpO1xuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgdmFyIGluZGV4ID0gaW5kZXhlc1tsZW5ndGhdO1xuICAgICAgICBhcnJheVtsZW5ndGhdID0gaXNJbmRleChpbmRleCwgYXJyTGVuZ3RoKSA/IG9sZEFycmF5W2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCwgdW5sZXNzIGBrZXlgIGlzIFwiX19wcm90b19fXCIgb3IgXCJjb25zdHJ1Y3RvclwiLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhZmVHZXQob2JqZWN0LCBrZXkpIHtcbiAgICAgIGlmIChrZXkgPT09ICdjb25zdHJ1Y3RvcicgJiYgdHlwZW9mIG9iamVjdFtrZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKGtleSA9PSAnX19wcm90b19fJykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIG1ldGFkYXRhIGZvciBgZnVuY2AuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgdGhpcyBmdW5jdGlvbiBiZWNvbWVzIGhvdCwgaS5lLiBpcyBpbnZva2VkIGEgbG90IGluIGEgc2hvcnRcbiAgICAgKiBwZXJpb2Qgb2YgdGltZSwgaXQgd2lsbCB0cmlwIGl0cyBicmVha2VyIGFuZCB0cmFuc2l0aW9uIHRvIGFuIGlkZW50aXR5XG4gICAgICogZnVuY3Rpb24gdG8gYXZvaWQgZ2FyYmFnZSBjb2xsZWN0aW9uIHBhdXNlcyBpbiBWOC4gU2VlXG4gICAgICogW1Y4IGlzc3VlIDIwNzBdKGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTIwNzApXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXNzb2NpYXRlIG1ldGFkYXRhIHdpdGguXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIFRoZSBtZXRhZGF0YS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICAgICAqL1xuICAgIHZhciBzZXREYXRhID0gc2hvcnRPdXQoYmFzZVNldERhdGEpO1xuXG4gICAgLyoqXG4gICAgICogQSBzaW1wbGUgd3JhcHBlciBhcm91bmQgdGhlIGdsb2JhbCBbYHNldFRpbWVvdXRgXShodHRwczovL21kbi5pby9zZXRUaW1lb3V0KS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfE9iamVjdH0gUmV0dXJucyB0aGUgdGltZXIgaWQgb3IgdGltZW91dCBvYmplY3QuXG4gICAgICovXG4gICAgdmFyIHNldFRpbWVvdXQgPSBjdHhTZXRUaW1lb3V0IHx8IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcbiAgICAgIHJldHVybiByb290LnNldFRpbWVvdXQoZnVuYywgd2FpdCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBzdHJpbmcgVGhlIGB0b1N0cmluZ2AgcmVzdWx0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBgZnVuY2AuXG4gICAgICovXG4gICAgdmFyIHNldFRvU3RyaW5nID0gc2hvcnRPdXQoYmFzZVNldFRvU3RyaW5nKTtcblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGB3cmFwcGVyYCB0byBtaW1pYyB0aGUgc291cmNlIG9mIGByZWZlcmVuY2VgXG4gICAgICogd2l0aCB3cmFwcGVyIGRldGFpbHMgaW4gYSBjb21tZW50IGF0IHRoZSB0b3Agb2YgdGhlIHNvdXJjZSBib2R5LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB3cmFwcGVyIFRoZSBmdW5jdGlvbiB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVmZXJlbmNlIFRoZSByZWZlcmVuY2UgZnVuY3Rpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgY3JlYXRlV3JhcGAgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYHdyYXBwZXJgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNldFdyYXBUb1N0cmluZyh3cmFwcGVyLCByZWZlcmVuY2UsIGJpdG1hc2spIHtcbiAgICAgIHZhciBzb3VyY2UgPSAocmVmZXJlbmNlICsgJycpO1xuICAgICAgcmV0dXJuIHNldFRvU3RyaW5nKHdyYXBwZXIsIGluc2VydFdyYXBEZXRhaWxzKHNvdXJjZSwgdXBkYXRlV3JhcERldGFpbHMoZ2V0V3JhcERldGFpbHMoc291cmNlKSwgYml0bWFzaykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCdsbCBzaG9ydCBvdXQgYW5kIGludm9rZSBgaWRlbnRpdHlgIGluc3RlYWRcbiAgICAgKiBvZiBgZnVuY2Agd2hlbiBpdCdzIGNhbGxlZCBgSE9UX0NPVU5UYCBvciBtb3JlIHRpbWVzIGluIGBIT1RfU1BBTmBcbiAgICAgKiBtaWxsaXNlY29uZHMuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNob3J0YWJsZSBmdW5jdGlvbi5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gICAgICB2YXIgY291bnQgPSAwLFxuICAgICAgICAgIGxhc3RDYWxsZWQgPSAwO1xuXG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBzdGFtcCA9IG5hdGl2ZU5vdygpLFxuICAgICAgICAgICAgcmVtYWluaW5nID0gSE9UX1NQQU4gLSAoc3RhbXAgLSBsYXN0Q2FsbGVkKTtcblxuICAgICAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPiAwKSB7XG4gICAgICAgICAgaWYgKCsrY291bnQgPj0gSE9UX0NPVU5UKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb3VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uc2h1ZmZsZWAgd2hpY2ggbXV0YXRlcyBhbmQgc2V0cyB0aGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gc2h1ZmZsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3NpemU9YXJyYXkubGVuZ3RoXSBUaGUgc2l6ZSBvZiBgYXJyYXlgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGVTZWxmKGFycmF5LCBzaXplKSB7XG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgbGFzdEluZGV4ID0gbGVuZ3RoIC0gMTtcblxuICAgICAgc2l6ZSA9IHNpemUgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHNpemU7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IHNpemUpIHtcbiAgICAgICAgdmFyIHJhbmQgPSBiYXNlUmFuZG9tKGluZGV4LCBsYXN0SW5kZXgpLFxuICAgICAgICAgICAgdmFsdWUgPSBhcnJheVtyYW5kXTtcblxuICAgICAgICBhcnJheVtyYW5kXSA9IGFycmF5W2luZGV4XTtcbiAgICAgICAgYXJyYXlbaW5kZXhdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICBhcnJheS5sZW5ndGggPSBzaXplO1xuICAgICAgcmV0dXJuIGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqL1xuICAgIHZhciBzdHJpbmdUb1BhdGggPSBtZW1vaXplQ2FwcGVkKGZ1bmN0aW9uKHN0cmluZykge1xuICAgICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgICAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKCcnKTtcbiAgICAgIH1cbiAgICAgIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICAgICAgcmVzdWx0LnB1c2gocXVvdGUgPyBzdWJTdHJpbmcucmVwbGFjZShyZUVzY2FwZUNoYXIsICckMScpIDogKG51bWJlciB8fCBtYXRjaCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyBrZXkgaWYgaXQncyBub3QgYSBzdHJpbmcgb3Igc3ltYm9sLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9LZXkodmFsdWUpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gICAgICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYGZ1bmNgIHRvIGl0cyBzb3VyY2UgY29kZS5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1NvdXJjZShmdW5jKSB7XG4gICAgICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmNUb1N0cmluZy5jYWxsKGZ1bmMpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICB0cnkge1xuICAgICAgICAgIHJldHVybiAoZnVuYyArICcnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHdyYXBwZXIgYGRldGFpbHNgIGJhc2VkIG9uIGBiaXRtYXNrYCBmbGFncy5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybnMge0FycmF5fSBkZXRhaWxzIFRoZSBkZXRhaWxzIHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBjcmVhdGVXcmFwYCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgZGV0YWlsc2AuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlV3JhcERldGFpbHMoZGV0YWlscywgYml0bWFzaykge1xuICAgICAgYXJyYXlFYWNoKHdyYXBGbGFncywgZnVuY3Rpb24ocGFpcikge1xuICAgICAgICB2YXIgdmFsdWUgPSAnXy4nICsgcGFpclswXTtcbiAgICAgICAgaWYgKChiaXRtYXNrICYgcGFpclsxXSkgJiYgIWFycmF5SW5jbHVkZXMoZGV0YWlscywgdmFsdWUpKSB7XG4gICAgICAgICAgZGV0YWlscy5wdXNoKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gZGV0YWlscy5zb3J0KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGNsb25lIG9mIGB3cmFwcGVyYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHdyYXBwZXIgVGhlIHdyYXBwZXIgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHdyYXBwZXIuXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNsb25lKHdyYXBwZXIpIHtcbiAgICAgIGlmICh3cmFwcGVyIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHtcbiAgICAgICAgcmV0dXJuIHdyYXBwZXIuY2xvbmUoKTtcbiAgICAgIH1cbiAgICAgIHZhciByZXN1bHQgPSBuZXcgTG9kYXNoV3JhcHBlcih3cmFwcGVyLl9fd3JhcHBlZF9fLCB3cmFwcGVyLl9fY2hhaW5fXyk7XG4gICAgICByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkod3JhcHBlci5fX2FjdGlvbnNfXyk7XG4gICAgICByZXN1bHQuX19pbmRleF9fICA9IHdyYXBwZXIuX19pbmRleF9fO1xuICAgICAgcmVzdWx0Ll9fdmFsdWVzX18gPSB3cmFwcGVyLl9fdmFsdWVzX187XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byBncm91cHMgdGhlIGxlbmd0aCBvZiBgc2l6ZWAuXG4gICAgICogSWYgYGFycmF5YCBjYW4ndCBiZSBzcGxpdCBldmVubHksIHRoZSBmaW5hbCBjaHVuayB3aWxsIGJlIHRoZSByZW1haW5pbmdcbiAgICAgKiBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT0xXSBUaGUgbGVuZ3RoIG9mIGVhY2ggY2h1bmtcbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNodW5rcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jaHVuayhbJ2EnLCAnYicsICdjJywgJ2QnXSwgMik7XG4gICAgICogLy8gPT4gW1snYScsICdiJ10sIFsnYycsICdkJ11dXG4gICAgICpcbiAgICAgKiBfLmNodW5rKFsnYScsICdiJywgJ2MnLCAnZCddLCAzKTtcbiAgICAgKiAvLyA9PiBbWydhJywgJ2InLCAnYyddLCBbJ2QnXV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaHVuayhhcnJheSwgc2l6ZSwgZ3VhcmQpIHtcbiAgICAgIGlmICgoZ3VhcmQgPyBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc2l6ZSwgZ3VhcmQpIDogc2l6ZSA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBzaXplID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNpemUgPSBuYXRpdmVNYXgodG9JbnRlZ2VyKHNpemUpLCAwKTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHNpemUgPCAxKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IEFycmF5KG5hdGl2ZUNlaWwobGVuZ3RoIC8gc2l6ZSkpO1xuXG4gICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gYmFzZVNsaWNlKGFycmF5LCBpbmRleCwgKGluZGV4ICs9IHNpemUpKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSB3aXRoIGFsbCBmYWxzZXkgdmFsdWVzIHJlbW92ZWQuIFRoZSB2YWx1ZXMgYGZhbHNlYCwgYG51bGxgLFxuICAgICAqIGAwYCwgYFwiXCJgLCBgdW5kZWZpbmVkYCwgYW5kIGBOYU5gIGFyZSBmYWxzZXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY29tcGFjdChbMCwgMSwgZmFsc2UsIDIsICcnLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29tcGFjdChhcnJheSkge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgICAgIHJlc3VsdCA9IFtdO1xuXG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIHJlc3VsdFtyZXNJbmRleCsrXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYXJyYXkgY29uY2F0ZW5hdGluZyBgYXJyYXlgIHdpdGggYW55IGFkZGl0aW9uYWwgYXJyYXlzXG4gICAgICogYW5kL29yIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjb25jYXRlbmF0ZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gY29uY2F0ZW5hdGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgY29uY2F0ZW5hdGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMV07XG4gICAgICogdmFyIG90aGVyID0gXy5jb25jYXQoYXJyYXksIDIsIFszXSwgW1s0XV0pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob3RoZXIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCBbNF1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uY2F0KCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICB2YXIgYXJncyA9IEFycmF5KGxlbmd0aCAtIDEpLFxuICAgICAgICAgIGFycmF5ID0gYXJndW1lbnRzWzBdLFxuICAgICAgICAgIGluZGV4ID0gbGVuZ3RoO1xuXG4gICAgICB3aGlsZSAoaW5kZXgtLSkge1xuICAgICAgICBhcmdzW2luZGV4IC0gMV0gPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGFycmF5UHVzaChpc0FycmF5KGFycmF5KSA/IGNvcHlBcnJheShhcnJheSkgOiBbYXJyYXldLCBiYXNlRmxhdHRlbihhcmdzLCAxKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBgYXJyYXlgIHZhbHVlcyBub3QgaW5jbHVkZWQgaW4gdGhlIG90aGVyIGdpdmVuIGFycmF5c1xuICAgICAqIHVzaW5nIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy53aXRob3V0LCBfLnhvclxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2UoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqL1xuICAgIHZhciBkaWZmZXJlbmNlID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlT2JqZWN0KGFycmF5KVxuICAgICAgICA/IGJhc2VEaWZmZXJlbmNlKGFycmF5LCBiYXNlRmxhdHRlbih2YWx1ZXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGlmZmVyZW5jZWAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgb3JkZXIgYW5kIHJlZmVyZW5jZXMgb2YgcmVzdWx0IHZhbHVlcyBhcmVcbiAgICAgKiBkZXRlcm1pbmVkIGJ5IHRoZSBmaXJzdCBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucHVsbEFsbEJ5YCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gZXhjbHVkZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kaWZmZXJlbmNlQnkoW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCBbeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5LCB2YWx1ZXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QodmFsdWVzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIGJhc2VGbGF0dGVuKHZhbHVlcywgMSwgaXNBcnJheUxpa2VPYmplY3QsIHRydWUpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpXG4gICAgICAgIDogW107XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmRpZmZlcmVuY2VgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBvcmRlciBhbmRcbiAgICAgKiByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LiBUaGUgY29tcGFyYXRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0d28gYXJndW1lbnRzOiAoYXJyVmFsLCBvdGhWYWwpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsQWxsV2l0aGAsIHRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGV4Y2x1ZGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLmRpZmZlcmVuY2VXaXRoKG9iamVjdHMsIFt7ICd4JzogMSwgJ3knOiAyIH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGRpZmZlcmVuY2VXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXksIHZhbHVlcykge1xuICAgICAgdmFyIGNvbXBhcmF0b3IgPSBsYXN0KHZhbHVlcyk7XG4gICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoY29tcGFyYXRvcikpIHtcbiAgICAgICAgY29tcGFyYXRvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0FycmF5TGlrZU9iamVjdChhcnJheSlcbiAgICAgICAgPyBiYXNlRGlmZmVyZW5jZShhcnJheSwgYmFzZUZsYXR0ZW4odmFsdWVzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgYmVnaW5uaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuNS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsyLCAzXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICpcbiAgICAgKiBfLmRyb3AoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wKFsxLCAyLCAzXSwgMCk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBuIDwgMCA/IDAgOiBuLCBsZW5ndGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIGRyb3BwZWQgZnJvbSB0aGUgZW5kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0xXSBUaGUgbnVtYmVyIG9mIGVsZW1lbnRzIHRvIGRyb3AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZHJvcFJpZ2h0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLmRyb3BSaWdodChbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCA1KTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wUmlnaHQoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gW107XG4gICAgICB9XG4gICAgICBuID0gKGd1YXJkIHx8IG4gPT09IHVuZGVmaW5lZCkgPyAxIDogdG9JbnRlZ2VyKG4pO1xuICAgICAgbiA9IGxlbmd0aCAtIG47XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCBleGNsdWRpbmcgZWxlbWVudHMgZHJvcHBlZCBmcm9tIHRoZSBlbmQuXG4gICAgICogRWxlbWVudHMgYXJlIGRyb3BwZWQgdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFJpZ2h0V2hpbGUodXNlcnMsIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5kcm9wUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnYmFybmV5JywgJ2ZyZWQnLCAncGViYmxlcyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZHJvcFJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIGV4Y2x1ZGluZyBlbGVtZW50cyBkcm9wcGVkIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKiBFbGVtZW50cyBhcmUgZHJvcHBlZCB1bnRpbCBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleS4gVGhlIHByZWRpY2F0ZSBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXgsIGFycmF5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gIW8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmRyb3BXaGlsZSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZHJvcFdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCcsICdwZWJibGVzJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkcm9wV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCB0cnVlKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpbGxzIGVsZW1lbnRzIG9mIGBhcnJheWAgd2l0aCBgdmFsdWVgIGZyb20gYHN0YXJ0YCB1cCB0bywgYnV0IG5vdFxuICAgICAqIGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZpbGwuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZmlsbCBgYXJyYXlgIHdpdGguXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfLmZpbGwoYXJyYXksICdhJyk7XG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdhJywgJ2EnXVxuICAgICAqXG4gICAgICogXy5maWxsKEFycmF5KDMpLCAyKTtcbiAgICAgKiAvLyA9PiBbMiwgMiwgMl1cbiAgICAgKlxuICAgICAqIF8uZmlsbChbNCwgNiwgOCwgMTBdLCAnKicsIDEsIDMpO1xuICAgICAqIC8vID0+IFs0LCAnKicsICcqJywgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsbChhcnJheSwgdmFsdWUsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChzdGFydCAmJiB0eXBlb2Ygc3RhcnQgIT0gJ251bWJlcicgJiYgaXNJdGVyYXRlZUNhbGwoYXJyYXksIHZhbHVlLCBzdGFydCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUZpbGwoYXJyYXksIHZhbHVlLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgZm91bmQgZWxlbWVudCwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IHRydWUgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbmRJbmRleCh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyID09ICdiYXJuZXknOyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCB7ICd1c2VyJzogJ2ZyZWQnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMFxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kSW5kZXgodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZEluZGV4KGFycmF5LCBwcmVkaWNhdGUsIGZyb21JbmRleCkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgdmFyIGluZGV4ID0gZnJvbUluZGV4ID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgIGluZGV4ID0gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kSW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHNcbiAgICAgKiBvZiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PWFycmF5Lmxlbmd0aC0xXSBUaGUgaW5kZXggdG8gc2VhcmNoIGZyb20uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZvdW5kIGVsZW1lbnQsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdwZWJibGVzJywgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLnVzZXIgPT0gJ3BlYmJsZXMnOyB9KTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZExhc3RJbmRleCh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kTGFzdEluZGV4KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gMFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZpbmRMYXN0SW5kZXgoYXJyYXksIHByZWRpY2F0ZSwgZnJvbUluZGV4KSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAoIWxlbmd0aCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgICB9XG4gICAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xuICAgICAgaWYgKGZyb21JbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGluZGV4ID0gdG9JbnRlZ2VyKGZyb21JbmRleCk7XG4gICAgICAgIGluZGV4ID0gZnJvbUluZGV4IDwgMFxuICAgICAgICAgID8gbmF0aXZlTWF4KGxlbmd0aCArIGluZGV4LCAwKVxuICAgICAgICAgIDogbmF0aXZlTWluKGluZGV4LCBsZW5ndGggLSAxKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlRmluZEluZGV4KGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmxhdHRlbnMgYGFycmF5YCBhIHNpbmdsZSBsZXZlbCBkZWVwLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGZsYXR0ZW4uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZmxhdHRlbmVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsYXR0ZW4oWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgWzMsIFs0XV0sIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdHRlbihhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCAxKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlY3Vyc2l2ZWx5IGZsYXR0ZW5zIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gZmxhdHRlbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmbGF0dGVuZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlZXAoWzEsIFsyLCBbMywgWzRdXSwgNV1dKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgNCwgNV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0dGVuRGVlcChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VGbGF0dGVuKGFycmF5LCBJTkZJTklUWSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWN1cnNpdmVseSBmbGF0dGVuIGBhcnJheWAgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjQuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBmbGF0dGVuLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWzEsIFsyLCBbMywgWzRdXSwgNV1dO1xuICAgICAqXG4gICAgICogXy5mbGF0dGVuRGVwdGgoYXJyYXksIDEpO1xuICAgICAqIC8vID0+IFsxLCAyLCBbMywgWzRdXSwgNV1cbiAgICAgKlxuICAgICAqIF8uZmxhdHRlbkRlcHRoKGFycmF5LCAyKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgMywgWzRdLCA1XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXR0ZW5EZXB0aChhcnJheSwgZGVwdGgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGRlcHRoID0gZGVwdGggPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGgpO1xuICAgICAgcmV0dXJuIGJhc2VGbGF0dGVuKGFycmF5LCBkZXB0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIGludmVyc2Ugb2YgYF8udG9QYWlyc2A7IHRoaXMgbWV0aG9kIHJldHVybnMgYW4gb2JqZWN0IGNvbXBvc2VkXG4gICAgICogZnJvbSBrZXktdmFsdWUgYHBhaXJzYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IHBhaXJzIFRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5mcm9tUGFpcnMoW1snYScsIDFdLCBbJ2InLCAyXV0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZyb21QYWlycyhwYWlycykge1xuICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgcmVzdWx0ID0ge307XG5cbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgIHZhciBwYWlyID0gcGFpcnNbaW5kZXhdO1xuICAgICAgICByZXN1bHRbcGFpclswXV0gPSBwYWlyWzFdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgZmlyc3RcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5oZWFkKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5oZWFkKFtdKTtcbiAgICAgKiAvLyA9PiB1bmRlZmluZWRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoZWFkKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkgPyBhcnJheVswXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgZmlyc3Qgb2NjdXJyZW5jZSBvZiBgdmFsdWVgIGlzIGZvdW5kIGluIGBhcnJheWBcbiAgICAgKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICAgICAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy4gSWYgYGZyb21JbmRleGAgaXMgbmVnYXRpdmUsIGl0J3MgdXNlZCBhcyB0aGVcbiAgICAgKiBvZmZzZXQgZnJvbSB0aGUgZW5kIG9mIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZnJvbUluZGV4PTBdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmluZGV4T2YoWzEsIDIsIDEsIDJdLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICpcbiAgICAgKiAvLyBTZWFyY2ggZnJvbSB0aGUgYGZyb21JbmRleGAuXG4gICAgICogXy5pbmRleE9mKFsxLCAyLCAxLCAyXSwgMiwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGZyb21JbmRleCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICBpbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUluZGV4T2YoYXJyYXksIHZhbHVlLCBpbmRleCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbGwgYnV0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5pdGlhbChbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluaXRpYWwoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBiYXNlU2xpY2UoYXJyYXksIDAsIC0xKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGFyZSBpbmNsdWRlZCBpbiBhbGwgZ2l2ZW4gYXJyYXlzXG4gICAgICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIFRoZSBvcmRlciBhbmQgcmVmZXJlbmNlcyBvZiByZXN1bHQgdmFsdWVzIGFyZVxuICAgICAqIGRldGVybWluZWQgYnkgdGhlIGZpcnN0IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uKFsyLCAxXSwgWzIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMl1cbiAgICAgKi9cbiAgICB2YXIgaW50ZXJzZWN0aW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcbiAgICAgIHJldHVybiAobWFwcGVkLmxlbmd0aCAmJiBtYXBwZWRbMF0gPT09IGFycmF5c1swXSlcbiAgICAgICAgPyBiYXNlSW50ZXJzZWN0aW9uKG1hcHBlZClcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWBcbiAgICAgKiB3aGljaCBpcyBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uXG4gICAgICogYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzIG9mIHJlc3VsdCB2YWx1ZXMgYXJlXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGludGVyc2VjdGluZyB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoWzIuMSwgMS4yXSwgWzIuMywgMy40XSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4gWzIuMV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uaW50ZXJzZWN0aW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH1dXG4gICAgICovXG4gICAgdmFyIGludGVyc2VjdGlvbkJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgaXRlcmF0ZWUgPSBsYXN0KGFycmF5cyksXG4gICAgICAgICAgbWFwcGVkID0gYXJyYXlNYXAoYXJyYXlzLCBjYXN0QXJyYXlMaWtlT2JqZWN0KTtcblxuICAgICAgaWYgKGl0ZXJhdGVlID09PSBsYXN0KG1hcHBlZCkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW50ZXJzZWN0aW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gVGhlIG9yZGVyIGFuZCByZWZlcmVuY2VzXG4gICAgICogb2YgcmVzdWx0IHZhbHVlcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgZmlyc3QgYXJyYXkuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgaW50ZXJzZWN0aW5nIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dO1xuICAgICAqIHZhciBvdGhlcnMgPSBbeyAneCc6IDEsICd5JzogMSB9LCB7ICd4JzogMSwgJ3knOiAyIH1dO1xuICAgICAqXG4gICAgICogXy5pbnRlcnNlY3Rpb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9XVxuICAgICAqL1xuICAgIHZhciBpbnRlcnNlY3Rpb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKSxcbiAgICAgICAgICBtYXBwZWQgPSBhcnJheU1hcChhcnJheXMsIGNhc3RBcnJheUxpa2VPYmplY3QpO1xuXG4gICAgICBjb21wYXJhdG9yID0gdHlwZW9mIGNvbXBhcmF0b3IgPT0gJ2Z1bmN0aW9uJyA/IGNvbXBhcmF0b3IgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAoY29tcGFyYXRvcikge1xuICAgICAgICBtYXBwZWQucG9wKCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gKG1hcHBlZC5sZW5ndGggJiYgbWFwcGVkWzBdID09PSBhcnJheXNbMF0pXG4gICAgICAgID8gYmFzZUludGVyc2VjdGlvbihtYXBwZWQsIHVuZGVmaW5lZCwgY29tcGFyYXRvcilcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGFsbCBlbGVtZW50cyBpbiBgYXJyYXlgIGludG8gYSBzdHJpbmcgc2VwYXJhdGVkIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbnZlcnQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzZXBhcmF0b3I9JywnXSBUaGUgZWxlbWVudCBzZXBhcmF0b3IuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgam9pbmVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5qb2luKFsnYScsICdiJywgJ2MnXSwgJ34nKTtcbiAgICAgKiAvLyA9PiAnYX5ifmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gam9pbihhcnJheSwgc2VwYXJhdG9yKSB7XG4gICAgICByZXR1cm4gYXJyYXkgPT0gbnVsbCA/ICcnIDogbmF0aXZlSm9pbi5jYWxsKGFycmF5LCBzZXBhcmF0b3IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIGxhc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQgb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5sYXN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGxhc3QoYXJyYXkpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIHJldHVybiBsZW5ndGggPyBhcnJheVtsZW5ndGggLSAxXSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmluZGV4T2ZgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgYXJyYXlgIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9YXJyYXkubGVuZ3RoLTFdIFRoZSBpbmRleCB0byBzZWFyY2ggZnJvbS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmxhc3RJbmRleE9mKFsxLCAyLCAxLCAyXSwgMik7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogLy8gU2VhcmNoIGZyb20gdGhlIGBmcm9tSW5kZXhgLlxuICAgICAqIF8ubGFzdEluZGV4T2YoWzEsIDIsIDEsIDJdLCAyLCAyKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGFzdEluZGV4T2YoYXJyYXksIHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IGxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpbmRleCA9IHRvSW50ZWdlcihmcm9tSW5kZXgpO1xuICAgICAgICBpbmRleCA9IGluZGV4IDwgMCA/IG5hdGl2ZU1heChsZW5ndGggKyBpbmRleCwgMCkgOiBuYXRpdmVNaW4oaW5kZXgsIGxlbmd0aCAtIDEpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZVxuICAgICAgICA/IHN0cmljdExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSwgaW5kZXgpXG4gICAgICAgIDogYmFzZUZpbmRJbmRleChhcnJheSwgYmFzZUlzTmFOLCBpbmRleCwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyB0aGUgZWxlbWVudCBhdCBpbmRleCBgbmAgb2YgYGFycmF5YC4gSWYgYG5gIGlzIG5lZ2F0aXZlLCB0aGUgbnRoXG4gICAgICogZWxlbWVudCBmcm9tIHRoZSBlbmQgaXMgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbj0wXSBUaGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBudGggZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2QnXTtcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAxKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIF8ubnRoKGFycmF5LCAtMik7XG4gICAgICogLy8gPT4gJ2MnO1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIG50aChhcnJheSwgbikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZU50aChhcnJheSwgdG9JbnRlZ2VyKG4pKSA6IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBnaXZlbiB2YWx1ZXMgZnJvbSBgYXJyYXlgIHVzaW5nXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLndpdGhvdXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5yZW1vdmVgXG4gICAgICogdG8gcmVtb3ZlIGVsZW1lbnRzIGZyb20gYW4gYXJyYXkgYnkgcHJlZGljYXRlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFt2YWx1ZXNdIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGwoYXJyYXksICdhJywgJ2MnKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWydiJywgJ2InXVxuICAgICAqL1xuICAgIHZhciBwdWxsID0gYmFzZVJlc3QocHVsbEFsbCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgdmFsdWVzIHRvIHJlbW92ZS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZWAsIHRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbJ2EnLCAnYicsICdjJywgJ2EnLCAnYicsICdjJ107XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGwoYXJyYXksIFsnYScsICdjJ10pO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbJ2InLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbChhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aCAmJiB2YWx1ZXMgJiYgdmFsdWVzLmxlbmd0aClcbiAgICAgICAgPyBiYXNlUHVsbEFsbChhcnJheSwgdmFsdWVzKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucHVsbEFsbGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgYW5kIGB2YWx1ZXNgIHRvIGdlbmVyYXRlIHRoZSBjcml0ZXJpb25cbiAgICAgKiBieSB3aGljaCB0aGV5J3JlIGNvbXBhcmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uZGlmZmVyZW5jZUJ5YCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDMgfSwgeyAneCc6IDEgfV07XG4gICAgICpcbiAgICAgKiBfLnB1bGxBbGxCeShhcnJheSwgW3sgJ3gnOiAxIH0sIHsgJ3gnOiAzIH1dLCAneCcpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDIgfV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwdWxsQWxsQnkoYXJyYXksIHZhbHVlcywgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoICYmIHZhbHVlcyAmJiB2YWx1ZXMubGVuZ3RoKVxuICAgICAgICA/IGJhc2VQdWxsQWxsKGFycmF5LCB2YWx1ZXMsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiBhcnJheTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnB1bGxBbGxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAgdG8gYHZhbHVlc2AuIFRoZSBjb21wYXJhdG9yIGlzXG4gICAgICogaW52b2tlZCB3aXRoIHR3byBhcmd1bWVudHM6IChhcnJWYWwsIG90aFZhbCkuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVW5saWtlIGBfLmRpZmZlcmVuY2VXaXRoYCwgdGhpcyBtZXRob2QgbXV0YXRlcyBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byByZW1vdmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2NvbXBhcmF0b3JdIFRoZSBjb21wYXJhdG9yIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAzLCAneSc6IDQgfSwgeyAneCc6IDUsICd5JzogNiB9XTtcbiAgICAgKlxuICAgICAqIF8ucHVsbEFsbFdpdGgoYXJyYXksIFt7ICd4JzogMywgJ3knOiA0IH1dLCBfLmlzRXF1YWwpO1xuICAgICAqIGNvbnNvbGUubG9nKGFycmF5KTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogNSwgJ3knOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gcHVsbEFsbFdpdGgoYXJyYXksIHZhbHVlcywgY29tcGFyYXRvcikge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGggJiYgdmFsdWVzICYmIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgID8gYmFzZVB1bGxBbGwoYXJyYXksIHZhbHVlcywgdW5kZWZpbmVkLCBjb21wYXJhdG9yKVxuICAgICAgICA6IGFycmF5O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgZWxlbWVudHMgZnJvbSBgYXJyYXlgIGNvcnJlc3BvbmRpbmcgdG8gYGluZGV4ZXNgIGFuZCByZXR1cm5zIGFuXG4gICAgICogYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8uYXRgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICAgICAqIEBwYXJhbSB7Li4uKG51bWJlcnxudW1iZXJbXSl9IFtpbmRleGVzXSBUaGUgaW5kZXhlcyBvZiBlbGVtZW50cyB0byByZW1vdmUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgcmVtb3ZlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGFycmF5ID0gWydhJywgJ2InLCAnYycsICdkJ107XG4gICAgICogdmFyIHB1bGxlZCA9IF8ucHVsbEF0KGFycmF5LCBbMSwgM10pO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFsnYScsICdjJ11cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKHB1bGxlZCk7XG4gICAgICogLy8gPT4gWydiJywgJ2QnXVxuICAgICAqL1xuICAgIHZhciBwdWxsQXQgPSBmbGF0UmVzdChmdW5jdGlvbihhcnJheSwgaW5kZXhlcykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgICAgIHJlc3VsdCA9IGJhc2VBdChhcnJheSwgaW5kZXhlcyk7XG5cbiAgICAgIGJhc2VQdWxsQXQoYXJyYXksIGFycmF5TWFwKGluZGV4ZXMsIGZ1bmN0aW9uKGluZGV4KSB7XG4gICAgICAgIHJldHVybiBpc0luZGV4KGluZGV4LCBsZW5ndGgpID8gK2luZGV4IDogaW5kZXg7XG4gICAgICB9KS5zb3J0KGNvbXBhcmVBc2NlbmRpbmcpKTtcblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIGVsZW1lbnRzIGZyb20gYGFycmF5YCB0aGF0IGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvclxuICAgICAqIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSByZW1vdmVkIGVsZW1lbnRzLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5maWx0ZXJgLCB0aGlzIG1ldGhvZCBtdXRhdGVzIGBhcnJheWAuIFVzZSBgXy5wdWxsYFxuICAgICAqIHRvIHB1bGwgZWxlbWVudHMgZnJvbSBhbiBhcnJheSBieSB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlbW92ZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzLCA0XTtcbiAgICAgKiB2YXIgZXZlbnMgPSBfLnJlbW92ZShhcnJheSwgZnVuY3Rpb24obikge1xuICAgICAqICAgcmV0dXJuIG4gJSAyID09IDA7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDNdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhldmVucyk7XG4gICAgICogLy8gPT4gWzIsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVtb3ZlKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGluZGV4ZXMgPSBbXSxcbiAgICAgICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyk7XG4gICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgICAgIGlmIChwcmVkaWNhdGUodmFsdWUsIGluZGV4LCBhcnJheSkpIHtcbiAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgICAgaW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYmFzZVB1bGxBdChhcnJheSwgaW5kZXhlcyk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldmVyc2VzIGBhcnJheWAgc28gdGhhdCB0aGUgZmlyc3QgZWxlbWVudCBiZWNvbWVzIHRoZSBsYXN0LCB0aGUgc2Vjb25kXG4gICAgICogZWxlbWVudCBiZWNvbWVzIHRoZSBzZWNvbmQgdG8gbGFzdCwgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYGFycmF5YCBhbmQgaXMgYmFzZWQgb25cbiAgICAgKiBbYEFycmF5I3JldmVyc2VgXShodHRwczovL21kbi5pby9BcnJheS9yZXZlcnNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKlxuICAgICAqIF8ucmV2ZXJzZShhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzMsIDIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmV2ZXJzZShhcnJheSkge1xuICAgICAgcmV0dXJuIGFycmF5ID09IG51bGwgPyBhcnJheSA6IG5hdGl2ZVJldmVyc2UuY2FsbChhcnJheSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgZnJvbSBgc3RhcnRgIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgdXNlZCBpbnN0ZWFkIG9mXG4gICAgICogW2BBcnJheSNzbGljZWBdKGh0dHBzOi8vbWRuLmlvL0FycmF5L3NsaWNlKSB0byBlbnN1cmUgZGVuc2UgYXJyYXlzIGFyZVxuICAgICAqIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICovXG4gICAgZnVuY3Rpb24gc2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChlbmQgJiYgdHlwZW9mIGVuZCAhPSAnbnVtYmVyJyAmJiBpc0l0ZXJhdGVlQ2FsbChhcnJheSwgc3RhcnQsIGVuZCkpIHtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgICBlbmQgPSBsZW5ndGg7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihzdGFydCk7XG4gICAgICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9JbnRlZ2VyKGVuZCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVc2VzIGEgYmluYXJ5IHNlYXJjaCB0byBkZXRlcm1pbmUgdGhlIGxvd2VzdCBpbmRleCBhdCB3aGljaCBgdmFsdWVgXG4gICAgICogc2hvdWxkIGJlIGluc2VydGVkIGludG8gYGFycmF5YCBpbiBvcmRlciB0byBtYWludGFpbiBpdHMgc29ydCBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBzb3J0ZWQgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBldmFsdWF0ZS5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc29ydGVkSW5kZXgoWzMwLCA1MF0sIDQwKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRJbmRleGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCBmb3IgYHZhbHVlYCBhbmQgZWFjaCBlbGVtZW50IG9mIGBhcnJheWAgdG8gY29tcHV0ZSB0aGVpclxuICAgICAqIHNvcnQgcmFua2luZy4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IGF0IHdoaWNoIGB2YWx1ZWAgc2hvdWxkIGJlIGluc2VydGVkXG4gICAgICogIGludG8gYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAneCc6IDQgfSwgeyAneCc6IDUgfV07XG4gICAgICpcbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgZnVuY3Rpb24obykgeyByZXR1cm4gby54OyB9KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnNvcnRlZEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkSW5kZXhCeShhcnJheSwgdmFsdWUsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4QnkoYXJyYXksIHZhbHVlLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uaW5kZXhPZmAgZXhjZXB0IHRoYXQgaXQgcGVyZm9ybXMgYSBiaW5hcnlcbiAgICAgKiBzZWFyY2ggb24gYSBzb3J0ZWQgYGFycmF5YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gMVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZEluZGV4T2YoYXJyYXksIHZhbHVlKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGJhc2VTb3J0ZWRJbmRleChhcnJheSwgdmFsdWUpO1xuICAgICAgICBpZiAoaW5kZXggPCBsZW5ndGggJiYgZXEoYXJyYXlbaW5kZXhdLCB2YWx1ZSkpIHtcbiAgICAgICAgICByZXR1cm4gaW5kZXg7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRlZEluZGV4YCBleGNlcHQgdGhhdCBpdCByZXR1cm5zIHRoZSBoaWdoZXN0XG4gICAgICogaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBgYXJyYXlgIGluIG9yZGVyIHRvXG4gICAgICogbWFpbnRhaW4gaXRzIHNvcnQgb3JkZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgc29ydGVkIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gZXZhbHVhdGUuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggYXQgd2hpY2ggYHZhbHVlYCBzaG91bGQgYmUgaW5zZXJ0ZWRcbiAgICAgKiAgaW50byBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleChbNCwgNSwgNSwgNSwgNl0sIDUpO1xuICAgICAqIC8vID0+IDRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRMYXN0SW5kZXgoYXJyYXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gYmFzZVNvcnRlZEluZGV4KGFycmF5LCB2YWx1ZSwgdHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5zb3J0ZWRMYXN0SW5kZXhgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgZm9yIGB2YWx1ZWAgYW5kIGVhY2ggZWxlbWVudCBvZiBgYXJyYXlgIHRvIGNvbXB1dGUgdGhlaXJcbiAgICAgKiBzb3J0IHJhbmtpbmcuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIHNvcnRlZCBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGV2YWx1YXRlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBhdCB3aGljaCBgdmFsdWVgIHNob3VsZCBiZSBpbnNlcnRlZFxuICAgICAqICBpbnRvIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiA0IH0sIHsgJ3gnOiA1IH1dO1xuICAgICAqXG4gICAgICogXy5zb3J0ZWRMYXN0SW5kZXhCeShvYmplY3RzLCB7ICd4JzogNCB9LCBmdW5jdGlvbihvKSB7IHJldHVybiBvLng7IH0pO1xuICAgICAqIC8vID0+IDFcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29ydGVkTGFzdEluZGV4Qnkob2JqZWN0cywgeyAneCc6IDQgfSwgJ3gnKTtcbiAgICAgKiAvLyA9PiAxXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkTGFzdEluZGV4QnkoYXJyYXksIHZhbHVlLCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGJhc2VTb3J0ZWRJbmRleEJ5KGFycmF5LCB2YWx1ZSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpLCB0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmxhc3RJbmRleE9mYCBleGNlcHQgdGhhdCBpdCBwZXJmb3JtcyBhIGJpbmFyeVxuICAgICAqIHNlYXJjaCBvbiBhIHNvcnRlZCBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCB2YWx1ZSwgZWxzZSBgLTFgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnNvcnRlZExhc3RJbmRleE9mKFs0LCA1LCA1LCA1LCA2XSwgNSk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNvcnRlZExhc3RJbmRleE9mKGFycmF5LCB2YWx1ZSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCkge1xuICAgICAgICB2YXIgaW5kZXggPSBiYXNlU29ydGVkSW5kZXgoYXJyYXksIHZhbHVlLCB0cnVlKSAtIDE7XG4gICAgICAgIGlmIChlcShhcnJheVtpbmRleF0sIHZhbHVlKSkge1xuICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW5pcWAgZXhjZXB0IHRoYXQgaXQncyBkZXNpZ25lZCBhbmQgb3B0aW1pemVkXG4gICAgICogZm9yIHNvcnRlZCBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxKFsxLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICovXG4gICAgZnVuY3Rpb24gc29ydGVkVW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVNvcnRlZFVuaXEoYXJyYXkpXG4gICAgICAgIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxQnlgIGV4Y2VwdCB0aGF0IGl0J3MgZGVzaWduZWQgYW5kIG9wdGltaXplZFxuICAgICAqIGZvciBzb3J0ZWQgYXJyYXlzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlXSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb3J0ZWRVbmlxQnkoWzEuMSwgMS4yLCAyLjMsIDIuNF0sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IFsxLjEsIDIuM11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb3J0ZWRVbmlxQnkoYXJyYXksIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU29ydGVkVW5pcShhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgYWxsIGJ1dCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWlsKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFpbChhcnJheSkge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuICAgICAgcmV0dXJuIGxlbmd0aCA/IGJhc2VTbGljZShhcnJheSwgMSwgbGVuZ3RoKSA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBzbGljZSBvZiBgYXJyYXlgIHdpdGggYG5gIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byB0YWtlLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbMV1cbiAgICAgKlxuICAgICAqIF8udGFrZShbMSwgMiwgM10sIDIpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogXy50YWtlKFsxLCAyLCAzXSwgNSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2UoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2UoYXJyYXksIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoIShhcnJheSAmJiBhcnJheS5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICByZXR1cm4gYmFzZVNsaWNlKGFycmF5LCAwLCBuIDwgMCA/IDAgOiBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGBuYCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPTFdIFRoZSBudW1iZXIgb2YgZWxlbWVudHMgdG8gdGFrZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiBbM11cbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0KFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzIsIDNdXG4gICAgICpcbiAgICAgKiBfLnRha2VSaWdodChbMSwgMiwgM10sIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy50YWtlUmlnaHQoWzEsIDIsIDNdLCAwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRha2VSaWdodChhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICAgIHZhciBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcbiAgICAgIGlmICghbGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIG4gPSAoZ3VhcmQgfHwgbiA9PT0gdW5kZWZpbmVkKSA/IDEgOiB0b0ludGVnZXIobik7XG4gICAgICBuID0gbGVuZ3RoIC0gbjtcbiAgICAgIHJldHVybiBiYXNlU2xpY2UoYXJyYXksIG4gPCAwID8gMCA6IG4sIGxlbmd0aCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHNsaWNlIG9mIGBhcnJheWAgd2l0aCBlbGVtZW50cyB0YWtlbiBmcm9tIHRoZSBlbmQuIEVsZW1lbnRzIGFyZVxuICAgICAqIHRha2VuIHVudGlsIGBwcmVkaWNhdGVgIHJldHVybnMgZmFsc2V5LiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleCwgYXJyYXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8udGFrZVJpZ2h0V2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydwZWJibGVzJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnRha2VSaWdodFdoaWxlKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ3BlYmJsZXMnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlUmlnaHRXaGlsZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdGFrZVJpZ2h0V2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBmYWxzZSwgdHJ1ZSlcbiAgICAgICAgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2xpY2Ugb2YgYGFycmF5YCB3aXRoIGVsZW1lbnRzIHRha2VuIGZyb20gdGhlIGJlZ2lubmluZy4gRWxlbWVudHNcbiAgICAgKiBhcmUgdGFrZW4gdW50aWwgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoXG4gICAgICogdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4LCBhcnJheSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgc2xpY2Ugb2YgYGFycmF5YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy50YWtlV2hpbGUodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leScsICdmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8udGFrZVdoaWxlKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YWtlV2hpbGUoYXJyYXksIHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZVdoaWxlKGFycmF5LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKVxuICAgICAgICA6IFtdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcywgaW4gb3JkZXIsIGZyb20gYWxsIGdpdmVuIGFycmF5cyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbihbMl0sIFsxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgdmFyIHVuaW9uID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSkpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlvbmAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCBmb3IgZWFjaCBlbGVtZW50IG9mIGVhY2ggYGFycmF5c2AgdG8gZ2VuZXJhdGUgdGhlIGNyaXRlcmlvbiBieVxuICAgICAqIHdoaWNoIHVuaXF1ZW5lc3MgaXMgY29tcHV0ZWQuIFJlc3VsdCB2YWx1ZXMgYXJlIGNob3NlbiBmcm9tIHRoZSBmaXJzdFxuICAgICAqIGFycmF5IGluIHdoaWNoIHRoZSB2YWx1ZSBvY2N1cnMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OlxuICAgICAqICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGNvbWJpbmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlvbkJ5KFsyLjFdLCBbMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaW9uQnkoW3sgJ3gnOiAxIH1dLCBbeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgdmFyIHVuaW9uQnkgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHZhciBpdGVyYXRlZSA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGlmIChpc0FycmF5TGlrZU9iamVjdChpdGVyYXRlZSkpIHtcbiAgICAgICAgaXRlcmF0ZWUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVVuaXEoYmFzZUZsYXR0ZW4oYXJyYXlzLCAxLCBpc0FycmF5TGlrZU9iamVjdCwgdHJ1ZSksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaW9uYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjb21wYXJhdG9yYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSBlbGVtZW50cyBvZiBgYXJyYXlzYC4gUmVzdWx0IHZhbHVlcyBhcmUgY2hvc2VuIGZyb21cbiAgICAgKiB0aGUgZmlyc3QgYXJyYXkgaW4gd2hpY2ggdGhlIHZhbHVlIG9jY3Vycy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBjb21iaW5lZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pb25XaXRoKG9iamVjdHMsIG90aGVycywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH0sIHsgJ3gnOiAxLCAneSc6IDEgfV1cbiAgICAgKi9cbiAgICB2YXIgdW5pb25XaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlVW5pcShiYXNlRmxhdHRlbihhcnJheXMsIDEsIGlzQXJyYXlMaWtlT2JqZWN0LCB0cnVlKSwgdW5kZWZpbmVkLCBjb21wYXJhdG9yKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBkdXBsaWNhdGUtZnJlZSB2ZXJzaW9uIG9mIGFuIGFycmF5LCB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpbiB3aGljaCBvbmx5IHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGVhY2ggZWxlbWVudFxuICAgICAqIGlzIGtlcHQuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXJcbiAgICAgKiBpbiB0aGUgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxKFsyLCAxLCAyXSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcShhcnJheSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXkpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51bmlxYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdW5pcXVlbmVzcyBpcyBjb21wdXRlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGVcbiAgICAgKiBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6XG4gICAgICogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBkdXBsaWNhdGUgZnJlZSBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxQnkoWzIuMSwgMS4yLCAyLjNdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMi4xLCAxLjJdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnVuaXFCeShbeyAneCc6IDEgfSwgeyAneCc6IDIgfSwgeyAneCc6IDEgfV0sICd4Jyk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAxIH0sIHsgJ3gnOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcUJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpID8gYmFzZVVuaXEoYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSkgOiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnVuaXFgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheWAuIFRoZSBvcmRlciBvZiByZXN1bHQgdmFsdWVzIGlzXG4gICAgICogZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXIgdGhleSBvY2N1ciBpbiB0aGUgYXJyYXkuVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjb21wYXJhdG9yXSBUaGUgY29tcGFyYXRvciBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGR1cGxpY2F0ZSBmcmVlIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICd4JzogMSwgJ3knOiAyIH0sIHsgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8udW5pcVdpdGgob2JqZWN0cywgXy5pc0VxdWFsKTtcbiAgICAgKiAvLyA9PiBbeyAneCc6IDEsICd5JzogMiB9LCB7ICd4JzogMiwgJ3knOiAxIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5pcVdpdGgoYXJyYXksIGNvbXBhcmF0b3IpIHtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKSA/IGJhc2VVbmlxKGFycmF5LCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpIDogW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYW4gYXJyYXkgb2YgZ3JvdXBlZFxuICAgICAqIGVsZW1lbnRzIGFuZCBjcmVhdGVzIGFuIGFycmF5IHJlZ3JvdXBpbmcgdGhlIGVsZW1lbnRzIHRvIHRoZWlyIHByZS16aXBcbiAgICAgKiBjb25maWd1cmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMi4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMgdG8gcHJvY2Vzcy5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiByZWdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB6aXBwZWQgPSBfLnppcChbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IFtbJ2EnLCAxLCB0cnVlXSwgWydiJywgMiwgZmFsc2VdXVxuICAgICAqXG4gICAgICogXy51bnppcCh6aXBwZWQpO1xuICAgICAqIC8vID0+IFtbJ2EnLCAnYiddLCBbMSwgMl0sIFt0cnVlLCBmYWxzZV1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW56aXAoYXJyYXkpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIGxlbmd0aCA9IDA7XG4gICAgICBhcnJheSA9IGFycmF5RmlsdGVyKGFycmF5LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICBpZiAoaXNBcnJheUxpa2VPYmplY3QoZ3JvdXApKSB7XG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWF4KGdyb3VwLmxlbmd0aCwgbGVuZ3RoKTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICByZXR1cm4gYmFzZVRpbWVzKGxlbmd0aCwgZnVuY3Rpb24oaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGFycmF5TWFwKGFycmF5LCBiYXNlUHJvcGVydHkoaW5kZXgpKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8udW56aXBgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB0byBzcGVjaWZ5XG4gICAgICogaG93IHJlZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cyB0byBwcm9jZXNzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gdG8gY29tYmluZVxuICAgICAqICByZWdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIHJlZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHppcHBlZCA9IF8uemlwKFsxLCAyXSwgWzEwLCAyMF0sIFsxMDAsIDIwMF0pO1xuICAgICAqIC8vID0+IFtbMSwgMTAsIDEwMF0sIFsyLCAyMCwgMjAwXV1cbiAgICAgKlxuICAgICAqIF8udW56aXBXaXRoKHppcHBlZCwgXy5hZGQpO1xuICAgICAqIC8vID0+IFszLCAzMCwgMzAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuemlwV2l0aChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIGlmICghKGFycmF5ICYmIGFycmF5Lmxlbmd0aCkpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHVuemlwKGFycmF5KTtcbiAgICAgIGlmIChpdGVyYXRlZSA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gYXJyYXlNYXAocmVzdWx0LCBmdW5jdGlvbihncm91cCkge1xuICAgICAgICByZXR1cm4gYXBwbHkoaXRlcmF0ZWUsIHVuZGVmaW5lZCwgZ3JvdXApO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBleGNsdWRpbmcgYWxsIGdpdmVuIHZhbHVlcyB1c2luZ1xuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFVubGlrZSBgXy5wdWxsYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBleGNsdWRlLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAc2VlIF8uZGlmZmVyZW5jZSwgXy54b3JcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy53aXRob3V0KFsyLCAxLCAyLCAzXSwgMSwgMik7XG4gICAgICogLy8gPT4gWzNdXG4gICAgICovXG4gICAgdmFyIHdpdGhvdXQgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheSwgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gaXNBcnJheUxpa2VPYmplY3QoYXJyYXkpXG4gICAgICAgID8gYmFzZURpZmZlcmVuY2UoYXJyYXksIHZhbHVlcylcbiAgICAgICAgOiBbXTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdW5pcXVlIHZhbHVlcyB0aGF0IGlzIHRoZVxuICAgICAqIFtzeW1tZXRyaWMgZGlmZmVyZW5jZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU3ltbWV0cmljX2RpZmZlcmVuY2UpXG4gICAgICogb2YgdGhlIGdpdmVuIGFycmF5cy4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZCBieSB0aGUgb3JkZXJcbiAgICAgKiB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgYXJyYXkgb2YgZmlsdGVyZWQgdmFsdWVzLlxuICAgICAqIEBzZWUgXy5kaWZmZXJlbmNlLCBfLndpdGhvdXRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3IoWzIsIDFdLCBbMiwgM10pO1xuICAgICAqIC8vID0+IFsxLCAzXVxuICAgICAqL1xuICAgIHZhciB4b3IgPSBiYXNlUmVzdChmdW5jdGlvbihhcnJheXMpIHtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ueG9yYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgb2YgZWFjaCBgYXJyYXlzYCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5XG4gICAgICogd2hpY2ggYnkgd2hpY2ggdGhleSdyZSBjb21wYXJlZC4gVGhlIG9yZGVyIG9mIHJlc3VsdCB2YWx1ZXMgaXMgZGV0ZXJtaW5lZFxuICAgICAqIGJ5IHRoZSBvcmRlciB0aGV5IG9jY3VyIGluIHRoZSBhcnJheXMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lXG4gICAgICogYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGZpbHRlcmVkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy54b3JCeShbMi4xLCAxLjJdLCBbMi4zLCAzLjRdLCBNYXRoLmZsb29yKTtcbiAgICAgKiAvLyA9PiBbMS4yLCAzLjRdXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnhvckJ5KFt7ICd4JzogMSB9XSwgW3sgJ3gnOiAyIH0sIHsgJ3gnOiAxIH1dLCAneCcpO1xuICAgICAqIC8vID0+IFt7ICd4JzogMiB9XVxuICAgICAqL1xuICAgIHZhciB4b3JCeSA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGl0ZXJhdGVlID0gbGFzdChhcnJheXMpO1xuICAgICAgaWYgKGlzQXJyYXlMaWtlT2JqZWN0KGl0ZXJhdGVlKSkge1xuICAgICAgICBpdGVyYXRlZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMikpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy54b3JgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGNvbXBhcmF0b3JgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBjb21wYXJlIGVsZW1lbnRzIG9mIGBhcnJheXNgLiBUaGUgb3JkZXIgb2YgcmVzdWx0IHZhbHVlcyBpc1xuICAgICAqIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gdGhlIGFycmF5cy4gVGhlIGNvbXBhcmF0b3IgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdHdvIGFyZ3VtZW50czogKGFyclZhbCwgb3RoVmFsKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBBcnJheVxuICAgICAqIEBwYXJhbSB7Li4uQXJyYXl9IFthcnJheXNdIFRoZSBhcnJheXMgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY29tcGFyYXRvcl0gVGhlIGNvbXBhcmF0b3IgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBhcnJheSBvZiBmaWx0ZXJlZCB2YWx1ZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ3gnOiAxLCAneSc6IDIgfSwgeyAneCc6IDIsICd5JzogMSB9XTtcbiAgICAgKiB2YXIgb3RoZXJzID0gW3sgJ3gnOiAxLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ueG9yV2l0aChvYmplY3RzLCBvdGhlcnMsIF8uaXNFcXVhbCk7XG4gICAgICogLy8gPT4gW3sgJ3gnOiAyLCAneSc6IDEgfSwgeyAneCc6IDEsICd5JzogMSB9XVxuICAgICAqL1xuICAgIHZhciB4b3JXaXRoID0gYmFzZVJlc3QoZnVuY3Rpb24oYXJyYXlzKSB7XG4gICAgICB2YXIgY29tcGFyYXRvciA9IGxhc3QoYXJyYXlzKTtcbiAgICAgIGNvbXBhcmF0b3IgPSB0eXBlb2YgY29tcGFyYXRvciA9PSAnZnVuY3Rpb24nID8gY29tcGFyYXRvciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlWG9yKGFycmF5RmlsdGVyKGFycmF5cywgaXNBcnJheUxpa2VPYmplY3QpLCB1bmRlZmluZWQsIGNvbXBhcmF0b3IpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBncm91cGVkIGVsZW1lbnRzLCB0aGUgZmlyc3Qgb2Ygd2hpY2ggY29udGFpbnMgdGhlXG4gICAgICogZmlyc3QgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgdGhlIHNlY29uZCBvZiB3aGljaCBjb250YWlucyB0aGVcbiAgICAgKiBzZWNvbmQgZWxlbWVudHMgb2YgdGhlIGdpdmVuIGFycmF5cywgYW5kIHNvIG9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEFycmF5XG4gICAgICogQHBhcmFtIHsuLi5BcnJheX0gW2FycmF5c10gVGhlIGFycmF5cyB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwKFsnYScsICdiJ10sIFsxLCAyXSwgW3RydWUsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gW1snYScsIDEsIHRydWVdLCBbJ2InLCAyLCBmYWxzZV1dXG4gICAgICovXG4gICAgdmFyIHppcCA9IGJhc2VSZXN0KHVuemlwKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZnJvbVBhaXJzYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIHR3byBhcnJheXMsXG4gICAgICogb25lIG9mIHByb3BlcnR5IGlkZW50aWZpZXJzIGFuZCBvbmUgb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC40LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0KFsnYScsICdiJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0KHByb3BzLCB2YWx1ZXMpIHtcbiAgICAgIHJldHVybiBiYXNlWmlwT2JqZWN0KHByb3BzIHx8IFtdLCB2YWx1ZXMgfHwgW10sIGFzc2lnblZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcE9iamVjdGAgZXhjZXB0IHRoYXQgaXQgc3VwcG9ydHMgcHJvcGVydHkgcGF0aHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcHJvcHM9W11dIFRoZSBwcm9wZXJ0eSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzPVtdXSBUaGUgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwT2JqZWN0RGVlcChbJ2EuYlswXS5jJywgJ2EuYlsxXS5kJ10sIFsxLCAyXSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiBbeyAnYyc6IDEgfSwgeyAnZCc6IDIgfV0gfSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gemlwT2JqZWN0RGVlcChwcm9wcywgdmFsdWVzKSB7XG4gICAgICByZXR1cm4gYmFzZVppcE9iamVjdChwcm9wcyB8fCBbXSwgdmFsdWVzIHx8IFtdLCBiYXNlU2V0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnppcGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgaXRlcmF0ZWVgIHRvIHNwZWNpZnlcbiAgICAgKiBob3cgZ3JvdXBlZCB2YWx1ZXMgc2hvdWxkIGJlIGNvbWJpbmVkLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRoZVxuICAgICAqIGVsZW1lbnRzIG9mIGVhY2ggZ3JvdXA6ICguLi5ncm91cCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy44LjBcbiAgICAgKiBAY2F0ZWdvcnkgQXJyYXlcbiAgICAgKiBAcGFyYW0gey4uLkFycmF5fSBbYXJyYXlzXSBUaGUgYXJyYXlzIHRvIHByb2Nlc3MuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lXG4gICAgICogIGdyb3VwZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGFycmF5IG9mIGdyb3VwZWQgZWxlbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uemlwV2l0aChbMSwgMl0sIFsxMCwgMjBdLCBbMTAwLCAyMDBdLCBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gYSArIGIgKyBjO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IFsxMTEsIDIyMl1cbiAgICAgKi9cbiAgICB2YXIgemlwV2l0aCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFycmF5cykge1xuICAgICAgdmFyIGxlbmd0aCA9IGFycmF5cy5sZW5ndGgsXG4gICAgICAgICAgaXRlcmF0ZWUgPSBsZW5ndGggPiAxID8gYXJyYXlzW2xlbmd0aCAtIDFdIDogdW5kZWZpbmVkO1xuXG4gICAgICBpdGVyYXRlZSA9IHR5cGVvZiBpdGVyYXRlZSA9PSAnZnVuY3Rpb24nID8gKGFycmF5cy5wb3AoKSwgaXRlcmF0ZWUpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHVuemlwV2l0aChhcnJheXMsIGl0ZXJhdGVlKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHRoYXQgd3JhcHMgYHZhbHVlYCB3aXRoIGV4cGxpY2l0IG1ldGhvZFxuICAgICAqIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLiBUaGUgcmVzdWx0IG9mIHN1Y2ggc2VxdWVuY2VzIG11c3QgYmUgdW53cmFwcGVkXG4gICAgICogd2l0aCBgXyN2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gd3JhcC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICAnYWdlJzogNDAgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogdmFyIHlvdW5nZXN0ID0gX1xuICAgICAqICAgLmNoYWluKHVzZXJzKVxuICAgICAqICAgLnNvcnRCeSgnYWdlJylcbiAgICAgKiAgIC5tYXAoZnVuY3Rpb24obykge1xuICAgICAqICAgICByZXR1cm4gby51c2VyICsgJyBpcyAnICsgby5hZ2U7XG4gICAgICogICB9KVxuICAgICAqICAgLmhlYWQoKVxuICAgICAqICAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMgaXMgMSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjaGFpbih2YWx1ZSkge1xuICAgICAgdmFyIHJlc3VsdCA9IGxvZGFzaCh2YWx1ZSk7XG4gICAgICByZXN1bHQuX19jaGFpbl9fID0gdHJ1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaW52b2tlcyBgaW50ZXJjZXB0b3JgIGFuZCByZXR1cm5zIGB2YWx1ZWAuIFRoZSBpbnRlcmNlcHRvclxuICAgICAqIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ7ICh2YWx1ZSkuIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvXG4gICAgICogXCJ0YXAgaW50b1wiIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlIGluIG9yZGVyIHRvIG1vZGlmeSBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm92aWRlIHRvIGBpbnRlcmNlcHRvcmAuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaW50ZXJjZXB0b3IgVGhlIGZ1bmN0aW9uIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfKFsxLCAyLCAzXSlcbiAgICAgKiAgLnRhcChmdW5jdGlvbihhcnJheSkge1xuICAgICAqICAgIC8vIE11dGF0ZSBpbnB1dCBhcnJheS5cbiAgICAgKiAgICBhcnJheS5wb3AoKTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnJldmVyc2UoKVxuICAgICAqICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbMiwgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0YXAodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICBpbnRlcmNlcHRvcih2YWx1ZSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy50YXBgIGV4Y2VwdCB0aGF0IGl0IHJldHVybnMgdGhlIHJlc3VsdCBvZiBgaW50ZXJjZXB0b3JgLlxuICAgICAqIFRoZSBwdXJwb3NlIG9mIHRoaXMgbWV0aG9kIGlzIHRvIFwicGFzcyB0aHJ1XCIgdmFsdWVzIHJlcGxhY2luZyBpbnRlcm1lZGlhdGVcbiAgICAgKiByZXN1bHRzIGluIGEgbWV0aG9kIGNoYWluIHNlcXVlbmNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb3ZpZGUgdG8gYGludGVyY2VwdG9yYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBpbnRlcmNlcHRvciBUaGUgZnVuY3Rpb24gdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXN1bHQgb2YgYGludGVyY2VwdG9yYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXygnICBhYmMgICcpXG4gICAgICogIC5jaGFpbigpXG4gICAgICogIC50cmltKClcbiAgICAgKiAgLnRocnUoZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgICByZXR1cm4gW3ZhbHVlXTtcbiAgICAgKiAgfSlcbiAgICAgKiAgLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWydhYmMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRocnUodmFsdWUsIGludGVyY2VwdG9yKSB7XG4gICAgICByZXR1cm4gaW50ZXJjZXB0b3IodmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIHRoZSB3cmFwcGVyIHZlcnNpb24gb2YgYF8uYXRgLlxuICAgICAqXG4gICAgICogQG5hbWUgYXRcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9LCA0XSB9O1xuICAgICAqXG4gICAgICogXyhvYmplY3QpLmF0KFsnYVswXS5iLmMnLCAnYVsxXSddKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqL1xuICAgIHZhciB3cmFwcGVyQXQgPSBmbGF0UmVzdChmdW5jdGlvbihwYXRocykge1xuICAgICAgdmFyIGxlbmd0aCA9IHBhdGhzLmxlbmd0aCxcbiAgICAgICAgICBzdGFydCA9IGxlbmd0aCA/IHBhdGhzWzBdIDogMCxcbiAgICAgICAgICB2YWx1ZSA9IHRoaXMuX193cmFwcGVkX18sXG4gICAgICAgICAgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbihvYmplY3QpIHsgcmV0dXJuIGJhc2VBdChvYmplY3QsIHBhdGhzKTsgfTtcblxuICAgICAgaWYgKGxlbmd0aCA+IDEgfHwgdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGggfHxcbiAgICAgICAgICAhKHZhbHVlIGluc3RhbmNlb2YgTGF6eVdyYXBwZXIpIHx8ICFpc0luZGV4KHN0YXJ0KSkge1xuICAgICAgICByZXR1cm4gdGhpcy50aHJ1KGludGVyY2VwdG9yKTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2Uoc3RhcnQsICtzdGFydCArIChsZW5ndGggPyAxIDogMCkpO1xuICAgICAgdmFsdWUuX19hY3Rpb25zX18ucHVzaCh7XG4gICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgJ2FyZ3MnOiBbaW50ZXJjZXB0b3JdLFxuICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gbmV3IExvZGFzaFdyYXBwZXIodmFsdWUsIHRoaXMuX19jaGFpbl9fKS50aHJ1KGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgICAgIGlmIChsZW5ndGggJiYgIWFycmF5Lmxlbmd0aCkge1xuICAgICAgICAgIGFycmF5LnB1c2godW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlIHdpdGggZXhwbGljaXQgbWV0aG9kIGNoYWluIHNlcXVlbmNlcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQG5hbWUgY2hhaW5cbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTZXFcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgYGxvZGFzaGAgd3JhcHBlciBpbnN0YW5jZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogLy8gQSBzZXF1ZW5jZSB3aXRob3V0IGV4cGxpY2l0IGNoYWluaW5nLlxuICAgICAqIF8odXNlcnMpLmhlYWQoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiB9XG4gICAgICpcbiAgICAgKiAvLyBBIHNlcXVlbmNlIHdpdGggZXhwbGljaXQgY2hhaW5pbmcuXG4gICAgICogXyh1c2VycylcbiAgICAgKiAgIC5jaGFpbigpXG4gICAgICogICAuaGVhZCgpXG4gICAgICogICAucGljaygndXNlcicpXG4gICAgICogICAudmFsdWUoKTtcbiAgICAgKiAvLyA9PiB7ICd1c2VyJzogJ2Jhcm5leScgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJDaGFpbigpIHtcbiAgICAgIHJldHVybiBjaGFpbih0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlcyB0aGUgY2hhaW4gc2VxdWVuY2UgYW5kIHJldHVybnMgdGhlIHdyYXBwZWQgcmVzdWx0LlxuICAgICAqXG4gICAgICogQG5hbWUgY29tbWl0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyXTtcbiAgICAgKiB2YXIgd3JhcHBlZCA9IF8oYXJyYXkpLnB1c2goMyk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkID0gd3JhcHBlZC5jb21taXQoKTtcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLmxhc3QoKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnJheSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlckNvbW1pdCgpIHtcbiAgICAgIHJldHVybiBuZXcgTG9kYXNoV3JhcHBlcih0aGlzLnZhbHVlKCksIHRoaXMuX19jaGFpbl9fKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBuZXh0IHZhbHVlIG9uIGEgd3JhcHBlZCBvYmplY3QgZm9sbG93aW5nIHRoZVxuICAgICAqIFtpdGVyYXRvciBwcm90b2NvbF0oaHR0cHM6Ly9tZG4uaW8vaXRlcmF0aW9uX3Byb3RvY29scyNpdGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAbmFtZSBuZXh0XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV4dCBpdGVyYXRvciB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSk7XG4gICAgICpcbiAgICAgKiB3cmFwcGVkLm5leHQoKTtcbiAgICAgKiAvLyA9PiB7ICdkb25lJzogZmFsc2UsICd2YWx1ZSc6IDEgfVxuICAgICAqXG4gICAgICogd3JhcHBlZC5uZXh0KCk7XG4gICAgICogLy8gPT4geyAnZG9uZSc6IGZhbHNlLCAndmFsdWUnOiAyIH1cbiAgICAgKlxuICAgICAqIHdyYXBwZWQubmV4dCgpO1xuICAgICAqIC8vID0+IHsgJ2RvbmUnOiB0cnVlLCAndmFsdWUnOiB1bmRlZmluZWQgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJOZXh0KCkge1xuICAgICAgaWYgKHRoaXMuX192YWx1ZXNfXyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX192YWx1ZXNfXyA9IHRvQXJyYXkodGhpcy52YWx1ZSgpKTtcbiAgICAgIH1cbiAgICAgIHZhciBkb25lID0gdGhpcy5fX2luZGV4X18gPj0gdGhpcy5fX3ZhbHVlc19fLmxlbmd0aCxcbiAgICAgICAgICB2YWx1ZSA9IGRvbmUgPyB1bmRlZmluZWQgOiB0aGlzLl9fdmFsdWVzX19bdGhpcy5fX2luZGV4X18rK107XG5cbiAgICAgIHJldHVybiB7ICdkb25lJzogZG9uZSwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSB3cmFwcGVyIHRvIGJlIGl0ZXJhYmxlLlxuICAgICAqXG4gICAgICogQG5hbWUgU3ltYm9sLml0ZXJhdG9yXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgd3JhcHBlciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB3cmFwcGVkID0gXyhbMSwgMl0pO1xuICAgICAqXG4gICAgICogd3JhcHBlZFtTeW1ib2wuaXRlcmF0b3JdKCkgPT09IHdyYXBwZWQ7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogQXJyYXkuZnJvbSh3cmFwcGVkKTtcbiAgICAgKiAvLyA9PiBbMSwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB3cmFwcGVyVG9JdGVyYXRvcigpIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBjbG9uZSBvZiB0aGUgY2hhaW4gc2VxdWVuY2UgcGxhbnRpbmcgYHZhbHVlYCBhcyB0aGUgd3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHBsYW50XG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgU2VxXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcGxhbnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IGBsb2Rhc2hgIHdyYXBwZXIgaW5zdGFuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHdyYXBwZWQgPSBfKFsxLCAyXSkubWFwKHNxdWFyZSk7XG4gICAgICogdmFyIG90aGVyID0gd3JhcHBlZC5wbGFudChbMywgNF0pO1xuICAgICAqXG4gICAgICogb3RoZXIudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbOSwgMTZdXG4gICAgICpcbiAgICAgKiB3cmFwcGVkLnZhbHVlKCk7XG4gICAgICogLy8gPT4gWzEsIDRdXG4gICAgICovXG4gICAgZnVuY3Rpb24gd3JhcHBlclBsYW50KHZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0LFxuICAgICAgICAgIHBhcmVudCA9IHRoaXM7XG5cbiAgICAgIHdoaWxlIChwYXJlbnQgaW5zdGFuY2VvZiBiYXNlTG9kYXNoKSB7XG4gICAgICAgIHZhciBjbG9uZSA9IHdyYXBwZXJDbG9uZShwYXJlbnQpO1xuICAgICAgICBjbG9uZS5fX2luZGV4X18gPSAwO1xuICAgICAgICBjbG9uZS5fX3ZhbHVlc19fID0gdW5kZWZpbmVkO1xuICAgICAgICBpZiAocmVzdWx0KSB7XG4gICAgICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSBjbG9uZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXN1bHQgPSBjbG9uZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJldmlvdXMgPSBjbG9uZTtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50Ll9fd3JhcHBlZF9fO1xuICAgICAgfVxuICAgICAgcHJldmlvdXMuX193cmFwcGVkX18gPSB2YWx1ZTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgdGhlIHdyYXBwZXIgdmVyc2lvbiBvZiBgXy5yZXZlcnNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIHRoZSB3cmFwcGVkIGFycmF5LlxuICAgICAqXG4gICAgICogQG5hbWUgcmV2ZXJzZVxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBgbG9kYXNoYCB3cmFwcGVyIGluc3RhbmNlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbMSwgMiwgM107XG4gICAgICpcbiAgICAgKiBfKGFycmF5KS5yZXZlcnNlKCkudmFsdWUoKVxuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqXG4gICAgICogY29uc29sZS5sb2coYXJyYXkpO1xuICAgICAqIC8vID0+IFszLCAyLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJSZXZlcnNlKCkge1xuICAgICAgdmFyIHZhbHVlID0gdGhpcy5fX3dyYXBwZWRfXztcbiAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyKSB7XG4gICAgICAgIHZhciB3cmFwcGVkID0gdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLl9fYWN0aW9uc19fLmxlbmd0aCkge1xuICAgICAgICAgIHdyYXBwZWQgPSBuZXcgTGF6eVdyYXBwZXIodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgd3JhcHBlZCA9IHdyYXBwZWQucmV2ZXJzZSgpO1xuICAgICAgICB3cmFwcGVkLl9fYWN0aW9uc19fLnB1c2goe1xuICAgICAgICAgICdmdW5jJzogdGhydSxcbiAgICAgICAgICAnYXJncyc6IFtyZXZlcnNlXSxcbiAgICAgICAgICAndGhpc0FyZyc6IHVuZGVmaW5lZFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHdyYXBwZWQsIHRoaXMuX19jaGFpbl9fKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLnRocnUocmV2ZXJzZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZXMgdGhlIGNoYWluIHNlcXVlbmNlIHRvIHJlc29sdmUgdGhlIHVud3JhcHBlZCB2YWx1ZS5cbiAgICAgKlxuICAgICAqIEBuYW1lIHZhbHVlXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAYWxpYXMgdG9KU09OLCB2YWx1ZU9mXG4gICAgICogQGNhdGVnb3J5IFNlcVxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB1bndyYXBwZWQgdmFsdWUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8oWzEsIDIsIDNdKS52YWx1ZSgpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXBwZXJWYWx1ZSgpIHtcbiAgICAgIHJldHVybiBiYXNlV3JhcHBlclZhbHVlKHRoaXMuX193cmFwcGVkX18sIHRoaXMuX19hY3Rpb25zX18pO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIGtleXMgZ2VuZXJhdGVkIGZyb20gdGhlIHJlc3VsdHMgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgY29ycmVzcG9uZGluZyB2YWx1ZSBvZlxuICAgICAqIGVhY2gga2V5IGlzIHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGtleSB3YXMgcmV0dXJuZWQgYnkgYGl0ZXJhdGVlYC4gVGhlXG4gICAgICogaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgdG8gdHJhbnNmb3JtIGtleXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29tcG9zZWQgYWdncmVnYXRlIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jb3VudEJ5KFs2LjEsIDQuMiwgNi4zXSwgTWF0aC5mbG9vcik7XG4gICAgICogLy8gPT4geyAnNCc6IDEsICc2JzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmNvdW50QnkoWydvbmUnLCAndHdvJywgJ3RocmVlJ10sICdsZW5ndGgnKTtcbiAgICAgKiAvLyA9PiB7ICczJzogMiwgJzUnOiAxIH1cbiAgICAgKi9cbiAgICB2YXIgY291bnRCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbChyZXN1bHQsIGtleSkpIHtcbiAgICAgICAgKytyZXN1bHRba2V5XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgMSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yICoqYWxsKiogZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyBmYWxzZXkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgcmV0dXJucyBgdHJ1ZWAgZm9yXG4gICAgICogW2VtcHR5IGNvbGxlY3Rpb25zXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9FbXB0eV9zZXQpIGJlY2F1c2VcbiAgICAgKiBbZXZlcnl0aGluZyBpcyB0cnVlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9WYWN1b3VzX3RydXRoKSBvZlxuICAgICAqIGVsZW1lbnRzIG9mIGVtcHR5IGNvbGxlY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFsbCBlbGVtZW50cyBwYXNzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5ldmVyeShbdHJ1ZSwgMSwgbnVsbCwgJ3llcyddLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgeyAndXNlcic6ICdiYXJuZXknLCAnYWN0aXZlJzogZmFsc2UgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmV2ZXJ5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5ldmVyeSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXZlcnkoY29sbGVjdGlvbiwgcHJlZGljYXRlLCBndWFyZCkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFdmVyeSA6IGJhc2VFdmVyeTtcbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChjb2xsZWN0aW9uLCBwcmVkaWNhdGUsIGd1YXJkKSkge1xuICAgICAgICBwcmVkaWNhdGUgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uLCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nIGFuIGFycmF5IG9mIGFsbCBlbGVtZW50c1xuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgYF8ucmVtb3ZlYCwgdGhpcyBtZXRob2QgcmV0dXJucyBhIG5ldyBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAgICAgKiBAc2VlIF8ucmVqZWN0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM2LCAnYWN0aXZlJzogdHJ1ZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiAhby5hY3RpdmU7IH0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFsnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydiYXJuZXknXVxuICAgICAqXG4gICAgICogLy8gQ29tYmluaW5nIHNldmVyYWwgcHJlZGljYXRlcyB1c2luZyBgXy5vdmVyRXZlcnlgIG9yIGBfLm92ZXJTb21lYC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5vdmVyU29tZShbeyAnYWdlJzogMzYgfSwgWydhZ2UnLCA0MF1dKSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJywgJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmlsdGVyKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUocHJlZGljYXRlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAsIHJldHVybmluZyB0aGUgZmlyc3QgZWxlbWVudFxuICAgICAqIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdGhyZWVcbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IGZhbHNlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdiYXJuZXknXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZCh1c2VycywgeyAnYWdlJzogMSwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAncGViYmxlcydcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmQodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3QgZm9yICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kKHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gb2JqZWN0IGZvciAnYmFybmV5J1xuICAgICAqL1xuICAgIHZhciBmaW5kID0gY3JlYXRlRmluZChmaW5kSW5kZXgpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5maW5kYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9Y29sbGVjdGlvbi5sZW5ndGgtMV0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXRjaGVkIGVsZW1lbnQsIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZmluZExhc3QoWzEsIDIsIDMsIDRdLCBmdW5jdGlvbihuKSB7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICovXG4gICAgdmFyIGZpbmRMYXN0ID0gY3JlYXRlRmluZChmaW5kTGFzdEluZGV4KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmbGF0dGVuZWQgYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYFxuICAgICAqIHRocnUgYGl0ZXJhdGVlYCBhbmQgZmxhdHRlbmluZyB0aGUgbWFwcGVkIHJlc3VsdHMuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbbiwgbl07XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5mbGF0TWFwKFsxLCAyXSwgZHVwbGljYXRlKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMiwgMl1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGF0TWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgMSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbGF0TWFwYCBleGNlcHQgdGhhdCBpdCByZWN1cnNpdmVseSBmbGF0dGVucyB0aGVcbiAgICAgKiBtYXBwZWQgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlZXAoWzEsIDJdLCBkdXBsaWNhdGUpO1xuICAgICAqIC8vID0+IFsxLCAxLCAyLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZsYXRNYXBEZWVwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgSU5GSU5JVFkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmxhdE1hcGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgZmxhdHRlbnMgdGhlXG4gICAgICogbWFwcGVkIHJlc3VsdHMgdXAgdG8gYGRlcHRoYCB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbZGVwdGg9MV0gVGhlIG1heGltdW0gcmVjdXJzaW9uIGRlcHRoLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZsYXR0ZW5lZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZHVwbGljYXRlKG4pIHtcbiAgICAgKiAgIHJldHVybiBbW1tuLCBuXV1dO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmxhdE1hcERlcHRoKFsxLCAyXSwgZHVwbGljYXRlLCAyKTtcbiAgICAgKiAvLyA9PiBbWzEsIDFdLCBbMiwgMl1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmxhdE1hcERlcHRoKGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBkZXB0aCkge1xuICAgICAgZGVwdGggPSBkZXB0aCA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aCk7XG4gICAgICByZXR1cm4gYmFzZUZsYXR0ZW4obWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSwgZGVwdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2YgYGNvbGxlY3Rpb25gIGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggZWxlbWVudC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBBcyB3aXRoIG90aGVyIFwiQ29sbGVjdGlvbnNcIiBtZXRob2RzLCBvYmplY3RzIHdpdGggYSBcImxlbmd0aFwiXG4gICAgICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAgICAgKiBvciBgXy5mb3JPd25gIGZvciBvYmplY3QgaXRlcmF0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGFsaWFzIGVhY2hcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl8T2JqZWN0fSBSZXR1cm5zIGBjb2xsZWN0aW9uYC5cbiAgICAgKiBAc2VlIF8uZm9yRWFjaFJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaChbMSwgMl0sIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyBgMWAgdGhlbiBgMmAuXG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICogICBjb25zb2xlLmxvZyhrZXkpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IExvZ3MgJ2EnIHRoZW4gJ2InIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaCA6IGJhc2VFYWNoO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvckVhY2hgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBgY29sbGVjdGlvbmAgZnJvbSByaWdodCB0byBsZWZ0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGFsaWFzIGVhY2hSaWdodFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICAgICAqIEBzZWUgXy5mb3JFYWNoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZm9yRWFjaFJpZ2h0KFsxLCAyXSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHZhbHVlKTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzIGAyYCB0aGVuIGAxYC5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JFYWNoUmlnaHQoY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5RWFjaFJpZ2h0IDogYmFzZUVhY2hSaWdodDtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3QgY29tcG9zZWQgb2Yga2V5cyBnZW5lcmF0ZWQgZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nXG4gICAgICogZWFjaCBlbGVtZW50IG9mIGBjb2xsZWN0aW9uYCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBvcmRlciBvZiBncm91cGVkIHZhbHVlc1xuICAgICAqIGlzIGRldGVybWluZWQgYnkgdGhlIG9yZGVyIHRoZXkgb2NjdXIgaW4gYGNvbGxlY3Rpb25gLiBUaGUgY29ycmVzcG9uZGluZ1xuICAgICAqIHZhbHVlIG9mIGVhY2gga2V5IGlzIGFuIGFycmF5IG9mIGVsZW1lbnRzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZVxuICAgICAqIGtleS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3JvdXBCeShbNi4xLCA0LjIsIDYuM10sIE1hdGguZmxvb3IpO1xuICAgICAqIC8vID0+IHsgJzQnOiBbNC4yXSwgJzYnOiBbNi4xLCA2LjNdIH1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZ3JvdXBCeShbJ29uZScsICd0d28nLCAndGhyZWUnXSwgJ2xlbmd0aCcpO1xuICAgICAqIC8vID0+IHsgJzMnOiBbJ29uZScsICd0d28nXSwgJzUnOiBbJ3RocmVlJ10gfVxuICAgICAqL1xuICAgIHZhciBncm91cEJ5ID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwga2V5KSkge1xuICAgICAgICByZXN1bHRba2V5XS5wdXNoKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgW3ZhbHVlXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiBgY29sbGVjdGlvbmAuIElmIGBjb2xsZWN0aW9uYCBpcyBhIHN0cmluZywgaXQnc1xuICAgICAqIGNoZWNrZWQgZm9yIGEgc3Vic3RyaW5nIG9mIGB2YWx1ZWAsIG90aGVyd2lzZVxuICAgICAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gICAgICogaXMgdXNlZCBmb3IgZXF1YWxpdHkgY29tcGFyaXNvbnMuIElmIGBmcm9tSW5kZXhgIGlzIG5lZ2F0aXZlLCBpdCdzIHVzZWQgYXNcbiAgICAgKiB0aGUgb2Zmc2V0IGZyb20gdGhlIGVuZCBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fHN0cmluZ30gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNlYXJjaCBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtmcm9tSW5kZXg9MF0gVGhlIGluZGV4IHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyhbMSwgMiwgM10sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoWzEsIDIsIDNdLCAxLCAyKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pbmNsdWRlcyh7ICdhJzogMSwgJ2InOiAyIH0sIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5jbHVkZXMoJ2FiY2QnLCAnYmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaW5jbHVkZXMoY29sbGVjdGlvbiwgdmFsdWUsIGZyb21JbmRleCwgZ3VhcmQpIHtcbiAgICAgIGNvbGxlY3Rpb24gPSBpc0FycmF5TGlrZShjb2xsZWN0aW9uKSA/IGNvbGxlY3Rpb24gOiB2YWx1ZXMoY29sbGVjdGlvbik7XG4gICAgICBmcm9tSW5kZXggPSAoZnJvbUluZGV4ICYmICFndWFyZCkgPyB0b0ludGVnZXIoZnJvbUluZGV4KSA6IDA7XG5cbiAgICAgIHZhciBsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcbiAgICAgIGlmIChmcm9tSW5kZXggPCAwKSB7XG4gICAgICAgIGZyb21JbmRleCA9IG5hdGl2ZU1heChsZW5ndGggKyBmcm9tSW5kZXgsIDApO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pXG4gICAgICAgID8gKGZyb21JbmRleCA8PSBsZW5ndGggJiYgY29sbGVjdGlvbi5pbmRleE9mKHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpXG4gICAgICAgIDogKCEhbGVuZ3RoICYmIGJhc2VJbmRleE9mKGNvbGxlY3Rpb24sIHZhbHVlLCBmcm9tSW5kZXgpID4gLTEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCwgcmV0dXJuaW5nXG4gICAgICogYW4gYXJyYXkgb2YgdGhlIHJlc3VsdHMgb2YgZWFjaCBpbnZva2VkIG1ldGhvZC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzXG4gICAgICogYXJlIHByb3ZpZGVkIHRvIGVhY2ggaW52b2tlZCBtZXRob2QuIElmIGBwYXRoYCBpcyBhIGZ1bmN0aW9uLCBpdCdzIGludm9rZWRcbiAgICAgKiBmb3IsIGFuZCBgdGhpc2AgYm91bmQgdG8sIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0FycmF5fEZ1bmN0aW9ufHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZSBvclxuICAgICAqICB0aGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIGVhY2ggbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmludm9rZU1hcChbWzUsIDEsIDddLCBbMywgMiwgMV1dLCAnc29ydCcpO1xuICAgICAqIC8vID0+IFtbMSwgNSwgN10sIFsxLCAyLCAzXV1cbiAgICAgKlxuICAgICAqIF8uaW52b2tlTWFwKFsxMjMsIDQ1Nl0sIFN0cmluZy5wcm90b3R5cGUuc3BsaXQsICcnKTtcbiAgICAgKiAvLyA9PiBbWycxJywgJzInLCAnMyddLCBbJzQnLCAnNScsICc2J11dXG4gICAgICovXG4gICAgdmFyIGludm9rZU1hcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGNvbGxlY3Rpb24sIHBhdGgsIGFyZ3MpIHtcbiAgICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICAgIGlzRnVuYyA9IHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicsXG4gICAgICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICAgICAgYmFzZUVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmVzdWx0WysraW5kZXhdID0gaXNGdW5jID8gYXBwbHkocGF0aCwgdmFsdWUsIGFyZ3MpIDogYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiBrZXlzIGdlbmVyYXRlZCBmcm9tIHRoZSByZXN1bHRzIG9mIHJ1bm5pbmdcbiAgICAgKiBlYWNoIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gIHRocnUgYGl0ZXJhdGVlYC4gVGhlIGNvcnJlc3BvbmRpbmcgdmFsdWUgb2ZcbiAgICAgKiBlYWNoIGtleSBpcyB0aGUgbGFzdCBlbGVtZW50IHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBrZXkuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIHRvIHRyYW5zZm9ybSBrZXlzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbXBvc2VkIGFnZ3JlZ2F0ZSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFtcbiAgICAgKiAgIHsgJ2Rpcic6ICdsZWZ0JywgJ2NvZGUnOiA5NyB9LFxuICAgICAqICAgeyAnZGlyJzogJ3JpZ2h0JywgJ2NvZGUnOiAxMDAgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmtleUJ5KGFycmF5LCBmdW5jdGlvbihvKSB7XG4gICAgICogICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShvLmNvZGUpO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiB7ICdkaXInOiAnbGVmdCcsICdjb2RlJzogOTcgfSwgJ2QnOiB7ICdkaXInOiAncmlnaHQnLCAnY29kZSc6IDEwMCB9IH1cbiAgICAgKlxuICAgICAqIF8ua2V5QnkoYXJyYXksICdkaXInKTtcbiAgICAgKiAvLyA9PiB7ICdsZWZ0JzogeyAnZGlyJzogJ2xlZnQnLCAnY29kZSc6IDk3IH0sICdyaWdodCc6IHsgJ2Rpcic6ICdyaWdodCcsICdjb2RlJzogMTAwIH0gfVxuICAgICAqL1xuICAgIHZhciBrZXlCeSA9IGNyZWF0ZUFnZ3JlZ2F0b3IoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIHZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdmFsdWVzIGJ5IHJ1bm5pbmcgZWFjaCBlbGVtZW50IGluIGBjb2xsZWN0aW9uYCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBpbmRleHxrZXksIGNvbGxlY3Rpb24pLlxuICAgICAqXG4gICAgICogTWFueSBsb2Rhc2ggbWV0aG9kcyBhcmUgZ3VhcmRlZCB0byB3b3JrIGFzIGl0ZXJhdGVlcyBmb3IgbWV0aG9kcyBsaWtlXG4gICAgICogYF8uZXZlcnlgLCBgXy5maWx0ZXJgLCBgXy5tYXBgLCBgXy5tYXBWYWx1ZXNgLCBgXy5yZWplY3RgLCBhbmQgYF8uc29tZWAuXG4gICAgICpcbiAgICAgKiBUaGUgZ3VhcmRlZCBtZXRob2RzIGFyZTpcbiAgICAgKiBgYXJ5YCwgYGNodW5rYCwgYGN1cnJ5YCwgYGN1cnJ5UmlnaHRgLCBgZHJvcGAsIGBkcm9wUmlnaHRgLCBgZXZlcnlgLFxuICAgICAqIGBmaWxsYCwgYGludmVydGAsIGBwYXJzZUludGAsIGByYW5kb21gLCBgcmFuZ2VgLCBgcmFuZ2VSaWdodGAsIGByZXBlYXRgLFxuICAgICAqIGBzYW1wbGVTaXplYCwgYHNsaWNlYCwgYHNvbWVgLCBgc29ydEJ5YCwgYHNwbGl0YCwgYHRha2VgLCBgdGFrZVJpZ2h0YCxcbiAgICAgKiBgdGVtcGxhdGVgLCBgdHJpbWAsIGB0cmltRW5kYCwgYHRyaW1TdGFydGAsIGFuZCBgd29yZHNgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogXy5tYXAoWzQsIDhdLCBzcXVhcmUpO1xuICAgICAqIC8vID0+IFsxNiwgNjRdXG4gICAgICpcbiAgICAgKiBfLm1hcCh7ICdhJzogNCwgJ2InOiA4IH0sIHNxdWFyZSk7XG4gICAgICogLy8gPT4gWzE2LCA2NF0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IFtcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JyB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJyB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWFwKHVzZXJzLCAndXNlcicpO1xuICAgICAqIC8vID0+IFsnYmFybmV5JywgJ2ZyZWQnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hcChjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlNYXAgOiBiYXNlTWFwO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRCeWAgZXhjZXB0IHRoYXQgaXQgYWxsb3dzIHNwZWNpZnlpbmcgdGhlIHNvcnRcbiAgICAgKiBvcmRlcnMgb2YgdGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlc1xuICAgICAqIGFyZSBzb3J0ZWQgaW4gYXNjZW5kaW5nIG9yZGVyLiBPdGhlcndpc2UsIHNwZWNpZnkgYW4gb3JkZXIgb2YgXCJkZXNjXCIgZm9yXG4gICAgICogZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlciBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7QXJyYXlbXXxGdW5jdGlvbltdfE9iamVjdFtdfHN0cmluZ1tdfSBbaXRlcmF0ZWVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGl0ZXJhdGVlcyB0byBzb3J0IGJ5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IFtvcmRlcnNdIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5yZWR1Y2VgLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHNvcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnYmFybmV5JywgJ2FnZSc6IDM0IH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBTb3J0IGJ5IGB1c2VyYCBpbiBhc2NlbmRpbmcgb3JkZXIgYW5kIGJ5IGBhZ2VgIGluIGRlc2NlbmRpbmcgb3JkZXIuXG4gICAgICogXy5vcmRlckJ5KHVzZXJzLCBbJ3VzZXInLCAnYWdlJ10sIFsnYXNjJywgJ2Rlc2MnXSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCA0MF1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gb3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycywgZ3VhcmQpIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgfVxuICAgICAgaWYgKCFpc0FycmF5KGl0ZXJhdGVlcykpIHtcbiAgICAgICAgaXRlcmF0ZWVzID0gaXRlcmF0ZWVzID09IG51bGwgPyBbXSA6IFtpdGVyYXRlZXNdO1xuICAgICAgfVxuICAgICAgb3JkZXJzID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBvcmRlcnM7XG4gICAgICBpZiAoIWlzQXJyYXkob3JkZXJzKSkge1xuICAgICAgICBvcmRlcnMgPSBvcmRlcnMgPT0gbnVsbCA/IFtdIDogW29yZGVyc107XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMgc3BsaXQgaW50byB0d28gZ3JvdXBzLCB0aGUgZmlyc3Qgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIHRydXRoeSBmb3IsIHRoZSBzZWNvbmQgb2Ygd2hpY2hcbiAgICAgKiBjb250YWlucyBlbGVtZW50cyBgcHJlZGljYXRlYCByZXR1cm5zIGZhbHNleSBmb3IuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgZ3JvdXBlZCBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAgJ2FnZSc6IDM2LCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxLCAgJ2FjdGl2ZSc6IGZhbHNlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWN0aXZlOyB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydwZWJibGVzJ10sIFsnYmFybmV5JywgJ2ZyZWQnXV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnBhcnRpdGlvbih1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsICdwZWJibGVzJ10sIFsnZnJlZCddXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5wYXJ0aXRpb24odXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydmcmVkJ10sIFsnYmFybmV5JywgJ3BlYmJsZXMnXV1cbiAgICAgKi9cbiAgICB2YXIgcGFydGl0aW9uID0gY3JlYXRlQWdncmVnYXRvcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdFtrZXkgPyAwIDogMV0ucHVzaCh2YWx1ZSk7XG4gICAgfSwgZnVuY3Rpb24oKSB7IHJldHVybiBbW10sIFtdXTsgfSk7XG5cbiAgICAvKipcbiAgICAgKiBSZWR1Y2VzIGBjb2xsZWN0aW9uYCB0byBhIHZhbHVlIHdoaWNoIGlzIHRoZSBhY2N1bXVsYXRlZCByZXN1bHQgb2YgcnVubmluZ1xuICAgICAqIGVhY2ggZWxlbWVudCBpbiBgY29sbGVjdGlvbmAgdGhydSBgaXRlcmF0ZWVgLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLiBJZiBgYWNjdW11bGF0b3JgXG4gICAgICogaXMgbm90IGdpdmVuLCB0aGUgZmlyc3QgZWxlbWVudCBvZiBgY29sbGVjdGlvbmAgaXMgdXNlZCBhcyB0aGUgaW5pdGlhbFxuICAgICAqIHZhbHVlLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIGZvdXIgYXJndW1lbnRzOlxuICAgICAqIChhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBNYW55IGxvZGFzaCBtZXRob2RzIGFyZSBndWFyZGVkIHRvIHdvcmsgYXMgaXRlcmF0ZWVzIGZvciBtZXRob2RzIGxpa2VcbiAgICAgKiBgXy5yZWR1Y2VgLCBgXy5yZWR1Y2VSaWdodGAsIGFuZCBgXy50cmFuc2Zvcm1gLlxuICAgICAqXG4gICAgICogVGhlIGd1YXJkZWQgbWV0aG9kcyBhcmU6XG4gICAgICogYGFzc2lnbmAsIGBkZWZhdWx0c2AsIGBkZWZhdWx0c0RlZXBgLCBgaW5jbHVkZXNgLCBgbWVyZ2VgLCBgb3JkZXJCeWAsXG4gICAgICogYW5kIGBzb3J0QnlgXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcGFyYW0geyp9IFthY2N1bXVsYXRvcl0gVGhlIGluaXRpYWwgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGFjY3VtdWxhdGVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5yZWR1Y2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJlZHVjZShbMSwgMl0sIGZ1bmN0aW9uKHN1bSwgbikge1xuICAgICAqICAgcmV0dXJuIHN1bSArIG47XG4gICAgICogfSwgMCk7XG4gICAgICogLy8gPT4gM1xuICAgICAqXG4gICAgICogXy5yZWR1Y2UoeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH0sIGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgICAqICAgKHJlc3VsdFt2YWx1ZV0gfHwgKHJlc3VsdFt2YWx1ZV0gPSBbXSkpLnB1c2goa2V5KTtcbiAgICAgKiAgIHJldHVybiByZXN1bHQ7XG4gICAgICogfSwge30pO1xuICAgICAqIC8vID0+IHsgJzEnOiBbJ2EnLCAnYyddLCAnMic6IFsnYiddIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZWR1Y2UoY29sbGVjdGlvbiwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVJlZHVjZSA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2gpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmVkdWNlYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIGVsZW1lbnRzIG9mXG4gICAgICogYGNvbGxlY3Rpb25gIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gICAgICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLnJlZHVjZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBbWzAsIDFdLCBbMiwgM10sIFs0LCA1XV07XG4gICAgICpcbiAgICAgKiBfLnJlZHVjZVJpZ2h0KGFycmF5LCBmdW5jdGlvbihmbGF0dGVuZWQsIG90aGVyKSB7XG4gICAgICogICByZXR1cm4gZmxhdHRlbmVkLmNvbmNhdChvdGhlcik7XG4gICAgICogfSwgW10pO1xuICAgICAqIC8vID0+IFs0LCA1LCAyLCAzLCAwLCAxXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNvbGxlY3Rpb24sIGl0ZXJhdGVlLCBhY2N1bXVsYXRvcikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlSZWR1Y2VSaWdodCA6IGJhc2VSZWR1Y2UsXG4gICAgICAgICAgaW5pdEFjY3VtID0gYXJndW1lbnRzLmxlbmd0aCA8IDM7XG5cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCA0KSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSwgYmFzZUVhY2hSaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmZpbHRlcmA7IHRoaXMgbWV0aG9kIHJldHVybnMgdGhlIGVsZW1lbnRzIG9mIGBjb2xsZWN0aW9uYFxuICAgICAqIHRoYXQgYHByZWRpY2F0ZWAgZG9lcyAqKm5vdCoqIHJldHVybiB0cnV0aHkgZm9yLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICAgICAqIEBzZWUgXy5maWx0ZXJcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHVzZXJzID0gW1xuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYsICdhY3RpdmUnOiBmYWxzZSB9LFxuICAgICAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAsICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5yZWplY3QodXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuICFvLmFjdGl2ZTsgfSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgWydmcmVkJ11cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogdHJ1ZSB9KTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc1Byb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsIFsnYWN0aXZlJywgZmFsc2VdKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2ZyZWQnXVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5yZWplY3QodXNlcnMsICdhY3RpdmUnKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbJ2Jhcm5leSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVqZWN0KGNvbGxlY3Rpb24sIHByZWRpY2F0ZSkge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlGaWx0ZXIgOiBiYXNlRmlsdGVyO1xuICAgICAgcmV0dXJuIGZ1bmMoY29sbGVjdGlvbiwgbmVnYXRlKGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGEgcmFuZG9tIGVsZW1lbnQgZnJvbSBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmFuZG9tIGVsZW1lbnQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2FtcGxlKFsxLCAyLCAzLCA0XSk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNhbXBsZShjb2xsZWN0aW9uKSB7XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZSA6IGJhc2VTYW1wbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGBuYCByYW5kb20gZWxlbWVudHMgYXQgdW5pcXVlIGtleXMgZnJvbSBgY29sbGVjdGlvbmAgdXAgdG8gdGhlXG4gICAgICogc2l6ZSBvZiBgY29sbGVjdGlvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNhbXBsZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiBlbGVtZW50cyB0byBzYW1wbGUuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmRvbSBlbGVtZW50cy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zYW1wbGVTaXplKFsxLCAyLCAzXSwgMik7XG4gICAgICogLy8gPT4gWzMsIDFdXG4gICAgICpcbiAgICAgKiBfLnNhbXBsZVNpemUoWzEsIDIsIDNdLCA0KTtcbiAgICAgKiAvLyA9PiBbMiwgMywgMV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzYW1wbGVTaXplKGNvbGxlY3Rpb24sIG4sIGd1YXJkKSB7XG4gICAgICBpZiAoKGd1YXJkID8gaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICB2YXIgZnVuYyA9IGlzQXJyYXkoY29sbGVjdGlvbikgPyBhcnJheVNhbXBsZVNpemUgOiBiYXNlU2FtcGxlU2l6ZTtcbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIG4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygc2h1ZmZsZWQgdmFsdWVzLCB1c2luZyBhIHZlcnNpb24gb2YgdGhlXG4gICAgICogW0Zpc2hlci1ZYXRlcyBzaHVmZmxlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXItWWF0ZXNfc2h1ZmZsZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIHNodWZmbGUuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc2h1ZmZsZWQgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2h1ZmZsZShbMSwgMiwgMywgNF0pO1xuICAgICAqIC8vID0+IFs0LCAxLCAzLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNodWZmbGUoY29sbGVjdGlvbikge1xuICAgICAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlTaHVmZmxlIDogYmFzZVNodWZmbGU7XG4gICAgICByZXR1cm4gZnVuYyhjb2xsZWN0aW9uKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSBzaXplIG9mIGBjb2xsZWN0aW9uYCBieSByZXR1cm5pbmcgaXRzIGxlbmd0aCBmb3IgYXJyYXktbGlrZVxuICAgICAqIHZhbHVlcyBvciB0aGUgbnVtYmVyIG9mIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIGZvciBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdHxzdHJpbmd9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb2xsZWN0aW9uIHNpemUuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc2l6ZShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8uc2l6ZSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IDJcbiAgICAgKlxuICAgICAqIF8uc2l6ZSgncGViYmxlcycpO1xuICAgICAqIC8vID0+IDdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzaXplKGNvbGxlY3Rpb24pIHtcbiAgICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgICB9XG4gICAgICBpZiAoaXNBcnJheUxpa2UoY29sbGVjdGlvbikpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKGNvbGxlY3Rpb24pID8gc3RyaW5nU2l6ZShjb2xsZWN0aW9uKSA6IGNvbGxlY3Rpb24ubGVuZ3RoO1xuICAgICAgfVxuICAgICAgdmFyIHRhZyA9IGdldFRhZyhjb2xsZWN0aW9uKTtcbiAgICAgIGlmICh0YWcgPT0gbWFwVGFnIHx8IHRhZyA9PSBzZXRUYWcpIHtcbiAgICAgICAgcmV0dXJuIGNvbGxlY3Rpb24uc2l6ZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlS2V5cyhjb2xsZWN0aW9uKS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwcmVkaWNhdGVgIHJldHVybnMgdHJ1dGh5IGZvciAqKmFueSoqIGVsZW1lbnQgb2YgYGNvbGxlY3Rpb25gLlxuICAgICAqIEl0ZXJhdGlvbiBpcyBzdG9wcGVkIG9uY2UgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkuIFRoZSBwcmVkaWNhdGUgaXNcbiAgICAgKiBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGluZGV4fGtleSwgY29sbGVjdGlvbikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICAgICAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBjb2xsZWN0aW9uIFRoZSBjb2xsZWN0aW9uIHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJlZGljYXRlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5zb21lKFtudWxsLCAwLCAneWVzJywgZmFsc2VdLCBCb29sZWFuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhY3RpdmUnOiBmYWxzZSB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzYCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5zb21lKHVzZXJzLCB7ICd1c2VyJzogJ2Jhcm5leScsICdhY3RpdmUnOiBmYWxzZSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uc29tZSh1c2VycywgJ2FjdGl2ZScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzb21lKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpIHtcbiAgICAgIHZhciBmdW5jID0gaXNBcnJheShjb2xsZWN0aW9uKSA/IGFycmF5U29tZSA6IGJhc2VTb21lO1xuICAgICAgaWYgKGd1YXJkICYmIGlzSXRlcmF0ZWVDYWxsKGNvbGxlY3Rpb24sIHByZWRpY2F0ZSwgZ3VhcmQpKSB7XG4gICAgICAgIHByZWRpY2F0ZSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgZWxlbWVudHMsIHNvcnRlZCBpbiBhc2NlbmRpbmcgb3JkZXIgYnkgdGhlIHJlc3VsdHMgb2ZcbiAgICAgKiBydW5uaW5nIGVhY2ggZWxlbWVudCBpbiBhIGNvbGxlY3Rpb24gdGhydSBlYWNoIGl0ZXJhdGVlLiBUaGlzIG1ldGhvZFxuICAgICAqIHBlcmZvcm1zIGEgc3RhYmxlIHNvcnQsIHRoYXQgaXMsIGl0IHByZXNlcnZlcyB0aGUgb3JpZ2luYWwgc29ydCBvcmRlciBvZlxuICAgICAqIGVxdWFsIGVsZW1lbnRzLiBUaGUgaXRlcmF0ZWVzIGFyZSBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IENvbGxlY3Rpb25cbiAgICAgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICAgICAqICBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2ZyZWQnLCAgICdhZ2UnOiA0OCB9LFxuICAgICAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDMwIH0sXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNCB9XG4gICAgICogXTtcbiAgICAgKlxuICAgICAqIF8uc29ydEJ5KHVzZXJzLCBbZnVuY3Rpb24obykgeyByZXR1cm4gby51c2VyOyB9XSk7XG4gICAgICogLy8gPT4gb2JqZWN0cyBmb3IgW1snYmFybmV5JywgMzZdLCBbJ2Jhcm5leScsIDM0XSwgWydmcmVkJywgNDhdLCBbJ2ZyZWQnLCAzMF1dXG4gICAgICpcbiAgICAgKiBfLnNvcnRCeSh1c2VycywgWyd1c2VyJywgJ2FnZSddKTtcbiAgICAgKiAvLyA9PiBvYmplY3RzIGZvciBbWydiYXJuZXknLCAzNF0sIFsnYmFybmV5JywgMzZdLCBbJ2ZyZWQnLCAzMF0sIFsnZnJlZCcsIDQ4XV1cbiAgICAgKi9cbiAgICB2YXIgc29ydEJ5ID0gYmFzZVJlc3QoZnVuY3Rpb24oY29sbGVjdGlvbiwgaXRlcmF0ZWVzKSB7XG4gICAgICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBsZW5ndGggPSBpdGVyYXRlZXMubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCA+IDEgJiYgaXNJdGVyYXRlZUNhbGwoY29sbGVjdGlvbiwgaXRlcmF0ZWVzWzBdLCBpdGVyYXRlZXNbMV0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtdO1xuICAgICAgfSBlbHNlIGlmIChsZW5ndGggPiAyICYmIGlzSXRlcmF0ZWVDYWxsKGl0ZXJhdGVlc1swXSwgaXRlcmF0ZWVzWzFdLCBpdGVyYXRlZXNbMl0pKSB7XG4gICAgICAgIGl0ZXJhdGVlcyA9IFtpdGVyYXRlZXNbMF1dO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGJhc2VPcmRlckJ5KGNvbGxlY3Rpb24sIGJhc2VGbGF0dGVuKGl0ZXJhdGVlcywgMSksIFtdKTtcbiAgICB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICAgICAqIHRoZSBVbml4IGVwb2NoICgxIEphbnVhcnkgMTk3MCAwMDowMDowMCBVVEMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuNC4wXG4gICAgICogQGNhdGVnb3J5IERhdGVcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lc3RhbXAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmZXIoZnVuY3Rpb24oc3RhbXApIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKF8ubm93KCkgLSBzdGFtcCk7XG4gICAgICogfSwgXy5ub3coKSk7XG4gICAgICogLy8gPT4gTG9ncyB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpdCB0b29rIGZvciB0aGUgZGVmZXJyZWQgaW52b2NhdGlvbi5cbiAgICAgKi9cbiAgICB2YXIgbm93ID0gY3R4Tm93IHx8IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJvb3QuRGF0ZS5ub3coKTtcbiAgICB9O1xuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLmJlZm9yZWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiBgZnVuY2Agb25jZSBpdCdzIGNhbGxlZCBgbmAgb3IgbW9yZSB0aW1lcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgY2FsbHMgYmVmb3JlIGBmdW5jYCBpcyBpbnZva2VkLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBzYXZlcyA9IFsncHJvZmlsZScsICdzZXR0aW5ncyddO1xuICAgICAqXG4gICAgICogdmFyIGRvbmUgPSBfLmFmdGVyKHNhdmVzLmxlbmd0aCwgZnVuY3Rpb24oKSB7XG4gICAgICogICBjb25zb2xlLmxvZygnZG9uZSBzYXZpbmchJyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBfLmZvckVhY2goc2F2ZXMsIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgKiAgIGFzeW5jU2F2ZSh7ICd0eXBlJzogdHlwZSwgJ2NvbXBsZXRlJzogZG9uZSB9KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdkb25lIHNhdmluZyEnIGFmdGVyIHRoZSB0d28gYXN5bmMgc2F2ZXMgaGF2ZSBjb21wbGV0ZWQuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYWZ0ZXIobiwgZnVuYykge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKC0tbiA8IDEpIHtcbiAgICAgICAgICByZXR1cm4gZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgLCB3aXRoIHVwIHRvIGBuYCBhcmd1bWVudHMsXG4gICAgICogaWdub3JpbmcgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2FwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtuPWZ1bmMubGVuZ3RoXSBUaGUgYXJpdHkgY2FwLlxuICAgICAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnOCcsICcxMCddLCBfLmFyeShwYXJzZUludCwgMSkpO1xuICAgICAqIC8vID0+IFs2LCA4LCAxMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBhcnkoZnVuYywgbiwgZ3VhcmQpIHtcbiAgICAgIG4gPSBndWFyZCA/IHVuZGVmaW5lZCA6IG47XG4gICAgICBuID0gKGZ1bmMgJiYgbiA9PSBudWxsKSA/IGZ1bmMubGVuZ3RoIDogbjtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfQVJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2AsIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIGFuZCBhcmd1bWVudHNcbiAgICAgKiBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbiwgd2hpbGUgaXQncyBjYWxsZWQgbGVzcyB0aGFuIGBuYCB0aW1lcy4gU3Vic2VxdWVudFxuICAgICAqIGNhbGxzIHRvIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiBjYWxscyBhdCB3aGljaCBgZnVuY2AgaXMgbm8gbG9uZ2VyIGludm9rZWQuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcmVzdHJpY3QuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcmVzdHJpY3RlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uYmVmb3JlKDUsIGFkZENvbnRhY3RUb0xpc3QpKTtcbiAgICAgKiAvLyA9PiBBbGxvd3MgYWRkaW5nIHVwIHRvIDQgY29udGFjdHMgdG8gdGhlIGxpc3QuXG4gICAgICovXG4gICAgZnVuY3Rpb24gYmVmb3JlKG4sIGZ1bmMpIHtcbiAgICAgIHZhciByZXN1bHQ7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoLS1uID4gMCkge1xuICAgICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobiA8PSAxKSB7XG4gICAgICAgICAgZnVuYyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2BcbiAgICAgKiBhbmQgYHBhcnRpYWxzYCBwcmVwZW5kZWQgdG8gdGhlIGFyZ3VtZW50cyBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kLnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBVbmxpa2UgbmF0aXZlIGBGdW5jdGlvbiNiaW5kYCwgdGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCJcbiAgICAgKiBwcm9wZXJ0eSBvZiBib3VuZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBiaW5kLlxuICAgICAqIEBwYXJhbSB7Kn0gdGhpc0FyZyBUaGUgYHRoaXNgIGJpbmRpbmcgb2YgYGZ1bmNgLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJvdW5kIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIHRoaXMudXNlciArIHB1bmN0dWF0aW9uO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICd1c2VyJzogJ2ZyZWQnIH07XG4gICAgICpcbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmQoZ3JlZXQsIG9iamVjdCwgXywgJyEnKTtcbiAgICAgKiBib3VuZCgnaGknKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICovXG4gICAgdmFyIGJpbmQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB0aGlzQXJnLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGJpdG1hc2sgPSBXUkFQX0JJTkRfRkxBRztcbiAgICAgIGlmIChwYXJ0aWFscy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKGJpbmQpKTtcbiAgICAgICAgYml0bWFzayB8PSBXUkFQX1BBUlRJQUxfRkxBRztcbiAgICAgIH1cbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIGJpdG1hc2ssIHRoaXNBcmcsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIG1ldGhvZCBhdCBgb2JqZWN0W2tleV1gIHdpdGggYHBhcnRpYWxzYFxuICAgICAqIHByZXBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgZGlmZmVycyBmcm9tIGBfLmJpbmRgIGJ5IGFsbG93aW5nIGJvdW5kIGZ1bmN0aW9ucyB0byByZWZlcmVuY2VcbiAgICAgKiBtZXRob2RzIHRoYXQgbWF5IGJlIHJlZGVmaW5lZCBvciBkb24ndCB5ZXQgZXhpc3QuIFNlZVxuICAgICAqIFtQZXRlciBNaWNoYXV4J3MgYXJ0aWNsZV0oaHR0cDovL3BldGVyLm1pY2hhdXguY2EvYXJ0aWNsZXMvbGF6eS1mdW5jdGlvbi1kZWZpbml0aW9uLXBhdHRlcm4pXG4gICAgICogZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIFRoZSBgXy5iaW5kS2V5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWNcbiAgICAgKiBidWlsZHMsIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52b2tlIHRoZSBtZXRob2Qgb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QuXG4gICAgICogQHBhcmFtIHsuLi4qfSBbcGFydGlhbHNdIFRoZSBhcmd1bWVudHMgdG8gYmUgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYm91bmQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7XG4gICAgICogICAndXNlcic6ICdmcmVkJyxcbiAgICAgKiAgICdncmVldCc6IGZ1bmN0aW9uKGdyZWV0aW5nLCBwdW5jdHVhdGlvbikge1xuICAgICAqICAgICByZXR1cm4gZ3JlZXRpbmcgKyAnICcgKyB0aGlzLnVzZXIgKyBwdW5jdHVhdGlvbjtcbiAgICAgKiAgIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGJvdW5kID0gXy5iaW5kS2V5KG9iamVjdCwgJ2dyZWV0JywgJ2hpJyk7XG4gICAgICogYm91bmQoJyEnKTtcbiAgICAgKiAvLyA9PiAnaGkgZnJlZCEnXG4gICAgICpcbiAgICAgKiBvYmplY3QuZ3JlZXQgPSBmdW5jdGlvbihncmVldGluZywgcHVuY3R1YXRpb24pIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICd5YSAnICsgdGhpcy51c2VyICsgcHVuY3R1YXRpb247XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIGJvdW5kKCchJyk7XG4gICAgICogLy8gPT4gJ2hpeWEgZnJlZCEnXG4gICAgICpcbiAgICAgKiAvLyBCb3VuZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiB2YXIgYm91bmQgPSBfLmJpbmRLZXkob2JqZWN0LCAnZ3JlZXQnLCBfLCAnIScpO1xuICAgICAqIGJvdW5kKCdoaScpO1xuICAgICAqIC8vID0+ICdoaXlhIGZyZWQhJ1xuICAgICAqL1xuICAgIHZhciBiaW5kS2V5ID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBrZXksIHBhcnRpYWxzKSB7XG4gICAgICB2YXIgYml0bWFzayA9IFdSQVBfQklORF9GTEFHIHwgV1JBUF9CSU5EX0tFWV9GTEFHO1xuICAgICAgaWYgKHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgICB2YXIgaG9sZGVycyA9IHJlcGxhY2VIb2xkZXJzKHBhcnRpYWxzLCBnZXRIb2xkZXIoYmluZEtleSkpO1xuICAgICAgICBiaXRtYXNrIHw9IFdSQVBfUEFSVElBTF9GTEFHO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoa2V5LCBiaXRtYXNrLCBvYmplY3QsIHBhcnRpYWxzLCBob2xkZXJzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYXJndW1lbnRzIG9mIGBmdW5jYCBhbmQgZWl0aGVyIGludm9rZXNcbiAgICAgKiBgZnVuY2AgcmV0dXJuaW5nIGl0cyByZXN1bHQsIGlmIGF0IGxlYXN0IGBhcml0eWAgbnVtYmVyIG9mIGFyZ3VtZW50cyBoYXZlXG4gICAgICogYmVlbiBwcm92aWRlZCwgb3IgcmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyB0aGUgcmVtYWluaW5nIGBmdW5jYFxuICAgICAqIGFyZ3VtZW50cywgYW5kIHNvIG9uLiBUaGUgYXJpdHkgb2YgYGZ1bmNgIG1heSBiZSBzcGVjaWZpZWQgaWYgYGZ1bmMubGVuZ3RoYFxuICAgICAqIGlzIG5vdCBzdWZmaWNpZW50LlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5LnBsYWNlaG9sZGVyYCB2YWx1ZSwgd2hpY2ggZGVmYXVsdHMgdG8gYF9gIGluIG1vbm9saXRoaWMgYnVpbGRzLFxuICAgICAqIG1heSBiZSB1c2VkIGFzIGEgcGxhY2Vob2xkZXIgZm9yIHByb3ZpZGVkIGFyZ3VtZW50cy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBkb2Vzbid0IHNldCB0aGUgXCJsZW5ndGhcIiBwcm9wZXJ0eSBvZiBjdXJyaWVkIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGN1cnJ5LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbYXJpdHk9ZnVuYy5sZW5ndGhdIFRoZSBhcml0eSBvZiBgZnVuY2AuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjdXJyaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYWJjID0gZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogdmFyIGN1cnJpZWQgPSBfLmN1cnJ5KGFiYyk7XG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEpKDIpKDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogY3VycmllZCgxLCAyKSgzKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMSwgMiwgMyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiAvLyBDdXJyaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIGN1cnJpZWQoMSkoXywgMykoMik7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICovXG4gICAgZnVuY3Rpb24gY3VycnkoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeS5wbGFjZWhvbGRlcjtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jdXJyeWAgZXhjZXB0IHRoYXQgYXJndW1lbnRzIGFyZSBhcHBsaWVkIHRvIGBmdW5jYFxuICAgICAqIGluIHRoZSBtYW5uZXIgb2YgYF8ucGFydGlhbFJpZ2h0YCBpbnN0ZWFkIG9mIGBfLnBhcnRpYWxgLlxuICAgICAqXG4gICAgICogVGhlIGBfLmN1cnJ5UmlnaHQucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcHJvdmlkZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIGN1cnJpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY3VycnkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFthcml0eT1mdW5jLmxlbmd0aF0gVGhlIGFyaXR5IG9mIGBmdW5jYC5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGN1cnJpZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhYmMgPSBmdW5jdGlvbihhLCBiLCBjKSB7XG4gICAgICogICByZXR1cm4gW2EsIGIsIGNdO1xuICAgICAqIH07XG4gICAgICpcbiAgICAgKiB2YXIgY3VycmllZCA9IF8uY3VycnlSaWdodChhYmMpO1xuICAgICAqXG4gICAgICogY3VycmllZCgzKSgyKSgxKTtcbiAgICAgKiAvLyA9PiBbMSwgMiwgM11cbiAgICAgKlxuICAgICAqIGN1cnJpZWQoMiwgMykoMSk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdXG4gICAgICpcbiAgICAgKiBjdXJyaWVkKDEsIDIsIDMpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqXG4gICAgICogLy8gQ3VycmllZCB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICAgKiBjdXJyaWVkKDMpKDEsIF8pKDIpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGN1cnJ5UmlnaHQoZnVuYywgYXJpdHksIGd1YXJkKSB7XG4gICAgICBhcml0eSA9IGd1YXJkID8gdW5kZWZpbmVkIDogYXJpdHk7XG4gICAgICB2YXIgcmVzdWx0ID0gY3JlYXRlV3JhcChmdW5jLCBXUkFQX0NVUlJZX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBhcml0eSk7XG4gICAgICByZXN1bHQucGxhY2Vob2xkZXIgPSBjdXJyeVJpZ2h0LnBsYWNlaG9sZGVyO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZGVib3VuY2VkIGZ1bmN0aW9uIHRoYXQgZGVsYXlzIGludm9raW5nIGBmdW5jYCB1bnRpbCBhZnRlciBgd2FpdGBcbiAgICAgKiBtaWxsaXNlY29uZHMgaGF2ZSBlbGFwc2VkIHNpbmNlIHRoZSBsYXN0IHRpbWUgdGhlIGRlYm91bmNlZCBmdW5jdGlvbiB3YXNcbiAgICAgKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gICAgICogZGVsYXllZCBgZnVuY2AgaW52b2NhdGlvbnMgYW5kIGEgYGZsdXNoYCBtZXRob2QgdG8gaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uXG4gICAgICogUHJvdmlkZSBgb3B0aW9uc2AgdG8gaW5kaWNhdGUgd2hldGhlciBgZnVuY2Agc2hvdWxkIGJlIGludm9rZWQgb24gdGhlXG4gICAgICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhlIGxhc3QgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnRcbiAgICAgKiBjYWxscyB0byB0aGUgZGVib3VuY2VkIGZ1bmN0aW9uIHJldHVybiB0aGUgcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYFxuICAgICAqIGludm9jYXRpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogSWYgYGxlYWRpbmdgIGFuZCBgdHJhaWxpbmdgIG9wdGlvbnMgYXJlIGB0cnVlYCwgYGZ1bmNgIGlzXG4gICAgICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAgICAgKiBpcyBpbnZva2VkIG1vcmUgdGhhbiBvbmNlIGR1cmluZyB0aGUgYHdhaXRgIHRpbWVvdXQuXG4gICAgICpcbiAgICAgKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAgICAgKiB1bnRpbCB0byB0aGUgbmV4dCB0aWNrLCBzaW1pbGFyIHRvIGBzZXRUaW1lb3V0YCB3aXRoIGEgdGltZW91dCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAgICAgKiBmb3IgZGV0YWlscyBvdmVyIHRoZSBkaWZmZXJlbmNlcyBiZXR3ZWVuIGBfLmRlYm91bmNlYCBhbmQgYF8udGhyb3R0bGVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVib3VuY2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt3YWl0PTBdIFRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHRvIGRlbGF5LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubGVhZGluZz1mYWxzZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICAgICAqICBUaGUgbWF4aW11bSB0aW1lIGBmdW5jYCBpcyBhbGxvd2VkIHRvIGJlIGRlbGF5ZWQgYmVmb3JlIGl0J3MgaW52b2tlZC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnRyYWlsaW5nPXRydWVdXG4gICAgICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZGVib3VuY2VkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiAvLyBBdm9pZCBjb3N0bHkgY2FsY3VsYXRpb25zIHdoaWxlIHRoZSB3aW5kb3cgc2l6ZSBpcyBpbiBmbHV4LlxuICAgICAqIGpRdWVyeSh3aW5kb3cpLm9uKCdyZXNpemUnLCBfLmRlYm91bmNlKGNhbGN1bGF0ZUxheW91dCwgMTUwKSk7XG4gICAgICpcbiAgICAgKiAvLyBJbnZva2UgYHNlbmRNYWlsYCB3aGVuIGNsaWNrZWQsIGRlYm91bmNpbmcgc3Vic2VxdWVudCBjYWxscy5cbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgXy5kZWJvdW5jZShzZW5kTWFpbCwgMzAwLCB7XG4gICAgICogICAnbGVhZGluZyc6IHRydWUsXG4gICAgICogICAndHJhaWxpbmcnOiBmYWxzZVxuICAgICAqIH0pKTtcbiAgICAgKlxuICAgICAqIC8vIEVuc3VyZSBgYmF0Y2hMb2dgIGlzIGludm9rZWQgb25jZSBhZnRlciAxIHNlY29uZCBvZiBkZWJvdW5jZWQgY2FsbHMuXG4gICAgICogdmFyIGRlYm91bmNlZCA9IF8uZGVib3VuY2UoYmF0Y2hMb2csIDI1MCwgeyAnbWF4V2FpdCc6IDEwMDAgfSk7XG4gICAgICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICAgICAqIGpRdWVyeShzb3VyY2UpLm9uKCdtZXNzYWdlJywgZGVib3VuY2VkKTtcbiAgICAgKlxuICAgICAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgZGVib3VuY2VkLmNhbmNlbCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgICAgdmFyIGxhc3RBcmdzLFxuICAgICAgICAgIGxhc3RUaGlzLFxuICAgICAgICAgIG1heFdhaXQsXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIHRpbWVySWQsXG4gICAgICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgICAgIGxhc3RJbnZva2VUaW1lID0gMCxcbiAgICAgICAgICBsZWFkaW5nID0gZmFsc2UsXG4gICAgICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICB3YWl0ID0gdG9OdW1iZXIod2FpdCkgfHwgMDtcbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICBsZWFkaW5nID0gISFvcHRpb25zLmxlYWRpbmc7XG4gICAgICAgIG1heGluZyA9ICdtYXhXYWl0JyBpbiBvcHRpb25zO1xuICAgICAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBsYXN0QXJncyxcbiAgICAgICAgICAgIHRoaXNBcmcgPSBsYXN0VGhpcztcblxuICAgICAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgICAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpc0FyZywgYXJncyk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGxlYWRpbmdFZGdlKHRpbWUpIHtcbiAgICAgICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICAgICAgbGFzdEludm9rZVRpbWUgPSB0aW1lO1xuICAgICAgICAvLyBTdGFydCB0aGUgdGltZXIgZm9yIHRoZSB0cmFpbGluZyBlZGdlLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICAvLyBJbnZva2UgdGhlIGxlYWRpbmcgZWRnZS5cbiAgICAgICAgcmV0dXJuIGxlYWRpbmcgPyBpbnZva2VGdW5jKHRpbWUpIDogcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiByZW1haW5pbmdXYWl0KHRpbWUpIHtcbiAgICAgICAgdmFyIHRpbWVTaW5jZUxhc3RDYWxsID0gdGltZSAtIGxhc3RDYWxsVGltZSxcbiAgICAgICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgICAgICB0aW1lV2FpdGluZyA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgICAgICByZXR1cm4gbWF4aW5nXG4gICAgICAgICAgPyBuYXRpdmVNaW4odGltZVdhaXRpbmcsIG1heFdhaXQgLSB0aW1lU2luY2VMYXN0SW52b2tlKVxuICAgICAgICAgIDogdGltZVdhaXRpbmc7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIHNob3VsZEludm9rZSh0aW1lKSB7XG4gICAgICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgICAgICB0aW1lU2luY2VMYXN0SW52b2tlID0gdGltZSAtIGxhc3RJbnZva2VUaW1lO1xuXG4gICAgICAgIC8vIEVpdGhlciB0aGlzIGlzIHRoZSBmaXJzdCBjYWxsLCBhY3Rpdml0eSBoYXMgc3RvcHBlZCBhbmQgd2UncmUgYXQgdGhlXG4gICAgICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgICAgIC8vIGl0IGFzIHRoZSB0cmFpbGluZyBlZGdlLCBvciB3ZSd2ZSBoaXQgdGhlIGBtYXhXYWl0YCBsaW1pdC5cbiAgICAgICAgcmV0dXJuIChsYXN0Q2FsbFRpbWUgPT09IHVuZGVmaW5lZCB8fCAodGltZVNpbmNlTGFzdENhbGwgPj0gd2FpdCkgfHxcbiAgICAgICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0aW1lckV4cGlyZWQoKSB7XG4gICAgICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgICAgIGlmIChzaG91bGRJbnZva2UodGltZSkpIHtcbiAgICAgICAgICByZXR1cm4gdHJhaWxpbmdFZGdlKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFJlc3RhcnQgdGhlIHRpbWVyLlxuICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHJlbWFpbmluZ1dhaXQodGltZSkpO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiB0cmFpbGluZ0VkZ2UodGltZSkge1xuICAgICAgICB0aW1lcklkID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAgICAgLy8gZGVib3VuY2VkIGF0IGxlYXN0IG9uY2UuXG4gICAgICAgIGlmICh0cmFpbGluZyAmJiBsYXN0QXJncykge1xuICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgICAgICB9XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdFRoaXMgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICAgICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcklkKTtcbiAgICAgICAgfVxuICAgICAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgICAgIGxhc3RBcmdzID0gbGFzdENhbGxUaW1lID0gbGFzdFRoaXMgPSB0aW1lcklkID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRpbWVySWQgPT09IHVuZGVmaW5lZCA/IHJlc3VsdCA6IHRyYWlsaW5nRWRnZShub3coKSk7XG4gICAgICB9XG5cbiAgICAgIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICAgICAgdmFyIHRpbWUgPSBub3coKSxcbiAgICAgICAgICAgIGlzSW52b2tpbmcgPSBzaG91bGRJbnZva2UodGltZSk7XG5cbiAgICAgICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICAgIGxhc3RUaGlzID0gdGhpcztcbiAgICAgICAgbGFzdENhbGxUaW1lID0gdGltZTtcblxuICAgICAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBsZWFkaW5nRWRnZShsYXN0Q2FsbFRpbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobWF4aW5nKSB7XG4gICAgICAgICAgICAvLyBIYW5kbGUgaW52b2NhdGlvbnMgaW4gYSB0aWdodCBsb29wLlxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgICAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgICAgIHJldHVybiBpbnZva2VGdW5jKGxhc3RDYWxsVGltZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aW1lcklkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG4gICAgICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICAgICAgZGVib3VuY2VkLmZsdXNoID0gZmx1c2g7XG4gICAgICByZXR1cm4gZGVib3VuY2VkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlZmVycyBpbnZva2luZyB0aGUgYGZ1bmNgIHVudGlsIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzIGNsZWFyZWQuIEFueVxuICAgICAqIGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byBgZnVuY2Agd2hlbiBpdCdzIGludm9rZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWZlci5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWZlcihmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAnZGVmZXJyZWQnKTtcbiAgICAgKiAvLyA9PiBMb2dzICdkZWZlcnJlZCcgYWZ0ZXIgb25lIG1pbGxpc2Vjb25kLlxuICAgICAqL1xuICAgIHZhciBkZWZlciA9IGJhc2VSZXN0KGZ1bmN0aW9uKGZ1bmMsIGFyZ3MpIHtcbiAgICAgIHJldHVybiBiYXNlRGVsYXkoZnVuYywgMSwgYXJncyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2VzIGBmdW5jYCBhZnRlciBgd2FpdGAgbWlsbGlzZWNvbmRzLiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlXG4gICAgICogcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gZGVsYXkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHdhaXQgVGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gZGVsYXkgaW52b2NhdGlvbi5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0aW1lciBpZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5kZWxheShmdW5jdGlvbih0ZXh0KSB7XG4gICAgICogICBjb25zb2xlLmxvZyh0ZXh0KTtcbiAgICAgKiB9LCAxMDAwLCAnbGF0ZXInKTtcbiAgICAgKiAvLyA9PiBMb2dzICdsYXRlcicgYWZ0ZXIgb25lIHNlY29uZC5cbiAgICAgKi9cbiAgICB2YXIgZGVsYXkgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCB3YWl0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gYmFzZURlbGF5KGZ1bmMsIHRvTnVtYmVyKHdhaXQpIHx8IDAsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgcmV2ZXJzZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBmbGlwIGFyZ3VtZW50cyBmb3IuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZmxpcHBlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZsaXBwZWQgPSBfLmZsaXAoZnVuY3Rpb24oKSB7XG4gICAgICogICByZXR1cm4gXy50b0FycmF5KGFyZ3VtZW50cyk7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBmbGlwcGVkKCdhJywgJ2InLCAnYycsICdkJyk7XG4gICAgICogLy8gPT4gWydkJywgJ2MnLCAnYicsICdhJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmbGlwKGZ1bmMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfRkxJUF9GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICAgICAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAgICAgKiBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uLiBCeSBkZWZhdWx0LCB0aGUgZmlyc3QgYXJndW1lbnRcbiAgICAgKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICAgICAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICAgICAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICAgICAqIGNvbnN0cnVjdG9yIHdpdGggb25lIHdob3NlIGluc3RhbmNlcyBpbXBsZW1lbnQgdGhlXG4gICAgICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAgICAgKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcmVzb2x2ZXJdIFRoZSBmdW5jdGlvbiB0byByZXNvbHZlIHRoZSBjYWNoZSBrZXkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gICAgICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICAgICAqXG4gICAgICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gICAgICogdmFsdWVzKG9iamVjdCk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiB2YWx1ZXMob3RoZXIpO1xuICAgICAqIC8vID0+IFszLCA0XVxuICAgICAqXG4gICAgICogb2JqZWN0LmEgPSAyO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqXG4gICAgICogLy8gTW9kaWZ5IHRoZSByZXN1bHQgY2FjaGUuXG4gICAgICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICAgICAqIHZhbHVlcyhvYmplY3QpO1xuICAgICAqIC8vID0+IFsnYScsICdiJ11cbiAgICAgKlxuICAgICAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gICAgICogXy5tZW1vaXplLkNhY2hlID0gV2Vha01hcDtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJyB8fCAocmVzb2x2ZXIgIT0gbnVsbCAmJiB0eXBlb2YgcmVzb2x2ZXIgIT0gJ2Z1bmN0aW9uJykpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgdmFyIG1lbW9pemVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgICAgICBjYWNoZSA9IG1lbW9pemVkLmNhY2hlO1xuXG4gICAgICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICAgIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgICAgIHJldHVybiBtZW1vaXplZDtcbiAgICB9XG5cbiAgICAvLyBFeHBvc2UgYE1hcENhY2hlYC5cbiAgICBtZW1vaXplLkNhY2hlID0gTWFwQ2FjaGU7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBuZWdhdGVzIHRoZSByZXN1bHQgb2YgdGhlIHByZWRpY2F0ZSBgZnVuY2AuIFRoZVxuICAgICAqIGBmdW5jYCBwcmVkaWNhdGUgaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBhbmQgYXJndW1lbnRzIG9mIHRoZVxuICAgICAqIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIHByZWRpY2F0ZSB0byBuZWdhdGUuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbmVnYXRlZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNFdmVuKG4pIHtcbiAgICAgKiAgIHJldHVybiBuICUgMiA9PSAwO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsxLCAyLCAzLCA0LCA1LCA2XSwgXy5uZWdhdGUoaXNFdmVuKSk7XG4gICAgICogLy8gPT4gWzEsIDMsIDVdXG4gICAgICovXG4gICAgZnVuY3Rpb24gbmVnYXRlKHByZWRpY2F0ZSkge1xuICAgICAgaWYgKHR5cGVvZiBwcmVkaWNhdGUgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgICAgY2FzZSAwOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMpO1xuICAgICAgICAgIGNhc2UgMTogcmV0dXJuICFwcmVkaWNhdGUuY2FsbCh0aGlzLCBhcmdzWzBdKTtcbiAgICAgICAgICBjYXNlIDI6IHJldHVybiAhcHJlZGljYXRlLmNhbGwodGhpcywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gIXByZWRpY2F0ZS5jYWxsKHRoaXMsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhcHJlZGljYXRlLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpcyByZXN0cmljdGVkIHRvIGludm9raW5nIGBmdW5jYCBvbmNlLiBSZXBlYXQgY2FsbHNcbiAgICAgKiB0byB0aGUgZnVuY3Rpb24gcmV0dXJuIHRoZSB2YWx1ZSBvZiB0aGUgZmlyc3QgaW52b2NhdGlvbi4gVGhlIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZCBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHJlc3RyaWN0ZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBpbml0aWFsaXplID0gXy5vbmNlKGNyZWF0ZUFwcGxpY2F0aW9uKTtcbiAgICAgKiBpbml0aWFsaXplKCk7XG4gICAgICogaW5pdGlhbGl6ZSgpO1xuICAgICAqIC8vID0+IGBjcmVhdGVBcHBsaWNhdGlvbmAgaXMgaW52b2tlZCBvbmNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gb25jZShmdW5jKSB7XG4gICAgICByZXR1cm4gYmVmb3JlKDIsIGZ1bmMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50cyB0cmFuc2Zvcm1lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFt0cmFuc2Zvcm1zPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIGFyZ3VtZW50IHRyYW5zZm9ybXMuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGRvdWJsZWQobikge1xuICAgICAqICAgcmV0dXJuIG4gKiAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIHNxdWFyZShuKSB7XG4gICAgICogICByZXR1cm4gbiAqIG47XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLm92ZXJBcmdzKGZ1bmN0aW9uKHgsIHkpIHtcbiAgICAgKiAgIHJldHVybiBbeCwgeV07XG4gICAgICogfSwgW3NxdWFyZSwgZG91YmxlZF0pO1xuICAgICAqXG4gICAgICogZnVuYyg5LCAzKTtcbiAgICAgKiAvLyA9PiBbODEsIDZdXG4gICAgICpcbiAgICAgKiBmdW5jKDEwLCA1KTtcbiAgICAgKiAvLyA9PiBbMTAwLCAxMF1cbiAgICAgKi9cbiAgICB2YXIgb3ZlckFyZ3MgPSBjYXN0UmVzdChmdW5jdGlvbihmdW5jLCB0cmFuc2Zvcm1zKSB7XG4gICAgICB0cmFuc2Zvcm1zID0gKHRyYW5zZm9ybXMubGVuZ3RoID09IDEgJiYgaXNBcnJheSh0cmFuc2Zvcm1zWzBdKSlcbiAgICAgICAgPyBhcnJheU1hcCh0cmFuc2Zvcm1zWzBdLCBiYXNlVW5hcnkoZ2V0SXRlcmF0ZWUoKSkpXG4gICAgICAgIDogYXJyYXlNYXAoYmFzZUZsYXR0ZW4odHJhbnNmb3JtcywgMSksIGJhc2VVbmFyeShnZXRJdGVyYXRlZSgpKSk7XG5cbiAgICAgIHZhciBmdW5jc0xlbmd0aCA9IHRyYW5zZm9ybXMubGVuZ3RoO1xuICAgICAgcmV0dXJuIGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgICAgICBsZW5ndGggPSBuYXRpdmVNaW4oYXJncy5sZW5ndGgsIGZ1bmNzTGVuZ3RoKTtcblxuICAgICAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgICAgIGFyZ3NbaW5kZXhdID0gdHJhbnNmb3Jtc1tpbmRleF0uY2FsbCh0aGlzLCBhcmdzW2luZGV4XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGBwYXJ0aWFsc2AgcHJlcGVuZGVkIHRvIHRoZVxuICAgICAqIGFyZ3VtZW50cyBpdCByZWNlaXZlcy4gVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5iaW5kYCBleGNlcHQgaXQgZG9lcyAqKm5vdCoqXG4gICAgICogYWx0ZXIgdGhlIGB0aGlzYCBiaW5kaW5nLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWwucGxhY2Vob2xkZXJgIHZhbHVlLCB3aGljaCBkZWZhdWx0cyB0byBgX2AgaW4gbW9ub2xpdGhpY1xuICAgICAqIGJ1aWxkcywgbWF5IGJlIHVzZWQgYXMgYSBwbGFjZWhvbGRlciBmb3IgcGFydGlhbGx5IGFwcGxpZWQgYXJndW1lbnRzLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGRvZXNuJ3Qgc2V0IHRoZSBcImxlbmd0aFwiIHByb3BlcnR5IG9mIHBhcnRpYWxseVxuICAgICAqIGFwcGxpZWQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMi4wXG4gICAgICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gcGFydGlhbGx5IGFwcGx5IGFyZ3VtZW50cyB0by5cbiAgICAgKiBAcGFyYW0gey4uLip9IFtwYXJ0aWFsc10gVGhlIGFyZ3VtZW50cyB0byBiZSBwYXJ0aWFsbHkgYXBwbGllZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBwYXJ0aWFsbHkgYXBwbGllZCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gZ3JlZXQoZ3JlZXRpbmcsIG5hbWUpIHtcbiAgICAgKiAgIHJldHVybiBncmVldGluZyArICcgJyArIG5hbWU7XG4gICAgICogfVxuICAgICAqXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWwoZ3JlZXQsICdoZWxsbycpO1xuICAgICAqIHNheUhlbGxvVG8oJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gZnJlZCdcbiAgICAgKlxuICAgICAqIC8vIFBhcnRpYWxseSBhcHBsaWVkIHdpdGggcGxhY2Vob2xkZXJzLlxuICAgICAqIHZhciBncmVldEZyZWQgPSBfLnBhcnRpYWwoZ3JlZXQsIF8sICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgcGFydGlhbHMpIHtcbiAgICAgIHZhciBob2xkZXJzID0gcmVwbGFjZUhvbGRlcnMocGFydGlhbHMsIGdldEhvbGRlcihwYXJ0aWFsKSk7XG4gICAgICByZXR1cm4gY3JlYXRlV3JhcChmdW5jLCBXUkFQX1BBUlRJQUxfRkxBRywgdW5kZWZpbmVkLCBwYXJ0aWFscywgaG9sZGVycyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnBhcnRpYWxgIGV4Y2VwdCB0aGF0IHBhcnRpYWxseSBhcHBsaWVkIGFyZ3VtZW50c1xuICAgICAqIGFyZSBhcHBlbmRlZCB0byB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogVGhlIGBfLnBhcnRpYWxSaWdodC5wbGFjZWhvbGRlcmAgdmFsdWUsIHdoaWNoIGRlZmF1bHRzIHRvIGBfYCBpbiBtb25vbGl0aGljXG4gICAgICogYnVpbGRzLCBtYXkgYmUgdXNlZCBhcyBhIHBsYWNlaG9sZGVyIGZvciBwYXJ0aWFsbHkgYXBwbGllZCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgcGFydGlhbGx5XG4gICAgICogYXBwbGllZCBmdW5jdGlvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBwYXJ0aWFsbHkgYXBwbHkgYXJndW1lbnRzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW3BhcnRpYWxzXSBUaGUgYXJndW1lbnRzIHRvIGJlIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHBhcnRpYWxseSBhcHBsaWVkIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBncmVldChncmVldGluZywgbmFtZSkge1xuICAgICAqICAgcmV0dXJuIGdyZWV0aW5nICsgJyAnICsgbmFtZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZ3JlZXRGcmVkID0gXy5wYXJ0aWFsUmlnaHQoZ3JlZXQsICdmcmVkJyk7XG4gICAgICogZ3JlZXRGcmVkKCdoaScpO1xuICAgICAqIC8vID0+ICdoaSBmcmVkJ1xuICAgICAqXG4gICAgICogLy8gUGFydGlhbGx5IGFwcGxpZWQgd2l0aCBwbGFjZWhvbGRlcnMuXG4gICAgICogdmFyIHNheUhlbGxvVG8gPSBfLnBhcnRpYWxSaWdodChncmVldCwgJ2hlbGxvJywgXyk7XG4gICAgICogc2F5SGVsbG9UbygnZnJlZCcpO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkJ1xuICAgICAqL1xuICAgIHZhciBwYXJ0aWFsUmlnaHQgPSBiYXNlUmVzdChmdW5jdGlvbihmdW5jLCBwYXJ0aWFscykge1xuICAgICAgdmFyIGhvbGRlcnMgPSByZXBsYWNlSG9sZGVycyhwYXJ0aWFscywgZ2V0SG9sZGVyKHBhcnRpYWxSaWdodCkpO1xuICAgICAgcmV0dXJuIGNyZWF0ZVdyYXAoZnVuYywgV1JBUF9QQVJUSUFMX1JJR0hUX0ZMQUcsIHVuZGVmaW5lZCwgcGFydGlhbHMsIGhvbGRlcnMpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBhcmd1bWVudHMgYXJyYW5nZWQgYWNjb3JkaW5nXG4gICAgICogdG8gdGhlIHNwZWNpZmllZCBgaW5kZXhlc2Agd2hlcmUgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBmaXJzdCBpbmRleCBpc1xuICAgICAqIHByb3ZpZGVkIGFzIHRoZSBmaXJzdCBhcmd1bWVudCwgdGhlIGFyZ3VtZW50IHZhbHVlIGF0IHRoZSBzZWNvbmQgaW5kZXggaXNcbiAgICAgKiBwcm92aWRlZCBhcyB0aGUgc2Vjb25kIGFyZ3VtZW50LCBhbmQgc28gb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byByZWFycmFuZ2UgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcGFyYW0gey4uLihudW1iZXJ8bnVtYmVyW10pfSBpbmRleGVzIFRoZSBhcnJhbmdlZCBhcmd1bWVudCBpbmRleGVzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgcmVhcmdlZCA9IF8ucmVhcmcoZnVuY3Rpb24oYSwgYiwgYykge1xuICAgICAqICAgcmV0dXJuIFthLCBiLCBjXTtcbiAgICAgKiB9LCBbMiwgMCwgMV0pO1xuICAgICAqXG4gICAgICogcmVhcmdlZCgnYicsICdjJywgJ2EnKVxuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqL1xuICAgIHZhciByZWFyZyA9IGZsYXRSZXN0KGZ1bmN0aW9uKGZ1bmMsIGluZGV4ZXMpIHtcbiAgICAgIHJldHVybiBjcmVhdGVXcmFwKGZ1bmMsIFdSQVBfUkVBUkdfRkxBRywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaW5kZXhlcyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGVcbiAgICAgKiBjcmVhdGVkIGZ1bmN0aW9uIGFuZCBhcmd1bWVudHMgZnJvbSBgc3RhcnRgIGFuZCBiZXlvbmQgcHJvdmlkZWQgYXNcbiAgICAgKiBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvbiB0aGVcbiAgICAgKiBbcmVzdCBwYXJhbWV0ZXJdKGh0dHBzOi8vbWRuLmlvL3Jlc3RfcGFyYW1ldGVycykuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8ucmVzdChmdW5jdGlvbih3aGF0LCBuYW1lcykge1xuICAgICAqICAgcmV0dXJuIHdoYXQgKyAnICcgKyBfLmluaXRpYWwobmFtZXMpLmpvaW4oJywgJykgK1xuICAgICAqICAgICAoXy5zaXplKG5hbWVzKSA+IDEgPyAnLCAmICcgOiAnJykgKyBfLmxhc3QobmFtZXMpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogc2F5KCdoZWxsbycsICdmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2hlbGxvIGZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc3QoZnVuYywgc3RhcnQpIHtcbiAgICAgIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgICAgIH1cbiAgICAgIHN0YXJ0ID0gc3RhcnQgPT09IHVuZGVmaW5lZCA/IHN0YXJ0IDogdG9JbnRlZ2VyKHN0YXJ0KTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jLCBzdGFydCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlXG4gICAgICogY3JlYXRlIGZ1bmN0aW9uIGFuZCBhbiBhcnJheSBvZiBhcmd1bWVudHMgbXVjaCBsaWtlXG4gICAgICogW2BGdW5jdGlvbiNhcHBseWBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1mdW5jdGlvbi5wcm90b3R5cGUuYXBwbHkpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uIHRoZVxuICAgICAqIFtzcHJlYWQgb3BlcmF0b3JdKGh0dHBzOi8vbWRuLmlvL3NwcmVhZF9vcGVyYXRvcikuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4yLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBzcHJlYWQgYXJndW1lbnRzIG92ZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHNwcmVhZC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHNheSA9IF8uc3ByZWFkKGZ1bmN0aW9uKHdobywgd2hhdCkge1xuICAgICAqICAgcmV0dXJuIHdobyArICcgc2F5cyAnICsgd2hhdDtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIHNheShbJ2ZyZWQnLCAnaGVsbG8nXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQgc2F5cyBoZWxsbydcbiAgICAgKlxuICAgICAqIHZhciBudW1iZXJzID0gUHJvbWlzZS5hbGwoW1xuICAgICAqICAgUHJvbWlzZS5yZXNvbHZlKDQwKSxcbiAgICAgKiAgIFByb21pc2UucmVzb2x2ZSgzNilcbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIG51bWJlcnMudGhlbihfLnNwcmVhZChmdW5jdGlvbih4LCB5KSB7XG4gICAgICogICByZXR1cm4geCArIHk7XG4gICAgICogfSkpO1xuICAgICAqIC8vID0+IGEgUHJvbWlzZSBvZiA3NlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHNwcmVhZChmdW5jLCBzdGFydCkge1xuICAgICAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICAgICAgfVxuICAgICAgc3RhcnQgPSBzdGFydCA9PSBudWxsID8gMCA6IG5hdGl2ZU1heCh0b0ludGVnZXIoc3RhcnQpLCAwKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHZhciBhcnJheSA9IGFyZ3Nbc3RhcnRdLFxuICAgICAgICAgICAgb3RoZXJBcmdzID0gY2FzdFNsaWNlKGFyZ3MsIDAsIHN0YXJ0KTtcblxuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBhcnJheVB1c2gob3RoZXJBcmdzLCBhcnJheSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gICAgICogZXZlcnkgYHdhaXRgIG1pbGxpc2Vjb25kcy4gVGhlIHRocm90dGxlZCBmdW5jdGlvbiBjb21lcyB3aXRoIGEgYGNhbmNlbGBcbiAgICAgKiBtZXRob2QgdG8gY2FuY2VsIGRlbGF5ZWQgYGZ1bmNgIGludm9jYXRpb25zIGFuZCBhIGBmbHVzaGAgbWV0aG9kIHRvXG4gICAgICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gICAgICogc2hvdWxkIGJlIGludm9rZWQgb24gdGhlIGxlYWRpbmcgYW5kL29yIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIGB3YWl0YFxuICAgICAqIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZCB3aXRoIHRoZSBsYXN0IGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGVcbiAgICAgKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gICAgICogcmVzdWx0IG9mIHRoZSBsYXN0IGBmdW5jYCBpbnZvY2F0aW9uLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICAgICAqIGludm9rZWQgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQgb25seSBpZiB0aGUgdGhyb3R0bGVkIGZ1bmN0aW9uXG4gICAgICogaXMgaW52b2tlZCBtb3JlIHRoYW4gb25jZSBkdXJpbmcgdGhlIGB3YWl0YCB0aW1lb3V0LlxuICAgICAqXG4gICAgICogSWYgYHdhaXRgIGlzIGAwYCBhbmQgYGxlYWRpbmdgIGlzIGBmYWxzZWAsIGBmdW5jYCBpbnZvY2F0aW9uIGlzIGRlZmVycmVkXG4gICAgICogdW50aWwgdG8gdGhlIG5leHQgdGljaywgc2ltaWxhciB0byBgc2V0VGltZW91dGAgd2l0aCBhIHRpbWVvdXQgb2YgYDBgLlxuICAgICAqXG4gICAgICogU2VlIFtEYXZpZCBDb3JiYWNobydzIGFydGljbGVdKGh0dHBzOi8vY3NzLXRyaWNrcy5jb20vZGVib3VuY2luZy10aHJvdHRsaW5nLWV4cGxhaW5lZC1leGFtcGxlcy8pXG4gICAgICogZm9yIGRldGFpbHMgb3ZlciB0aGUgZGlmZmVyZW5jZXMgYmV0d2VlbiBgXy50aHJvdHRsZWAgYW5kIGBfLmRlYm91bmNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHRocm90dGxlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxlYWRpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudHJhaWxpbmc9dHJ1ZV1cbiAgICAgKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gICAgICogalF1ZXJ5KHdpbmRvdykub24oJ3Njcm9sbCcsIF8udGhyb3R0bGUodXBkYXRlUG9zaXRpb24sIDEwMCkpO1xuICAgICAqXG4gICAgICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gICAgICogdmFyIHRocm90dGxlZCA9IF8udGhyb3R0bGUocmVuZXdUb2tlbiwgMzAwMDAwLCB7ICd0cmFpbGluZyc6IGZhbHNlIH0pO1xuICAgICAqIGpRdWVyeShlbGVtZW50KS5vbignY2xpY2snLCB0aHJvdHRsZWQpO1xuICAgICAqXG4gICAgICogLy8gQ2FuY2VsIHRoZSB0cmFpbGluZyB0aHJvdHRsZWQgaW52b2NhdGlvbi5cbiAgICAgKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCB0aHJvdHRsZWQuY2FuY2VsKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0aHJvdHRsZShmdW5jLCB3YWl0LCBvcHRpb25zKSB7XG4gICAgICB2YXIgbGVhZGluZyA9IHRydWUsXG4gICAgICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mIGZ1bmMgIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3Qob3B0aW9ucykpIHtcbiAgICAgICAgbGVhZGluZyA9ICdsZWFkaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLmxlYWRpbmcgOiBsZWFkaW5nO1xuICAgICAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRlYm91bmNlKGZ1bmMsIHdhaXQsIHtcbiAgICAgICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICAgICAnbWF4V2FpdCc6IHdhaXQsXG4gICAgICAgICd0cmFpbGluZyc6IHRyYWlsaW5nXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBhY2NlcHRzIHVwIHRvIG9uZSBhcmd1bWVudCwgaWdub3JpbmcgYW55XG4gICAgICogYWRkaXRpb25hbCBhcmd1bWVudHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjYXBwZWQgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnNicsICc4JywgJzEwJ10sIF8udW5hcnkocGFyc2VJbnQpKTtcbiAgICAgKiAvLyA9PiBbNiwgOCwgMTBdXG4gICAgICovXG4gICAgZnVuY3Rpb24gdW5hcnkoZnVuYykge1xuICAgICAgcmV0dXJuIGFyeShmdW5jLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyBgdmFsdWVgIHRvIGB3cmFwcGVyYCBhcyBpdHMgZmlyc3RcbiAgICAgKiBhcmd1bWVudC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBmdW5jdGlvbiBhcmUgYXBwZW5kZWRcbiAgICAgKiB0byB0aG9zZSBwcm92aWRlZCB0byB0aGUgYHdyYXBwZXJgLiBUaGUgd3JhcHBlciBpcyBpbnZva2VkIHdpdGggdGhlIGB0aGlzYFxuICAgICAqIGJpbmRpbmcgb2YgdGhlIGNyZWF0ZWQgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byB3cmFwLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFt3cmFwcGVyPWlkZW50aXR5XSBUaGUgd3JhcHBlciBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHAgPSBfLndyYXAoXy5lc2NhcGUsIGZ1bmN0aW9uKGZ1bmMsIHRleHQpIHtcbiAgICAgKiAgIHJldHVybiAnPHA+JyArIGZ1bmModGV4dCkgKyAnPC9wPic7XG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBwKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICc8cD5mcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXM8L3A+J1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdyYXAodmFsdWUsIHdyYXBwZXIpIHtcbiAgICAgIHJldHVybiBwYXJ0aWFsKGNhc3RGdW5jdGlvbih3cmFwcGVyKSwgdmFsdWUpO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIENhc3RzIGB2YWx1ZWAgYXMgYW4gYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXN0QXJyYXkoMSk7XG4gICAgICogLy8gPT4gWzFdXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheSh7ICdhJzogMSB9KTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEgfV1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBbJ2FiYyddXG4gICAgICpcbiAgICAgKiBfLmNhc3RBcnJheShudWxsKTtcbiAgICAgKiAvLyA9PiBbbnVsbF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZF1cbiAgICAgKlxuICAgICAqIF8uY2FzdEFycmF5KCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsxLCAyLCAzXTtcbiAgICAgKiBjb25zb2xlLmxvZyhfLmNhc3RBcnJheShhcnJheSkgPT09IGFycmF5KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FzdEFycmF5KCkge1xuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciB2YWx1ZSA9IGFyZ3VtZW50c1swXTtcbiAgICAgIHJldHVybiBpc0FycmF5KHZhbHVlKSA/IHZhbHVlIDogW3ZhbHVlXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb24gdGhlXG4gICAgICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAgICAgKiBhbmQgc3VwcG9ydHMgY2xvbmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLCBkYXRlIG9iamVjdHMsIG1hcHMsXG4gICAgICogbnVtYmVycywgYE9iamVjdGAgb2JqZWN0cywgcmVnZXhlcywgc2V0cywgc3RyaW5ncywgc3ltYm9scywgYW5kIHR5cGVkXG4gICAgICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAgICAgKiBhcyBwbGFpbiBvYmplY3RzLiBBbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoXG4gICAgICogYXMgZXJyb3Igb2JqZWN0cywgZnVuY3Rpb25zLCBET00gbm9kZXMsIGFuZCBXZWFrTWFwcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2xvbmUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICAgICAqIGNvbnNvbGUubG9nKHNoYWxsb3dbMF0gPT09IG9iamVjdHNbMF0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgY2xvbmVkIHZhbHVlLiBJZiBgY3VzdG9taXplcmAgcmV0dXJucyBgdW5kZWZpbmVkYCxcbiAgICAgKiBjbG9uaW5nIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aFxuICAgICAqIHVwIHRvIGZvdXIgYXJndW1lbnRzOyAodmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIHN0YWNrXSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAgICAgKiBAc2VlIF8uY2xvbmVEZWVwV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKHZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVXaXRoKGRvY3VtZW50LmJvZHksIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICAgICAqIC8vID0+ICdCT0RZJ1xuICAgICAqIGNvbnNvbGUubG9nKGVsLmNoaWxkTm9kZXMubGVuZ3RoKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2xvbmVXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gICAgICogQHNlZSBfLmNsb25lXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICAgICAqXG4gICAgICogdmFyIGRlZXAgPSBfLmNsb25lRGVlcChvYmplY3RzKTtcbiAgICAgKiBjb25zb2xlLmxvZyhkZWVwWzBdID09PSBvYmplY3RzWzBdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lV2l0aGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICAgICAqIEBzZWUgXy5jbG9uZVdpdGhcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICAgICAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gdmFsdWUuY2xvbmVOb2RlKHRydWUpO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBlbCA9IF8uY2xvbmVEZWVwV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGVsID09PSBkb2N1bWVudC5ib2R5KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAgICAgKiAvLyA9PiAnQk9EWSdcbiAgICAgKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbG9uZURlZXBXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgb2JqZWN0YCBjb25mb3JtcyB0byBgc291cmNlYCBieSBpbnZva2luZyB0aGUgcHJlZGljYXRlXG4gICAgICogcHJvcGVydGllcyBvZiBgc291cmNlYCB3aXRoIHRoZSBjb3JyZXNwb25kaW5nIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBlcXVpdmFsZW50IHRvIGBfLmNvbmZvcm1zYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xNC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgcHJlZGljYXRlcyB0byBjb25mb3JtIHRvLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBjb25mb3JtcywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICAgICAqXG4gICAgICogXy5jb25mb3Jtc1RvKG9iamVjdCwgeyAnYic6IGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gPiAxOyB9IH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uY29uZm9ybXNUbyhvYmplY3QsIHsgJ2InOiBmdW5jdGlvbihuKSB7IHJldHVybiBuID4gMjsgfSB9KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGNvbmZvcm1zVG8ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIHJldHVybiBzb3VyY2UgPT0gbnVsbCB8fCBiYXNlQ29uZm9ybXNUbyhvYmplY3QsIHNvdXJjZSwga2V5cyhzb3VyY2UpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQZXJmb3JtcyBhXG4gICAgICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAgICAgKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgJ2EnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmVxKE5hTiwgTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBncmVhdGVyIHRoYW4gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBgb3RoZXJgLFxuICAgICAqICBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmx0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3QoMywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5ndCgzLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5ndCgxLCAzKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBndCA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oYmFzZUd0KTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byBgb3RoZXJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuOS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvXG4gICAgICogIGBvdGhlcmAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAc2VlIF8ubHRlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDMsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZ3RlKDEsIDMpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGd0ZSA9IGNyZWF0ZVJlbGF0aW9uYWxPcGVyYXRpb24oZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPj0gb3RoZXI7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5KF8ubm9vcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheUJ1ZmZlcmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSBidWZmZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheUJ1ZmZlcigyKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5QnVmZmVyKG5ldyBBcnJheSgyKSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNBcnJheUJ1ZmZlciA9IG5vZGVJc0FycmF5QnVmZmVyID8gYmFzZVVuYXJ5KG5vZGVJc0FycmF5QnVmZmVyKSA6IGJhc2VJc0FycmF5QnVmZmVyO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICAgICAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAgICAgKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gICAgICogaXMgYW4gb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheS1saWtlIG9iamVjdCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGlzQXJyYXlMaWtlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYm9vbGVhbiBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJvb2xlYW4sIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Jvb2xlYW4oZmFsc2UpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCb29sZWFuKG51bGwpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNCb29sZWFuKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09IGZhbHNlIHx8XG4gICAgICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGJvb2xUYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMy4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGJ1ZmZlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzQnVmZmVyKG5ldyBCdWZmZXIoMikpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNCdWZmZXIobmV3IFVpbnQ4QXJyYXkoMikpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzQnVmZmVyID0gbmF0aXZlSXNCdWZmZXIgfHwgc3R1YkZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBEYXRlYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZGF0ZSBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0RhdGUobmV3IERhdGUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNEYXRlKCdNb24gQXByaWwgMjMgMjAxMicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIGlzRGF0ZSA9IG5vZGVJc0RhdGUgPyBiYXNlVW5hcnkobm9kZUlzRGF0ZSkgOiBiYXNlSXNEYXRlO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGEgRE9NIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgRE9NIGVsZW1lbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoZG9jdW1lbnQuYm9keSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VsZW1lbnQoJzxib2R5PicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFbGVtZW50KHZhbHVlKSB7XG4gICAgICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiB2YWx1ZS5ub2RlVHlwZSA9PT0gMSAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gZW1wdHkgb2JqZWN0LCBjb2xsZWN0aW9uLCBtYXAsIG9yIHNldC5cbiAgICAgKlxuICAgICAqIE9iamVjdHMgYXJlIGNvbnNpZGVyZWQgZW1wdHkgaWYgdGhleSBoYXZlIG5vIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZFxuICAgICAqIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiBBcnJheS1saWtlIHZhbHVlcyBzdWNoIGFzIGBhcmd1bWVudHNgIG9iamVjdHMsIGFycmF5cywgYnVmZmVycywgc3RyaW5ncywgb3JcbiAgICAgKiBqUXVlcnktbGlrZSBjb2xsZWN0aW9ucyBhcmUgY29uc2lkZXJlZCBlbXB0eSBpZiB0aGV5IGhhdmUgYSBgbGVuZ3RoYCBvZiBgMGAuXG4gICAgICogU2ltaWxhcmx5LCBtYXBzIGFuZCBzZXRzIGFyZSBjb25zaWRlcmVkIGVtcHR5IGlmIHRoZXkgaGF2ZSBhIGBzaXplYCBvZiBgMGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGVtcHR5LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkodHJ1ZSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc0VtcHR5KDEpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNFbXB0eShbMSwgMiwgM10pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRW1wdHkoeyAnYSc6IDEgfSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VtcHR5KHZhbHVlKSB7XG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkgJiZcbiAgICAgICAgICAoaXNBcnJheSh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IHR5cGVvZiB2YWx1ZS5zcGxpY2UgPT0gJ2Z1bmN0aW9uJyB8fFxuICAgICAgICAgICAgaXNCdWZmZXIodmFsdWUpIHx8IGlzVHlwZWRBcnJheSh2YWx1ZSkgfHwgaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICByZXR1cm4gIXZhbHVlLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpO1xuICAgICAgaWYgKHRhZyA9PSBtYXBUYWcgfHwgdGFnID09IHNldFRhZykge1xuICAgICAgICByZXR1cm4gIXZhbHVlLnNpemU7XG4gICAgICB9XG4gICAgICBpZiAoaXNQcm90b3R5cGUodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiAhYmFzZUtleXModmFsdWUpLmxlbmd0aDtcbiAgICAgIH1cbiAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwga2V5KSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybXMgYSBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZVxuICAgICAqIGVxdWl2YWxlbnQuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2Qgc3VwcG9ydHMgY29tcGFyaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsXG4gICAgICogZGF0ZSBvYmplY3RzLCBlcnJvciBvYmplY3RzLCBtYXBzLCBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLFxuICAgICAqIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZCBhcnJheXMuIGBPYmplY3RgIG9iamVjdHMgYXJlIGNvbXBhcmVkXG4gICAgICogYnkgdGhlaXIgb3duLCBub3QgaW5oZXJpdGVkLCBlbnVtZXJhYmxlIHByb3BlcnRpZXMuIEZ1bmN0aW9ucyBhbmQgRE9NXG4gICAgICogbm9kZXMgYXJlIGNvbXBhcmVkIGJ5IHN0cmljdCBlcXVhbGl0eSwgaS5lLiBgPT09YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICAgICAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmlzRXF1YWwob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogb2JqZWN0ID09PSBvdGhlcjtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzRXF1YWwodmFsdWUsIG90aGVyKSB7XG4gICAgICByZXR1cm4gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzRXF1YWxgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoXG4gICAgICogaXMgaW52b2tlZCB0byBjb21wYXJlIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGAsIGNvbXBhcmlzb25zXG4gICAgICogYXJlIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWQgd2l0aCB1cCB0b1xuICAgICAqIHNpeCBhcmd1bWVudHM6IChvYmpWYWx1ZSwgb3RoVmFsdWUgWywgaW5kZXh8a2V5LCBvYmplY3QsIG90aGVyLCBzdGFja10pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcob3RoVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFsnaGVsbG8nLCAnZ29vZGJ5ZSddO1xuICAgICAqIHZhciBvdGhlciA9IFsnaGknLCAnZ29vZGJ5ZSddO1xuICAgICAqXG4gICAgICogXy5pc0VxdWFsV2l0aChhcnJheSwgb3RoZXIsIGN1c3RvbWl6ZXIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0VxdWFsV2l0aCh2YWx1ZSwgb3RoZXIsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHZhciByZXN1bHQgPSBjdXN0b21pemVyID8gY3VzdG9taXplcih2YWx1ZSwgb3RoZXIpIDogdW5kZWZpbmVkO1xuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCB1bmRlZmluZWQsIGN1c3RvbWl6ZXIpIDogISFyZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gYEVycm9yYCwgYEV2YWxFcnJvcmAsIGBSYW5nZUVycm9yYCwgYFJlZmVyZW5jZUVycm9yYCxcbiAgICAgKiBgU3ludGF4RXJyb3JgLCBgVHlwZUVycm9yYCwgb3IgYFVSSUVycm9yYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGVycm9yIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IobmV3IEVycm9yKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRXJyb3IoRXJyb3IpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNFcnJvcih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZXJyb3JUYWcgfHwgdGFnID09IGRvbUV4Y1RhZyB8fFxuICAgICAgICAodHlwZW9mIHZhbHVlLm1lc3NhZ2UgPT0gJ3N0cmluZycgJiYgdHlwZW9mIHZhbHVlLm5hbWUgPT0gJ3N0cmluZycgJiYgIWlzUGxhaW5PYmplY3QodmFsdWUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBwcmltaXRpdmUgbnVtYmVyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNGaW5pdGVgXShodHRwczovL21kbi5pby9OdW1iZXIvaXNGaW5pdGUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZpbml0ZSBudW1iZXIsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc0Zpbml0ZSgzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNGaW5pdGUoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzRmluaXRlKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0Zpbml0ZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJiBuYXRpdmVJc0Zpbml0ZSh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNGdW5jdGlvbihfKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gVGhlIHVzZSBvZiBgT2JqZWN0I3RvU3RyaW5nYCBhdm9pZHMgaXNzdWVzIHdpdGggdGhlIGB0eXBlb2ZgIG9wZXJhdG9yXG4gICAgICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgICAgIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgICAgIHJldHVybiB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnIHx8IHRhZyA9PSBhc3luY1RhZyB8fCB0YWcgPT0gcHJveHlUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYW4gaW50ZWdlci5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgTnVtYmVyLmlzSW50ZWdlcmBdKGh0dHBzOi8vbWRuLmlvL051bWJlci9pc0ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBpbnRlZ2VyLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzSW50ZWdlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNJbnRlZ2VyKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiYgdmFsdWUgPT0gdG9JbnRlZ2VyKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGxlbmd0aCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNMZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzTGVuZ3RoKCczJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgICAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gICAgICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICAgICAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3Qoe30pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gICAgICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgTWFwYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxuICAgIC8qKlxuICAgICAqIFBlcmZvcm1zIGEgcGFydGlhbCBkZWVwIGNvbXBhcmlzb24gYmV0d2VlbiBgb2JqZWN0YCBhbmQgYHNvdXJjZWAgdG9cbiAgICAgKiBkZXRlcm1pbmUgaWYgYG9iamVjdGAgY29udGFpbnMgZXF1aXZhbGVudCBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgZXF1aXZhbGVudCB0byBgXy5tYXRjaGVzYCB3aGVuIGBzb3VyY2VgIGlzXG4gICAgICogcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdCBgc291cmNlYFxuICAgICAqIHZhbHVlcyBhZ2FpbnN0IGFueSBhcnJheSBvciBvYmplY3QgdmFsdWUsIHJlc3BlY3RpdmVseS4gU2VlIGBfLmlzRXF1YWxgXG4gICAgICogZm9yIGEgbGlzdCBvZiBzdXBwb3J0ZWQgdmFsdWUgY29tcGFyaXNvbnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6IDIgfTtcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAyIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNNYXRjaChvYmplY3QsIHsgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaChvYmplY3QsIHNvdXJjZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PT0gc291cmNlIHx8IGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBnZXRNYXRjaERhdGEoc291cmNlKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pc01hdGNoYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gY29tcGFyZSB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBjb21wYXJpc29uc1xuICAgICAqIGFyZSBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkIHdpdGggZml2ZVxuICAgICAqIGFyZ3VtZW50czogKG9ialZhbHVlLCBzcmNWYWx1ZSwgaW5kZXh8a2V5LCBvYmplY3QsIHNvdXJjZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBvYmplY3RgIGlzIGEgbWF0Y2gsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gaXNHcmVldGluZyh2YWx1ZSkge1xuICAgICAqICAgcmV0dXJuIC9eaCg/Oml8ZWxsbykkLy50ZXN0KHZhbHVlKTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgaWYgKGlzR3JlZXRpbmcob2JqVmFsdWUpICYmIGlzR3JlZXRpbmcoc3JjVmFsdWUpKSB7XG4gICAgICogICAgIHJldHVybiB0cnVlO1xuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdncmVldGluZyc6ICdoZWxsbycgfTtcbiAgICAgKiB2YXIgc291cmNlID0geyAnZ3JlZXRpbmcnOiAnaGknIH07XG4gICAgICpcbiAgICAgKiBfLmlzTWF0Y2hXaXRoKG9iamVjdCwgc291cmNlLCBjdXN0b21pemVyKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNNYXRjaFdpdGgob2JqZWN0LCBzb3VyY2UsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgZ2V0TWF0Y2hEYXRhKHNvdXJjZSksIGN1c3RvbWl6ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGBOYU5gLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BOdW1iZXIuaXNOYU5gXShodHRwczovL21kbi5pby9OdW1iZXIvaXNOYU4pIGFuZCBpcyBub3QgdGhlIHNhbWUgYXNcbiAgICAgKiBnbG9iYWwgW2Bpc05hTmBdKGh0dHBzOi8vbWRuLmlvL2lzTmFOKSB3aGljaCByZXR1cm5zIGB0cnVlYCBmb3JcbiAgICAgKiBgdW5kZWZpbmVkYCBhbmQgb3RoZXIgbm9uLW51bWJlciB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBOYU5gLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOYU4oTmFOKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKG5ldyBOdW1iZXIoTmFOKSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogaXNOYU4odW5kZWZpbmVkKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTmFOKHVuZGVmaW5lZCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICAgICAgLy8gQW4gYE5hTmAgcHJpbWl0aXZlIGlzIHRoZSBvbmx5IHZhbHVlIHRoYXQgaXMgbm90IGVxdWFsIHRvIGl0c2VsZi5cbiAgICAgIC8vIFBlcmZvcm0gdGhlIGB0b1N0cmluZ1RhZ2AgY2hlY2sgZmlyc3QgdG8gYXZvaWQgZXJyb3JzIHdpdGggc29tZVxuICAgICAgLy8gQWN0aXZlWCBvYmplY3RzIGluIElFLlxuICAgICAgcmV0dXJuIGlzTnVtYmVyKHZhbHVlKSAmJiB2YWx1ZSAhPSArdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcmlzdGluZSBuYXRpdmUgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgY2FuJ3QgcmVsaWFibHkgZGV0ZWN0IG5hdGl2ZSBmdW5jdGlvbnMgaW4gdGhlIHByZXNlbmNlXG4gICAgICogb2YgdGhlIGNvcmUtanMgcGFja2FnZSBiZWNhdXNlIGNvcmUtanMgY2lyY3VtdmVudHMgdGhpcyBraW5kIG9mIGRldGVjdGlvbi5cbiAgICAgKiBEZXNwaXRlIG11bHRpcGxlIHJlcXVlc3RzLCB0aGUgY29yZS1qcyBtYWludGFpbmVyIGhhcyBtYWRlIGl0IGNsZWFyOiBhbnlcbiAgICAgKiBhdHRlbXB0IHRvIGZpeCB0aGUgZGV0ZWN0aW9uIHdpbGwgYmUgb2JzdHJ1Y3RlZC4gQXMgYSByZXN1bHQsIHdlJ3JlIGxlZnRcbiAgICAgKiB3aXRoIGxpdHRsZSBjaG9pY2UgYnV0IHRvIHRocm93IGFuIGVycm9yLiBVbmZvcnR1bmF0ZWx5LCB0aGlzIGFsc28gYWZmZWN0c1xuICAgICAqIHBhY2thZ2VzLCBsaWtlIFtiYWJlbC1wb2x5ZmlsbF0oaHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYmFiZWwtcG9seWZpbGwpLFxuICAgICAqIHdoaWNoIHJlbHkgb24gY29yZS1qcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBuYXRpdmUgZnVuY3Rpb24sXG4gICAgICogIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShBcnJheS5wcm90b3R5cGUucHVzaCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05hdGl2ZShfKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmF0aXZlKHZhbHVlKSB7XG4gICAgICBpZiAoaXNNYXNrYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKENPUkVfRVJST1JfVEVYVCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBgbnVsbGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGBudWxsYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbChudWxsKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzTnVsbCh2b2lkIDApO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdWxsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBudWxsaXNoLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwobnVsbCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc05pbCh2b2lkIDApO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOaWwoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzTmlsKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE51bWJlcmAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUbyBleGNsdWRlIGBJbmZpbml0eWAsIGAtSW5maW5pdHlgLCBhbmQgYE5hTmAsIHdoaWNoIGFyZVxuICAgICAqIGNsYXNzaWZpZWQgYXMgbnVtYmVycywgdXNlIHRoZSBgXy5pc0Zpbml0ZWAgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG51bWJlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzTnVtYmVyKDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNOdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcihJbmZpbml0eSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc051bWJlcignMycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNOdW1iZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gbnVtYmVyVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gICAgICogYE9iamVjdGAgY29uc3RydWN0b3Igb3Igb25lIHdpdGggYSBgW1tQcm90b3R5cGVdXWAgb2YgYG51bGxgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuOC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgaWYgKCFpc09iamVjdExpa2UodmFsdWUpIHx8IGJhc2VHZXRUYWcodmFsdWUpICE9IG9iamVjdFRhZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICB2YXIgcHJvdG8gPSBnZXRQcm90b3R5cGUodmFsdWUpO1xuICAgICAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgICAgIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgICAgIGZ1bmNUb1N0cmluZy5jYWxsKEN0b3IpID09IG9iamVjdEN0b3JTdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBSZWdFeHBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSByZWdleHAsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgvYWJjLyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1JlZ0V4cCgnL2FiYy8nKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1JlZ0V4cCA9IG5vZGVJc1JlZ0V4cCA/IGJhc2VVbmFyeShub2RlSXNSZWdFeHApIDogYmFzZUlzUmVnRXhwO1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBzYWZlIGludGVnZXIuIEFuIGludGVnZXIgaXMgc2FmZSBpZiBpdCdzIGFuIElFRUUtNzU0XG4gICAgICogZG91YmxlIHByZWNpc2lvbiBudW1iZXIgd2hpY2ggaXNuJ3QgdGhlIHJlc3VsdCBvZiBhIHJvdW5kZWQgdW5zYWZlIGludGVnZXIuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgYmFzZWQgb25cbiAgICAgKiBbYE51bWJlci5pc1NhZmVJbnRlZ2VyYF0oaHR0cHM6Ly9tZG4uaW8vTnVtYmVyL2lzU2FmZUludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNhZmUgaW50ZWdlciwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoMyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1NhZmVJbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmlzU2FmZUludGVnZXIoJzMnKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID49IC1NQVhfU0FGRV9JTlRFR0VSICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1NldChuZXcgU2V0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTdHJpbmcoMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJyB8fFxuICAgICAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFN5bWJvbGAgcHJpbWl0aXZlIG9yIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAgICAgKGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3ltYm9sVGFnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5pc1R5cGVkQXJyYXkobmV3IFVpbnQ4QXJyYXkpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaXNUeXBlZEFycmF5KFtdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBpc1R5cGVkQXJyYXkgPSBub2RlSXNUeXBlZEFycmF5ID8gYmFzZVVuYXJ5KG5vZGVJc1R5cGVkQXJyYXkpIDogYmFzZUlzVHlwZWRBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBgdW5kZWZpbmVkYCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzVW5kZWZpbmVkKHZvaWQgMCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1VuZGVmaW5lZChudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVW5kZWZpbmVkKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtNYXBgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIG1hcCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha01hcChuZXcgV2Vha01hcCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtNYXAobmV3IE1hcCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtNYXAodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gd2Vha01hcFRhZztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYFdlYWtTZXRgIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjMuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB3ZWFrIHNldCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmlzV2Vha1NldChuZXcgV2Vha1NldCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pc1dlYWtTZXQobmV3IFNldCk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBpc1dlYWtTZXQodmFsdWUpIHtcbiAgICAgIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHdlYWtTZXRUYWc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGVzcyB0aGFuIGBvdGhlcmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy45LjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gICAgICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gYG90aGVyYCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5ndFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0KDEsIDMpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8ubHQoMywgMSk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICB2YXIgbHQgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGJhc2VMdCk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYG90aGVyYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjkuMFxuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAgICAgKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGxlc3MgdGhhbiBvciBlcXVhbCB0b1xuICAgICAqICBgb3RoZXJgLCBlbHNlIGBmYWxzZWAuXG4gICAgICogQHNlZSBfLmd0ZVxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgxLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAzKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmx0ZSgzLCAxKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIHZhciBsdGUgPSBjcmVhdGVSZWxhdGlvbmFsT3BlcmF0aW9uKGZ1bmN0aW9uKHZhbHVlLCBvdGhlcikge1xuICAgICAgcmV0dXJuIHZhbHVlIDw9IG90aGVyO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBhcnJheS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBMYW5nXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b0FycmF5KHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gICAgICogLy8gPT4gWzEsIDJdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkoJ2FiYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b0FycmF5KDEpO1xuICAgICAqIC8vID0+IFtdXG4gICAgICpcbiAgICAgKiBfLnRvQXJyYXkobnVsbCk7XG4gICAgICogLy8gPT4gW11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGlzU3RyaW5nKHZhbHVlKSA/IHN0cmluZ1RvQXJyYXkodmFsdWUpIDogY29weUFycmF5KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGlmIChzeW1JdGVyYXRvciAmJiB2YWx1ZVtzeW1JdGVyYXRvcl0pIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yVG9BcnJheSh2YWx1ZVtzeW1JdGVyYXRvcl0oKSk7XG4gICAgICB9XG4gICAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgICBmdW5jID0gdGFnID09IG1hcFRhZyA/IG1hcFRvQXJyYXkgOiAodGFnID09IHNldFRhZyA/IHNldFRvQXJyYXkgOiB2YWx1ZXMpO1xuXG4gICAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhIGZpbml0ZSBudW1iZXIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMi4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoMy4yKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKlxuICAgICAqIF8udG9GaW5pdGUoTnVtYmVyLk1JTl9WQUxVRSk7XG4gICAgICogLy8gPT4gNWUtMzI0XG4gICAgICpcbiAgICAgKiBfLnRvRmluaXRlKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0Zpbml0ZSgnMy4yJyk7XG4gICAgICogLy8gPT4gMy4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9GaW5pdGUodmFsdWUpIHtcbiAgICAgIGlmICghdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiAwO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB0b051bWJlcih2YWx1ZSk7XG4gICAgICBpZiAodmFsdWUgPT09IElORklOSVRZIHx8IHZhbHVlID09PSAtSU5GSU5JVFkpIHtcbiAgICAgICAgdmFyIHNpZ24gPSAodmFsdWUgPCAwID8gLTEgOiAxKTtcbiAgICAgICAgcmV0dXJuIHNpZ24gKiBNQVhfSU5URUdFUjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgPyB2YWx1ZSA6IDA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHZhbHVlYCB0byBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAgICAgKiBbYFRvSW50ZWdlcmBdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2ludGVnZXIpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBpbnRlZ2VyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9JbnRlZ2VyKEluZmluaXR5KTtcbiAgICAgKiAvLyA9PiAxLjc5NzY5MzEzNDg2MjMxNTdlKzMwOFxuICAgICAqXG4gICAgICogXy50b0ludGVnZXIoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0ludGVnZXIodmFsdWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0b0Zpbml0ZSh2YWx1ZSksXG4gICAgICAgICAgcmVtYWluZGVyID0gcmVzdWx0ICUgMTtcblxuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gcmVzdWx0ID8gKHJlbWFpbmRlciA/IHJlc3VsdCAtIHJlbWFpbmRlciA6IHJlc3VsdCkgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gaW50ZWdlciBzdWl0YWJsZSBmb3IgdXNlIGFzIHRoZSBsZW5ndGggb2YgYW5cbiAgICAgKiBhcnJheS1saWtlIG9iamVjdC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBiYXNlZCBvblxuICAgICAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoMy4yKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnRvTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICAgICAqIC8vID0+IDBcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDQyOTQ5NjcyOTVcbiAgICAgKlxuICAgICAqIF8udG9MZW5ndGgoJzMuMicpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xlbmd0aCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID8gYmFzZUNsYW1wKHRvSW50ZWdlcih2YWx1ZSksIDAsIE1BWF9BUlJBWV9MRU5HVEgpIDogMDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgbnVtYmVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IExhbmdcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b051bWJlcigzLjIpO1xuICAgICAqIC8vID0+IDMuMlxuICAgICAqXG4gICAgICogXy50b051bWJlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiA1ZS0zMjRcbiAgICAgKlxuICAgICAqIF8udG9OdW1iZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IEluZmluaXR5XG4gICAgICpcbiAgICAgKiBfLnRvTnVtYmVyKCczLjInKTtcbiAgICAgKiAvLyA9PiAzLjJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b051bWJlcih2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBOQU47XG4gICAgICB9XG4gICAgICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHZhciBvdGhlciA9IHR5cGVvZiB2YWx1ZS52YWx1ZU9mID09ICdmdW5jdGlvbicgPyB2YWx1ZS52YWx1ZU9mKCkgOiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSBpc09iamVjdChvdGhlcikgPyAob3RoZXIgKyAnJykgOiBvdGhlcjtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSAwID8gdmFsdWUgOiArdmFsdWU7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UocmVUcmltLCAnJyk7XG4gICAgICB2YXIgaXNCaW5hcnkgPSByZUlzQmluYXJ5LnRlc3QodmFsdWUpO1xuICAgICAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgICAgID8gZnJlZVBhcnNlSW50KHZhbHVlLnNsaWNlKDIpLCBpc0JpbmFyeSA/IDIgOiA4KVxuICAgICAgICA6IChyZUlzQmFkSGV4LnRlc3QodmFsdWUpID8gTkFOIDogK3ZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcGxhaW4gb2JqZWN0IGZsYXR0ZW5pbmcgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nXG4gICAgICoga2V5ZWQgcHJvcGVydGllcyBvZiBgdmFsdWVgIHRvIG93biBwcm9wZXJ0aWVzIG9mIHRoZSBwbGFpbiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY29udmVydGVkIHBsYWluIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgbmV3IEZvbyk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICpcbiAgICAgKiBfLmFzc2lnbih7ICdhJzogMSB9LCBfLnRvUGxhaW5PYmplY3QobmV3IEZvbykpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdG9QbGFpbk9iamVjdCh2YWx1ZSkge1xuICAgICAgcmV0dXJuIGNvcHlPYmplY3QodmFsdWUsIGtleXNJbih2YWx1ZSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzYWZlIGludGVnZXIuIEEgc2FmZSBpbnRlZ2VyIGNhbiBiZSBjb21wYXJlZCBhbmRcbiAgICAgKiByZXByZXNlbnRlZCBjb3JyZWN0bHkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgY29udmVydGVkIGludGVnZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcigzLjIpO1xuICAgICAqIC8vID0+IDNcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcihOdW1iZXIuTUlOX1ZBTFVFKTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICpcbiAgICAgKiBfLnRvU2FmZUludGVnZXIoSW5maW5pdHkpO1xuICAgICAqIC8vID0+IDkwMDcxOTkyNTQ3NDA5OTFcbiAgICAgKlxuICAgICAqIF8udG9TYWZlSW50ZWdlcignMy4yJyk7XG4gICAgICogLy8gPT4gM1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRvU2FmZUludGVnZXIodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgICAgICA/IGJhc2VDbGFtcCh0b0ludGVnZXIodmFsdWUpLCAtTUFYX1NBRkVfSU5URUdFUiwgTUFYX1NBRkVfSU5URUdFUilcbiAgICAgICAgOiAodmFsdWUgPT09IDAgPyB2YWx1ZSA6IDApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gICAgICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTGFuZ1xuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY29udmVydGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50b1N0cmluZyhudWxsKTtcbiAgICAgKiAvLyA9PiAnJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZygtMCk7XG4gICAgICogLy8gPT4gJy0wJ1xuICAgICAqXG4gICAgICogXy50b1N0cmluZyhbMSwgMiwgM10pO1xuICAgICAqIC8vID0+ICcxLDIsMydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1N0cmluZyh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQXNzaWducyBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC5cbiAgICAgKiBTdWJzZXF1ZW50IHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YCBhbmQgaXMgbG9vc2VseSBiYXNlZCBvblxuICAgICAqIFtgT2JqZWN0LmFzc2lnbmBdKGh0dHBzOi8vbWRuLmlvL09iamVjdC9hc3NpZ24pLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDAuMTAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uYXNzaWduSW5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBCYXIoKSB7XG4gICAgICogICB0aGlzLmMgPSAzO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYiA9IDI7XG4gICAgICogQmFyLnByb3RvdHlwZS5kID0gNDtcbiAgICAgKlxuICAgICAqIF8uYXNzaWduKHsgJ2EnOiAwIH0sIG5ldyBGb28sIG5ldyBCYXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ24gPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSkge1xuICAgICAgaWYgKGlzUHJvdG90eXBlKHNvdXJjZSkgfHwgaXNBcnJheUxpa2Uoc291cmNlKSkge1xuICAgICAgICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5cyhzb3VyY2UpLCBvYmplY3QpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBpdGVyYXRlcyBvdmVyIG93biBhbmRcbiAgICAgKiBpbmhlcml0ZWQgc291cmNlIHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBhbGlhcyBleHRlbmRcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEJhcigpIHtcbiAgICAgKiAgIHRoaXMuYyA9IDM7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5iID0gMjtcbiAgICAgKiBCYXIucHJvdG90eXBlLmQgPSA0O1xuICAgICAqXG4gICAgICogXy5hc3NpZ25Jbih7ICdhJzogMCB9LCBuZXcgRm9vLCBuZXcgQmFyKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMsICdkJzogNCB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbkluID0gY3JlYXRlQXNzaWduZXIoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2UpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduSW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gICAgICogd2hpY2ggaXMgaW52b2tlZCB0byBwcm9kdWNlIHRoZSBhc3NpZ25lZCB2YWx1ZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zXG4gICAgICogYHVuZGVmaW5lZGAsIGFzc2lnbm1lbnQgaXMgaGFuZGxlZCBieSB0aGUgbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmBcbiAgICAgKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZXh0ZW5kV2l0aFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IHNvdXJjZXMgVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5hc3NpZ25XaXRoXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICByZXR1cm4gXy5pc1VuZGVmaW5lZChvYmpWYWx1ZSkgPyBzcmNWYWx1ZSA6IG9ialZhbHVlO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBkZWZhdWx0cyA9IF8ucGFydGlhbFJpZ2h0KF8uYXNzaWduSW5XaXRoLCBjdXN0b21pemVyKTtcbiAgICAgKlxuICAgICAqIGRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBhc3NpZ25JbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0LCBjdXN0b21pemVyKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYFxuICAgICAqIHdoaWNoIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgYXNzaWduZWQgdmFsdWVzLiBJZiBgY3VzdG9taXplcmAgcmV0dXJuc1xuICAgICAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIGZpdmUgYXJndW1lbnRzOiAob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmFzc2lnbkluV2l0aFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICAgICAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbldpdGgsIGN1c3RvbWl6ZXIpO1xuICAgICAqXG4gICAgICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gICAgICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gICAgICovXG4gICAgdmFyIGFzc2lnbldpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIGBwYXRoc2Agb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMS4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0gey4uLihzdHJpbmd8c3RyaW5nW10pfSBbcGF0aHNdIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcGlja2VkIHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfSwgNF0gfTtcbiAgICAgKlxuICAgICAqIF8uYXQob2JqZWN0LCBbJ2FbMF0uYi5jJywgJ2FbMV0nXSk7XG4gICAgICogLy8gPT4gWzMsIDRdXG4gICAgICovXG4gICAgdmFyIGF0ID0gZmxhdFJlc3QoYmFzZUF0KTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IHRoYXQgaW5oZXJpdHMgZnJvbSB0aGUgYHByb3RvdHlwZWAgb2JqZWN0LiBJZiBhXG4gICAgICogYHByb3BlcnRpZXNgIG9iamVjdCBpcyBnaXZlbiwgaXRzIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzXG4gICAgICogYXJlIGFzc2lnbmVkIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gcHJvdG90eXBlIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc10gVGhlIHByb3BlcnRpZXMgdG8gYXNzaWduIHRvIHRoZSBvYmplY3QuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gU2hhcGUoKSB7XG4gICAgICogICB0aGlzLnggPSAwO1xuICAgICAqICAgdGhpcy55ID0gMDtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBDaXJjbGUoKSB7XG4gICAgICogICBTaGFwZS5jYWxsKHRoaXMpO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIENpcmNsZS5wcm90b3R5cGUgPSBfLmNyZWF0ZShTaGFwZS5wcm90b3R5cGUsIHtcbiAgICAgKiAgICdjb25zdHJ1Y3Rvcic6IENpcmNsZVxuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogdmFyIGNpcmNsZSA9IG5ldyBDaXJjbGU7XG4gICAgICogY2lyY2xlIGluc3RhbmNlb2YgQ2lyY2xlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNpcmNsZSBpbnN0YW5jZW9mIFNoYXBlO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjcmVhdGUocHJvdG90eXBlLCBwcm9wZXJ0aWVzKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgICAgcmV0dXJuIHByb3BlcnRpZXMgPT0gbnVsbCA/IHJlc3VsdCA6IGJhc2VBc3NpZ24ocmVzdWx0LCBwcm9wZXJ0aWVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ25zIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlXG4gICAgICogb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllcyB0aGF0XG4gICAgICogcmVzb2x2ZSB0byBgdW5kZWZpbmVkYC4gU291cmNlIG9iamVjdHMgYXJlIGFwcGxpZWQgZnJvbSBsZWZ0IHRvIHJpZ2h0LlxuICAgICAqIE9uY2UgYSBwcm9wZXJ0eSBpcyBzZXQsIGFkZGl0aW9uYWwgdmFsdWVzIG9mIHRoZSBzYW1lIHByb3BlcnR5IGFyZSBpZ25vcmVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzRGVlcFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRzKHsgJ2EnOiAxIH0sIHsgJ2InOiAyIH0sIHsgJ2EnOiAzIH0pO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIgfVxuICAgICAqL1xuICAgIHZhciBkZWZhdWx0cyA9IGJhc2VSZXN0KGZ1bmN0aW9uKG9iamVjdCwgc291cmNlcykge1xuICAgICAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG5cbiAgICAgIHZhciBpbmRleCA9IC0xO1xuICAgICAgdmFyIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoO1xuICAgICAgdmFyIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChndWFyZCAmJiBpc0l0ZXJhdGVlQ2FsbChzb3VyY2VzWzBdLCBzb3VyY2VzWzFdLCBndWFyZCkpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgIH1cblxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgICB2YXIgcHJvcHMgPSBrZXlzSW4oc291cmNlKTtcbiAgICAgICAgdmFyIHByb3BzSW5kZXggPSAtMTtcbiAgICAgICAgdmFyIHByb3BzTGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgICAgIHdoaWxlICgrK3Byb3BzSW5kZXggPCBwcm9wc0xlbmd0aCkge1xuICAgICAgICAgIHZhciBrZXkgPSBwcm9wc1twcm9wc0luZGV4XTtcbiAgICAgICAgICB2YXIgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAgICAgICAgIChlcSh2YWx1ZSwgb2JqZWN0UHJvdG9ba2V5XSkgJiYgIWhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpKSkge1xuICAgICAgICAgICAgb2JqZWN0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZGVmYXVsdHNgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGFzc2lnbnNcbiAgICAgKiBkZWZhdWx0IHByb3BlcnRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBbc291cmNlc10gVGhlIHNvdXJjZSBvYmplY3RzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmRlZmF1bHRzXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVmYXVsdHNEZWVwKHsgJ2EnOiB7ICdiJzogMiB9IH0sIHsgJ2EnOiB7ICdiJzogMSwgJ2MnOiAzIH0gfSk7XG4gICAgICogLy8gPT4geyAnYSc6IHsgJ2InOiAyLCAnYyc6IDMgfSB9XG4gICAgICovXG4gICAgdmFyIGRlZmF1bHRzRGVlcCA9IGJhc2VSZXN0KGZ1bmN0aW9uKGFyZ3MpIHtcbiAgICAgIGFyZ3MucHVzaCh1bmRlZmluZWQsIGN1c3RvbURlZmF1bHRzTWVyZ2UpO1xuICAgICAgcmV0dXJuIGFwcGx5KG1lcmdlV2l0aCwgdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZmluZGAgZXhjZXB0IHRoYXQgaXQgcmV0dXJucyB0aGUga2V5IG9mIHRoZSBmaXJzdFxuICAgICAqIGVsZW1lbnQgYHByZWRpY2F0ZWAgcmV0dXJucyB0cnV0aHkgZm9yIGluc3RlYWQgb2YgdGhlIGVsZW1lbnQgaXRzZWxmLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDEuMS4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZSA8IDQwOyB9KTtcbiAgICAgKiAvLyA9PiAnYmFybmV5JyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRLZXkodXNlcnMsIHsgJ2FnZSc6IDEsICdhY3RpdmUnOiB0cnVlIH0pO1xuICAgICAqIC8vID0+ICdwZWJibGVzJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNQcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmluZEtleSh1c2VycywgWydhY3RpdmUnLCBmYWxzZV0pO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5maW5kS2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmaW5kS2V5KG9iamVjdCwgcHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gYmFzZUZpbmRLZXkob2JqZWN0LCBnZXRJdGVyYXRlZShwcmVkaWNhdGUsIDMpLCBiYXNlRm9yT3duKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZpbmRLZXlgIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgZWxlbWVudHMgb2ZcbiAgICAgKiBhIGNvbGxlY3Rpb24gaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfHVuZGVmaW5lZH0gUmV0dXJucyB0aGUga2V5IG9mIHRoZSBtYXRjaGVkIGVsZW1lbnQsXG4gICAgICogIGVsc2UgYHVuZGVmaW5lZGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciB1c2VycyA9IHtcbiAgICAgKiAgICdiYXJuZXknOiAgeyAnYWdlJzogMzYsICdhY3RpdmUnOiB0cnVlIH0sXG4gICAgICogICAnZnJlZCc6ICAgIHsgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfSxcbiAgICAgKiAgICdwZWJibGVzJzogeyAnYWdlJzogMSwgICdhY3RpdmUnOiB0cnVlIH1cbiAgICAgKiB9O1xuICAgICAqXG4gICAgICogXy5maW5kTGFzdEtleSh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2UgPCA0MDsgfSk7XG4gICAgICogLy8gPT4gcmV0dXJucyAncGViYmxlcycgYXNzdW1pbmcgYF8uZmluZEtleWAgcmV0dXJucyAnYmFybmV5J1xuICAgICAqXG4gICAgICogLy8gVGhlIGBfLm1hdGNoZXNgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCB7ICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSk7XG4gICAgICogLy8gPT4gJ2Jhcm5leSdcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCBbJ2FjdGl2ZScsIGZhbHNlXSk7XG4gICAgICogLy8gPT4gJ2ZyZWQnXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbmRMYXN0S2V5KHVzZXJzLCAnYWN0aXZlJyk7XG4gICAgICogLy8gPT4gJ3BlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZmluZExhc3RLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBiYXNlRmluZEtleShvYmplY3QsIGdldEl0ZXJhdGVlKHByZWRpY2F0ZSwgMyksIGJhc2VGb3JPd25SaWdodCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGFuXG4gICAgICogb2JqZWN0IGFuZCBpbnZva2VzIGBpdGVyYXRlZWAgZm9yIGVhY2ggcHJvcGVydHkuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLiBJdGVyYXRlZSBmdW5jdGlvbnMgbWF5IGV4aXRcbiAgICAgKiBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluUmlnaHRcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8uZm9ySW4obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJywgJ2InLCB0aGVuICdjJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JJbihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLCBrZXlzSW4pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZm9ySW5gIGV4Y2VwdCB0aGF0IGl0IGl0ZXJhdGVzIG92ZXIgcHJvcGVydGllcyBvZlxuICAgICAqIGBvYmplY3RgIGluIHRoZSBvcHBvc2l0ZSBvcmRlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQHNlZSBfLmZvckluXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvckluUmlnaHQobmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdjJywgJ2InLCB0aGVuICdhJyBhc3N1bWluZyBgXy5mb3JJbmAgbG9ncyAnYScsICdiJywgdGhlbiAnYycuXG4gICAgICovXG4gICAgZnVuY3Rpb24gZm9ySW5SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGxcbiAgICAgICAgPyBvYmplY3RcbiAgICAgICAgOiBiYXNlRm9yUmlnaHQob2JqZWN0LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMyksIGtleXNJbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSXRlcmF0ZXMgb3ZlciBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBhbiBvYmplY3QgYW5kXG4gICAgICogaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlXG4gICAgICogYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS4gSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvblxuICAgICAqIGVhcmx5IGJ5IGV4cGxpY2l0bHkgcmV0dXJuaW5nIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBzZWUgXy5mb3JPd25SaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy5mb3JPd24obmV3IEZvbywgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgY29uc29sZS5sb2coa2V5KTtcbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiBMb2dzICdhJyB0aGVuICdiJyAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKS5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd24ob2JqZWN0LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yT3duKG9iamVjdCwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmZvck93bmAgZXhjZXB0IHRoYXQgaXQgaXRlcmF0ZXMgb3ZlciBwcm9wZXJ0aWVzIG9mXG4gICAgICogYG9iamVjdGAgaW4gdGhlIG9wcG9zaXRlIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDIuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAc2VlIF8uZm9yT3duXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmZvck93blJpZ2h0KG5ldyBGb28sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKGtleSk7XG4gICAgICogfSk7XG4gICAgICogLy8gPT4gTG9ncyAnYicgdGhlbiAnYScgYXNzdW1pbmcgYF8uZm9yT3duYCBsb2dzICdhJyB0aGVuICdiJy5cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmb3JPd25SaWdodChvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICYmIGJhc2VGb3JPd25SaWdodChvYmplY3QsIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXNcbiAgICAgKiBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGZ1bmN0aW9uIG5hbWVzLlxuICAgICAqIEBzZWUgXy5mdW5jdGlvbnNJblxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGZ1bmN0aW9ucyhvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBmdW5jdGlvbiBwcm9wZXJ0eSBuYW1lcyBmcm9tIG93biBhbmQgaW5oZXJpdGVkXG4gICAgICogZW51bWVyYWJsZSBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgZnVuY3Rpb24gbmFtZXMuXG4gICAgICogQHNlZSBfLmZ1bmN0aW9uc1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSBfLmNvbnN0YW50KCdhJyk7XG4gICAgICogICB0aGlzLmIgPSBfLmNvbnN0YW50KCdiJyk7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gXy5jb25zdGFudCgnYycpO1xuICAgICAqXG4gICAgICogXy5mdW5jdGlvbnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBmdW5jdGlvbnNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZUZ1bmN0aW9ucyhvYmplY3QsIGtleXNJbihvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICAgICAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gICAgICogLy8gPT4gJ2RlZmF1bHQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gICAgICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiB7ICdiJzogMiB9IH07XG4gICAgICogdmFyIG90aGVyID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXMob2JqZWN0LCAnYScpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgJ2EuYicpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaGFzKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXMob3RoZXIsICdhJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXMob2JqZWN0LCBwYXRoKSB7XG4gICAgICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzUGF0aChvYmplY3QsIHBhdGgsIGJhc2VIYXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3Qgb3IgaW5oZXJpdGVkIHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgaW52ZXJ0ZWQga2V5cyBhbmQgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqIElmIGBvYmplY3RgIGNvbnRhaW5zIGR1cGxpY2F0ZSB2YWx1ZXMsIHN1YnNlcXVlbnQgdmFsdWVzIG92ZXJ3cml0ZVxuICAgICAqIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjcuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBpbnZlcnRlZCBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfTtcbiAgICAgKlxuICAgICAqIF8uaW52ZXJ0KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6ICdjJywgJzInOiAnYicgfVxuICAgICAqL1xuICAgIHZhciBpbnZlcnQgPSBjcmVhdGVJbnZlcnRlcihmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICAgIGlmICh2YWx1ZSAhPSBudWxsICYmXG4gICAgICAgICAgdHlwZW9mIHZhbHVlLnRvU3RyaW5nICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgICAgIH1cblxuICAgICAgcmVzdWx0W3ZhbHVlXSA9IGtleTtcbiAgICB9LCBjb25zdGFudChpZGVudGl0eSkpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5pbnZlcnRgIGV4Y2VwdCB0aGF0IHRoZSBpbnZlcnRlZCBvYmplY3QgaXMgZ2VuZXJhdGVkXG4gICAgICogZnJvbSB0aGUgcmVzdWx0cyBvZiBydW5uaW5nIGVhY2ggZWxlbWVudCBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZVxuICAgICAqIGNvcnJlc3BvbmRpbmcgaW52ZXJ0ZWQgdmFsdWUgb2YgZWFjaCBpbnZlcnRlZCBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5c1xuICAgICAqIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHRoZSBpbnZlcnRlZCB2YWx1ZS4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW52ZXJ0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgaW52ZXJ0ZWQgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiwgJ2MnOiAxIH07XG4gICAgICpcbiAgICAgKiBfLmludmVydEJ5KG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnMSc6IFsnYScsICdjJ10sICcyJzogWydiJ10gfVxuICAgICAqXG4gICAgICogXy5pbnZlcnRCeShvYmplY3QsIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICogICByZXR1cm4gJ2dyb3VwJyArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2dyb3VwMSc6IFsnYScsICdjJ10sICdncm91cDInOiBbJ2InXSB9XG4gICAgICovXG4gICAgdmFyIGludmVydEJ5ID0gY3JlYXRlSW52ZXJ0ZXIoZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJlxuICAgICAgICAgIHR5cGVvZiB2YWx1ZS50b1N0cmluZyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHZhbHVlID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdFt2YWx1ZV0ucHVzaChrZXkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0W3ZhbHVlXSA9IFtrZXldO1xuICAgICAgfVxuICAgIH0sIGdldEl0ZXJhdGVlKTtcblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIG1ldGhvZCBhdCBgcGF0aGAgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBtZXRob2QgdG8gaW52b2tlLlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiBbMSwgMiwgMywgNF0gfSB9XSB9O1xuICAgICAqXG4gICAgICogXy5pbnZva2Uob2JqZWN0LCAnYVswXS5iLmMuc2xpY2UnLCAxLCAzKTtcbiAgICAgKiAvLyA9PiBbMiwgM11cbiAgICAgKi9cbiAgICB2YXIgaW52b2tlID0gYmFzZVJlc3QoYmFzZUludm9rZSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLiBTZWUgdGhlXG4gICAgICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICAgICAqIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLmtleXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogXy5rZXlzKCdoaScpO1xuICAgICAqIC8vID0+IFsnMCcsICcxJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8ua2V5c0luKG5ldyBGb28pO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgICAgIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5tYXBWYWx1ZXNgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCB3aXRoIHRoZVxuICAgICAqIHNhbWUgdmFsdWVzIGFzIGBvYmplY3RgIGFuZCBrZXlzIGdlbmVyYXRlZCBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGVcbiAgICAgKiBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICAgICAqIHdpdGggdGhyZWUgYXJndW1lbnRzOiAodmFsdWUsIGtleSwgb2JqZWN0KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjguMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICAgICAqIEBzZWUgXy5tYXBWYWx1ZXNcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXBLZXlzKHsgJ2EnOiAxLCAnYic6IDIgfSwgZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgICAqICAgcmV0dXJuIGtleSArIHZhbHVlO1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+IHsgJ2ExJzogMSwgJ2IyJzogMiB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwS2V5cyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gICAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAzKTtcblxuICAgICAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpLCB2YWx1ZSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBvYmplY3RgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkXG4gICAgICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gICAgICogYGl0ZXJhdGVlYC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6XG4gICAgICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi40LjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIG9iamVjdC5cbiAgICAgKiBAc2VlIF8ubWFwS2V5c1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSB7XG4gICAgICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICAgICAqICAgJ3BlYmJsZXMnOiB7ICd1c2VyJzogJ3BlYmJsZXMnLCAnYWdlJzogMSB9XG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWFwVmFsdWVzKHVzZXJzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLmFnZTsgfSk7XG4gICAgICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXBWYWx1ZXModXNlcnMsICdhZ2UnKTtcbiAgICAgKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWFwVmFsdWVzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGl0ZXJhdGVlID0gZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gICAgICBiYXNlRm9yT3duKG9iamVjdCwgZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gICAgICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gICAgICogaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnRpZXMgb2Ygc291cmNlIG9iamVjdHMgaW50byB0aGVcbiAgICAgKiBkZXN0aW5hdGlvbiBvYmplY3QuIFNvdXJjZSBwcm9wZXJ0aWVzIHRoYXQgcmVzb2x2ZSB0byBgdW5kZWZpbmVkYCBhcmVcbiAgICAgKiBza2lwcGVkIGlmIGEgZGVzdGluYXRpb24gdmFsdWUgZXhpc3RzLiBBcnJheSBhbmQgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXNcbiAgICAgKiBhcmUgbWVyZ2VkIHJlY3Vyc2l2ZWx5LiBPdGhlciBvYmplY3RzIGFuZCB2YWx1ZSB0eXBlcyBhcmUgb3ZlcnJpZGRlbiBieVxuICAgICAqIGFzc2lnbm1lbnQuIFNvdXJjZSBvYmplY3RzIGFyZSBhcHBsaWVkIGZyb20gbGVmdCB0byByaWdodC4gU3Vic2VxdWVudFxuICAgICAqIHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgbXV0YXRlcyBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAwLjUuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gICAgICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2InOiAyIH0sIHsgJ2QnOiA0IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIHZhciBvdGhlciA9IHtcbiAgICAgKiAgICdhJzogW3sgJ2MnOiAzIH0sIHsgJ2UnOiA1IH1dXG4gICAgICogfTtcbiAgICAgKlxuICAgICAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlcik7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2QnOiA0LCAnZSc6IDUgfV0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCkge1xuICAgICAgYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lcmdlYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBjdXN0b21pemVyYCB3aGljaFxuICAgICAqIGlzIGludm9rZWQgdG8gcHJvZHVjZSB0aGUgbWVyZ2VkIHZhbHVlcyBvZiB0aGUgZGVzdGluYXRpb24gYW5kIHNvdXJjZVxuICAgICAqIHByb3BlcnRpZXMuIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgLCBtZXJnaW5nIGlzIGhhbmRsZWQgYnkgdGhlXG4gICAgICogbWV0aG9kIGluc3RlYWQuIFRoZSBgY3VzdG9taXplcmAgaXMgaW52b2tlZCB3aXRoIHNpeCBhcmd1bWVudHM6XG4gICAgICogKG9ialZhbHVlLCBzcmNWYWx1ZSwga2V5LCBvYmplY3QsIHNvdXJjZSwgc3RhY2spLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uT2JqZWN0fSBzb3VyY2VzIFRoZSBzb3VyY2Ugb2JqZWN0cy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgYXNzaWduZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlKSB7XG4gICAgICogICBpZiAoXy5pc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAqICAgICByZXR1cm4gb2JqVmFsdWUuY29uY2F0KHNyY1ZhbHVlKTtcbiAgICAgKiAgIH1cbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFsxXSwgJ2InOiBbMl0gfTtcbiAgICAgKiB2YXIgb3RoZXIgPSB7ICdhJzogWzNdLCAnYic6IFs0XSB9O1xuICAgICAqXG4gICAgICogXy5tZXJnZVdpdGgob2JqZWN0LCBvdGhlciwgY3VzdG9taXplcik7XG4gICAgICogLy8gPT4geyAnYSc6IFsxLCAzXSwgJ2InOiBbMiwgNF0gfVxuICAgICAqL1xuICAgIHZhciBtZXJnZVdpdGggPSBjcmVhdGVBc3NpZ25lcihmdW5jdGlvbihvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGJhc2VNZXJnZShvYmplY3QsIHNvdXJjZSwgc3JjSW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLnBpY2tgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGVcbiAgICAgKiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IHBhdGhzIG9mIGBvYmplY3RgIHRoYXQgYXJlIG5vdCBvbWl0dGVkLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGNvbnNpZGVyYWJseSBzbG93ZXIgdGhhbiBgXy5waWNrYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIG9taXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLm9taXQob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICB2YXIgb21pdCA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICAgIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgICAgdmFyIGlzRGVlcCA9IGZhbHNlO1xuICAgICAgcGF0aHMgPSBhcnJheU1hcChwYXRocywgZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcbiAgICAgICAgaXNEZWVwIHx8IChpc0RlZXAgPSBwYXRoLmxlbmd0aCA+IDEpO1xuICAgICAgICByZXR1cm4gcGF0aDtcbiAgICAgIH0pO1xuICAgICAgY29weU9iamVjdChvYmplY3QsIGdldEFsbEtleXNJbihvYmplY3QpLCByZXN1bHQpO1xuICAgICAgaWYgKGlzRGVlcCkge1xuICAgICAgICByZXN1bHQgPSBiYXNlQ2xvbmUocmVzdWx0LCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9GTEFUX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcsIGN1c3RvbU9taXRDbG9uZSk7XG4gICAgICB9XG4gICAgICB2YXIgbGVuZ3RoID0gcGF0aHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIGJhc2VVbnNldChyZXN1bHQsIHBhdGhzW2xlbmd0aF0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5waWNrQnlgOyB0aGlzIG1ldGhvZCBjcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZlxuICAgICAqIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIG9mIGBvYmplY3RgIHRoYXRcbiAgICAgKiBgcHJlZGljYXRlYCBkb2Vzbid0IHJldHVybiB0cnV0aHkgZm9yLiBUaGUgcHJlZGljYXRlIGlzIGludm9rZWQgd2l0aCB0d29cbiAgICAgKiBhcmd1bWVudHM6ICh2YWx1ZSwga2V5KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcmVkaWNhdGU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIHByb3BlcnR5LlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAnMicsICdjJzogMyB9O1xuICAgICAqXG4gICAgICogXy5vbWl0Qnkob2JqZWN0LCBfLmlzTnVtYmVyKTtcbiAgICAgKiAvLyA9PiB7ICdiJzogJzInIH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBvbWl0Qnkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiBwaWNrQnkob2JqZWN0LCBuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JqZWN0IGNvbXBvc2VkIG9mIHRoZSBwaWNrZWQgYG9iamVjdGAgcHJvcGVydGllcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBzb3VyY2Ugb2JqZWN0LlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IFtwYXRoc10gVGhlIHByb3BlcnR5IHBhdGhzIHRvIHBpY2suXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2sob2JqZWN0LCBbJ2EnLCAnYyddKTtcbiAgICAgKiAvLyA9PiB7ICdhJzogMSwgJ2MnOiAzIH1cbiAgICAgKi9cbiAgICB2YXIgcGljayA9IGZsYXRSZXN0KGZ1bmN0aW9uKG9iamVjdCwgcGF0aHMpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHt9IDogYmFzZVBpY2sob2JqZWN0LCBwYXRocyk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIG9iamVjdCBjb21wb3NlZCBvZiB0aGUgYG9iamVjdGAgcHJvcGVydGllcyBgcHJlZGljYXRlYCByZXR1cm5zXG4gICAgICogdHJ1dGh5IGZvci4gVGhlIHByZWRpY2F0ZSBpcyBpbnZva2VkIHdpdGggdHdvIGFyZ3VtZW50czogKHZhbHVlLCBrZXkpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIHNvdXJjZSBvYmplY3QuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW3ByZWRpY2F0ZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgcHJvcGVydHkuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxLCAnYic6ICcyJywgJ2MnOiAzIH07XG4gICAgICpcbiAgICAgKiBfLnBpY2tCeShvYmplY3QsIF8uaXNOdW1iZXIpO1xuICAgICAqIC8vID0+IHsgJ2EnOiAxLCAnYyc6IDMgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBpY2tCeShvYmplY3QsIHByZWRpY2F0ZSkge1xuICAgICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICAgIHZhciBwcm9wcyA9IGFycmF5TWFwKGdldEFsbEtleXNJbihvYmplY3QpLCBmdW5jdGlvbihwcm9wKSB7XG4gICAgICAgIHJldHVybiBbcHJvcF07XG4gICAgICB9KTtcbiAgICAgIHByZWRpY2F0ZSA9IGdldEl0ZXJhdGVlKHByZWRpY2F0ZSk7XG4gICAgICByZXR1cm4gYmFzZVBpY2tCeShvYmplY3QsIHByb3BzLCBmdW5jdGlvbih2YWx1ZSwgcGF0aCkge1xuICAgICAgICByZXR1cm4gcHJlZGljYXRlKHZhbHVlLCBwYXRoWzBdKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uZ2V0YCBleGNlcHQgdGhhdCBpZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXMgYVxuICAgICAqIGZ1bmN0aW9uIGl0J3MgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBpdHMgcGFyZW50IG9iamVjdCBhbmRcbiAgICAgKiBpdHMgcmVzdWx0IGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gcmVzb2x2ZS5cbiAgICAgKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MxJzogMywgJ2MyJzogXy5jb25zdGFudCg0KSB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzEnKTtcbiAgICAgKiAvLyA9PiAzXG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzInKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnJlc3VsdChvYmplY3QsICdhWzBdLmIuYzMnLCAnZGVmYXVsdCcpO1xuICAgICAqIC8vID0+ICdkZWZhdWx0J1xuICAgICAqXG4gICAgICogXy5yZXN1bHQob2JqZWN0LCAnYVswXS5iLmMzJywgXy5jb25zdGFudCgnZGVmYXVsdCcpKTtcbiAgICAgKiAvLyA9PiAnZGVmYXVsdCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXN1bHQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgICAgIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gICAgICB2YXIgaW5kZXggPSAtMSxcbiAgICAgICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICAgICAgLy8gRW5zdXJlIHRoZSBsb29wIGlzIGVudGVyZWQgd2hlbiBwYXRoIGlzIGVtcHR5LlxuICAgICAgaWYgKCFsZW5ndGgpIHtcbiAgICAgICAgbGVuZ3RoID0gMTtcbiAgICAgICAgb2JqZWN0ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3RbdG9LZXkocGF0aFtpbmRleF0pXTtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBpbmRleCA9IGxlbmd0aDtcbiAgICAgICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBvYmplY3QgPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIGEgcG9ydGlvbiBvZiBgcGF0aGAgZG9lc24ndCBleGlzdCxcbiAgICAgKiBpdCdzIGNyZWF0ZWQuIEFycmF5cyBhcmUgY3JlYXRlZCBmb3IgbWlzc2luZyBpbmRleCBwcm9wZXJ0aWVzIHdoaWxlIG9iamVjdHNcbiAgICAgKiBhcmUgY3JlYXRlZCBmb3IgYWxsIG90aGVyIG1pc3NpbmcgcHJvcGVydGllcy4gVXNlIGBfLnNldFdpdGhgIHRvIGN1c3RvbWl6ZVxuICAgICAqIGBwYXRoYCBjcmVhdGlvbi5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAgICAgKlxuICAgICAqIF8uc2V0KG9iamVjdCwgJ2FbMF0uYi5jJywgNCk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LmFbMF0uYi5jKTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLnNldChvYmplY3QsIFsneCcsICcwJywgJ3knLCAneiddLCA1KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QueFswXS55LnopO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgaXQgYWNjZXB0cyBgY3VzdG9taXplcmAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIG9iamVjdHMgb2YgYHBhdGhgLiAgSWYgYGN1c3RvbWl6ZXJgIHJldHVybnMgYHVuZGVmaW5lZGBcbiAgICAgKiBwYXRoIGNyZWF0aW9uIGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgIGlzIGludm9rZWRcbiAgICAgKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKG5zVmFsdWUsIGtleSwgbnNPYmplY3QpLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gc2V0LlxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHt9O1xuICAgICAqXG4gICAgICogXy5zZXRXaXRoKG9iamVjdCwgJ1swXVsxXScsICdhJywgT2JqZWN0KTtcbiAgICAgKiAvLyA9PiB7ICcwJzogeyAnMSc6ICdhJyB9IH1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzZXRXaXRoKG9iamVjdCwgcGF0aCwgdmFsdWUsIGN1c3RvbWl6ZXIpIHtcbiAgICAgIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IG9iamVjdCA6IGJhc2VTZXQob2JqZWN0LCBwYXRoLCB2YWx1ZSwgY3VzdG9taXplcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQtdmFsdWUgcGFpcnMgZm9yIGBvYmplY3RgXG4gICAgICogd2hpY2ggY2FuIGJlIGNvbnN1bWVkIGJ5IGBfLmZyb21QYWlyc2AuIElmIGBvYmplY3RgIGlzIGEgbWFwIG9yIHNldCwgaXRzXG4gICAgICogZW50cmllcyBhcmUgcmV0dXJuZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAYWxpYXMgZW50cmllc1xuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gW1snYScsIDFdLCBbJ2InLCAyXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlycyA9IGNyZWF0ZVRvUGFpcnMoa2V5cyk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nIGtleWVkLXZhbHVlIHBhaXJzXG4gICAgICogZm9yIGBvYmplY3RgIHdoaWNoIGNhbiBiZSBjb25zdW1lZCBieSBgXy5mcm9tUGFpcnNgLiBJZiBgb2JqZWN0YCBpcyBhIG1hcFxuICAgICAqIG9yIHNldCwgaXRzIGVudHJpZXMgYXJlIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGFsaWFzIGVudHJpZXNJblxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIGZ1bmN0aW9uIEZvbygpIHtcbiAgICAgKiAgIHRoaXMuYSA9IDE7XG4gICAgICogICB0aGlzLmIgPSAyO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gICAgICpcbiAgICAgKiBfLnRvUGFpcnNJbihuZXcgRm9vKTtcbiAgICAgKiAvLyA9PiBbWydhJywgMV0sIFsnYicsIDJdLCBbJ2MnLCAzXV0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAgICAgKi9cbiAgICB2YXIgdG9QYWlyc0luID0gY3JlYXRlVG9QYWlycyhrZXlzSW4pO1xuXG4gICAgLyoqXG4gICAgICogQW4gYWx0ZXJuYXRpdmUgdG8gYF8ucmVkdWNlYDsgdGhpcyBtZXRob2QgdHJhbnNmb3JtcyBgb2JqZWN0YCB0byBhIG5ld1xuICAgICAqIGBhY2N1bXVsYXRvcmAgb2JqZWN0IHdoaWNoIGlzIHRoZSByZXN1bHQgb2YgcnVubmluZyBlYWNoIG9mIGl0cyBvd25cbiAgICAgKiBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0aWVzIHRocnUgYGl0ZXJhdGVlYCwgd2l0aCBlYWNoIGludm9jYXRpb25cbiAgICAgKiBwb3RlbnRpYWxseSBtdXRhdGluZyB0aGUgYGFjY3VtdWxhdG9yYCBvYmplY3QuIElmIGBhY2N1bXVsYXRvcmAgaXMgbm90XG4gICAgICogcHJvdmlkZWQsIGEgbmV3IG9iamVjdCB3aXRoIHRoZSBzYW1lIGBbW1Byb3RvdHlwZV1dYCB3aWxsIGJlIHVzZWQuIFRoZVxuICAgICAqIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBmb3VyIGFyZ3VtZW50czogKGFjY3VtdWxhdG9yLCB2YWx1ZSwga2V5LCBvYmplY3QpLlxuICAgICAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjMuMFxuICAgICAqIEBjYXRlZ29yeSBPYmplY3RcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICAgICAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgY3VzdG9tIGFjY3VtdWxhdG9yIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmFuc2Zvcm0oWzIsIDMsIDRdLCBmdW5jdGlvbihyZXN1bHQsIG4pIHtcbiAgICAgKiAgIHJlc3VsdC5wdXNoKG4gKj0gbik7XG4gICAgICogICByZXR1cm4gbiAlIDIgPT0gMDtcbiAgICAgKiB9LCBbXSk7XG4gICAgICogLy8gPT4gWzQsIDldXG4gICAgICpcbiAgICAgKiBfLnRyYW5zZm9ybSh7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDEgfSwgZnVuY3Rpb24ocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICogICAocmVzdWx0W3ZhbHVlXSB8fCAocmVzdWx0W3ZhbHVlXSA9IFtdKSkucHVzaChrZXkpO1xuICAgICAqIH0sIHt9KTtcbiAgICAgKiAvLyA9PiB7ICcxJzogWydhJywgJ2MnXSwgJzInOiBbJ2InXSB9XG4gICAgICovXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtKG9iamVjdCwgaXRlcmF0ZWUsIGFjY3VtdWxhdG9yKSB7XG4gICAgICB2YXIgaXNBcnIgPSBpc0FycmF5KG9iamVjdCksXG4gICAgICAgICAgaXNBcnJMaWtlID0gaXNBcnIgfHwgaXNCdWZmZXIob2JqZWN0KSB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KTtcblxuICAgICAgaXRlcmF0ZWUgPSBnZXRJdGVyYXRlZShpdGVyYXRlZSwgNCk7XG4gICAgICBpZiAoYWNjdW11bGF0b3IgPT0gbnVsbCkge1xuICAgICAgICB2YXIgQ3RvciA9IG9iamVjdCAmJiBvYmplY3QuY29uc3RydWN0b3I7XG4gICAgICAgIGlmIChpc0Fyckxpa2UpIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IGlzQXJyID8gbmV3IEN0b3IgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc09iamVjdChvYmplY3QpKSB7XG4gICAgICAgICAgYWNjdW11bGF0b3IgPSBpc0Z1bmN0aW9uKEN0b3IpID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSkgOiB7fTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBhY2N1bXVsYXRvciA9IHt9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAoaXNBcnJMaWtlID8gYXJyYXlFYWNoIDogYmFzZUZvck93bikob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIG9iamVjdCkge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIHZhbHVlLCBpbmRleCwgb2JqZWN0KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGFjY3VtdWxhdG9yO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIHByb3BlcnR5IGF0IGBwYXRoYCBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHVuc2V0LlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgcHJvcGVydHkgaXMgZGVsZXRlZCwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDcgfSB9XSB9O1xuICAgICAqIF8udW5zZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QpO1xuICAgICAqIC8vID0+IHsgJ2EnOiBbeyAnYic6IHt9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVuc2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdCk7XG4gICAgICogLy8gPT4geyAnYSc6IFt7ICdiJzoge30gfV0gfTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bnNldChvYmplY3QsIHBhdGgpIHtcbiAgICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHRydWUgOiBiYXNlVW5zZXQob2JqZWN0LCBwYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNldGAgZXhjZXB0IHRoYXQgYWNjZXB0cyBgdXBkYXRlcmAgdG8gcHJvZHVjZSB0aGVcbiAgICAgKiB2YWx1ZSB0byBzZXQuIFVzZSBgXy51cGRhdGVXaXRoYCB0byBjdXN0b21pemUgYHBhdGhgIGNyZWF0aW9uLiBUaGUgYHVwZGF0ZXJgXG4gICAgICogaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZShvYmplY3QsICdhWzBdLmIuYycsIGZ1bmN0aW9uKG4pIHsgcmV0dXJuIG4gKiBuOyB9KTtcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3QuYVswXS5iLmMpO1xuICAgICAqIC8vID0+IDlcbiAgICAgKlxuICAgICAqIF8udXBkYXRlKG9iamVjdCwgJ3hbMF0ueS56JywgZnVuY3Rpb24obikgeyByZXR1cm4gbiA/IG4gKyAxIDogMDsgfSk7XG4gICAgICogY29uc29sZS5sb2cob2JqZWN0LnhbMF0ueS56KTtcbiAgICAgKiAvLyA9PiAwXG4gICAgICovXG4gICAgZnVuY3Rpb24gdXBkYXRlKG9iamVjdCwgcGF0aCwgdXBkYXRlcikge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gb2JqZWN0IDogYmFzZVVwZGF0ZShvYmplY3QsIHBhdGgsIGNhc3RGdW5jdGlvbih1cGRhdGVyKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy51cGRhdGVgIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgIHdoaWNoIGlzXG4gICAgICogaW52b2tlZCB0byBwcm9kdWNlIHRoZSBvYmplY3RzIG9mIGBwYXRoYC4gIElmIGBjdXN0b21pemVyYCByZXR1cm5zIGB1bmRlZmluZWRgXG4gICAgICogcGF0aCBjcmVhdGlvbiBpcyBoYW5kbGVkIGJ5IHRoZSBtZXRob2QgaW5zdGVhZC4gVGhlIGBjdXN0b21pemVyYCBpcyBpbnZva2VkXG4gICAgICogd2l0aCB0aHJlZSBhcmd1bWVudHM6IChuc1ZhbHVlLCBrZXksIG5zT2JqZWN0KS5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuNi4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSB1cGRhdGVyIFRoZSBmdW5jdGlvbiB0byBwcm9kdWNlIHRoZSB1cGRhdGVkIHZhbHVlLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGFzc2lnbmVkIHZhbHVlcy5cbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0ID0ge307XG4gICAgICpcbiAgICAgKiBfLnVwZGF0ZVdpdGgob2JqZWN0LCAnWzBdWzFdJywgXy5jb25zdGFudCgnYScpLCBPYmplY3QpO1xuICAgICAqIC8vID0+IHsgJzAnOiB7ICcxJzogJ2EnIH0gfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVwZGF0ZVdpdGgob2JqZWN0LCBwYXRoLCB1cGRhdGVyLCBjdXN0b21pemVyKSB7XG4gICAgICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBvYmplY3QgOiBiYXNlVXBkYXRlKG9iamVjdCwgcGF0aCwgY2FzdEZ1bmN0aW9uKHVwZGF0ZXIpLCBjdXN0b21pemVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgT2JqZWN0XG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBGb28oKSB7XG4gICAgICogICB0aGlzLmEgPSAxO1xuICAgICAqICAgdGhpcy5iID0gMjtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICAgICAqXG4gICAgICogXy52YWx1ZXMobmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDJdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICpcbiAgICAgKiBfLnZhbHVlcygnaGknKTtcbiAgICAgKiAvLyA9PiBbJ2gnLCAnaSddXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gW10gOiBiYXNlVmFsdWVzKG9iamVjdCwga2V5cyhvYmplY3QpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eVxuICAgICAqIHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IE9iamVjdFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogZnVuY3Rpb24gRm9vKCkge1xuICAgICAqICAgdGhpcy5hID0gMTtcbiAgICAgKiAgIHRoaXMuYiA9IDI7XG4gICAgICogfVxuICAgICAqXG4gICAgICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAgICAgKlxuICAgICAqIF8udmFsdWVzSW4obmV3IEZvbyk7XG4gICAgICogLy8gPT4gWzEsIDIsIDNdIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsdWVzSW4ob2JqZWN0KSB7XG4gICAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzSW4ob2JqZWN0KSk7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ2xhbXBzIGBudW1iZXJgIHdpdGhpbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE51bWJlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byBjbGFtcC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xvd2VyXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHVwcGVyIFRoZSB1cHBlciBib3VuZC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjbGFtcGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jbGFtcCgtMTAsIC01LCA1KTtcbiAgICAgKiAvLyA9PiAtNVxuICAgICAqXG4gICAgICogXy5jbGFtcCgxMCwgLTUsIDUpO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjbGFtcChudW1iZXIsIGxvd2VyLCB1cHBlcikge1xuICAgICAgaWYgKHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodXBwZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB1cHBlciA9IHRvTnVtYmVyKHVwcGVyKTtcbiAgICAgICAgdXBwZXIgPSB1cHBlciA9PT0gdXBwZXIgPyB1cHBlciA6IDA7XG4gICAgICB9XG4gICAgICBpZiAobG93ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsb3dlciA9IHRvTnVtYmVyKGxvd2VyKTtcbiAgICAgICAgbG93ZXIgPSBsb3dlciA9PT0gbG93ZXIgPyBsb3dlciA6IDA7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZUNsYW1wKHRvTnVtYmVyKG51bWJlciksIGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGBuYCBpcyBiZXR3ZWVuIGBzdGFydGAgYW5kIHVwIHRvLCBidXQgbm90IGluY2x1ZGluZywgYGVuZGAuIElmXG4gICAgICogYGVuZGAgaXMgbm90IHNwZWNpZmllZCwgaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqIElmIGBzdGFydGAgaXMgZ3JlYXRlciB0aGFuIGBlbmRgIHRoZSBwYXJhbXMgYXJlIHN3YXBwZWQgdG8gc3VwcG9ydFxuICAgICAqIG5lZ2F0aXZlIHJhbmdlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjMuMFxuICAgICAqIEBjYXRlZ29yeSBOdW1iZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgVGhlIGVuZCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBudW1iZXJgIGlzIGluIHRoZSByYW5nZSwgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBzZWUgXy5yYW5nZSwgXy5yYW5nZVJpZ2h0XG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgzLCAyLCA0KTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoNCwgOCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5pblJhbmdlKDQsIDIpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoMiwgMik7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSgxLjIsIDIpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uaW5SYW5nZSg1LjIsIDQpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLmluUmFuZ2UoLTMsIC0yLCAtNik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvRmluaXRlKHN0YXJ0KTtcbiAgICAgIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBlbmQgPSBzdGFydDtcbiAgICAgICAgc3RhcnQgPSAwO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZW5kID0gdG9GaW5pdGUoZW5kKTtcbiAgICAgIH1cbiAgICAgIG51bWJlciA9IHRvTnVtYmVyKG51bWJlcik7XG4gICAgICByZXR1cm4gYmFzZUluUmFuZ2UobnVtYmVyLCBzdGFydCwgZW5kKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlcyBhIHJhbmRvbSBudW1iZXIgYmV0d2VlbiB0aGUgaW5jbHVzaXZlIGBsb3dlcmAgYW5kIGB1cHBlcmAgYm91bmRzLlxuICAgICAqIElmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHByb3ZpZGVkIGEgbnVtYmVyIGJldHdlZW4gYDBgIGFuZCB0aGUgZ2l2ZW4gbnVtYmVyXG4gICAgICogaXMgcmV0dXJuZWQuIElmIGBmbG9hdGluZ2AgaXMgYHRydWVgLCBvciBlaXRoZXIgYGxvd2VyYCBvciBgdXBwZXJgIGFyZVxuICAgICAqIGZsb2F0cywgYSBmbG9hdGluZy1wb2ludCBudW1iZXIgaXMgcmV0dXJuZWQgaW5zdGVhZCBvZiBhbiBpbnRlZ2VyLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTnVtYmVyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsb3dlcj0wXSBUaGUgbG93ZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFt1cHBlcj0xXSBUaGUgdXBwZXIgYm91bmQuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbZmxvYXRpbmddIFNwZWNpZnkgcmV0dXJuaW5nIGEgZmxvYXRpbmctcG9pbnQgbnVtYmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHJhbmRvbSBudW1iZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDAsIDUpO1xuICAgICAqIC8vID0+IGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1KTtcbiAgICAgKiAvLyA9PiBhbHNvIGFuIGludGVnZXIgYmV0d2VlbiAwIGFuZCA1XG4gICAgICpcbiAgICAgKiBfLnJhbmRvbSg1LCB0cnVlKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDAgYW5kIDVcbiAgICAgKlxuICAgICAqIF8ucmFuZG9tKDEuMiwgNS4yKTtcbiAgICAgKiAvLyA9PiBhIGZsb2F0aW5nLXBvaW50IG51bWJlciBiZXR3ZWVuIDEuMiBhbmQgNS4yXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmFuZG9tKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpIHtcbiAgICAgIGlmIChmbG9hdGluZyAmJiB0eXBlb2YgZmxvYXRpbmcgIT0gJ2Jvb2xlYW4nICYmIGlzSXRlcmF0ZWVDYWxsKGxvd2VyLCB1cHBlciwgZmxvYXRpbmcpKSB7XG4gICAgICAgIHVwcGVyID0gZmxvYXRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoZmxvYXRpbmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIHVwcGVyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gdXBwZXI7XG4gICAgICAgICAgdXBwZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIGxvd2VyID09ICdib29sZWFuJykge1xuICAgICAgICAgIGZsb2F0aW5nID0gbG93ZXI7XG4gICAgICAgICAgbG93ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA9PT0gdW5kZWZpbmVkICYmIHVwcGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG93ZXIgPSAwO1xuICAgICAgICB1cHBlciA9IDE7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgbG93ZXIgPSB0b0Zpbml0ZShsb3dlcik7XG4gICAgICAgIGlmICh1cHBlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdXBwZXIgPSBsb3dlcjtcbiAgICAgICAgICBsb3dlciA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdXBwZXIgPSB0b0Zpbml0ZSh1cHBlcik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChsb3dlciA+IHVwcGVyKSB7XG4gICAgICAgIHZhciB0ZW1wID0gbG93ZXI7XG4gICAgICAgIGxvd2VyID0gdXBwZXI7XG4gICAgICAgIHVwcGVyID0gdGVtcDtcbiAgICAgIH1cbiAgICAgIGlmIChmbG9hdGluZyB8fCBsb3dlciAlIDEgfHwgdXBwZXIgJSAxKSB7XG4gICAgICAgIHZhciByYW5kID0gbmF0aXZlUmFuZG9tKCk7XG4gICAgICAgIHJldHVybiBuYXRpdmVNaW4obG93ZXIgKyAocmFuZCAqICh1cHBlciAtIGxvd2VyICsgZnJlZVBhcnNlRmxvYXQoJzFlLScgKyAoKHJhbmQgKyAnJykubGVuZ3RoIC0gMSkpKSksIHVwcGVyKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBiYXNlUmFuZG9tKGxvd2VyLCB1cHBlcik7XG4gICAgfVxuXG4gICAgLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG8gW2NhbWVsIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhbWVsQ2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYW1lbCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb0JhcidcbiAgICAgKlxuICAgICAqIF8uY2FtZWxDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdmb29CYXInXG4gICAgICpcbiAgICAgKiBfLmNhbWVsQ2FzZSgnX19GT09fQkFSX18nKTtcbiAgICAgKiAvLyA9PiAnZm9vQmFyJ1xuICAgICAqL1xuICAgIHZhciBjYW1lbENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gY2FwaXRhbGl6ZSh3b3JkKSA6IHdvcmQpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlIGFuZCB0aGUgcmVtYWluaW5nXG4gICAgICogdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjYXBpdGFsaXplLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhcGl0YWxpemVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jYXBpdGFsaXplKCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ0ZyZWQnXG4gICAgICovXG4gICAgZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgICAgIHJldHVybiB1cHBlckZpcnN0KHRvU3RyaW5nKHN0cmluZykudG9Mb3dlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVidXJycyBgc3RyaW5nYCBieSBjb252ZXJ0aW5nXG4gICAgICogW0xhdGluLTEgU3VwcGxlbWVudF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW4tMV9TdXBwbGVtZW50XyhVbmljb2RlX2Jsb2NrKSNDaGFyYWN0ZXJfdGFibGUpXG4gICAgICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICAgICAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycyBhbmQgcmVtb3ZpbmdcbiAgICAgKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGRlYnVyci5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAgICAgKiAvLyA9PiAnZGVqYSB2dSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZShyZUxhdGluLCBkZWJ1cnJMZXR0ZXIpLnJlcGxhY2UocmVDb21ib01hcmssICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2AgZW5kcyB3aXRoIHRoZSBnaXZlbiB0YXJnZXQgc3RyaW5nLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFt0YXJnZXRdIFRoZSBzdHJpbmcgdG8gc2VhcmNoIGZvci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3Bvc2l0aW9uPXN0cmluZy5sZW5ndGhdIFRoZSBwb3NpdGlvbiB0byBzZWFyY2ggdXAgdG8uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBzdHJpbmdgIGVuZHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVuZHNXaXRoKCdhYmMnLCAnYycpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJyk7XG4gICAgICogLy8gPT4gZmFsc2VcbiAgICAgKlxuICAgICAqIF8uZW5kc1dpdGgoJ2FiYycsICdiJywgMik7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVuZHNXaXRoKHN0cmluZywgdGFyZ2V0LCBwb3NpdGlvbikge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHRhcmdldCA9IGJhc2VUb1N0cmluZyh0YXJnZXQpO1xuXG4gICAgICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aDtcbiAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gPT09IHVuZGVmaW5lZFxuICAgICAgICA/IGxlbmd0aFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBsZW5ndGgpO1xuXG4gICAgICB2YXIgZW5kID0gcG9zaXRpb247XG4gICAgICBwb3NpdGlvbiAtPSB0YXJnZXQubGVuZ3RoO1xuICAgICAgcmV0dXJuIHBvc2l0aW9uID49IDAgJiYgc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBlbmQpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgY2hhcmFjdGVycyBcIiZcIiwgXCI8XCIsIFwiPlwiLCAnXCInLCBhbmQgXCInXCIgaW4gYHN0cmluZ2AgdG8gdGhlaXJcbiAgICAgKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgY2hhcmFjdGVycyBhcmUgZXNjYXBlZC4gVG8gZXNjYXBlIGFkZGl0aW9uYWxcbiAgICAgKiBjaGFyYWN0ZXJzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAgICAgKlxuICAgICAqIFRob3VnaCB0aGUgXCI+XCIgY2hhcmFjdGVyIGlzIGVzY2FwZWQgZm9yIHN5bW1ldHJ5LCBjaGFyYWN0ZXJzIGxpa2VcbiAgICAgKiBcIj5cIiBhbmQgXCIvXCIgZG9uJ3QgbmVlZCBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZ1xuICAgICAqIHVubGVzcyB0aGV5J3JlIHBhcnQgb2YgYSB0YWcgb3IgdW5xdW90ZWQgYXR0cmlidXRlIHZhbHVlLiBTZWVcbiAgICAgKiBbTWF0aGlhcyBCeW5lbnMncyBhcnRpY2xlXShodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvYW1iaWd1b3VzLWFtcGVyc2FuZHMpXG4gICAgICogKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpIGZvciBtb3JlIGRldGFpbHMuXG4gICAgICpcbiAgICAgKiBXaGVuIHdvcmtpbmcgd2l0aCBIVE1MIHlvdSBzaG91bGQgYWx3YXlzXG4gICAgICogW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKSB0byByZWR1Y2VcbiAgICAgKiBYU1MgdmVjdG9ycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBlc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uZXNjYXBlKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzVW5lc2NhcGVkSHRtbC50ZXN0KHN0cmluZykpXG4gICAgICAgID8gc3RyaW5nLnJlcGxhY2UocmVVbmVzY2FwZWRIdG1sLCBlc2NhcGVIdG1sQ2hhcilcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXNjYXBlcyB0aGUgYFJlZ0V4cGAgc3BlY2lhbCBjaGFyYWN0ZXJzIFwiXlwiLCBcIiRcIiwgXCJcXFwiLCBcIi5cIiwgXCIqXCIsIFwiK1wiLFxuICAgICAqIFwiP1wiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBhbmQgXCJ8XCIgaW4gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gZXNjYXBlLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmVzY2FwZVJlZ0V4cCgnW2xvZGFzaF0oaHR0cHM6Ly9sb2Rhc2guY29tLyknKTtcbiAgICAgKiAvLyA9PiAnXFxbbG9kYXNoXFxdXFwoaHR0cHM6Ly9sb2Rhc2hcXC5jb20vXFwpJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHJpbmcpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICByZXR1cm4gKHN0cmluZyAmJiByZUhhc1JlZ0V4cENoYXIudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlUmVnRXhwQ2hhciwgJ1xcXFwkJicpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW2tlYmFiIGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1NwZWNpYWxfY2FzZV9zdHlsZXMpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUga2ViYWIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmtlYmFiQ2FzZSgnRm9vIEJhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28tYmFyJ1xuICAgICAqXG4gICAgICogXy5rZWJhYkNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2Zvby1iYXInXG4gICAgICovXG4gICAgdmFyIGtlYmFiQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICctJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIGxvd2VyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBsb3dlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJDYXNlKCctLUZvby1CYXItLScpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdmb28gYmFyJ1xuICAgICAqXG4gICAgICogXy5sb3dlckNhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ2ZvbyBiYXInXG4gICAgICovXG4gICAgdmFyIGxvd2VyQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gbG93ZXIgY2FzZS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubG93ZXJGaXJzdCgnRnJlZCcpO1xuICAgICAqIC8vID0+ICdmcmVkJ1xuICAgICAqXG4gICAgICogXy5sb3dlckZpcnN0KCdGUkVEJyk7XG4gICAgICogLy8gPT4gJ2ZSRUQnXG4gICAgICovXG4gICAgdmFyIGxvd2VyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvTG93ZXJDYXNlJyk7XG5cbiAgICAvKipcbiAgICAgKiBQYWRzIGBzdHJpbmdgIG9uIHRoZSBsZWZ0IGFuZCByaWdodCBzaWRlcyBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC5cbiAgICAgKiBQYWRkaW5nIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGNhbid0IGJlIGV2ZW5seSBkaXZpZGVkIGJ5IGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkKCdhYmMnLCA4KTtcbiAgICAgKiAvLyA9PiAnICBhYmMgICAnXG4gICAgICpcbiAgICAgKiBfLnBhZCgnYWJjJywgOCwgJ18tJyk7XG4gICAgICogLy8gPT4gJ18tYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIGlmICghbGVuZ3RoIHx8IHN0ckxlbmd0aCA+PSBsZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBtaWQgPSAobGVuZ3RoIC0gc3RyTGVuZ3RoKSAvIDI7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBjcmVhdGVQYWRkaW5nKG5hdGl2ZUZsb29yKG1pZCksIGNoYXJzKSArXG4gICAgICAgIHN0cmluZyArXG4gICAgICAgIGNyZWF0ZVBhZGRpbmcobmF0aXZlQ2VpbChtaWQpLCBjaGFycylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgcmlnaHQgc2lkZSBpZiBpdCdzIHNob3J0ZXIgdGhhbiBgbGVuZ3RoYC4gUGFkZGluZ1xuICAgICAqIGNoYXJhY3RlcnMgYXJlIHRydW5jYXRlZCBpZiB0aGV5IGV4Y2VlZCBgbGVuZ3RoYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBwYWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9MF0gVGhlIHBhZGRpbmcgbGVuZ3RoLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbY2hhcnM9JyAnXSBUaGUgc3RyaW5nIHVzZWQgYXMgcGFkZGluZy5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBwYWRkZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnBhZEVuZCgnYWJjJywgNik7XG4gICAgICogLy8gPT4gJ2FiYyAgICdcbiAgICAgKlxuICAgICAqIF8ucGFkRW5kKCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnYWJjXy1fJ1xuICAgICAqXG4gICAgICogXy5wYWRFbmQoJ2FiYycsIDMpO1xuICAgICAqIC8vID0+ICdhYmMnXG4gICAgICovXG4gICAgZnVuY3Rpb24gcGFkRW5kKHN0cmluZywgbGVuZ3RoLCBjaGFycykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIGxlbmd0aCA9IHRvSW50ZWdlcihsZW5ndGgpO1xuXG4gICAgICB2YXIgc3RyTGVuZ3RoID0gbGVuZ3RoID8gc3RyaW5nU2l6ZShzdHJpbmcpIDogMDtcbiAgICAgIHJldHVybiAobGVuZ3RoICYmIHN0ckxlbmd0aCA8IGxlbmd0aClcbiAgICAgICAgPyAoc3RyaW5nICsgY3JlYXRlUGFkZGluZyhsZW5ndGggLSBzdHJMZW5ndGgsIGNoYXJzKSlcbiAgICAgICAgOiBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFkcyBgc3RyaW5nYCBvbiB0aGUgbGVmdCBzaWRlIGlmIGl0J3Mgc2hvcnRlciB0aGFuIGBsZW5ndGhgLiBQYWRkaW5nXG4gICAgICogY2hhcmFjdGVycyBhcmUgdHJ1bmNhdGVkIGlmIHRoZXkgZXhjZWVkIGBsZW5ndGhgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHBhZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD0wXSBUaGUgcGFkZGluZyBsZW5ndGguXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtjaGFycz0nICddIFRoZSBzdHJpbmcgdXNlZCBhcyBwYWRkaW5nLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHBhZGRlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucGFkU3RhcnQoJ2FiYycsIDYpO1xuICAgICAqIC8vID0+ICcgICBhYmMnXG4gICAgICpcbiAgICAgKiBfLnBhZFN0YXJ0KCdhYmMnLCA2LCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnXy1fYWJjJ1xuICAgICAqXG4gICAgICogXy5wYWRTdGFydCgnYWJjJywgMyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwYWRTdGFydChzdHJpbmcsIGxlbmd0aCwgY2hhcnMpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBsZW5ndGggPSB0b0ludGVnZXIobGVuZ3RoKTtcblxuICAgICAgdmFyIHN0ckxlbmd0aCA9IGxlbmd0aCA/IHN0cmluZ1NpemUoc3RyaW5nKSA6IDA7XG4gICAgICByZXR1cm4gKGxlbmd0aCAmJiBzdHJMZW5ndGggPCBsZW5ndGgpXG4gICAgICAgID8gKGNyZWF0ZVBhZGRpbmcobGVuZ3RoIC0gc3RyTGVuZ3RoLCBjaGFycykgKyBzdHJpbmcpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIGFuIGludGVnZXIgb2YgdGhlIHNwZWNpZmllZCByYWRpeC4gSWYgYHJhZGl4YCBpc1xuICAgICAqIGB1bmRlZmluZWRgIG9yIGAwYCwgYSBgcmFkaXhgIG9mIGAxMGAgaXMgdXNlZCB1bmxlc3MgYHZhbHVlYCBpcyBhXG4gICAgICogaGV4YWRlY2ltYWwsIGluIHdoaWNoIGNhc2UgYSBgcmFkaXhgIG9mIGAxNmAgaXMgdXNlZC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBhbGlnbnMgd2l0aCB0aGVcbiAgICAgKiBbRVM1IGltcGxlbWVudGF0aW9uXShodHRwczovL2VzNS5naXRodWIuaW8vI3gxNS4xLjIuMikgb2YgYHBhcnNlSW50YC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAxLjEuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3JhZGl4PTEwXSBUaGUgcmFkaXggdG8gaW50ZXJwcmV0IGB2YWx1ZWAgYnkuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgaW50ZWdlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5wYXJzZUludCgnMDgnKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1hcChbJzYnLCAnMDgnLCAnMTAnXSwgXy5wYXJzZUludCk7XG4gICAgICogLy8gPT4gWzYsIDgsIDEwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHBhcnNlSW50KHN0cmluZywgcmFkaXgsIGd1YXJkKSB7XG4gICAgICBpZiAoZ3VhcmQgfHwgcmFkaXggPT0gbnVsbCkge1xuICAgICAgICByYWRpeCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHJhZGl4KSB7XG4gICAgICAgIHJhZGl4ID0gK3JhZGl4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5hdGl2ZVBhcnNlSW50KHRvU3RyaW5nKHN0cmluZykucmVwbGFjZShyZVRyaW1TdGFydCwgJycpLCByYWRpeCB8fCAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBlYXRzIHRoZSBnaXZlbiBzdHJpbmcgYG5gIHRpbWVzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHJlcGVhdC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MV0gVGhlIG51bWJlciBvZiB0aW1lcyB0byByZXBlYXQgdGhlIHN0cmluZy5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJlcGVhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yZXBlYXQoJyonLCAzKTtcbiAgICAgKiAvLyA9PiAnKioqJ1xuICAgICAqXG4gICAgICogXy5yZXBlYXQoJ2FiYycsIDIpO1xuICAgICAqIC8vID0+ICdhYmNhYmMnXG4gICAgICpcbiAgICAgKiBfLnJlcGVhdCgnYWJjJywgMCk7XG4gICAgICogLy8gPT4gJydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiByZXBlYXQoc3RyaW5nLCBuLCBndWFyZCkge1xuICAgICAgaWYgKChndWFyZCA/IGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgbiwgZ3VhcmQpIDogbiA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICBuID0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG4gPSB0b0ludGVnZXIobik7XG4gICAgICB9XG4gICAgICByZXR1cm4gYmFzZVJlcGVhdCh0b1N0cmluZyhzdHJpbmcpLCBuKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlcyBtYXRjaGVzIGZvciBgcGF0dGVybmAgaW4gYHN0cmluZ2Agd2l0aCBgcmVwbGFjZW1lbnRgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjcmVwbGFjZWBdKGh0dHBzOi8vbWRuLmlvL1N0cmluZy9yZXBsYWNlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBTdHJpbmdcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBtb2RpZnkuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBwYXR0ZXJuIFRoZSBwYXR0ZXJuIHRvIHJlcGxhY2UuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbnxzdHJpbmd9IHJlcGxhY2VtZW50IFRoZSBtYXRjaCByZXBsYWNlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBtb2RpZmllZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmVwbGFjZSgnSGkgRnJlZCcsICdGcmVkJywgJ0Jhcm5leScpO1xuICAgICAqIC8vID0+ICdIaSBCYXJuZXknXG4gICAgICovXG4gICAgZnVuY3Rpb24gcmVwbGFjZSgpIHtcbiAgICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICAgIHN0cmluZyA9IHRvU3RyaW5nKGFyZ3NbMF0pO1xuXG4gICAgICByZXR1cm4gYXJncy5sZW5ndGggPCAzID8gc3RyaW5nIDogc3RyaW5nLnJlcGxhY2UoYXJnc1sxXSwgYXJnc1syXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAgICAgKiBbc25ha2UgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU25ha2VfY2FzZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzbmFrZSBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc25ha2VDYXNlKCdGb28gQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnZm9vQmFyJyk7XG4gICAgICogLy8gPT4gJ2Zvb19iYXInXG4gICAgICpcbiAgICAgKiBfLnNuYWtlQ2FzZSgnLS1GT08tQkFSLS0nKTtcbiAgICAgKiAvLyA9PiAnZm9vX2JhcidcbiAgICAgKi9cbiAgICB2YXIgc25ha2VDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJ18nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGJ5IGBzZXBhcmF0b3JgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGJhc2VkIG9uXG4gICAgICogW2BTdHJpbmcjc3BsaXRgXShodHRwczovL21kbi5pby9TdHJpbmcvc3BsaXQpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIHNwbGl0LlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gc2VwYXJhdG9yIFRoZSBzZXBhcmF0b3IgcGF0dGVybiB0byBzcGxpdCBieS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xpbWl0XSBUaGUgbGVuZ3RoIHRvIHRydW5jYXRlIHJlc3VsdHMgdG8uXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzdHJpbmcgc2VnbWVudHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3BsaXQoJ2EtYi1jJywgJy0nLCAyKTtcbiAgICAgKiAvLyA9PiBbJ2EnLCAnYiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3BsaXQoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KSB7XG4gICAgICBpZiAobGltaXQgJiYgdHlwZW9mIGxpbWl0ICE9ICdudW1iZXInICYmIGlzSXRlcmF0ZWVDYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCkpIHtcbiAgICAgICAgc2VwYXJhdG9yID0gbGltaXQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBsaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfQVJSQVlfTEVOR1RIIDogbGltaXQgPj4+IDA7XG4gICAgICBpZiAoIWxpbWl0KSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChcbiAgICAgICAgICAgIHR5cGVvZiBzZXBhcmF0b3IgPT0gJ3N0cmluZycgfHxcbiAgICAgICAgICAgIChzZXBhcmF0b3IgIT0gbnVsbCAmJiAhaXNSZWdFeHAoc2VwYXJhdG9yKSlcbiAgICAgICAgICApKSB7XG4gICAgICAgIHNlcGFyYXRvciA9IGJhc2VUb1N0cmluZyhzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoIXNlcGFyYXRvciAmJiBoYXNVbmljb2RlKHN0cmluZykpIHtcbiAgICAgICAgICByZXR1cm4gY2FzdFNsaWNlKHN0cmluZ1RvQXJyYXkoc3RyaW5nKSwgMCwgbGltaXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLnNwbGl0KHNlcGFyYXRvciwgbGltaXQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gICAgICogW3N0YXJ0IGNhc2VdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xldHRlcl9jYXNlI1N0eWxpc3RpY19vcl9zcGVjaWFsaXNlZF91c2FnZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzdGFydCBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3RhcnRDYXNlKCctLWZvby1iYXItLScpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ2Zvb0JhcicpO1xuICAgICAqIC8vID0+ICdGb28gQmFyJ1xuICAgICAqXG4gICAgICogXy5zdGFydENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gICAgICogLy8gPT4gJ0ZPTyBCQVInXG4gICAgICovXG4gICAgdmFyIHN0YXJ0Q2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICcgJyA6ICcnKSArIHVwcGVyRmlyc3Qod29yZCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYHN0cmluZ2Agc3RhcnRzIHdpdGggdGhlIGdpdmVuIHRhcmdldCBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldF0gVGhlIHN0cmluZyB0byBzZWFyY2ggZm9yLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcG9zaXRpb249MF0gVGhlIHBvc2l0aW9uIHRvIHNlYXJjaCBmcm9tLlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgc3RyaW5nYCBzdGFydHMgd2l0aCBgdGFyZ2V0YCxcbiAgICAgKiAgZWxzZSBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdhJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogXy5zdGFydHNXaXRoKCdhYmMnLCAnYicpO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICpcbiAgICAgKiBfLnN0YXJ0c1dpdGgoJ2FiYycsICdiJywgMSk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc3RyaW5nLCB0YXJnZXQsIHBvc2l0aW9uKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgcG9zaXRpb24gPSBwb3NpdGlvbiA9PSBudWxsXG4gICAgICAgID8gMFxuICAgICAgICA6IGJhc2VDbGFtcCh0b0ludGVnZXIocG9zaXRpb24pLCAwLCBzdHJpbmcubGVuZ3RoKTtcblxuICAgICAgdGFyZ2V0ID0gYmFzZVRvU3RyaW5nKHRhcmdldCk7XG4gICAgICByZXR1cm4gc3RyaW5nLnNsaWNlKHBvc2l0aW9uLCBwb3NpdGlvbiArIHRhcmdldC5sZW5ndGgpID09IHRhcmdldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24gdGhhdCBjYW4gaW50ZXJwb2xhdGUgZGF0YSBwcm9wZXJ0aWVzXG4gICAgICogaW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlcnMsIEhUTUwtZXNjYXBlIGludGVycG9sYXRlZCBkYXRhIHByb3BlcnRpZXMgaW5cbiAgICAgKiBcImVzY2FwZVwiIGRlbGltaXRlcnMsIGFuZCBleGVjdXRlIEphdmFTY3JpcHQgaW4gXCJldmFsdWF0ZVwiIGRlbGltaXRlcnMuIERhdGFcbiAgICAgKiBwcm9wZXJ0aWVzIG1heSBiZSBhY2Nlc3NlZCBhcyBmcmVlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGUuIElmIGEgc2V0dGluZ1xuICAgICAqIG9iamVjdCBpcyBnaXZlbiwgaXQgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIGBfLnRlbXBsYXRlU2V0dGluZ3NgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBJbiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQgYF8udGVtcGxhdGVgIHV0aWxpemVzXG4gICAgICogW3NvdXJjZVVSTHNdKGh0dHA6Ly93d3cuaHRtbDVyb2Nrcy5jb20vZW4vdHV0b3JpYWxzL2RldmVsb3BlcnRvb2xzL3NvdXJjZW1hcHMvI3RvYy1zb3VyY2V1cmwpXG4gICAgICogZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gICAgICpcbiAgICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiBwcmVjb21waWxpbmcgdGVtcGxhdGVzIHNlZVxuICAgICAqIFtsb2Rhc2gncyBjdXN0b20gYnVpbGRzIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vbG9kYXNoLmNvbS9jdXN0b20tYnVpbGRzKS5cbiAgICAgKlxuICAgICAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIENocm9tZSBleHRlbnNpb24gc2FuZGJveGVzIHNlZVxuICAgICAqIFtDaHJvbWUncyBleHRlbnNpb25zIGRvY3VtZW50YXRpb25dKGh0dHBzOi8vZGV2ZWxvcGVyLmNocm9tZS5jb20vZXh0ZW5zaW9ucy9zYW5kYm94aW5nRXZhbCkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSB0ZW1wbGF0ZSBzdHJpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB9IFtvcHRpb25zLmVzY2FwZT1fLnRlbXBsYXRlU2V0dGluZ3MuZXNjYXBlXVxuICAgICAqICBUaGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmV2YWx1YXRlXVxuICAgICAqICBUaGUgXCJldmFsdWF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuaW1wb3J0cz1fLnRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0c11cbiAgICAgKiAgQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBmcmVlIHZhcmlhYmxlcy5cbiAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuaW50ZXJwb2xhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlXVxuICAgICAqICBUaGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc291cmNlVVJMPSdsb2Rhc2gudGVtcGxhdGVTb3VyY2VzW25dJ11cbiAgICAgKiAgVGhlIHNvdXJjZVVSTCBvZiB0aGUgY29tcGlsZWQgdGVtcGxhdGUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhcmlhYmxlPSdvYmonXVxuICAgICAqICBUaGUgZGF0YSBvYmplY3QgdmFyaWFibGUgbmFtZS5cbiAgICAgKiBAcGFyYW0tIHtPYmplY3R9IFtndWFyZF0gRW5hYmxlcyB1c2UgYXMgYW4gaXRlcmF0ZWUgZm9yIG1ldGhvZHMgbGlrZSBgXy5tYXBgLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ2ZyZWQnIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBmcmVkISdcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgSFRNTCBcImVzY2FwZVwiIGRlbGltaXRlciB0byBlc2NhcGUgZGF0YSBwcm9wZXJ0eSB2YWx1ZXMuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3ZhbHVlJzogJzxzY3JpcHQ+JyB9KTtcbiAgICAgKiAvLyA9PiAnPGI+Jmx0O3NjcmlwdCZndDs8L2I+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyIHRvIGV4ZWN1dGUgSmF2YVNjcmlwdCBhbmQgZ2VuZXJhdGUgSFRNTC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JSBfLmZvckVhY2godXNlcnMsIGZ1bmN0aW9uKHVzZXIpIHsgJT48bGk+PCUtIHVzZXIgJT48L2xpPjwlIH0pOyAlPicpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICAgICAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJzwlIHByaW50KFwiaGVsbG8gXCIgKyB1c2VyKTsgJT4hJyk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcic6ICdiYXJuZXknIH0pO1xuICAgICAqIC8vID0+ICdoZWxsbyBiYXJuZXkhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBFUyB0ZW1wbGF0ZSBsaXRlcmFsIGRlbGltaXRlciBhcyBhbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVyLlxuICAgICAqIC8vIERpc2FibGUgc3VwcG9ydCBieSByZXBsYWNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8gJHsgdXNlciB9IScpO1xuICAgICAqIGNvbXBpbGVkKHsgJ3VzZXInOiAncGViYmxlcycgfSk7XG4gICAgICogLy8gPT4gJ2hlbGxvIHBlYmJsZXMhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIGJhY2tzbGFzaGVzIHRvIHRyZWF0IGRlbGltaXRlcnMgYXMgcGxhaW4gdGV4dC5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JT0gXCJcXFxcPCUtIHZhbHVlICVcXFxcPlwiICU+Jyk7XG4gICAgICogY29tcGlsZWQoeyAndmFsdWUnOiAnaWdub3JlZCcgfSk7XG4gICAgICogLy8gPT4gJzwlLSB2YWx1ZSAlPidcbiAgICAgKlxuICAgICAqIC8vIFVzZSB0aGUgYGltcG9ydHNgIG9wdGlvbiB0byBpbXBvcnQgYGpRdWVyeWAgYXMgYGpxYC5cbiAgICAgKiB2YXIgdGV4dCA9ICc8JSBqcS5lYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nO1xuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUodGV4dCwgeyAnaW1wb3J0cyc6IHsgJ2pxJzogalF1ZXJ5IH0gfSk7XG4gICAgICogY29tcGlsZWQoeyAndXNlcnMnOiBbJ2ZyZWQnLCAnYmFybmV5J10gfSk7XG4gICAgICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gICAgICpcbiAgICAgKiAvLyBVc2UgdGhlIGBzb3VyY2VVUkxgIG9wdGlvbiB0byBzcGVjaWZ5IGEgY3VzdG9tIHNvdXJjZVVSTCBmb3IgdGhlIHRlbXBsYXRlLlxuICAgICAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScsIHsgJ3NvdXJjZVVSTCc6ICcvYmFzaWMvZ3JlZXRpbmcuanN0JyB9KTtcbiAgICAgKiBjb21waWxlZChkYXRhKTtcbiAgICAgKiAvLyA9PiBGaW5kIHRoZSBzb3VyY2Ugb2YgXCJncmVldGluZy5qc3RcIiB1bmRlciB0aGUgU291cmNlcyB0YWIgb3IgUmVzb3VyY2VzIHBhbmVsIG9mIHRoZSB3ZWIgaW5zcGVjdG9yLlxuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICAgKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoaSA8JT0gZGF0YS51c2VyICU+IScsIHsgJ3ZhcmlhYmxlJzogJ2RhdGEnIH0pO1xuICAgICAqIGNvbXBpbGVkLnNvdXJjZTtcbiAgICAgKiAvLyA9PiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICogLy8gICB2YXIgX190LCBfX3AgPSAnJztcbiAgICAgKiAvLyAgIF9fcCArPSAnaGkgJyArICgoX190ID0gKCBkYXRhLnVzZXIgKSkgPT0gbnVsbCA/ICcnIDogX190KSArICchJztcbiAgICAgKiAvLyAgIHJldHVybiBfX3A7XG4gICAgICogLy8gfVxuICAgICAqXG4gICAgICogLy8gVXNlIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLlxuICAgICAqIF8udGVtcGxhdGVTZXR0aW5ncy5pbnRlcnBvbGF0ZSA9IC97eyhbXFxzXFxTXSs/KX19L2c7XG4gICAgICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnaGVsbG8ge3sgdXNlciB9fSEnKTtcbiAgICAgKiBjb21waWxlZCh7ICd1c2VyJzogJ211c3RhY2hlJyB9KTtcbiAgICAgKiAvLyA9PiAnaGVsbG8gbXVzdGFjaGUhJ1xuICAgICAqXG4gICAgICogLy8gVXNlIHRoZSBgc291cmNlYCBwcm9wZXJ0eSB0byBpbmxpbmUgY29tcGlsZWQgdGVtcGxhdGVzIGZvciBtZWFuaW5nZnVsXG4gICAgICogLy8gbGluZSBudW1iZXJzIGluIGVycm9yIG1lc3NhZ2VzIGFuZCBzdGFjayB0cmFjZXMuXG4gICAgICogZnMud3JpdGVGaWxlU3luYyhwYXRoLmpvaW4ocHJvY2Vzcy5jd2QoKSwgJ2pzdC5qcycpLCAnXFxcbiAgICAgKiAgIHZhciBKU1QgPSB7XFxcbiAgICAgKiAgICAgXCJtYWluXCI6ICcgKyBfLnRlbXBsYXRlKG1haW5UZXh0KS5zb3VyY2UgKyAnXFxcbiAgICAgKiAgIH07XFxcbiAgICAgKiAnKTtcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0ZW1wbGF0ZShzdHJpbmcsIG9wdGlvbnMsIGd1YXJkKSB7XG4gICAgICAvLyBCYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uXG4gICAgICAvLyAoaHR0cDovL2Vqb2huLm9yZy9ibG9nL2phdmFzY3JpcHQtbWljcm8tdGVtcGxhdGluZy8pXG4gICAgICAvLyBhbmQgTGF1cmEgRG9rdG9yb3ZhJ3MgZG9ULmpzIChodHRwczovL2dpdGh1Yi5jb20vb2xhZG8vZG9UKS5cbiAgICAgIHZhciBzZXR0aW5ncyA9IGxvZGFzaC50ZW1wbGF0ZVNldHRpbmdzO1xuXG4gICAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkpIHtcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBvcHRpb25zID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLCBzZXR0aW5ncywgY3VzdG9tRGVmYXVsdHNBc3NpZ25Jbik7XG5cbiAgICAgIHZhciBpbXBvcnRzID0gYXNzaWduSW5XaXRoKHt9LCBvcHRpb25zLmltcG9ydHMsIHNldHRpbmdzLmltcG9ydHMsIGN1c3RvbURlZmF1bHRzQXNzaWduSW4pLFxuICAgICAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgICAgICBpbXBvcnRzVmFsdWVzID0gYmFzZVZhbHVlcyhpbXBvcnRzLCBpbXBvcnRzS2V5cyk7XG5cbiAgICAgIHZhciBpc0VzY2FwaW5nLFxuICAgICAgICAgIGlzRXZhbHVhdGluZyxcbiAgICAgICAgICBpbmRleCA9IDAsXG4gICAgICAgICAgaW50ZXJwb2xhdGUgPSBvcHRpb25zLmludGVycG9sYXRlIHx8IHJlTm9NYXRjaCxcbiAgICAgICAgICBzb3VyY2UgPSBcIl9fcCArPSAnXCI7XG5cbiAgICAgIC8vIENvbXBpbGUgdGhlIHJlZ2V4cCB0byBtYXRjaCBlYWNoIGRlbGltaXRlci5cbiAgICAgIHZhciByZURlbGltaXRlcnMgPSBSZWdFeHAoXG4gICAgICAgIChvcHRpb25zLmVzY2FwZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgICAgIGludGVycG9sYXRlLnNvdXJjZSArICd8JyArXG4gICAgICAgIChpbnRlcnBvbGF0ZSA9PT0gcmVJbnRlcnBvbGF0ZSA/IHJlRXNUZW1wbGF0ZSA6IHJlTm9NYXRjaCkuc291cmNlICsgJ3wnICtcbiAgICAgICAgKG9wdGlvbnMuZXZhbHVhdGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCQnXG4gICAgICAsICdnJyk7XG5cbiAgICAgIC8vIFVzZSBhIHNvdXJjZVVSTCBmb3IgZWFzaWVyIGRlYnVnZ2luZy5cbiAgICAgIC8vIFRoZSBzb3VyY2VVUkwgZ2V0cyBpbmplY3RlZCBpbnRvIHRoZSBzb3VyY2UgdGhhdCdzIGV2YWwtZWQsIHNvIGJlIGNhcmVmdWxcbiAgICAgIC8vIHRvIG5vcm1hbGl6ZSBhbGwga2luZHMgb2Ygd2hpdGVzcGFjZSwgc28gZS5nLiBuZXdsaW5lcyAoYW5kIHVuaWNvZGUgdmVyc2lvbnMgb2YgaXQpIGNhbid0IHNuZWFrIGluXG4gICAgICAvLyBhbmQgZXNjYXBlIHRoZSBjb21tZW50LCB0aHVzIGluamVjdGluZyBjb2RlIHRoYXQgZ2V0cyBldmFsZWQuXG4gICAgICB2YXIgc291cmNlVVJMID0gJy8vIyBzb3VyY2VVUkw9JyArXG4gICAgICAgIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9wdGlvbnMsICdzb3VyY2VVUkwnKVxuICAgICAgICAgID8gKG9wdGlvbnMuc291cmNlVVJMICsgJycpLnJlcGxhY2UoL1xccy9nLCAnICcpXG4gICAgICAgICAgOiAoJ2xvZGFzaC50ZW1wbGF0ZVNvdXJjZXNbJyArICgrK3RlbXBsYXRlQ291bnRlcikgKyAnXScpXG4gICAgICAgICkgKyAnXFxuJztcblxuICAgICAgc3RyaW5nLnJlcGxhY2UocmVEZWxpbWl0ZXJzLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlVmFsdWUsIGludGVycG9sYXRlVmFsdWUsIGVzVGVtcGxhdGVWYWx1ZSwgZXZhbHVhdGVWYWx1ZSwgb2Zmc2V0KSB7XG4gICAgICAgIGludGVycG9sYXRlVmFsdWUgfHwgKGludGVycG9sYXRlVmFsdWUgPSBlc1RlbXBsYXRlVmFsdWUpO1xuXG4gICAgICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2FuJ3QgYmUgaW5jbHVkZWQgaW4gc3RyaW5nIGxpdGVyYWxzLlxuICAgICAgICBzb3VyY2UgKz0gc3RyaW5nLnNsaWNlKGluZGV4LCBvZmZzZXQpLnJlcGxhY2UocmVVbmVzY2FwZWRTdHJpbmcsIGVzY2FwZVN0cmluZ0NoYXIpO1xuXG4gICAgICAgIC8vIFJlcGxhY2UgZGVsaW1pdGVycyB3aXRoIHNuaXBwZXRzLlxuICAgICAgICBpZiAoZXNjYXBlVmFsdWUpIHtcbiAgICAgICAgICBpc0VzY2FwaW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG5fX2UoXCIgKyBlc2NhcGVWYWx1ZSArIFwiKSArXFxuJ1wiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldmFsdWF0ZVZhbHVlKSB7XG4gICAgICAgICAgaXNFdmFsdWF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGVWYWx1ZSArIFwiO1xcbl9fcCArPSAnXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGludGVycG9sYXRlVmFsdWUpIHtcbiAgICAgICAgICBzb3VyY2UgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIGludGVycG9sYXRlVmFsdWUgKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIjtcbiAgICAgICAgfVxuICAgICAgICBpbmRleCA9IG9mZnNldCArIG1hdGNoLmxlbmd0aDtcblxuICAgICAgICAvLyBUaGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIHByb2R1Y3RzIG5lZWRzIGBtYXRjaGAgcmV0dXJuZWQgaW5cbiAgICAgICAgLy8gb3JkZXIgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBgb2Zmc2V0YCB2YWx1ZS5cbiAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgfSk7XG5cbiAgICAgIHNvdXJjZSArPSBcIic7XFxuXCI7XG5cbiAgICAgIC8vIElmIGB2YXJpYWJsZWAgaXMgbm90IHNwZWNpZmllZCB3cmFwIGEgd2l0aC1zdGF0ZW1lbnQgYXJvdW5kIHRoZSBnZW5lcmF0ZWRcbiAgICAgIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbi5cbiAgICAgIHZhciB2YXJpYWJsZSA9IGhhc093blByb3BlcnR5LmNhbGwob3B0aW9ucywgJ3ZhcmlhYmxlJykgJiYgb3B0aW9ucy52YXJpYWJsZTtcbiAgICAgIGlmICghdmFyaWFibGUpIHtcbiAgICAgICAgc291cmNlID0gJ3dpdGggKG9iaikge1xcbicgKyBzb3VyY2UgKyAnXFxufVxcbic7XG4gICAgICB9XG4gICAgICAvLyBDbGVhbnVwIGNvZGUgYnkgc3RyaXBwaW5nIGVtcHR5IHN0cmluZ3MuXG4gICAgICBzb3VyY2UgPSAoaXNFdmFsdWF0aW5nID8gc291cmNlLnJlcGxhY2UocmVFbXB0eVN0cmluZ0xlYWRpbmcsICcnKSA6IHNvdXJjZSlcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAgICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ1RyYWlsaW5nLCAnJDE7Jyk7XG5cbiAgICAgIC8vIEZyYW1lIGNvZGUgYXMgdGhlIGZ1bmN0aW9uIGJvZHkuXG4gICAgICBzb3VyY2UgPSAnZnVuY3Rpb24oJyArICh2YXJpYWJsZSB8fCAnb2JqJykgKyAnKSB7XFxuJyArXG4gICAgICAgICh2YXJpYWJsZVxuICAgICAgICAgID8gJydcbiAgICAgICAgICA6ICdvYmogfHwgKG9iaiA9IHt9KTtcXG4nXG4gICAgICAgICkgK1xuICAgICAgICBcInZhciBfX3QsIF9fcCA9ICcnXCIgK1xuICAgICAgICAoaXNFc2NhcGluZ1xuICAgICAgICAgICA/ICcsIF9fZSA9IF8uZXNjYXBlJ1xuICAgICAgICAgICA6ICcnXG4gICAgICAgICkgK1xuICAgICAgICAoaXNFdmFsdWF0aW5nXG4gICAgICAgICAgPyAnLCBfX2ogPSBBcnJheS5wcm90b3R5cGUuam9pbjtcXG4nICtcbiAgICAgICAgICAgIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCJcbiAgICAgICAgICA6ICc7XFxuJ1xuICAgICAgICApICtcbiAgICAgICAgc291cmNlICtcbiAgICAgICAgJ3JldHVybiBfX3BcXG59JztcblxuICAgICAgdmFyIHJlc3VsdCA9IGF0dGVtcHQoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBGdW5jdGlvbihpbXBvcnRzS2V5cywgc291cmNlVVJMICsgJ3JldHVybiAnICsgc291cmNlKVxuICAgICAgICAgIC5hcHBseSh1bmRlZmluZWQsIGltcG9ydHNWYWx1ZXMpO1xuICAgICAgfSk7XG5cbiAgICAgIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIGJ5IGl0cyBgdG9TdHJpbmdgIG1ldGhvZCBvclxuICAgICAgLy8gdGhlIGBzb3VyY2VgIHByb3BlcnR5IGFzIGEgY29udmVuaWVuY2UgZm9yIGlubGluaW5nIGNvbXBpbGVkIHRlbXBsYXRlcy5cbiAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICBpZiAoaXNFcnJvcihyZXN1bHQpKSB7XG4gICAgICAgIHRocm93IHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIGxvd2VyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b0xvd2VyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9Mb3dlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgbG93ZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvTG93ZXIoJy0tRm9vLUJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tZm9vLWJhci0tJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnZm9vYmFyJ1xuICAgICAqXG4gICAgICogXy50b0xvd2VyKCdfX0ZPT19CQVJfXycpO1xuICAgICAqIC8vID0+ICdfX2Zvb19iYXJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b0xvd2VyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvTG93ZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYHN0cmluZ2AsIGFzIGEgd2hvbGUsIHRvIHVwcGVyIGNhc2UganVzdCBsaWtlXG4gICAgICogW1N0cmluZyN0b1VwcGVyQ2FzZV0oaHR0cHM6Ly9tZG4uaW8vdG9VcHBlckNhc2UpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdXBwZXIgY2FzZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRvVXBwZXIoJy0tZm9vLWJhci0tJyk7XG4gICAgICogLy8gPT4gJy0tRk9PLUJBUi0tJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PQkFSJ1xuICAgICAqXG4gICAgICogXy50b1VwcGVyKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdfX0ZPT19CQVJfXydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1VwcGVyKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdG9TdHJpbmcodmFsdWUpLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBsZWFkaW5nIGFuZCB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8udHJpbSgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYydcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnICBmb28gICcsICcgIGJhciAgJ10sIF8udHJpbSk7XG4gICAgICogLy8gPT4gWydmb28nLCAnYmFyJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltKHN0cmluZywgY2hhcnMsIGd1YXJkKSB7XG4gICAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICAgICAgaWYgKHN0cmluZyAmJiAoZ3VhcmQgfHwgY2hhcnMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZy5yZXBsYWNlKHJlVHJpbSwgJycpO1xuICAgICAgfVxuICAgICAgaWYgKCFzdHJpbmcgfHwgIShjaGFycyA9IGJhc2VUb1N0cmluZyhjaGFycykpKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgICB9XG4gICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKSxcbiAgICAgICAgICBjaHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShjaGFycyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgY2hyU3ltYm9scyksXG4gICAgICAgICAgZW5kID0gY2hhcnNFbmRJbmRleChzdHJTeW1ib2xzLCBjaHJTeW1ib2xzKSArIDE7XG5cbiAgICAgIHJldHVybiBjYXN0U2xpY2Uoc3RyU3ltYm9scywgc3RhcnQsIGVuZCkuam9pbignJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0cmFpbGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltRW5kKCcgIGFiYyAgJyk7XG4gICAgICogLy8gPT4gJyAgYWJjJ1xuICAgICAqXG4gICAgICogXy50cmltRW5kKCctXy1hYmMtXy0nLCAnXy0nKTtcbiAgICAgKiAvLyA9PiAnLV8tYWJjJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRyaW1FbmQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltRW5kLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoIXN0cmluZyB8fCAhKGNoYXJzID0gYmFzZVRvU3RyaW5nKGNoYXJzKSkpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICAgIH1cbiAgICAgIHZhciBzdHJTeW1ib2xzID0gc3RyaW5nVG9BcnJheShzdHJpbmcpLFxuICAgICAgICAgIGVuZCA9IGNoYXJzRW5kSW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpICsgMTtcblxuICAgICAgcmV0dXJuIGNhc3RTbGljZShzdHJTeW1ib2xzLCAwLCBlbmQpLmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgbGVhZGluZyB3aGl0ZXNwYWNlIG9yIHNwZWNpZmllZCBjaGFyYWN0ZXJzIGZyb20gYHN0cmluZ2AuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJpbS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW2NoYXJzPXdoaXRlc3BhY2VdIFRoZSBjaGFyYWN0ZXJzIHRvIHRyaW0uXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB0cmltbWVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cmltU3RhcnQoJyAgYWJjICAnKTtcbiAgICAgKiAvLyA9PiAnYWJjICAnXG4gICAgICpcbiAgICAgKiBfLnRyaW1TdGFydCgnLV8tYWJjLV8tJywgJ18tJyk7XG4gICAgICogLy8gPT4gJ2FiYy1fLSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cmltU3RhcnQoc3RyaW5nLCBjaGFycywgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBpZiAoc3RyaW5nICYmIChndWFyZCB8fCBjaGFycyA9PT0gdW5kZWZpbmVkKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nLnJlcGxhY2UocmVUcmltU3RhcnQsICcnKTtcbiAgICAgIH1cbiAgICAgIGlmICghc3RyaW5nIHx8ICEoY2hhcnMgPSBiYXNlVG9TdHJpbmcoY2hhcnMpKSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIHN0clN5bWJvbHMgPSBzdHJpbmdUb0FycmF5KHN0cmluZyksXG4gICAgICAgICAgc3RhcnQgPSBjaGFyc1N0YXJ0SW5kZXgoc3RyU3ltYm9scywgc3RyaW5nVG9BcnJheShjaGFycykpO1xuXG4gICAgICByZXR1cm4gY2FzdFNsaWNlKHN0clN5bWJvbHMsIHN0YXJ0KS5qb2luKCcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcnVuY2F0ZXMgYHN0cmluZ2AgaWYgaXQncyBsb25nZXIgdGhhbiB0aGUgZ2l2ZW4gbWF4aW11bSBzdHJpbmcgbGVuZ3RoLlxuICAgICAqIFRoZSBsYXN0IGNoYXJhY3RlcnMgb2YgdGhlIHRydW5jYXRlZCBzdHJpbmcgYXJlIHJlcGxhY2VkIHdpdGggdGhlIG9taXNzaW9uXG4gICAgICogc3RyaW5nIHdoaWNoIGRlZmF1bHRzIHRvIFwiLi4uXCIuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdHJ1bmNhdGUuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmxlbmd0aD0zMF0gVGhlIG1heGltdW0gc3RyaW5nIGxlbmd0aC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMub21pc3Npb249Jy4uLiddIFRoZSBzdHJpbmcgdG8gaW5kaWNhdGUgdGV4dCBpcyBvbWl0dGVkLlxuICAgICAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW29wdGlvbnMuc2VwYXJhdG9yXSBUaGUgc2VwYXJhdG9yIHBhdHRlcm4gdG8gdHJ1bmNhdGUgdG8uXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdHJ1bmNhdGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycpO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm8uLi4nXG4gICAgICpcbiAgICAgKiBfLnRydW5jYXRlKCdoaS1kaWRkbHktaG8gdGhlcmUsIG5laWdoYm9yaW5vJywge1xuICAgICAqICAgJ2xlbmd0aCc6IDI0LFxuICAgICAqICAgJ3NlcGFyYXRvcic6ICcgJ1xuICAgICAqIH0pO1xuICAgICAqIC8vID0+ICdoaS1kaWRkbHktaG8gdGhlcmUsLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdsZW5ndGgnOiAyNCxcbiAgICAgKiAgICdzZXBhcmF0b3InOiAvLD8gKy9cbiAgICAgKiB9KTtcbiAgICAgKiAvLyA9PiAnaGktZGlkZGx5LWhvIHRoZXJlLi4uJ1xuICAgICAqXG4gICAgICogXy50cnVuY2F0ZSgnaGktZGlkZGx5LWhvIHRoZXJlLCBuZWlnaGJvcmlubycsIHtcbiAgICAgKiAgICdvbWlzc2lvbic6ICcgWy4uLl0nXG4gICAgICogfSk7XG4gICAgICogLy8gPT4gJ2hpLWRpZGRseS1obyB0aGVyZSwgbmVpZyBbLi4uXSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0cnVuY2F0ZShzdHJpbmcsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBsZW5ndGggPSBERUZBVUxUX1RSVU5DX0xFTkdUSCxcbiAgICAgICAgICBvbWlzc2lvbiA9IERFRkFVTFRfVFJVTkNfT01JU1NJT047XG5cbiAgICAgIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgICAgICB2YXIgc2VwYXJhdG9yID0gJ3NlcGFyYXRvcicgaW4gb3B0aW9ucyA/IG9wdGlvbnMuc2VwYXJhdG9yIDogc2VwYXJhdG9yO1xuICAgICAgICBsZW5ndGggPSAnbGVuZ3RoJyBpbiBvcHRpb25zID8gdG9JbnRlZ2VyKG9wdGlvbnMubGVuZ3RoKSA6IGxlbmd0aDtcbiAgICAgICAgb21pc3Npb24gPSAnb21pc3Npb24nIGluIG9wdGlvbnMgPyBiYXNlVG9TdHJpbmcob3B0aW9ucy5vbWlzc2lvbikgOiBvbWlzc2lvbjtcbiAgICAgIH1cbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICAgIHZhciBzdHJMZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuICAgICAgaWYgKGhhc1VuaWNvZGUoc3RyaW5nKSkge1xuICAgICAgICB2YXIgc3RyU3ltYm9scyA9IHN0cmluZ1RvQXJyYXkoc3RyaW5nKTtcbiAgICAgICAgc3RyTGVuZ3RoID0gc3RyU3ltYm9scy5sZW5ndGg7XG4gICAgICB9XG4gICAgICBpZiAobGVuZ3RoID49IHN0ckxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nO1xuICAgICAgfVxuICAgICAgdmFyIGVuZCA9IGxlbmd0aCAtIHN0cmluZ1NpemUob21pc3Npb24pO1xuICAgICAgaWYgKGVuZCA8IDEpIHtcbiAgICAgICAgcmV0dXJuIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgdmFyIHJlc3VsdCA9IHN0clN5bWJvbHNcbiAgICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMCwgZW5kKS5qb2luKCcnKVxuICAgICAgICA6IHN0cmluZy5zbGljZSgwLCBlbmQpO1xuXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdCArIG9taXNzaW9uO1xuICAgICAgfVxuICAgICAgaWYgKHN0clN5bWJvbHMpIHtcbiAgICAgICAgZW5kICs9IChyZXN1bHQubGVuZ3RoIC0gZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1JlZ0V4cChzZXBhcmF0b3IpKSB7XG4gICAgICAgIGlmIChzdHJpbmcuc2xpY2UoZW5kKS5zZWFyY2goc2VwYXJhdG9yKSkge1xuICAgICAgICAgIHZhciBtYXRjaCxcbiAgICAgICAgICAgICAgc3Vic3RyaW5nID0gcmVzdWx0O1xuXG4gICAgICAgICAgaWYgKCFzZXBhcmF0b3IuZ2xvYmFsKSB7XG4gICAgICAgICAgICBzZXBhcmF0b3IgPSBSZWdFeHAoc2VwYXJhdG9yLnNvdXJjZSwgdG9TdHJpbmcocmVGbGFncy5leGVjKHNlcGFyYXRvcikpICsgJ2cnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgc2VwYXJhdG9yLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHNlcGFyYXRvci5leGVjKHN1YnN0cmluZykpKSB7XG4gICAgICAgICAgICB2YXIgbmV3RW5kID0gbWF0Y2guaW5kZXg7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBuZXdFbmQgPT09IHVuZGVmaW5lZCA/IGVuZCA6IG5ld0VuZCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc3RyaW5nLmluZGV4T2YoYmFzZVRvU3RyaW5nKHNlcGFyYXRvciksIGVuZCkgIT0gZW5kKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHJlc3VsdC5sYXN0SW5kZXhPZihzZXBhcmF0b3IpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5zbGljZSgwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQgKyBvbWlzc2lvbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW52ZXJzZSBvZiBgXy5lc2NhcGVgOyB0aGlzIG1ldGhvZCBjb252ZXJ0cyB0aGUgSFRNTCBlbnRpdGllc1xuICAgICAqIGAmYW1wO2AsIGAmbHQ7YCwgYCZndDtgLCBgJnF1b3Q7YCwgYW5kIGAmIzM5O2AgaW4gYHN0cmluZ2AgdG9cbiAgICAgKiB0aGVpciBjb3JyZXNwb25kaW5nIGNoYXJhY3RlcnMuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogTm8gb3RoZXIgSFRNTCBlbnRpdGllcyBhcmUgdW5lc2NhcGVkLiBUbyB1bmVzY2FwZSBhZGRpdGlvbmFsXG4gICAgICogSFRNTCBlbnRpdGllcyB1c2UgYSB0aGlyZC1wYXJ0eSBsaWJyYXJ5IGxpa2UgW19oZV9dKGh0dHBzOi8vbXRocy5iZS9oZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMC42LjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gdW5lc2NhcGUuXG4gICAgICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgdW5lc2NhcGVkIHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmYW1wOyBwZWJibGVzJyk7XG4gICAgICogLy8gPT4gJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJ1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIHVuZXNjYXBlKHN0cmluZykge1xuICAgICAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgICAgIHJldHVybiAoc3RyaW5nICYmIHJlSGFzRXNjYXBlZEh0bWwudGVzdChzdHJpbmcpKVxuICAgICAgICA/IHN0cmluZy5yZXBsYWNlKHJlRXNjYXBlZEh0bWwsIHVuZXNjYXBlSHRtbENoYXIpXG4gICAgICAgIDogc3RyaW5nO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGBzdHJpbmdgLCBhcyBzcGFjZSBzZXBhcmF0ZWQgd29yZHMsIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSB1cHBlciBjYXNlZCBzdHJpbmcuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCctLWZvby1iYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdmb29CYXInKTtcbiAgICAgKiAvLyA9PiAnRk9PIEJBUidcbiAgICAgKlxuICAgICAqIF8udXBwZXJDYXNlKCdfX2Zvb19iYXJfXycpO1xuICAgICAqIC8vID0+ICdGT08gQkFSJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgICAgIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyAnICcgOiAnJykgKyB3b3JkLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgU3RyaW5nXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAgICAgKiAvLyA9PiAnRnJlZCdcbiAgICAgKlxuICAgICAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICAgICAqIC8vID0+ICdGUkVEJ1xuICAgICAqL1xuICAgIHZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG4gICAgLyoqXG4gICAgICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFN0cmluZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gICAgICogQHBhcmFtIHtSZWdFeHB8c3RyaW5nfSBbcGF0dGVybl0gVGhlIHBhdHRlcm4gdG8gbWF0Y2ggd29yZHMuXG4gICAgICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICAgICAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAncGViYmxlcyddXG4gICAgICpcbiAgICAgKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gICAgICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICcmJywgJ3BlYmJsZXMnXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gICAgICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gICAgICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBoYXNVbmljb2RlV29yZChzdHJpbmcpID8gdW5pY29kZVdvcmRzKHN0cmluZykgOiBhc2NpaVdvcmRzKHN0cmluZyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gICAgICogb2JqZWN0LiBBbnkgYWRkaXRpb25hbCBhcmd1bWVudHMgYXJlIHByb3ZpZGVkIHRvIGBmdW5jYCB3aGVuIGl0J3MgaW52b2tlZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXR0ZW1wdC5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSBgZnVuY2Agd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gICAgICogdmFyIGVsZW1lbnRzID0gXy5hdHRlbXB0KGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gICAgICogICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICogfSwgJz5fPicpO1xuICAgICAqXG4gICAgICogaWYgKF8uaXNFcnJvcihlbGVtZW50cykpIHtcbiAgICAgKiAgIGVsZW1lbnRzID0gW107XG4gICAgICogfVxuICAgICAqL1xuICAgIHZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHVuZGVmaW5lZCwgYXJncyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBpc0Vycm9yKGUpID8gZSA6IG5ldyBFcnJvcihlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEJpbmRzIG1ldGhvZHMgb2YgYW4gb2JqZWN0IHRvIHRoZSBvYmplY3QgaXRzZWxmLCBvdmVyd3JpdGluZyB0aGUgZXhpc3RpbmdcbiAgICAgKiBtZXRob2QuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgZG9lc24ndCBzZXQgdGhlIFwibGVuZ3RoXCIgcHJvcGVydHkgb2YgYm91bmQgZnVuY3Rpb25zLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gYmluZCBhbmQgYXNzaWduIHRoZSBib3VuZCBtZXRob2RzIHRvLlxuICAgICAqIEBwYXJhbSB7Li4uKHN0cmluZ3xzdHJpbmdbXSl9IG1ldGhvZE5hbWVzIFRoZSBvYmplY3QgbWV0aG9kIG5hbWVzIHRvIGJpbmQuXG4gICAgICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIHZpZXcgPSB7XG4gICAgICogICAnbGFiZWwnOiAnZG9jcycsXG4gICAgICogICAnY2xpY2snOiBmdW5jdGlvbigpIHtcbiAgICAgKiAgICAgY29uc29sZS5sb2coJ2NsaWNrZWQgJyArIHRoaXMubGFiZWwpO1xuICAgICAqICAgfVxuICAgICAqIH07XG4gICAgICpcbiAgICAgKiBfLmJpbmRBbGwodmlldywgWydjbGljayddKTtcbiAgICAgKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdmlldy5jbGljayk7XG4gICAgICogLy8gPT4gTG9ncyAnY2xpY2tlZCBkb2NzJyB3aGVuIGNsaWNrZWQuXG4gICAgICovXG4gICAgdmFyIGJpbmRBbGwgPSBmbGF0UmVzdChmdW5jdGlvbihvYmplY3QsIG1ldGhvZE5hbWVzKSB7XG4gICAgICBhcnJheUVhY2gobWV0aG9kTmFtZXMsIGZ1bmN0aW9uKGtleSkge1xuICAgICAgICBrZXkgPSB0b0tleShrZXkpO1xuICAgICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIGJpbmQob2JqZWN0W2tleV0sIG9iamVjdCkpO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaXRlcmF0ZXMgb3ZlciBgcGFpcnNgIGFuZCBpbnZva2VzIHRoZSBjb3JyZXNwb25kaW5nXG4gICAgICogZnVuY3Rpb24gb2YgdGhlIGZpcnN0IHByZWRpY2F0ZSB0byByZXR1cm4gdHJ1dGh5LiBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uXG4gICAgICogcGFpcnMgYXJlIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgYW5kIGFyZ3VtZW50cyBvZiB0aGUgY3JlYXRlZFxuICAgICAqIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBwYWlycyBUaGUgcHJlZGljYXRlLWZ1bmN0aW9uIHBhaXJzLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIGZ1bmMgPSBfLmNvbmQoW1xuICAgICAqICAgW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgICAgICAgICAgIF8uY29uc3RhbnQoJ21hdGNoZXMgQScpXSxcbiAgICAgKiAgIFtfLmNvbmZvcm1zKHsgJ2InOiBfLmlzTnVtYmVyIH0pLCBfLmNvbnN0YW50KCdtYXRjaGVzIEInKV0sXG4gICAgICogICBbXy5zdHViVHJ1ZSwgICAgICAgICAgICAgICAgICAgICAgXy5jb25zdGFudCgnbm8gbWF0Y2gnKV1cbiAgICAgKiBdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoeyAnYSc6IDEsICdiJzogMiB9KTtcbiAgICAgKiAvLyA9PiAnbWF0Y2hlcyBBJ1xuICAgICAqXG4gICAgICogZnVuYyh7ICdhJzogMCwgJ2InOiAxIH0pO1xuICAgICAqIC8vID0+ICdtYXRjaGVzIEInXG4gICAgICpcbiAgICAgKiBmdW5jKHsgJ2EnOiAnMScsICdiJzogJzInIH0pO1xuICAgICAqIC8vID0+ICdubyBtYXRjaCdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBjb25kKHBhaXJzKSB7XG4gICAgICB2YXIgbGVuZ3RoID0gcGFpcnMgPT0gbnVsbCA/IDAgOiBwYWlycy5sZW5ndGgsXG4gICAgICAgICAgdG9JdGVyYXRlZSA9IGdldEl0ZXJhdGVlKCk7XG5cbiAgICAgIHBhaXJzID0gIWxlbmd0aCA/IFtdIDogYXJyYXlNYXAocGFpcnMsIGZ1bmN0aW9uKHBhaXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwYWlyWzFdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFt0b0l0ZXJhdGVlKHBhaXJbMF0pLCBwYWlyWzFdXTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24oYXJncykge1xuICAgICAgICB2YXIgaW5kZXggPSAtMTtcbiAgICAgICAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2luZGV4XTtcbiAgICAgICAgICBpZiAoYXBwbHkocGFpclswXSwgdGhpcywgYXJncykpIHtcbiAgICAgICAgICAgIHJldHVybiBhcHBseShwYWlyWzFdLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXMgdGhlIHByZWRpY2F0ZSBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHdpdGhcbiAgICAgKiB0aGUgY29ycmVzcG9uZGluZyBwcm9wZXJ0eSB2YWx1ZXMgb2YgYSBnaXZlbiBvYmplY3QsIHJldHVybmluZyBgdHJ1ZWAgaWZcbiAgICAgKiBhbGwgcHJlZGljYXRlcyByZXR1cm4gdHJ1dGh5LCBlbHNlIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVGhlIGNyZWF0ZWQgZnVuY3Rpb24gaXMgZXF1aXZhbGVudCB0byBgXy5jb25mb3Jtc1RvYCB3aXRoXG4gICAgICogYHNvdXJjZWAgcGFydGlhbGx5IGFwcGxpZWQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSBwcmVkaWNhdGVzIHRvIGNvbmZvcm0gdG8uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogMiwgJ2InOiAxIH0sXG4gICAgICogICB7ICdhJzogMSwgJ2InOiAyIH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maWx0ZXIob2JqZWN0cywgXy5jb25mb3Jtcyh7ICdiJzogZnVuY3Rpb24obikgeyByZXR1cm4gbiA+IDE7IH0gfSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyIH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uZm9ybXMoc291cmNlKSB7XG4gICAgICByZXR1cm4gYmFzZUNvbmZvcm1zKGJhc2VDbG9uZShzb3VyY2UsIENMT05FX0RFRVBfRkxBRykpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgYHZhbHVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcmV0dXJuIGZyb20gdGhlIG5ldyBmdW5jdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhvYmplY3RzWzBdID09PSBvYmplY3RzWzFdKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICovXG4gICAgZnVuY3Rpb24gY29uc3RhbnQodmFsdWUpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVja3MgYHZhbHVlYCB0byBkZXRlcm1pbmUgd2hldGhlciBhIGRlZmF1bHQgdmFsdWUgc2hvdWxkIGJlIHJldHVybmVkIGluXG4gICAgICogaXRzIHBsYWNlLiBUaGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaWYgYHZhbHVlYCBpcyBgTmFOYCwgYG51bGxgLFxuICAgICAqIG9yIGB1bmRlZmluZWRgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gICAgICogQHBhcmFtIHsqfSBkZWZhdWx0VmFsdWUgVGhlIGRlZmF1bHQgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRlZmF1bHRUbygxLCAxMCk7XG4gICAgICogLy8gPT4gMVxuICAgICAqXG4gICAgICogXy5kZWZhdWx0VG8odW5kZWZpbmVkLCAxMCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBkZWZhdWx0VG8odmFsdWUsIGRlZmF1bHRWYWx1ZSkge1xuICAgICAgcmV0dXJuICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSkgPyBkZWZhdWx0VmFsdWUgOiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSByZXN1bHQgb2YgaW52b2tpbmcgdGhlIGdpdmVuIGZ1bmN0aW9uc1xuICAgICAqIHdpdGggdGhlIGB0aGlzYCBiaW5kaW5nIG9mIHRoZSBjcmVhdGVkIGZ1bmN0aW9uLCB3aGVyZSBlYWNoIHN1Y2Nlc3NpdmVcbiAgICAgKiBpbnZvY2F0aW9uIGlzIHN1cHBsaWVkIHRoZSByZXR1cm4gdmFsdWUgb2YgdGhlIHByZXZpb3VzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2Z1bmNzXSBUaGUgZnVuY3Rpb25zIHRvIGludm9rZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb21wb3NpdGUgZnVuY3Rpb24uXG4gICAgICogQHNlZSBfLmZsb3dSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3coW18uYWRkLCBzcXVhcmVdKTtcbiAgICAgKiBhZGRTcXVhcmUoMSwgMik7XG4gICAgICogLy8gPT4gOVxuICAgICAqL1xuICAgIHZhciBmbG93ID0gY3JlYXRlRmxvdygpO1xuXG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5mbG93YCBleGNlcHQgdGhhdCBpdCBjcmVhdGVzIGEgZnVuY3Rpb24gdGhhdFxuICAgICAqIGludm9rZXMgdGhlIGdpdmVuIGZ1bmN0aW9ucyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Li4uKEZ1bmN0aW9ufEZ1bmN0aW9uW10pfSBbZnVuY3NdIFRoZSBmdW5jdGlvbnMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAgICAgKiBAc2VlIF8uZmxvd1xuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiBzcXVhcmUobikge1xuICAgICAqICAgcmV0dXJuIG4gKiBuO1xuICAgICAqIH1cbiAgICAgKlxuICAgICAqIHZhciBhZGRTcXVhcmUgPSBfLmZsb3dSaWdodChbc3F1YXJlLCBfLmFkZF0pO1xuICAgICAqIGFkZFNxdWFyZSgxLCAyKTtcbiAgICAgKiAvLyA9PiA5XG4gICAgICovXG4gICAgdmFyIGZsb3dSaWdodCA9IGNyZWF0ZUZsb3codHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gICAgICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCB0aGUgYXJndW1lbnRzIG9mIHRoZSBjcmVhdGVkXG4gICAgICogZnVuY3Rpb24uIElmIGBmdW5jYCBpcyBhIHByb3BlcnR5IG5hbWUsIHRoZSBjcmVhdGVkIGZ1bmN0aW9uIHJldHVybnMgdGhlXG4gICAgICogcHJvcGVydHkgdmFsdWUgZm9yIGEgZ2l2ZW4gZWxlbWVudC4gSWYgYGZ1bmNgIGlzIGFuIGFycmF5IG9yIG9iamVjdCwgdGhlXG4gICAgICogY3JlYXRlZCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYCBmb3IgZWxlbWVudHMgdGhhdCBjb250YWluIHRoZSBlcXVpdmFsZW50XG4gICAgICogc291cmNlIHByb3BlcnRpZXMsIG90aGVyd2lzZSBpdCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7Kn0gW2Z1bmM9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYSBjYWxsYmFjay5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGNhbGxiYWNrLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgdXNlcnMgPSBbXG4gICAgICogICB7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfSxcbiAgICAgKiAgIHsgJ3VzZXInOiAnZnJlZCcsICAgJ2FnZSc6IDQwLCAnYWN0aXZlJzogZmFsc2UgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ubWF0Y2hlc2AgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8uZmlsdGVyKHVzZXJzLCBfLml0ZXJhdGVlKHsgJ3VzZXInOiAnYmFybmV5JywgJ2FjdGl2ZSc6IHRydWUgfSkpO1xuICAgICAqIC8vID0+IFt7ICd1c2VyJzogJ2Jhcm5leScsICdhZ2UnOiAzNiwgJ2FjdGl2ZSc6IHRydWUgfV1cbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5tYXRjaGVzUHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5pdGVyYXRlZShbJ3VzZXInLCAnZnJlZCddKSk7XG4gICAgICogLy8gPT4gW3sgJ3VzZXInOiAnZnJlZCcsICdhZ2UnOiA0MCB9XVxuICAgICAqXG4gICAgICogLy8gVGhlIGBfLnByb3BlcnR5YCBpdGVyYXRlZSBzaG9ydGhhbmQuXG4gICAgICogXy5tYXAodXNlcnMsIF8uaXRlcmF0ZWUoJ3VzZXInKSk7XG4gICAgICogLy8gPT4gWydiYXJuZXknLCAnZnJlZCddXG4gICAgICpcbiAgICAgKiAvLyBDcmVhdGUgY3VzdG9tIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gICAgICogXy5pdGVyYXRlZSA9IF8ud3JhcChfLml0ZXJhdGVlLCBmdW5jdGlvbihpdGVyYXRlZSwgZnVuYykge1xuICAgICAqICAgcmV0dXJuICFfLmlzUmVnRXhwKGZ1bmMpID8gaXRlcmF0ZWUoZnVuYykgOiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICAgKiAgICAgcmV0dXJuIGZ1bmMudGVzdChzdHJpbmcpO1xuICAgICAqICAgfTtcbiAgICAgKiB9KTtcbiAgICAgKlxuICAgICAqIF8uZmlsdGVyKFsnYWJjJywgJ2RlZiddLCAvZWYvKTtcbiAgICAgKiAvLyA9PiBbJ2RlZiddXG4gICAgICovXG4gICAgZnVuY3Rpb24gaXRlcmF0ZWUoZnVuYykge1xuICAgICAgcmV0dXJuIGJhc2VJdGVyYXRlZSh0eXBlb2YgZnVuYyA9PSAnZnVuY3Rpb24nID8gZnVuYyA6IGJhc2VDbG9uZShmdW5jLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gYSBnaXZlblxuICAgICAqIG9iamVjdCBhbmQgYHNvdXJjZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlIGdpdmVuIG9iamVjdCBoYXMgZXF1aXZhbGVudFxuICAgICAqIHByb3BlcnR5IHZhbHVlcywgZWxzZSBgZmFsc2VgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIFRoZSBjcmVhdGVkIGZ1bmN0aW9uIGlzIGVxdWl2YWxlbnQgdG8gYF8uaXNNYXRjaGAgd2l0aCBgc291cmNlYFxuICAgICAqIHBhcnRpYWxseSBhcHBsaWVkLlxuICAgICAqXG4gICAgICogUGFydGlhbCBjb21wYXJpc29ucyB3aWxsIG1hdGNoIGVtcHR5IGFycmF5IGFuZCBlbXB0eSBvYmplY3QgYHNvdXJjZWBcbiAgICAgKiB2YWx1ZXMgYWdhaW5zdCBhbnkgYXJyYXkgb3Igb2JqZWN0IHZhbHVlLCByZXNwZWN0aXZlbHkuIFNlZSBgXy5pc0VxdWFsYFxuICAgICAqIGZvciBhIGxpc3Qgb2Ygc3VwcG9ydGVkIHZhbHVlIGNvbXBhcmlzb25zLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIE11bHRpcGxlIHZhbHVlcyBjYW4gYmUgY2hlY2tlZCBieSBjb21iaW5pbmcgc2V2ZXJhbCBtYXRjaGVyc1xuICAgICAqIHVzaW5nIGBfLm92ZXJTb21lYFxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IHNwZWMgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW1xuICAgICAqICAgeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sXG4gICAgICogICB7ICdhJzogNCwgJ2InOiA1LCAnYyc6IDYgfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLmZpbHRlcihvYmplY3RzLCBfLm1hdGNoZXMoeyAnYSc6IDQsICdjJzogNiB9KSk7XG4gICAgICogLy8gPT4gW3sgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqXG4gICAgICogLy8gQ2hlY2tpbmcgZm9yIHNldmVyYWwgcG9zc2libGUgdmFsdWVzXG4gICAgICogXy5maWx0ZXIodXNlcnMsIF8ub3ZlclNvbWUoW18ubWF0Y2hlcyh7ICdhJzogMSB9KSwgXy5tYXRjaGVzKHsgJ2EnOiA0IH0pXSkpO1xuICAgICAqIC8vID0+IFt7ICdhJzogMSwgJ2InOiAyLCAnYyc6IDMgfSwgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1dXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF0Y2hlcyhzb3VyY2UpIHtcbiAgICAgIHJldHVybiBiYXNlTWF0Y2hlcyhiYXNlQ2xvbmUoc291cmNlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBwZXJmb3JtcyBhIHBhcnRpYWwgZGVlcCBjb21wYXJpc29uIGJldHdlZW4gdGhlXG4gICAgICogdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0IHRvIGBzcmNWYWx1ZWAsIHJldHVybmluZyBgdHJ1ZWAgaWYgdGhlXG4gICAgICogb2JqZWN0IHZhbHVlIGlzIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBQYXJ0aWFsIGNvbXBhcmlzb25zIHdpbGwgbWF0Y2ggZW1wdHkgYXJyYXkgYW5kIGVtcHR5IG9iamVjdFxuICAgICAqIGBzcmNWYWx1ZWAgdmFsdWVzIGFnYWluc3QgYW55IGFycmF5IG9yIG9iamVjdCB2YWx1ZSwgcmVzcGVjdGl2ZWx5LiBTZWVcbiAgICAgKiBgXy5pc0VxdWFsYCBmb3IgYSBsaXN0IG9mIHN1cHBvcnRlZCB2YWx1ZSBjb21wYXJpc29ucy5cbiAgICAgKlxuICAgICAqICoqTm90ZToqKiBNdWx0aXBsZSB2YWx1ZXMgY2FuIGJlIGNoZWNrZWQgYnkgY29tYmluaW5nIHNldmVyYWwgbWF0Y2hlcnNcbiAgICAgKiB1c2luZyBgXy5vdmVyU29tZWBcbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjIuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcGFyYW0geyp9IHNyY1ZhbHVlIFRoZSB2YWx1ZSB0byBtYXRjaC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFtcbiAgICAgKiAgIHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9LFxuICAgICAqICAgeyAnYSc6IDQsICdiJzogNSwgJ2MnOiA2IH1cbiAgICAgKiBdO1xuICAgICAqXG4gICAgICogXy5maW5kKG9iamVjdHMsIF8ubWF0Y2hlc1Byb3BlcnR5KCdhJywgNCkpO1xuICAgICAqIC8vID0+IHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XG4gICAgICpcbiAgICAgKiAvLyBDaGVja2luZyBmb3Igc2V2ZXJhbCBwb3NzaWJsZSB2YWx1ZXNcbiAgICAgKiBfLmZpbHRlcih1c2VycywgXy5vdmVyU29tZShbXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCAxKSwgXy5tYXRjaGVzUHJvcGVydHkoJ2EnLCA0KV0pKTtcbiAgICAgKiAvLyA9PiBbeyAnYSc6IDEsICdiJzogMiwgJ2MnOiAzIH0sIHsgJ2EnOiA0LCAnYic6IDUsICdjJzogNiB9XVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICAgICAgcmV0dXJuIGJhc2VNYXRjaGVzUHJvcGVydHkocGF0aCwgYmFzZUNsb25lKHNyY1ZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBpbnZva2VzIHRoZSBtZXRob2QgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICAgICAqIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gdGhlIGludm9rZWQgbWV0aG9kLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgbWV0aG9kIHRvIGludm9rZS5cbiAgICAgKiBAcGFyYW0gey4uLip9IFthcmdzXSBUaGUgYXJndW1lbnRzIHRvIGludm9rZSB0aGUgbWV0aG9kIHdpdGguXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgaW52b2tlciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IF8uY29uc3RhbnQoMikgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiBfLmNvbnN0YW50KDEpIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLm1ldGhvZCgnYS5iJykpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqXG4gICAgICogXy5tYXAob2JqZWN0cywgXy5tZXRob2QoWydhJywgJ2InXSkpO1xuICAgICAqIC8vID0+IFsyLCAxXVxuICAgICAqL1xuICAgIHZhciBtZXRob2QgPSBiYXNlUmVzdChmdW5jdGlvbihwYXRoLCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgICAgIHJldHVybiBiYXNlSW52b2tlKG9iamVjdCwgcGF0aCwgYXJncyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9wcG9zaXRlIG9mIGBfLm1ldGhvZGA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGludm9rZXNcbiAgICAgKiB0aGUgbWV0aG9kIGF0IGEgZ2l2ZW4gcGF0aCBvZiBgb2JqZWN0YC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGFyZVxuICAgICAqIHByb3ZpZGVkIHRvIHRoZSBpbnZva2VkIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjcuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICAgICAqIEBwYXJhbSB7Li4uKn0gW2FyZ3NdIFRoZSBhcmd1bWVudHMgdG8gaW52b2tlIHRoZSBtZXRob2Qgd2l0aC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBpbnZva2VyIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgYXJyYXkgPSBfLnRpbWVzKDMsIF8uY29uc3RhbnQpLFxuICAgICAqICAgICBvYmplY3QgPSB7ICdhJzogYXJyYXksICdiJzogYXJyYXksICdjJzogYXJyYXkgfTtcbiAgICAgKlxuICAgICAqIF8ubWFwKFsnYVsyXScsICdjWzBdJ10sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ubWV0aG9kT2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICovXG4gICAgdmFyIG1ldGhvZE9mID0gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBhcmdzKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24ocGF0aCkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZShvYmplY3QsIHBhdGgsIGFyZ3MpO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEFkZHMgYWxsIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBmdW5jdGlvbiBwcm9wZXJ0aWVzIG9mIGEgc291cmNlXG4gICAgICogb2JqZWN0IHRvIHRoZSBkZXN0aW5hdGlvbiBvYmplY3QuIElmIGBvYmplY3RgIGlzIGEgZnVuY3Rpb24sIHRoZW4gbWV0aG9kc1xuICAgICAqIGFyZSBhZGRlZCB0byBpdHMgcHJvdG90eXBlIGFzIHdlbGwuXG4gICAgICpcbiAgICAgKiAqKk5vdGU6KiogVXNlIGBfLnJ1bkluQ29udGV4dGAgdG8gY3JlYXRlIGEgcHJpc3RpbmUgYGxvZGFzaGAgZnVuY3Rpb24gdG9cbiAgICAgKiBhdm9pZCBjb25mbGljdHMgY2F1c2VkIGJ5IG1vZGlmeWluZyB0aGUgb3JpZ2luYWwuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBbb2JqZWN0PWxvZGFzaF0gVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgZnVuY3Rpb25zIHRvIGFkZC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnM9e31dIFRoZSBvcHRpb25zIG9iamVjdC5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNoYWluPXRydWVdIFNwZWNpZnkgd2hldGhlciBtaXhpbnMgYXJlIGNoYWluYWJsZS5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb258T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBmdW5jdGlvbiB2b3dlbHMoc3RyaW5nKSB7XG4gICAgICogICByZXR1cm4gXy5maWx0ZXIoc3RyaW5nLCBmdW5jdGlvbih2KSB7XG4gICAgICogICAgIHJldHVybiAvW2FlaW91XS9pLnRlc3Qodik7XG4gICAgICogICB9KTtcbiAgICAgKiB9XG4gICAgICpcbiAgICAgKiBfLm1peGluKHsgJ3Zvd2Vscyc6IHZvd2VscyB9KTtcbiAgICAgKiBfLnZvd2VscygnZnJlZCcpO1xuICAgICAqIC8vID0+IFsnZSddXG4gICAgICpcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCkudmFsdWUoKTtcbiAgICAgKiAvLyA9PiBbJ2UnXVxuICAgICAqXG4gICAgICogXy5taXhpbih7ICd2b3dlbHMnOiB2b3dlbHMgfSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcbiAgICAgKiBfKCdmcmVkJykudm93ZWxzKCk7XG4gICAgICogLy8gPT4gWydlJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtaXhpbihvYmplY3QsIHNvdXJjZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHByb3BzID0ga2V5cyhzb3VyY2UpLFxuICAgICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIHByb3BzKTtcblxuICAgICAgaWYgKG9wdGlvbnMgPT0gbnVsbCAmJlxuICAgICAgICAgICEoaXNPYmplY3Qoc291cmNlKSAmJiAobWV0aG9kTmFtZXMubGVuZ3RoIHx8ICFwcm9wcy5sZW5ndGgpKSkge1xuICAgICAgICBvcHRpb25zID0gc291cmNlO1xuICAgICAgICBzb3VyY2UgPSBvYmplY3Q7XG4gICAgICAgIG9iamVjdCA9IHRoaXM7XG4gICAgICAgIG1ldGhvZE5hbWVzID0gYmFzZUZ1bmN0aW9ucyhzb3VyY2UsIGtleXMoc291cmNlKSk7XG4gICAgICB9XG4gICAgICB2YXIgY2hhaW4gPSAhKGlzT2JqZWN0KG9wdGlvbnMpICYmICdjaGFpbicgaW4gb3B0aW9ucykgfHwgISFvcHRpb25zLmNoYWluLFxuICAgICAgICAgIGlzRnVuYyA9IGlzRnVuY3Rpb24ob2JqZWN0KTtcblxuICAgICAgYXJyYXlFYWNoKG1ldGhvZE5hbWVzLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICAgIHZhciBmdW5jID0gc291cmNlW21ldGhvZE5hbWVdO1xuICAgICAgICBvYmplY3RbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICBpZiAoaXNGdW5jKSB7XG4gICAgICAgICAgb2JqZWN0LnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX187XG4gICAgICAgICAgICBpZiAoY2hhaW4gfHwgY2hhaW5BbGwpIHtcbiAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9iamVjdCh0aGlzLl9fd3JhcHBlZF9fKSxcbiAgICAgICAgICAgICAgICAgIGFjdGlvbnMgPSByZXN1bHQuX19hY3Rpb25zX18gPSBjb3B5QXJyYXkodGhpcy5fX2FjdGlvbnNfXyk7XG5cbiAgICAgICAgICAgICAgYWN0aW9ucy5wdXNoKHsgJ2Z1bmMnOiBmdW5jLCAnYXJncyc6IGFyZ3VtZW50cywgJ3RoaXNBcmcnOiBvYmplY3QgfSk7XG4gICAgICAgICAgICAgIHJlc3VsdC5fX2NoYWluX18gPSBjaGFpbkFsbDtcbiAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KG9iamVjdCwgYXJyYXlQdXNoKFt0aGlzLnZhbHVlKCldLCBhcmd1bWVudHMpKTtcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXZlcnRzIHRoZSBgX2AgdmFyaWFibGUgdG8gaXRzIHByZXZpb3VzIHZhbHVlIGFuZCByZXR1cm5zIGEgcmVmZXJlbmNlIHRvXG4gICAgICogdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBzaW5jZSAwLjEuMFxuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGBsb2Rhc2hgIGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgbG9kYXNoID0gXy5ub0NvbmZsaWN0KCk7XG4gICAgICovXG4gICAgZnVuY3Rpb24gbm9Db25mbGljdCgpIHtcbiAgICAgIGlmIChyb290Ll8gPT09IHRoaXMpIHtcbiAgICAgICAgcm9vdC5fID0gb2xkRGFzaDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIHJldHVybnMgYHVuZGVmaW5lZGAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMi4zLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8ubm9vcCk7XG4gICAgICogLy8gPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vb3AoKSB7XG4gICAgICAvLyBObyBvcGVyYXRpb24gcGVyZm9ybWVkLlxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IGdldHMgdGhlIGFyZ3VtZW50IGF0IGluZGV4IGBuYC4gSWYgYG5gIGlzIG5lZ2F0aXZlLFxuICAgICAqIHRoZSBudGggYXJndW1lbnQgZnJvbSB0aGUgZW5kIGlzIHJldHVybmVkLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW249MF0gVGhlIGluZGV4IG9mIHRoZSBhcmd1bWVudCB0byByZXR1cm4uXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgcGFzcy10aHJ1IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ubnRoQXJnKDEpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYidcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5udGhBcmcoLTIpO1xuICAgICAqIGZ1bmMoJ2EnLCAnYicsICdjJywgJ2QnKTtcbiAgICAgKiAvLyA9PiAnYydcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBudGhBcmcobikge1xuICAgICAgbiA9IHRvSW50ZWdlcihuKTtcbiAgICAgIHJldHVybiBiYXNlUmVzdChmdW5jdGlvbihhcmdzKSB7XG4gICAgICAgIHJldHVybiBiYXNlTnRoKGFyZ3MsIG4pO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgaXRlcmF0ZWVzYCB3aXRoIHRoZSBhcmd1bWVudHMgaXQgcmVjZWl2ZXNcbiAgICAgKiBhbmQgcmV0dXJucyB0aGVpciByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0gey4uLihGdW5jdGlvbnxGdW5jdGlvbltdKX0gW2l0ZXJhdGVlcz1bXy5pZGVudGl0eV1dXG4gICAgICogIFRoZSBpdGVyYXRlZXMgdG8gaW52b2tlLlxuICAgICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgZnVuYyA9IF8ub3ZlcihbTWF0aC5tYXgsIE1hdGgubWluXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKDEsIDIsIDMsIDQpO1xuICAgICAqIC8vID0+IFs0LCAxXVxuICAgICAqL1xuICAgIHZhciBvdmVyID0gY3JlYXRlT3ZlcihhcnJheU1hcCk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbGwqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogRm9sbG93aW5nIHNob3J0aGFuZHMgYXJlIHBvc3NpYmxlIGZvciBwcm92aWRpbmcgcHJlZGljYXRlcy5cbiAgICAgKiBQYXNzIGFuIGBPYmplY3RgIGFuZCBpdCB3aWxsIGJlIHVzZWQgYXMgYW4gcGFyYW1ldGVyIGZvciBgXy5tYXRjaGVzYCB0byBjcmVhdGUgdGhlIHByZWRpY2F0ZS5cbiAgICAgKiBQYXNzIGFuIGBBcnJheWAgb2YgcGFyYW1ldGVycyBmb3IgYF8ubWF0Y2hlc1Byb3BlcnR5YCBhbmQgdGhlIHByZWRpY2F0ZSB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGhlbS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyRXZlcnkoW0Jvb2xlYW4sIGlzRmluaXRlXSk7XG4gICAgICpcbiAgICAgKiBmdW5jKCcxJyk7XG4gICAgICogLy8gPT4gdHJ1ZVxuICAgICAqXG4gICAgICogZnVuYyhudWxsKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogZnVuYyhOYU4pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgdmFyIG92ZXJFdmVyeSA9IGNyZWF0ZU92ZXIoYXJyYXlFdmVyeSk7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBjaGVja3MgaWYgKiphbnkqKiBvZiB0aGUgYHByZWRpY2F0ZXNgIHJldHVyblxuICAgICAqIHRydXRoeSB3aGVuIGludm9rZWQgd2l0aCB0aGUgYXJndW1lbnRzIGl0IHJlY2VpdmVzLlxuICAgICAqXG4gICAgICogRm9sbG93aW5nIHNob3J0aGFuZHMgYXJlIHBvc3NpYmxlIGZvciBwcm92aWRpbmcgcHJlZGljYXRlcy5cbiAgICAgKiBQYXNzIGFuIGBPYmplY3RgIGFuZCBpdCB3aWxsIGJlIHVzZWQgYXMgYW4gcGFyYW1ldGVyIGZvciBgXy5tYXRjaGVzYCB0byBjcmVhdGUgdGhlIHByZWRpY2F0ZS5cbiAgICAgKiBQYXNzIGFuIGBBcnJheWAgb2YgcGFyYW1ldGVycyBmb3IgYF8ubWF0Y2hlc1Byb3BlcnR5YCBhbmQgdGhlIHByZWRpY2F0ZSB3aWxsIGJlIGNyZWF0ZWQgdXNpbmcgdGhlbS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjAuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHsuLi4oRnVuY3Rpb258RnVuY3Rpb25bXSl9IFtwcmVkaWNhdGVzPVtfLmlkZW50aXR5XV1cbiAgICAgKiAgVGhlIHByZWRpY2F0ZXMgdG8gY2hlY2suXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBmdW5jID0gXy5vdmVyU29tZShbQm9vbGVhbiwgaXNGaW5pdGVdKTtcbiAgICAgKlxuICAgICAqIGZ1bmMoJzEnKTtcbiAgICAgKiAvLyA9PiB0cnVlXG4gICAgICpcbiAgICAgKiBmdW5jKG51bGwpO1xuICAgICAqIC8vID0+IHRydWVcbiAgICAgKlxuICAgICAqIGZ1bmMoTmFOKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqXG4gICAgICogdmFyIG1hdGNoZXNGdW5jID0gXy5vdmVyU29tZShbeyAnYSc6IDEgfSwgeyAnYSc6IDIgfV0pXG4gICAgICogdmFyIG1hdGNoZXNQcm9wZXJ0eUZ1bmMgPSBfLm92ZXJTb21lKFtbJ2EnLCAxXSwgWydhJywgMl1dKVxuICAgICAqL1xuICAgIHZhciBvdmVyU29tZSA9IGNyZWF0ZU92ZXIoYXJyYXlTb21lKTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAyLjQuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbXG4gICAgICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICAgICAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICAgICAqIF07XG4gICAgICpcbiAgICAgKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gICAgICogLy8gPT4gWzIsIDFdXG4gICAgICpcbiAgICAgKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICAgICAqIC8vID0+IFsxLCAyXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgICAgIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleShwYXRoKSkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoZSBvcHBvc2l0ZSBvZiBgXy5wcm9wZXJ0eWA7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnNcbiAgICAgKiB0aGUgdmFsdWUgYXQgYSBnaXZlbiBwYXRoIG9mIGBvYmplY3RgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gICAgICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheSA9IFswLCAxLCAyXSxcbiAgICAgKiAgICAgb2JqZWN0ID0geyAnYSc6IGFycmF5LCAnYic6IGFycmF5LCAnYyc6IGFycmF5IH07XG4gICAgICpcbiAgICAgKiBfLm1hcChbJ2FbMl0nLCAnY1swXSddLCBfLnByb3BlcnR5T2Yob2JqZWN0KSk7XG4gICAgICogLy8gPT4gWzIsIDBdXG4gICAgICpcbiAgICAgKiBfLm1hcChbWydhJywgJzInXSwgWydjJywgJzAnXV0sIF8ucHJvcGVydHlPZihvYmplY3QpKTtcbiAgICAgKiAvLyA9PiBbMiwgMF1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBwcm9wZXJ0eU9mKG9iamVjdCkge1xuICAgICAgcmV0dXJuIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGFuIGFycmF5IG9mIG51bWJlcnMgKHBvc2l0aXZlIGFuZC9vciBuZWdhdGl2ZSkgcHJvZ3Jlc3NpbmcgZnJvbVxuICAgICAqIGBzdGFydGAgdXAgdG8sIGJ1dCBub3QgaW5jbHVkaW5nLCBgZW5kYC4gQSBzdGVwIG9mIGAtMWAgaXMgdXNlZCBpZiBhIG5lZ2F0aXZlXG4gICAgICogYHN0YXJ0YCBpcyBzcGVjaWZpZWQgd2l0aG91dCBhbiBgZW5kYCBvciBgc3RlcGAuIElmIGBlbmRgIGlzIG5vdCBzcGVjaWZpZWQsXG4gICAgICogaXQncyBzZXQgdG8gYHN0YXJ0YCB3aXRoIGBzdGFydGAgdGhlbiBzZXQgdG8gYDBgLlxuICAgICAqXG4gICAgICogKipOb3RlOioqIEphdmFTY3JpcHQgZm9sbG93cyB0aGUgSUVFRS03NTQgc3RhbmRhcmQgZm9yIHJlc29sdmluZ1xuICAgICAqIGZsb2F0aW5nLXBvaW50IHZhbHVlcyB3aGljaCBjYW4gcHJvZHVjZSB1bmV4cGVjdGVkIHJlc3VsdHMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZW5kIFRoZSBlbmQgb2YgdGhlIHJhbmdlLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbc3RlcD0xXSBUaGUgdmFsdWUgdG8gaW5jcmVtZW50IG9yIGRlY3JlbWVudCBieS5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHJhbmdlIG9mIG51bWJlcnMuXG4gICAgICogQHNlZSBfLmluUmFuZ2UsIF8ucmFuZ2VSaWdodFxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDQpO1xuICAgICAqIC8vID0+IFswLCAxLCAyLCAzXVxuICAgICAqXG4gICAgICogXy5yYW5nZSgtNCk7XG4gICAgICogLy8gPT4gWzAsIC0xLCAtMiwgLTNdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDEsIDUpO1xuICAgICAqIC8vID0+IFsxLCAyLCAzLCA0XVxuICAgICAqXG4gICAgICogXy5yYW5nZSgwLCAyMCwgNSk7XG4gICAgICogLy8gPT4gWzAsIDUsIDEwLCAxNV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbMCwgLTEsIC0yLCAtM11cbiAgICAgKlxuICAgICAqIF8ucmFuZ2UoMSwgNCwgMCk7XG4gICAgICogLy8gPT4gWzEsIDEsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlKDApO1xuICAgICAqIC8vID0+IFtdXG4gICAgICovXG4gICAgdmFyIHJhbmdlID0gY3JlYXRlUmFuZ2UoKTtcblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ucmFuZ2VgIGV4Y2VwdCB0aGF0IGl0IHBvcHVsYXRlcyB2YWx1ZXMgaW5cbiAgICAgKiBkZXNjZW5kaW5nIG9yZGVyLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0YXJ0PTBdIFRoZSBzdGFydCBvZiB0aGUgcmFuZ2UuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGVuZCBUaGUgZW5kIG9mIHRoZSByYW5nZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW3N0ZXA9MV0gVGhlIHZhbHVlIHRvIGluY3JlbWVudCBvciBkZWNyZW1lbnQgYnkuXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSByYW5nZSBvZiBudW1iZXJzLlxuICAgICAqIEBzZWUgXy5pblJhbmdlLCBfLnJhbmdlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCg0KTtcbiAgICAgKiAvLyA9PiBbMywgMiwgMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgtNCk7XG4gICAgICogLy8gPT4gWy0zLCAtMiwgLTEsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMSwgNSk7XG4gICAgICogLy8gPT4gWzQsIDMsIDIsIDFdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCwgMjAsIDUpO1xuICAgICAqIC8vID0+IFsxNSwgMTAsIDUsIDBdXG4gICAgICpcbiAgICAgKiBfLnJhbmdlUmlnaHQoMCwgLTQsIC0xKTtcbiAgICAgKiAvLyA9PiBbLTMsIC0yLCAtMSwgMF1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgxLCA0LCAwKTtcbiAgICAgKiAvLyA9PiBbMSwgMSwgMV1cbiAgICAgKlxuICAgICAqIF8ucmFuZ2VSaWdodCgwKTtcbiAgICAgKiAvLyA9PiBbXVxuICAgICAqL1xuICAgIHZhciByYW5nZVJpZ2h0ID0gY3JlYXRlUmFuZ2UodHJ1ZSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMTMuMFxuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gICAgICogLy8gPT4gW1tdLCBbXV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAgICAgKiAvLyA9PiBmYWxzZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4xMy4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAgICAgKiAvLyA9PiBbZmFsc2UsIGZhbHNlXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBvYmplY3QuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gXy50aW1lcygyLCBfLnN0dWJPYmplY3QpO1xuICAgICAqXG4gICAgICogY29uc29sZS5sb2cob2JqZWN0cyk7XG4gICAgICogLy8gPT4gW3t9LCB7fV1cbiAgICAgKlxuICAgICAqIGNvbnNvbGUubG9nKG9iamVjdHNbMF0gPT09IG9iamVjdHNbMV0pO1xuICAgICAqIC8vID0+IGZhbHNlXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1Yk9iamVjdCgpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGFuIGVtcHR5IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVtcHR5IHN0cmluZy5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJTdHJpbmcpO1xuICAgICAqIC8vID0+IFsnJywgJyddXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3R1YlN0cmluZygpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB0cnVlYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjEzLjBcbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy50aW1lcygyLCBfLnN0dWJUcnVlKTtcbiAgICAgKiAvLyA9PiBbdHJ1ZSwgdHJ1ZV1cbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdHViVHJ1ZSgpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludm9rZXMgdGhlIGl0ZXJhdGVlIGBuYCB0aW1lcywgcmV0dXJuaW5nIGFuIGFycmF5IG9mIHRoZSByZXN1bHRzIG9mXG4gICAgICogZWFjaCBpbnZvY2F0aW9uLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDsgKGluZGV4KS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBVdGlsXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG4gVGhlIG51bWJlciBvZiB0aW1lcyB0byBpbnZva2UgYGl0ZXJhdGVlYC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHJlc3VsdHMuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udGltZXMoMywgU3RyaW5nKTtcbiAgICAgKiAvLyA9PiBbJzAnLCAnMScsICcyJ11cbiAgICAgKlxuICAgICAqICBfLnRpbWVzKDQsIF8uY29uc3RhbnQoMCkpO1xuICAgICAqIC8vID0+IFswLCAwLCAwLCAwXVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIHRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gICAgICBuID0gdG9JbnRlZ2VyKG4pO1xuICAgICAgaWYgKG4gPCAxIHx8IG4gPiBNQVhfU0FGRV9JTlRFR0VSKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICAgIH1cbiAgICAgIHZhciBpbmRleCA9IE1BWF9BUlJBWV9MRU5HVEgsXG4gICAgICAgICAgbGVuZ3RoID0gbmF0aXZlTWluKG4sIE1BWF9BUlJBWV9MRU5HVEgpO1xuXG4gICAgICBpdGVyYXRlZSA9IGdldEl0ZXJhdGVlKGl0ZXJhdGVlKTtcbiAgICAgIG4gLT0gTUFYX0FSUkFZX0xFTkdUSDtcblxuICAgICAgdmFyIHJlc3VsdCA9IGJhc2VUaW1lcyhsZW5ndGgsIGl0ZXJhdGVlKTtcbiAgICAgIHdoaWxlICgrK2luZGV4IDwgbikge1xuICAgICAgICBpdGVyYXRlZShpbmRleCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IFV0aWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8udG9QYXRoKCdhLmIuYycpO1xuICAgICAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICAgICAqXG4gICAgICogXy50b1BhdGgoJ2FbMF0uYi5jJyk7XG4gICAgICogLy8gPT4gWydhJywgJzAnLCAnYicsICdjJ11cbiAgICAgKi9cbiAgICBmdW5jdGlvbiB0b1BhdGgodmFsdWUpIHtcbiAgICAgIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIHRvS2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc1N5bWJvbCh2YWx1ZSkgPyBbdmFsdWVdIDogY29weUFycmF5KHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSB1bmlxdWUgSUQuIElmIGBwcmVmaXhgIGlzIGdpdmVuLCB0aGUgSUQgaXMgYXBwZW5kZWQgdG8gaXQuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHNpbmNlIDAuMS4wXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAY2F0ZWdvcnkgVXRpbFxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcHJlZml4PScnXSBUaGUgdmFsdWUgdG8gcHJlZml4IHRoZSBJRCB3aXRoLlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHVuaXF1ZSBJRC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy51bmlxdWVJZCgnY29udGFjdF8nKTtcbiAgICAgKiAvLyA9PiAnY29udGFjdF8xMDQnXG4gICAgICpcbiAgICAgKiBfLnVuaXF1ZUlkKCk7XG4gICAgICogLy8gPT4gJzEwNSdcbiAgICAgKi9cbiAgICBmdW5jdGlvbiB1bmlxdWVJZChwcmVmaXgpIHtcbiAgICAgIHZhciBpZCA9ICsraWRDb3VudGVyO1xuICAgICAgcmV0dXJuIHRvU3RyaW5nKHByZWZpeCkgKyBpZDtcbiAgICB9XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIHR3byBudW1iZXJzLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDMuNC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYXVnZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYW4gYWRkaXRpb24uXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGFkZGVuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhbiBhZGRpdGlvbi5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSB0b3RhbC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5hZGQoNiwgNCk7XG4gICAgICogLy8gPT4gMTBcbiAgICAgKi9cbiAgICB2YXIgYWRkID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihhdWdlbmQsIGFkZGVuZCkge1xuICAgICAgcmV0dXJuIGF1Z2VuZCArIGFkZGVuZDtcbiAgICB9LCAwKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgdXAgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQgdXAuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB1cCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIHVwIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5jZWlsKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA1XG4gICAgICpcbiAgICAgKiBfLmNlaWwoNi4wMDQsIDIpO1xuICAgICAqIC8vID0+IDYuMDFcbiAgICAgKlxuICAgICAqIF8uY2VpbCg2MDQwLCAtMik7XG4gICAgICogLy8gPT4gNjEwMFxuICAgICAqL1xuICAgIHZhciBjZWlsID0gY3JlYXRlUm91bmQoJ2NlaWwnKTtcblxuICAgIC8qKlxuICAgICAqIERpdmlkZSB0d28gbnVtYmVycy5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRpdmlkZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBkaXZpc2lvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gZGl2aXNvciBUaGUgc2Vjb25kIG51bWJlciBpbiBhIGRpdmlzaW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHF1b3RpZW50LlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmRpdmlkZSg2LCA0KTtcbiAgICAgKiAvLyA9PiAxLjVcbiAgICAgKi9cbiAgICB2YXIgZGl2aWRlID0gY3JlYXRlTWF0aE9wZXJhdGlvbihmdW5jdGlvbihkaXZpZGVuZCwgZGl2aXNvcikge1xuICAgICAgcmV0dXJuIGRpdmlkZW5kIC8gZGl2aXNvcjtcbiAgICB9LCAxKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgZG93biB0byBgcHJlY2lzaW9uYC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSAzLjEwLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXIgVGhlIG51bWJlciB0byByb3VuZCBkb3duLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbcHJlY2lzaW9uPTBdIFRoZSBwcmVjaXNpb24gdG8gcm91bmQgZG93biB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIGRvd24gbnVtYmVyLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQuMDA2KTtcbiAgICAgKiAvLyA9PiA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDAuMDQ2LCAyKTtcbiAgICAgKiAvLyA9PiAwLjA0XG4gICAgICpcbiAgICAgKiBfLmZsb29yKDQwNjAsIC0yKTtcbiAgICAgKiAvLyA9PiA0MDAwXG4gICAgICovXG4gICAgdmFyIGZsb29yID0gY3JlYXRlUm91bmQoJ2Zsb29yJyk7XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWF4aW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAgICAgKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWF4aW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tYXgoWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiA4XG4gICAgICpcbiAgICAgKiBfLm1heChbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWF4KGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlR3QpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWF4YCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXhpbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogMSB9LCB7ICduJzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWF4Qnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduJzogMiB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1heEJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4geyAnbic6IDIgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1heEJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VHdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIG1lYW4gb2YgdGhlIHZhbHVlcyBpbiBgYXJyYXlgLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIG1lYW4uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8ubWVhbihbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDVcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBtZWFuKGFycmF5KSB7XG4gICAgICByZXR1cm4gYmFzZU1lYW4oYXJyYXksIGlkZW50aXR5KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLm1lYW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGl0ZXJhdGVlYCB3aGljaCBpc1xuICAgICAqIGludm9rZWQgZm9yIGVhY2ggZWxlbWVudCBpbiBgYXJyYXlgIHRvIGdlbmVyYXRlIHRoZSB2YWx1ZSB0byBiZSBhdmVyYWdlZC5cbiAgICAgKiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIG9uZSBhcmd1bWVudDogKHZhbHVlKS5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBzaW5jZSA0LjcuMFxuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGl0ZXJhdGVlIGludm9rZWQgcGVyIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgbWVhbi5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogdmFyIG9iamVjdHMgPSBbeyAnbic6IDQgfSwgeyAnbic6IDIgfSwgeyAnbic6IDggfSwgeyAnbic6IDYgfV07XG4gICAgICpcbiAgICAgKiBfLm1lYW5CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IDVcbiAgICAgKlxuICAgICAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICAgICAqIF8ubWVhbkJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gNVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1lYW5CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiBiYXNlTWVhbihhcnJheSwgZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyB0aGUgbWluaW11bSB2YWx1ZSBvZiBgYXJyYXlgLiBJZiBgYXJyYXlgIGlzIGVtcHR5IG9yIGZhbHNleSxcbiAgICAgKiBgdW5kZWZpbmVkYCBpcyByZXR1cm5lZC5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAc2luY2UgMC4xLjBcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEBjYXRlZ29yeSBNYXRoXG4gICAgICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAgICAgKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWluaW11bSB2YWx1ZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5taW4oWzQsIDIsIDgsIDZdKTtcbiAgICAgKiAvLyA9PiAyXG4gICAgICpcbiAgICAgKiBfLm1pbihbXSk7XG4gICAgICogLy8gPT4gdW5kZWZpbmVkXG4gICAgICovXG4gICAgZnVuY3Rpb24gbWluKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlRXh0cmVtdW0oYXJyYXksIGlkZW50aXR5LCBiYXNlTHQpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8ubWluYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgY3JpdGVyaW9uIGJ5IHdoaWNoXG4gICAgICogdGhlIHZhbHVlIGlzIHJhbmtlZC4gVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCBvbmUgYXJndW1lbnQ6ICh2YWx1ZSkuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW2l0ZXJhdGVlPV8uaWRlbnRpdHldIFRoZSBpdGVyYXRlZSBpbnZva2VkIHBlciBlbGVtZW50LlxuICAgICAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtaW5pbXVtIHZhbHVlLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiB2YXIgb2JqZWN0cyA9IFt7ICduJzogMSB9LCB7ICduJzogMiB9XTtcbiAgICAgKlxuICAgICAqIF8ubWluQnkob2JqZWN0cywgZnVuY3Rpb24obykgeyByZXR1cm4gby5uOyB9KTtcbiAgICAgKiAvLyA9PiB7ICduJzogMSB9XG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLm1pbkJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4geyAnbic6IDEgfVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG1pbkJ5KGFycmF5LCBpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIChhcnJheSAmJiBhcnJheS5sZW5ndGgpXG4gICAgICAgID8gYmFzZUV4dHJlbXVtKGFycmF5LCBnZXRJdGVyYXRlZShpdGVyYXRlZSwgMiksIGJhc2VMdClcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTXVsdGlwbHkgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC43LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtdWx0aXBsaWVyIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBtdWx0aXBsaWNhdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbXVsdGlwbGljYW5kIFRoZSBzZWNvbmQgbnVtYmVyIGluIGEgbXVsdGlwbGljYXRpb24uXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgcHJvZHVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5tdWx0aXBseSg2LCA0KTtcbiAgICAgKiAvLyA9PiAyNFxuICAgICAqL1xuICAgIHZhciBtdWx0aXBseSA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obXVsdGlwbGllciwgbXVsdGlwbGljYW5kKSB7XG4gICAgICByZXR1cm4gbXVsdGlwbGllciAqIG11bHRpcGxpY2FuZDtcbiAgICB9LCAxKTtcblxuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIGBudW1iZXJgIHJvdW5kZWQgdG8gYHByZWNpc2lvbmAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy4xMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbnVtYmVyIFRoZSBudW1iZXIgdG8gcm91bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtwcmVjaXNpb249MF0gVGhlIHByZWNpc2lvbiB0byByb3VuZCB0by5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSByb3VuZGVkIG51bWJlci5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNik7XG4gICAgICogLy8gPT4gNFxuICAgICAqXG4gICAgICogXy5yb3VuZCg0LjAwNiwgMik7XG4gICAgICogLy8gPT4gNC4wMVxuICAgICAqXG4gICAgICogXy5yb3VuZCg0MDYwLCAtMik7XG4gICAgICogLy8gPT4gNDEwMFxuICAgICAqL1xuICAgIHZhciByb3VuZCA9IGNyZWF0ZVJvdW5kKCdyb3VuZCcpO1xuXG4gICAgLyoqXG4gICAgICogU3VidHJhY3QgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgNC4wLjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW51ZW5kIFRoZSBmaXJzdCBudW1iZXIgaW4gYSBzdWJ0cmFjdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc3VidHJhaGVuZCBUaGUgc2Vjb25kIG51bWJlciBpbiBhIHN1YnRyYWN0aW9uLlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGRpZmZlcmVuY2UuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIF8uc3VidHJhY3QoNiwgNCk7XG4gICAgICogLy8gPT4gMlxuICAgICAqL1xuICAgIHZhciBzdWJ0cmFjdCA9IGNyZWF0ZU1hdGhPcGVyYXRpb24oZnVuY3Rpb24obWludWVuZCwgc3VidHJhaGVuZCkge1xuICAgICAgcmV0dXJuIG1pbnVlbmQgLSBzdWJ0cmFoZW5kO1xuICAgIH0sIDApO1xuXG4gICAgLyoqXG4gICAgICogQ29tcHV0ZXMgdGhlIHN1bSBvZiB0aGUgdmFsdWVzIGluIGBhcnJheWAuXG4gICAgICpcbiAgICAgKiBAc3RhdGljXG4gICAgICogQG1lbWJlck9mIF9cbiAgICAgKiBAc2luY2UgMy40LjBcbiAgICAgKiBAY2F0ZWdvcnkgTWF0aFxuICAgICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gICAgICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgc3VtLlxuICAgICAqIEBleGFtcGxlXG4gICAgICpcbiAgICAgKiBfLnN1bShbNCwgMiwgOCwgNl0pO1xuICAgICAqIC8vID0+IDIwXG4gICAgICovXG4gICAgZnVuY3Rpb24gc3VtKGFycmF5KSB7XG4gICAgICByZXR1cm4gKGFycmF5ICYmIGFycmF5Lmxlbmd0aClcbiAgICAgICAgPyBiYXNlU3VtKGFycmF5LCBpZGVudGl0eSlcbiAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uc3VtYCBleGNlcHQgdGhhdCBpdCBhY2NlcHRzIGBpdGVyYXRlZWAgd2hpY2ggaXNcbiAgICAgKiBpbnZva2VkIGZvciBlYWNoIGVsZW1lbnQgaW4gYGFycmF5YCB0byBnZW5lcmF0ZSB0aGUgdmFsdWUgdG8gYmUgc3VtbWVkLlxuICAgICAqIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggb25lIGFyZ3VtZW50OiAodmFsdWUpLlxuICAgICAqXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBtZW1iZXJPZiBfXG4gICAgICogQHNpbmNlIDQuMC4wXG4gICAgICogQGNhdGVnb3J5IE1hdGhcbiAgICAgKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgaXRlcmF0ZWUgaW52b2tlZCBwZXIgZWxlbWVudC5cbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzdW0uXG4gICAgICogQGV4YW1wbGVcbiAgICAgKlxuICAgICAqIHZhciBvYmplY3RzID0gW3sgJ24nOiA0IH0sIHsgJ24nOiAyIH0sIHsgJ24nOiA4IH0sIHsgJ24nOiA2IH1dO1xuICAgICAqXG4gICAgICogXy5zdW1CeShvYmplY3RzLCBmdW5jdGlvbihvKSB7IHJldHVybiBvLm47IH0pO1xuICAgICAqIC8vID0+IDIwXG4gICAgICpcbiAgICAgKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAgICAgKiBfLnN1bUJ5KG9iamVjdHMsICduJyk7XG4gICAgICogLy8gPT4gMjBcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBzdW1CeShhcnJheSwgaXRlcmF0ZWUpIHtcbiAgICAgIHJldHVybiAoYXJyYXkgJiYgYXJyYXkubGVuZ3RoKVxuICAgICAgICA/IGJhc2VTdW0oYXJyYXksIGdldEl0ZXJhdGVlKGl0ZXJhdGVlLCAyKSlcbiAgICAgICAgOiAwO1xuICAgIH1cblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8vIEFkZCBtZXRob2RzIHRoYXQgcmV0dXJuIHdyYXBwZWQgdmFsdWVzIGluIGNoYWluIHNlcXVlbmNlcy5cbiAgICBsb2Rhc2guYWZ0ZXIgPSBhZnRlcjtcbiAgICBsb2Rhc2guYXJ5ID0gYXJ5O1xuICAgIGxvZGFzaC5hc3NpZ24gPSBhc3NpZ247XG4gICAgbG9kYXNoLmFzc2lnbkluID0gYXNzaWduSW47XG4gICAgbG9kYXNoLmFzc2lnbkluV2l0aCA9IGFzc2lnbkluV2l0aDtcbiAgICBsb2Rhc2guYXNzaWduV2l0aCA9IGFzc2lnbldpdGg7XG4gICAgbG9kYXNoLmF0ID0gYXQ7XG4gICAgbG9kYXNoLmJlZm9yZSA9IGJlZm9yZTtcbiAgICBsb2Rhc2guYmluZCA9IGJpbmQ7XG4gICAgbG9kYXNoLmJpbmRBbGwgPSBiaW5kQWxsO1xuICAgIGxvZGFzaC5iaW5kS2V5ID0gYmluZEtleTtcbiAgICBsb2Rhc2guY2FzdEFycmF5ID0gY2FzdEFycmF5O1xuICAgIGxvZGFzaC5jaGFpbiA9IGNoYWluO1xuICAgIGxvZGFzaC5jaHVuayA9IGNodW5rO1xuICAgIGxvZGFzaC5jb21wYWN0ID0gY29tcGFjdDtcbiAgICBsb2Rhc2guY29uY2F0ID0gY29uY2F0O1xuICAgIGxvZGFzaC5jb25kID0gY29uZDtcbiAgICBsb2Rhc2guY29uZm9ybXMgPSBjb25mb3JtcztcbiAgICBsb2Rhc2guY29uc3RhbnQgPSBjb25zdGFudDtcbiAgICBsb2Rhc2guY291bnRCeSA9IGNvdW50Qnk7XG4gICAgbG9kYXNoLmNyZWF0ZSA9IGNyZWF0ZTtcbiAgICBsb2Rhc2guY3VycnkgPSBjdXJyeTtcbiAgICBsb2Rhc2guY3VycnlSaWdodCA9IGN1cnJ5UmlnaHQ7XG4gICAgbG9kYXNoLmRlYm91bmNlID0gZGVib3VuY2U7XG4gICAgbG9kYXNoLmRlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgbG9kYXNoLmRlZmF1bHRzRGVlcCA9IGRlZmF1bHRzRGVlcDtcbiAgICBsb2Rhc2guZGVmZXIgPSBkZWZlcjtcbiAgICBsb2Rhc2guZGVsYXkgPSBkZWxheTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZSA9IGRpZmZlcmVuY2U7XG4gICAgbG9kYXNoLmRpZmZlcmVuY2VCeSA9IGRpZmZlcmVuY2VCeTtcbiAgICBsb2Rhc2guZGlmZmVyZW5jZVdpdGggPSBkaWZmZXJlbmNlV2l0aDtcbiAgICBsb2Rhc2guZHJvcCA9IGRyb3A7XG4gICAgbG9kYXNoLmRyb3BSaWdodCA9IGRyb3BSaWdodDtcbiAgICBsb2Rhc2guZHJvcFJpZ2h0V2hpbGUgPSBkcm9wUmlnaHRXaGlsZTtcbiAgICBsb2Rhc2guZHJvcFdoaWxlID0gZHJvcFdoaWxlO1xuICAgIGxvZGFzaC5maWxsID0gZmlsbDtcbiAgICBsb2Rhc2guZmlsdGVyID0gZmlsdGVyO1xuICAgIGxvZGFzaC5mbGF0TWFwID0gZmxhdE1hcDtcbiAgICBsb2Rhc2guZmxhdE1hcERlZXAgPSBmbGF0TWFwRGVlcDtcbiAgICBsb2Rhc2guZmxhdE1hcERlcHRoID0gZmxhdE1hcERlcHRoO1xuICAgIGxvZGFzaC5mbGF0dGVuID0gZmxhdHRlbjtcbiAgICBsb2Rhc2guZmxhdHRlbkRlZXAgPSBmbGF0dGVuRGVlcDtcbiAgICBsb2Rhc2guZmxhdHRlbkRlcHRoID0gZmxhdHRlbkRlcHRoO1xuICAgIGxvZGFzaC5mbGlwID0gZmxpcDtcbiAgICBsb2Rhc2guZmxvdyA9IGZsb3c7XG4gICAgbG9kYXNoLmZsb3dSaWdodCA9IGZsb3dSaWdodDtcbiAgICBsb2Rhc2guZnJvbVBhaXJzID0gZnJvbVBhaXJzO1xuICAgIGxvZGFzaC5mdW5jdGlvbnMgPSBmdW5jdGlvbnM7XG4gICAgbG9kYXNoLmZ1bmN0aW9uc0luID0gZnVuY3Rpb25zSW47XG4gICAgbG9kYXNoLmdyb3VwQnkgPSBncm91cEJ5O1xuICAgIGxvZGFzaC5pbml0aWFsID0gaW5pdGlhbDtcbiAgICBsb2Rhc2guaW50ZXJzZWN0aW9uID0gaW50ZXJzZWN0aW9uO1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25CeSA9IGludGVyc2VjdGlvbkJ5O1xuICAgIGxvZGFzaC5pbnRlcnNlY3Rpb25XaXRoID0gaW50ZXJzZWN0aW9uV2l0aDtcbiAgICBsb2Rhc2guaW52ZXJ0ID0gaW52ZXJ0O1xuICAgIGxvZGFzaC5pbnZlcnRCeSA9IGludmVydEJ5O1xuICAgIGxvZGFzaC5pbnZva2VNYXAgPSBpbnZva2VNYXA7XG4gICAgbG9kYXNoLml0ZXJhdGVlID0gaXRlcmF0ZWU7XG4gICAgbG9kYXNoLmtleUJ5ID0ga2V5Qnk7XG4gICAgbG9kYXNoLmtleXMgPSBrZXlzO1xuICAgIGxvZGFzaC5rZXlzSW4gPSBrZXlzSW47XG4gICAgbG9kYXNoLm1hcCA9IG1hcDtcbiAgICBsb2Rhc2gubWFwS2V5cyA9IG1hcEtleXM7XG4gICAgbG9kYXNoLm1hcFZhbHVlcyA9IG1hcFZhbHVlcztcbiAgICBsb2Rhc2gubWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgbG9kYXNoLm1hdGNoZXNQcm9wZXJ0eSA9IG1hdGNoZXNQcm9wZXJ0eTtcbiAgICBsb2Rhc2gubWVtb2l6ZSA9IG1lbW9pemU7XG4gICAgbG9kYXNoLm1lcmdlID0gbWVyZ2U7XG4gICAgbG9kYXNoLm1lcmdlV2l0aCA9IG1lcmdlV2l0aDtcbiAgICBsb2Rhc2gubWV0aG9kID0gbWV0aG9kO1xuICAgIGxvZGFzaC5tZXRob2RPZiA9IG1ldGhvZE9mO1xuICAgIGxvZGFzaC5taXhpbiA9IG1peGluO1xuICAgIGxvZGFzaC5uZWdhdGUgPSBuZWdhdGU7XG4gICAgbG9kYXNoLm50aEFyZyA9IG50aEFyZztcbiAgICBsb2Rhc2gub21pdCA9IG9taXQ7XG4gICAgbG9kYXNoLm9taXRCeSA9IG9taXRCeTtcbiAgICBsb2Rhc2gub25jZSA9IG9uY2U7XG4gICAgbG9kYXNoLm9yZGVyQnkgPSBvcmRlckJ5O1xuICAgIGxvZGFzaC5vdmVyID0gb3ZlcjtcbiAgICBsb2Rhc2gub3ZlckFyZ3MgPSBvdmVyQXJncztcbiAgICBsb2Rhc2gub3ZlckV2ZXJ5ID0gb3ZlckV2ZXJ5O1xuICAgIGxvZGFzaC5vdmVyU29tZSA9IG92ZXJTb21lO1xuICAgIGxvZGFzaC5wYXJ0aWFsID0gcGFydGlhbDtcbiAgICBsb2Rhc2gucGFydGlhbFJpZ2h0ID0gcGFydGlhbFJpZ2h0O1xuICAgIGxvZGFzaC5wYXJ0aXRpb24gPSBwYXJ0aXRpb247XG4gICAgbG9kYXNoLnBpY2sgPSBwaWNrO1xuICAgIGxvZGFzaC5waWNrQnkgPSBwaWNrQnk7XG4gICAgbG9kYXNoLnByb3BlcnR5ID0gcHJvcGVydHk7XG4gICAgbG9kYXNoLnByb3BlcnR5T2YgPSBwcm9wZXJ0eU9mO1xuICAgIGxvZGFzaC5wdWxsID0gcHVsbDtcbiAgICBsb2Rhc2gucHVsbEFsbCA9IHB1bGxBbGw7XG4gICAgbG9kYXNoLnB1bGxBbGxCeSA9IHB1bGxBbGxCeTtcbiAgICBsb2Rhc2gucHVsbEFsbFdpdGggPSBwdWxsQWxsV2l0aDtcbiAgICBsb2Rhc2gucHVsbEF0ID0gcHVsbEF0O1xuICAgIGxvZGFzaC5yYW5nZSA9IHJhbmdlO1xuICAgIGxvZGFzaC5yYW5nZVJpZ2h0ID0gcmFuZ2VSaWdodDtcbiAgICBsb2Rhc2gucmVhcmcgPSByZWFyZztcbiAgICBsb2Rhc2gucmVqZWN0ID0gcmVqZWN0O1xuICAgIGxvZGFzaC5yZW1vdmUgPSByZW1vdmU7XG4gICAgbG9kYXNoLnJlc3QgPSByZXN0O1xuICAgIGxvZGFzaC5yZXZlcnNlID0gcmV2ZXJzZTtcbiAgICBsb2Rhc2guc2FtcGxlU2l6ZSA9IHNhbXBsZVNpemU7XG4gICAgbG9kYXNoLnNldCA9IHNldDtcbiAgICBsb2Rhc2guc2V0V2l0aCA9IHNldFdpdGg7XG4gICAgbG9kYXNoLnNodWZmbGUgPSBzaHVmZmxlO1xuICAgIGxvZGFzaC5zbGljZSA9IHNsaWNlO1xuICAgIGxvZGFzaC5zb3J0QnkgPSBzb3J0Qnk7XG4gICAgbG9kYXNoLnNvcnRlZFVuaXEgPSBzb3J0ZWRVbmlxO1xuICAgIGxvZGFzaC5zb3J0ZWRVbmlxQnkgPSBzb3J0ZWRVbmlxQnk7XG4gICAgbG9kYXNoLnNwbGl0ID0gc3BsaXQ7XG4gICAgbG9kYXNoLnNwcmVhZCA9IHNwcmVhZDtcbiAgICBsb2Rhc2gudGFpbCA9IHRhaWw7XG4gICAgbG9kYXNoLnRha2UgPSB0YWtlO1xuICAgIGxvZGFzaC50YWtlUmlnaHQgPSB0YWtlUmlnaHQ7XG4gICAgbG9kYXNoLnRha2VSaWdodFdoaWxlID0gdGFrZVJpZ2h0V2hpbGU7XG4gICAgbG9kYXNoLnRha2VXaGlsZSA9IHRha2VXaGlsZTtcbiAgICBsb2Rhc2gudGFwID0gdGFwO1xuICAgIGxvZGFzaC50aHJvdHRsZSA9IHRocm90dGxlO1xuICAgIGxvZGFzaC50aHJ1ID0gdGhydTtcbiAgICBsb2Rhc2gudG9BcnJheSA9IHRvQXJyYXk7XG4gICAgbG9kYXNoLnRvUGFpcnMgPSB0b1BhaXJzO1xuICAgIGxvZGFzaC50b1BhaXJzSW4gPSB0b1BhaXJzSW47XG4gICAgbG9kYXNoLnRvUGF0aCA9IHRvUGF0aDtcbiAgICBsb2Rhc2gudG9QbGFpbk9iamVjdCA9IHRvUGxhaW5PYmplY3Q7XG4gICAgbG9kYXNoLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcbiAgICBsb2Rhc2gudW5hcnkgPSB1bmFyeTtcbiAgICBsb2Rhc2gudW5pb24gPSB1bmlvbjtcbiAgICBsb2Rhc2gudW5pb25CeSA9IHVuaW9uQnk7XG4gICAgbG9kYXNoLnVuaW9uV2l0aCA9IHVuaW9uV2l0aDtcbiAgICBsb2Rhc2gudW5pcSA9IHVuaXE7XG4gICAgbG9kYXNoLnVuaXFCeSA9IHVuaXFCeTtcbiAgICBsb2Rhc2gudW5pcVdpdGggPSB1bmlxV2l0aDtcbiAgICBsb2Rhc2gudW5zZXQgPSB1bnNldDtcbiAgICBsb2Rhc2gudW56aXAgPSB1bnppcDtcbiAgICBsb2Rhc2gudW56aXBXaXRoID0gdW56aXBXaXRoO1xuICAgIGxvZGFzaC51cGRhdGUgPSB1cGRhdGU7XG4gICAgbG9kYXNoLnVwZGF0ZVdpdGggPSB1cGRhdGVXaXRoO1xuICAgIGxvZGFzaC52YWx1ZXMgPSB2YWx1ZXM7XG4gICAgbG9kYXNoLnZhbHVlc0luID0gdmFsdWVzSW47XG4gICAgbG9kYXNoLndpdGhvdXQgPSB3aXRob3V0O1xuICAgIGxvZGFzaC53b3JkcyA9IHdvcmRzO1xuICAgIGxvZGFzaC53cmFwID0gd3JhcDtcbiAgICBsb2Rhc2gueG9yID0geG9yO1xuICAgIGxvZGFzaC54b3JCeSA9IHhvckJ5O1xuICAgIGxvZGFzaC54b3JXaXRoID0geG9yV2l0aDtcbiAgICBsb2Rhc2guemlwID0gemlwO1xuICAgIGxvZGFzaC56aXBPYmplY3QgPSB6aXBPYmplY3Q7XG4gICAgbG9kYXNoLnppcE9iamVjdERlZXAgPSB6aXBPYmplY3REZWVwO1xuICAgIGxvZGFzaC56aXBXaXRoID0gemlwV2l0aDtcblxuICAgIC8vIEFkZCBhbGlhc2VzLlxuICAgIGxvZGFzaC5lbnRyaWVzID0gdG9QYWlycztcbiAgICBsb2Rhc2guZW50cmllc0luID0gdG9QYWlyc0luO1xuICAgIGxvZGFzaC5leHRlbmQgPSBhc3NpZ25JbjtcbiAgICBsb2Rhc2guZXh0ZW5kV2l0aCA9IGFzc2lnbkluV2l0aDtcblxuICAgIC8vIEFkZCBtZXRob2RzIHRvIGBsb2Rhc2gucHJvdG90eXBlYC5cbiAgICBtaXhpbihsb2Rhc2gsIGxvZGFzaCk7XG5cbiAgICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cbiAgICAvLyBBZGQgbWV0aG9kcyB0aGF0IHJldHVybiB1bndyYXBwZWQgdmFsdWVzIGluIGNoYWluIHNlcXVlbmNlcy5cbiAgICBsb2Rhc2guYWRkID0gYWRkO1xuICAgIGxvZGFzaC5hdHRlbXB0ID0gYXR0ZW1wdDtcbiAgICBsb2Rhc2guY2FtZWxDYXNlID0gY2FtZWxDYXNlO1xuICAgIGxvZGFzaC5jYXBpdGFsaXplID0gY2FwaXRhbGl6ZTtcbiAgICBsb2Rhc2guY2VpbCA9IGNlaWw7XG4gICAgbG9kYXNoLmNsYW1wID0gY2xhbXA7XG4gICAgbG9kYXNoLmNsb25lID0gY2xvbmU7XG4gICAgbG9kYXNoLmNsb25lRGVlcCA9IGNsb25lRGVlcDtcbiAgICBsb2Rhc2guY2xvbmVEZWVwV2l0aCA9IGNsb25lRGVlcFdpdGg7XG4gICAgbG9kYXNoLmNsb25lV2l0aCA9IGNsb25lV2l0aDtcbiAgICBsb2Rhc2guY29uZm9ybXNUbyA9IGNvbmZvcm1zVG87XG4gICAgbG9kYXNoLmRlYnVyciA9IGRlYnVycjtcbiAgICBsb2Rhc2guZGVmYXVsdFRvID0gZGVmYXVsdFRvO1xuICAgIGxvZGFzaC5kaXZpZGUgPSBkaXZpZGU7XG4gICAgbG9kYXNoLmVuZHNXaXRoID0gZW5kc1dpdGg7XG4gICAgbG9kYXNoLmVxID0gZXE7XG4gICAgbG9kYXNoLmVzY2FwZSA9IGVzY2FwZTtcbiAgICBsb2Rhc2guZXNjYXBlUmVnRXhwID0gZXNjYXBlUmVnRXhwO1xuICAgIGxvZGFzaC5ldmVyeSA9IGV2ZXJ5O1xuICAgIGxvZGFzaC5maW5kID0gZmluZDtcbiAgICBsb2Rhc2guZmluZEluZGV4ID0gZmluZEluZGV4O1xuICAgIGxvZGFzaC5maW5kS2V5ID0gZmluZEtleTtcbiAgICBsb2Rhc2guZmluZExhc3QgPSBmaW5kTGFzdDtcbiAgICBsb2Rhc2guZmluZExhc3RJbmRleCA9IGZpbmRMYXN0SW5kZXg7XG4gICAgbG9kYXNoLmZpbmRMYXN0S2V5ID0gZmluZExhc3RLZXk7XG4gICAgbG9kYXNoLmZsb29yID0gZmxvb3I7XG4gICAgbG9kYXNoLmZvckVhY2ggPSBmb3JFYWNoO1xuICAgIGxvZGFzaC5mb3JFYWNoUmlnaHQgPSBmb3JFYWNoUmlnaHQ7XG4gICAgbG9kYXNoLmZvckluID0gZm9ySW47XG4gICAgbG9kYXNoLmZvckluUmlnaHQgPSBmb3JJblJpZ2h0O1xuICAgIGxvZGFzaC5mb3JPd24gPSBmb3JPd247XG4gICAgbG9kYXNoLmZvck93blJpZ2h0ID0gZm9yT3duUmlnaHQ7XG4gICAgbG9kYXNoLmdldCA9IGdldDtcbiAgICBsb2Rhc2guZ3QgPSBndDtcbiAgICBsb2Rhc2guZ3RlID0gZ3RlO1xuICAgIGxvZGFzaC5oYXMgPSBoYXM7XG4gICAgbG9kYXNoLmhhc0luID0gaGFzSW47XG4gICAgbG9kYXNoLmhlYWQgPSBoZWFkO1xuICAgIGxvZGFzaC5pZGVudGl0eSA9IGlkZW50aXR5O1xuICAgIGxvZGFzaC5pbmNsdWRlcyA9IGluY2x1ZGVzO1xuICAgIGxvZGFzaC5pbmRleE9mID0gaW5kZXhPZjtcbiAgICBsb2Rhc2guaW5SYW5nZSA9IGluUmFuZ2U7XG4gICAgbG9kYXNoLmludm9rZSA9IGludm9rZTtcbiAgICBsb2Rhc2guaXNBcmd1bWVudHMgPSBpc0FyZ3VtZW50cztcbiAgICBsb2Rhc2guaXNBcnJheSA9IGlzQXJyYXk7XG4gICAgbG9kYXNoLmlzQXJyYXlCdWZmZXIgPSBpc0FycmF5QnVmZmVyO1xuICAgIGxvZGFzaC5pc0FycmF5TGlrZSA9IGlzQXJyYXlMaWtlO1xuICAgIGxvZGFzaC5pc0FycmF5TGlrZU9iamVjdCA9IGlzQXJyYXlMaWtlT2JqZWN0O1xuICAgIGxvZGFzaC5pc0Jvb2xlYW4gPSBpc0Jvb2xlYW47XG4gICAgbG9kYXNoLmlzQnVmZmVyID0gaXNCdWZmZXI7XG4gICAgbG9kYXNoLmlzRGF0ZSA9IGlzRGF0ZTtcbiAgICBsb2Rhc2guaXNFbGVtZW50ID0gaXNFbGVtZW50O1xuICAgIGxvZGFzaC5pc0VtcHR5ID0gaXNFbXB0eTtcbiAgICBsb2Rhc2guaXNFcXVhbCA9IGlzRXF1YWw7XG4gICAgbG9kYXNoLmlzRXF1YWxXaXRoID0gaXNFcXVhbFdpdGg7XG4gICAgbG9kYXNoLmlzRXJyb3IgPSBpc0Vycm9yO1xuICAgIGxvZGFzaC5pc0Zpbml0ZSA9IGlzRmluaXRlO1xuICAgIGxvZGFzaC5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbiAgICBsb2Rhc2guaXNJbnRlZ2VyID0gaXNJbnRlZ2VyO1xuICAgIGxvZGFzaC5pc0xlbmd0aCA9IGlzTGVuZ3RoO1xuICAgIGxvZGFzaC5pc01hcCA9IGlzTWFwO1xuICAgIGxvZGFzaC5pc01hdGNoID0gaXNNYXRjaDtcbiAgICBsb2Rhc2guaXNNYXRjaFdpdGggPSBpc01hdGNoV2l0aDtcbiAgICBsb2Rhc2guaXNOYU4gPSBpc05hTjtcbiAgICBsb2Rhc2guaXNOYXRpdmUgPSBpc05hdGl2ZTtcbiAgICBsb2Rhc2guaXNOaWwgPSBpc05pbDtcbiAgICBsb2Rhc2guaXNOdWxsID0gaXNOdWxsO1xuICAgIGxvZGFzaC5pc051bWJlciA9IGlzTnVtYmVyO1xuICAgIGxvZGFzaC5pc09iamVjdCA9IGlzT2JqZWN0O1xuICAgIGxvZGFzaC5pc09iamVjdExpa2UgPSBpc09iamVjdExpa2U7XG4gICAgbG9kYXNoLmlzUGxhaW5PYmplY3QgPSBpc1BsYWluT2JqZWN0O1xuICAgIGxvZGFzaC5pc1JlZ0V4cCA9IGlzUmVnRXhwO1xuICAgIGxvZGFzaC5pc1NhZmVJbnRlZ2VyID0gaXNTYWZlSW50ZWdlcjtcbiAgICBsb2Rhc2guaXNTZXQgPSBpc1NldDtcbiAgICBsb2Rhc2guaXNTdHJpbmcgPSBpc1N0cmluZztcbiAgICBsb2Rhc2guaXNTeW1ib2wgPSBpc1N5bWJvbDtcbiAgICBsb2Rhc2guaXNUeXBlZEFycmF5ID0gaXNUeXBlZEFycmF5O1xuICAgIGxvZGFzaC5pc1VuZGVmaW5lZCA9IGlzVW5kZWZpbmVkO1xuICAgIGxvZGFzaC5pc1dlYWtNYXAgPSBpc1dlYWtNYXA7XG4gICAgbG9kYXNoLmlzV2Vha1NldCA9IGlzV2Vha1NldDtcbiAgICBsb2Rhc2guam9pbiA9IGpvaW47XG4gICAgbG9kYXNoLmtlYmFiQ2FzZSA9IGtlYmFiQ2FzZTtcbiAgICBsb2Rhc2gubGFzdCA9IGxhc3Q7XG4gICAgbG9kYXNoLmxhc3RJbmRleE9mID0gbGFzdEluZGV4T2Y7XG4gICAgbG9kYXNoLmxvd2VyQ2FzZSA9IGxvd2VyQ2FzZTtcbiAgICBsb2Rhc2gubG93ZXJGaXJzdCA9IGxvd2VyRmlyc3Q7XG4gICAgbG9kYXNoLmx0ID0gbHQ7XG4gICAgbG9kYXNoLmx0ZSA9IGx0ZTtcbiAgICBsb2Rhc2gubWF4ID0gbWF4O1xuICAgIGxvZGFzaC5tYXhCeSA9IG1heEJ5O1xuICAgIGxvZGFzaC5tZWFuID0gbWVhbjtcbiAgICBsb2Rhc2gubWVhbkJ5ID0gbWVhbkJ5O1xuICAgIGxvZGFzaC5taW4gPSBtaW47XG4gICAgbG9kYXNoLm1pbkJ5ID0gbWluQnk7XG4gICAgbG9kYXNoLnN0dWJBcnJheSA9IHN0dWJBcnJheTtcbiAgICBsb2Rhc2guc3R1YkZhbHNlID0gc3R1YkZhbHNlO1xuICAgIGxvZGFzaC5zdHViT2JqZWN0ID0gc3R1Yk9iamVjdDtcbiAgICBsb2Rhc2guc3R1YlN0cmluZyA9IHN0dWJTdHJpbmc7XG4gICAgbG9kYXNoLnN0dWJUcnVlID0gc3R1YlRydWU7XG4gICAgbG9kYXNoLm11bHRpcGx5ID0gbXVsdGlwbHk7XG4gICAgbG9kYXNoLm50aCA9IG50aDtcbiAgICBsb2Rhc2gubm9Db25mbGljdCA9IG5vQ29uZmxpY3Q7XG4gICAgbG9kYXNoLm5vb3AgPSBub29wO1xuICAgIGxvZGFzaC5ub3cgPSBub3c7XG4gICAgbG9kYXNoLnBhZCA9IHBhZDtcbiAgICBsb2Rhc2gucGFkRW5kID0gcGFkRW5kO1xuICAgIGxvZGFzaC5wYWRTdGFydCA9IHBhZFN0YXJ0O1xuICAgIGxvZGFzaC5wYXJzZUludCA9IHBhcnNlSW50O1xuICAgIGxvZGFzaC5yYW5kb20gPSByYW5kb207XG4gICAgbG9kYXNoLnJlZHVjZSA9IHJlZHVjZTtcbiAgICBsb2Rhc2gucmVkdWNlUmlnaHQgPSByZWR1Y2VSaWdodDtcbiAgICBsb2Rhc2gucmVwZWF0ID0gcmVwZWF0O1xuICAgIGxvZGFzaC5yZXBsYWNlID0gcmVwbGFjZTtcbiAgICBsb2Rhc2gucmVzdWx0ID0gcmVzdWx0O1xuICAgIGxvZGFzaC5yb3VuZCA9IHJvdW5kO1xuICAgIGxvZGFzaC5ydW5JbkNvbnRleHQgPSBydW5JbkNvbnRleHQ7XG4gICAgbG9kYXNoLnNhbXBsZSA9IHNhbXBsZTtcbiAgICBsb2Rhc2guc2l6ZSA9IHNpemU7XG4gICAgbG9kYXNoLnNuYWtlQ2FzZSA9IHNuYWtlQ2FzZTtcbiAgICBsb2Rhc2guc29tZSA9IHNvbWU7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4ID0gc29ydGVkSW5kZXg7XG4gICAgbG9kYXNoLnNvcnRlZEluZGV4QnkgPSBzb3J0ZWRJbmRleEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRJbmRleE9mID0gc29ydGVkSW5kZXhPZjtcbiAgICBsb2Rhc2guc29ydGVkTGFzdEluZGV4ID0gc29ydGVkTGFzdEluZGV4O1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhCeSA9IHNvcnRlZExhc3RJbmRleEJ5O1xuICAgIGxvZGFzaC5zb3J0ZWRMYXN0SW5kZXhPZiA9IHNvcnRlZExhc3RJbmRleE9mO1xuICAgIGxvZGFzaC5zdGFydENhc2UgPSBzdGFydENhc2U7XG4gICAgbG9kYXNoLnN0YXJ0c1dpdGggPSBzdGFydHNXaXRoO1xuICAgIGxvZGFzaC5zdWJ0cmFjdCA9IHN1YnRyYWN0O1xuICAgIGxvZGFzaC5zdW0gPSBzdW07XG4gICAgbG9kYXNoLnN1bUJ5ID0gc3VtQnk7XG4gICAgbG9kYXNoLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgbG9kYXNoLnRpbWVzID0gdGltZXM7XG4gICAgbG9kYXNoLnRvRmluaXRlID0gdG9GaW5pdGU7XG4gICAgbG9kYXNoLnRvSW50ZWdlciA9IHRvSW50ZWdlcjtcbiAgICBsb2Rhc2gudG9MZW5ndGggPSB0b0xlbmd0aDtcbiAgICBsb2Rhc2gudG9Mb3dlciA9IHRvTG93ZXI7XG4gICAgbG9kYXNoLnRvTnVtYmVyID0gdG9OdW1iZXI7XG4gICAgbG9kYXNoLnRvU2FmZUludGVnZXIgPSB0b1NhZmVJbnRlZ2VyO1xuICAgIGxvZGFzaC50b1N0cmluZyA9IHRvU3RyaW5nO1xuICAgIGxvZGFzaC50b1VwcGVyID0gdG9VcHBlcjtcbiAgICBsb2Rhc2gudHJpbSA9IHRyaW07XG4gICAgbG9kYXNoLnRyaW1FbmQgPSB0cmltRW5kO1xuICAgIGxvZGFzaC50cmltU3RhcnQgPSB0cmltU3RhcnQ7XG4gICAgbG9kYXNoLnRydW5jYXRlID0gdHJ1bmNhdGU7XG4gICAgbG9kYXNoLnVuZXNjYXBlID0gdW5lc2NhcGU7XG4gICAgbG9kYXNoLnVuaXF1ZUlkID0gdW5pcXVlSWQ7XG4gICAgbG9kYXNoLnVwcGVyQ2FzZSA9IHVwcGVyQ2FzZTtcbiAgICBsb2Rhc2gudXBwZXJGaXJzdCA9IHVwcGVyRmlyc3Q7XG5cbiAgICAvLyBBZGQgYWxpYXNlcy5cbiAgICBsb2Rhc2guZWFjaCA9IGZvckVhY2g7XG4gICAgbG9kYXNoLmVhY2hSaWdodCA9IGZvckVhY2hSaWdodDtcbiAgICBsb2Rhc2guZmlyc3QgPSBoZWFkO1xuXG4gICAgbWl4aW4obG9kYXNoLCAoZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgc291cmNlID0ge307XG4gICAgICBiYXNlRm9yT3duKGxvZGFzaCwgZnVuY3Rpb24oZnVuYywgbWV0aG9kTmFtZSkge1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwobG9kYXNoLnByb3RvdHlwZSwgbWV0aG9kTmFtZSkpIHtcbiAgICAgICAgICBzb3VyY2VbbWV0aG9kTmFtZV0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgfSgpKSwgeyAnY2hhaW4nOiBmYWxzZSB9KTtcblxuICAgIC8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAgIC8qKlxuICAgICAqIFRoZSBzZW1hbnRpYyB2ZXJzaW9uIG51bWJlci5cbiAgICAgKlxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAbWVtYmVyT2YgX1xuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgbG9kYXNoLlZFUlNJT04gPSBWRVJTSU9OO1xuXG4gICAgLy8gQXNzaWduIGRlZmF1bHQgcGxhY2Vob2xkZXJzLlxuICAgIGFycmF5RWFjaChbJ2JpbmQnLCAnYmluZEtleScsICdjdXJyeScsICdjdXJyeVJpZ2h0JywgJ3BhcnRpYWwnLCAncGFydGlhbFJpZ2h0J10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUpIHtcbiAgICAgIGxvZGFzaFttZXRob2ROYW1lXS5wbGFjZWhvbGRlciA9IGxvZGFzaDtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmRyb3BgIGFuZCBgXy50YWtlYCB2YXJpYW50cy5cbiAgICBhcnJheUVhY2goWydkcm9wJywgJ3Rha2UnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKG4pIHtcbiAgICAgICAgbiA9IG4gPT09IHVuZGVmaW5lZCA/IDEgOiBuYXRpdmVNYXgodG9JbnRlZ2VyKG4pLCAwKTtcblxuICAgICAgICB2YXIgcmVzdWx0ID0gKHRoaXMuX19maWx0ZXJlZF9fICYmICFpbmRleClcbiAgICAgICAgICA/IG5ldyBMYXp5V3JhcHBlcih0aGlzKVxuICAgICAgICAgIDogdGhpcy5jbG9uZSgpO1xuXG4gICAgICAgIGlmIChyZXN1bHQuX19maWx0ZXJlZF9fKSB7XG4gICAgICAgICAgcmVzdWx0Ll9fdGFrZUNvdW50X18gPSBuYXRpdmVNaW4obiwgcmVzdWx0Ll9fdGFrZUNvdW50X18pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdC5fX3ZpZXdzX18ucHVzaCh7XG4gICAgICAgICAgICAnc2l6ZSc6IG5hdGl2ZU1pbihuLCBNQVhfQVJSQVlfTEVOR1RIKSxcbiAgICAgICAgICAgICd0eXBlJzogbWV0aG9kTmFtZSArIChyZXN1bHQuX19kaXJfXyA8IDAgPyAnUmlnaHQnIDogJycpXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH07XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lICsgJ1JpZ2h0J10gPSBmdW5jdGlvbihuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJldmVyc2UoKVttZXRob2ROYW1lXShuKS5yZXZlcnNlKCk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyB0aGF0IGFjY2VwdCBhbiBgaXRlcmF0ZWVgIHZhbHVlLlxuICAgIGFycmF5RWFjaChbJ2ZpbHRlcicsICdtYXAnLCAndGFrZVdoaWxlJ10sIGZ1bmN0aW9uKG1ldGhvZE5hbWUsIGluZGV4KSB7XG4gICAgICB2YXIgdHlwZSA9IGluZGV4ICsgMSxcbiAgICAgICAgICBpc0ZpbHRlciA9IHR5cGUgPT0gTEFaWV9GSUxURVJfRkxBRyB8fCB0eXBlID09IExBWllfV0hJTEVfRkxBRztcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oaXRlcmF0ZWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0Ll9faXRlcmF0ZWVzX18ucHVzaCh7XG4gICAgICAgICAgJ2l0ZXJhdGVlJzogZ2V0SXRlcmF0ZWUoaXRlcmF0ZWUsIDMpLFxuICAgICAgICAgICd0eXBlJzogdHlwZVxuICAgICAgICB9KTtcbiAgICAgICAgcmVzdWx0Ll9fZmlsdGVyZWRfXyA9IHJlc3VsdC5fX2ZpbHRlcmVkX18gfHwgaXNGaWx0ZXI7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBMYXp5V3JhcHBlcmAgbWV0aG9kcyBmb3IgYF8uaGVhZGAgYW5kIGBfLmxhc3RgLlxuICAgIGFycmF5RWFjaChbJ2hlYWQnLCAnbGFzdCddLCBmdW5jdGlvbihtZXRob2ROYW1lLCBpbmRleCkge1xuICAgICAgdmFyIHRha2VOYW1lID0gJ3Rha2UnICsgKGluZGV4ID8gJ1JpZ2h0JyA6ICcnKTtcblxuICAgICAgTGF6eVdyYXBwZXIucHJvdG90eXBlW21ldGhvZE5hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzW3Rha2VOYW1lXSgxKS52YWx1ZSgpWzBdO1xuICAgICAgfTtcbiAgICB9KTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgZm9yIGBfLmluaXRpYWxgIGFuZCBgXy50YWlsYC5cbiAgICBhcnJheUVhY2goWydpbml0aWFsJywgJ3RhaWwnXSwgZnVuY3Rpb24obWV0aG9kTmFtZSwgaW5kZXgpIHtcbiAgICAgIHZhciBkcm9wTmFtZSA9ICdkcm9wJyArIChpbmRleCA/ICcnIDogJ1JpZ2h0Jyk7XG5cbiAgICAgIExhenlXcmFwcGVyLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fX2ZpbHRlcmVkX18gPyBuZXcgTGF6eVdyYXBwZXIodGhpcykgOiB0aGlzW2Ryb3BOYW1lXSgxKTtcbiAgICAgIH07XG4gICAgfSk7XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY29tcGFjdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyKGlkZW50aXR5KTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmQgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihwcmVkaWNhdGUpLmhlYWQoKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLmZpbmRMYXN0ID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXZlcnNlKCkuZmluZChwcmVkaWNhdGUpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuaW52b2tlTWFwID0gYmFzZVJlc3QoZnVuY3Rpb24ocGF0aCwgYXJncykge1xuICAgICAgaWYgKHR5cGVvZiBwYXRoID09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYmFzZUludm9rZSh2YWx1ZSwgcGF0aCwgYXJncyk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS5yZWplY3QgPSBmdW5jdGlvbihwcmVkaWNhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLmZpbHRlcihuZWdhdGUoZ2V0SXRlcmF0ZWUocHJlZGljYXRlKSkpO1xuICAgIH07XG5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuc2xpY2UgPSBmdW5jdGlvbihzdGFydCwgZW5kKSB7XG4gICAgICBzdGFydCA9IHRvSW50ZWdlcihzdGFydCk7XG5cbiAgICAgIHZhciByZXN1bHQgPSB0aGlzO1xuICAgICAgaWYgKHJlc3VsdC5fX2ZpbHRlcmVkX18gJiYgKHN0YXJ0ID4gMCB8fCBlbmQgPCAwKSkge1xuICAgICAgICByZXR1cm4gbmV3IExhenlXcmFwcGVyKHJlc3VsdCk7XG4gICAgICB9XG4gICAgICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdC50YWtlUmlnaHQoLXN0YXJ0KTtcbiAgICAgIH0gZWxzZSBpZiAoc3RhcnQpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVzdWx0LmRyb3Aoc3RhcnQpO1xuICAgICAgfVxuICAgICAgaWYgKGVuZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGVuZCA9IHRvSW50ZWdlcihlbmQpO1xuICAgICAgICByZXN1bHQgPSBlbmQgPCAwID8gcmVzdWx0LmRyb3BSaWdodCgtZW5kKSA6IHJlc3VsdC50YWtlKGVuZCAtIHN0YXJ0KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcblxuICAgIExhenlXcmFwcGVyLnByb3RvdHlwZS50YWtlUmlnaHRXaGlsZSA9IGZ1bmN0aW9uKHByZWRpY2F0ZSkge1xuICAgICAgcmV0dXJuIHRoaXMucmV2ZXJzZSgpLnRha2VXaGlsZShwcmVkaWNhdGUpLnJldmVyc2UoKTtcbiAgICB9O1xuXG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnRvQXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiB0aGlzLnRha2UoTUFYX0FSUkFZX0xFTkdUSCk7XG4gICAgfTtcblxuICAgIC8vIEFkZCBgTGF6eVdyYXBwZXJgIG1ldGhvZHMgdG8gYGxvZGFzaC5wcm90b3R5cGVgLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgY2hlY2tJdGVyYXRlZSA9IC9eKD86ZmlsdGVyfGZpbmR8bWFwfHJlamVjdCl8V2hpbGUkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGlzVGFrZXIgPSAvXig/OmhlYWR8bGFzdCkkLy50ZXN0KG1ldGhvZE5hbWUpLFxuICAgICAgICAgIGxvZGFzaEZ1bmMgPSBsb2Rhc2hbaXNUYWtlciA/ICgndGFrZScgKyAobWV0aG9kTmFtZSA9PSAnbGFzdCcgPyAnUmlnaHQnIDogJycpKSA6IG1ldGhvZE5hbWVdLFxuICAgICAgICAgIHJldFVud3JhcHBlZCA9IGlzVGFrZXIgfHwgL15maW5kLy50ZXN0KG1ldGhvZE5hbWUpO1xuXG4gICAgICBpZiAoIWxvZGFzaEZ1bmMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9fd3JhcHBlZF9fLFxuICAgICAgICAgICAgYXJncyA9IGlzVGFrZXIgPyBbMV0gOiBhcmd1bWVudHMsXG4gICAgICAgICAgICBpc0xhenkgPSB2YWx1ZSBpbnN0YW5jZW9mIExhenlXcmFwcGVyLFxuICAgICAgICAgICAgaXRlcmF0ZWUgPSBhcmdzWzBdLFxuICAgICAgICAgICAgdXNlTGF6eSA9IGlzTGF6eSB8fCBpc0FycmF5KHZhbHVlKTtcblxuICAgICAgICB2YXIgaW50ZXJjZXB0b3IgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgIHZhciByZXN1bHQgPSBsb2Rhc2hGdW5jLmFwcGx5KGxvZGFzaCwgYXJyYXlQdXNoKFt2YWx1ZV0sIGFyZ3MpKTtcbiAgICAgICAgICByZXR1cm4gKGlzVGFrZXIgJiYgY2hhaW5BbGwpID8gcmVzdWx0WzBdIDogcmVzdWx0O1xuICAgICAgICB9O1xuXG4gICAgICAgIGlmICh1c2VMYXp5ICYmIGNoZWNrSXRlcmF0ZWUgJiYgdHlwZW9mIGl0ZXJhdGVlID09ICdmdW5jdGlvbicgJiYgaXRlcmF0ZWUubGVuZ3RoICE9IDEpIHtcbiAgICAgICAgICAvLyBBdm9pZCBsYXp5IHVzZSBpZiB0aGUgaXRlcmF0ZWUgaGFzIGEgXCJsZW5ndGhcIiB2YWx1ZSBvdGhlciB0aGFuIGAxYC5cbiAgICAgICAgICBpc0xhenkgPSB1c2VMYXp5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGNoYWluQWxsID0gdGhpcy5fX2NoYWluX18sXG4gICAgICAgICAgICBpc0h5YnJpZCA9ICEhdGhpcy5fX2FjdGlvbnNfXy5sZW5ndGgsXG4gICAgICAgICAgICBpc1Vud3JhcHBlZCA9IHJldFVud3JhcHBlZCAmJiAhY2hhaW5BbGwsXG4gICAgICAgICAgICBvbmx5TGF6eSA9IGlzTGF6eSAmJiAhaXNIeWJyaWQ7XG5cbiAgICAgICAgaWYgKCFyZXRVbndyYXBwZWQgJiYgdXNlTGF6eSkge1xuICAgICAgICAgIHZhbHVlID0gb25seUxhenkgPyB2YWx1ZSA6IG5ldyBMYXp5V3JhcHBlcih0aGlzKTtcbiAgICAgICAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgICAgICAgcmVzdWx0Ll9fYWN0aW9uc19fLnB1c2goeyAnZnVuYyc6IHRocnUsICdhcmdzJzogW2ludGVyY2VwdG9yXSwgJ3RoaXNBcmcnOiB1bmRlZmluZWQgfSk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBMb2Rhc2hXcmFwcGVyKHJlc3VsdCwgY2hhaW5BbGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vud3JhcHBlZCAmJiBvbmx5TGF6eSkge1xuICAgICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHJlc3VsdCA9IHRoaXMudGhydShpbnRlcmNlcHRvcik7XG4gICAgICAgIHJldHVybiBpc1Vud3JhcHBlZCA/IChpc1Rha2VyID8gcmVzdWx0LnZhbHVlKClbMF0gOiByZXN1bHQudmFsdWUoKSkgOiByZXN1bHQ7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gQWRkIGBBcnJheWAgbWV0aG9kcyB0byBgbG9kYXNoLnByb3RvdHlwZWAuXG4gICAgYXJyYXlFYWNoKFsncG9wJywgJ3B1c2gnLCAnc2hpZnQnLCAnc29ydCcsICdzcGxpY2UnLCAndW5zaGlmdCddLCBmdW5jdGlvbihtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgZnVuYyA9IGFycmF5UHJvdG9bbWV0aG9kTmFtZV0sXG4gICAgICAgICAgY2hhaW5OYW1lID0gL14oPzpwdXNofHNvcnR8dW5zaGlmdCkkLy50ZXN0KG1ldGhvZE5hbWUpID8gJ3RhcCcgOiAndGhydScsXG4gICAgICAgICAgcmV0VW53cmFwcGVkID0gL14oPzpwb3B8c2hpZnQpJC8udGVzdChtZXRob2ROYW1lKTtcblxuICAgICAgbG9kYXNoLnByb3RvdHlwZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgaWYgKHJldFVud3JhcHBlZCAmJiAhdGhpcy5fX2NoYWluX18pIHtcbiAgICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLnZhbHVlKCk7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpc1tjaGFpbk5hbWVdKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkoaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6IFtdLCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgLy8gTWFwIG1pbmlmaWVkIG1ldGhvZCBuYW1lcyB0byB0aGVpciByZWFsIG5hbWVzLlxuICAgIGJhc2VGb3JPd24oTGF6eVdyYXBwZXIucHJvdG90eXBlLCBmdW5jdGlvbihmdW5jLCBtZXRob2ROYW1lKSB7XG4gICAgICB2YXIgbG9kYXNoRnVuYyA9IGxvZGFzaFttZXRob2ROYW1lXTtcbiAgICAgIGlmIChsb2Rhc2hGdW5jKSB7XG4gICAgICAgIHZhciBrZXkgPSBsb2Rhc2hGdW5jLm5hbWUgKyAnJztcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKHJlYWxOYW1lcywga2V5KSkge1xuICAgICAgICAgIHJlYWxOYW1lc1trZXldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgcmVhbE5hbWVzW2tleV0ucHVzaCh7ICduYW1lJzogbWV0aG9kTmFtZSwgJ2Z1bmMnOiBsb2Rhc2hGdW5jIH0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmVhbE5hbWVzW2NyZWF0ZUh5YnJpZCh1bmRlZmluZWQsIFdSQVBfQklORF9LRVlfRkxBRykubmFtZV0gPSBbe1xuICAgICAgJ25hbWUnOiAnd3JhcHBlcicsXG4gICAgICAnZnVuYyc6IHVuZGVmaW5lZFxuICAgIH1dO1xuXG4gICAgLy8gQWRkIG1ldGhvZHMgdG8gYExhenlXcmFwcGVyYC5cbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUuY2xvbmUgPSBsYXp5Q2xvbmU7XG4gICAgTGF6eVdyYXBwZXIucHJvdG90eXBlLnJldmVyc2UgPSBsYXp5UmV2ZXJzZTtcbiAgICBMYXp5V3JhcHBlci5wcm90b3R5cGUudmFsdWUgPSBsYXp5VmFsdWU7XG5cbiAgICAvLyBBZGQgY2hhaW4gc2VxdWVuY2UgbWV0aG9kcyB0byB0aGUgYGxvZGFzaGAgd3JhcHBlci5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmF0ID0gd3JhcHBlckF0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUuY2hhaW4gPSB3cmFwcGVyQ2hhaW47XG4gICAgbG9kYXNoLnByb3RvdHlwZS5jb21taXQgPSB3cmFwcGVyQ29tbWl0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUubmV4dCA9IHdyYXBwZXJOZXh0O1xuICAgIGxvZGFzaC5wcm90b3R5cGUucGxhbnQgPSB3cmFwcGVyUGxhbnQ7XG4gICAgbG9kYXNoLnByb3RvdHlwZS5yZXZlcnNlID0gd3JhcHBlclJldmVyc2U7XG4gICAgbG9kYXNoLnByb3RvdHlwZS50b0pTT04gPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlT2YgPSBsb2Rhc2gucHJvdG90eXBlLnZhbHVlID0gd3JhcHBlclZhbHVlO1xuXG4gICAgLy8gQWRkIGxhenkgYWxpYXNlcy5cbiAgICBsb2Rhc2gucHJvdG90eXBlLmZpcnN0ID0gbG9kYXNoLnByb3RvdHlwZS5oZWFkO1xuXG4gICAgaWYgKHN5bUl0ZXJhdG9yKSB7XG4gICAgICBsb2Rhc2gucHJvdG90eXBlW3N5bUl0ZXJhdG9yXSA9IHdyYXBwZXJUb0l0ZXJhdG9yO1xuICAgIH1cbiAgICByZXR1cm4gbG9kYXNoO1xuICB9KTtcblxuICAvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuICAvLyBFeHBvcnQgbG9kYXNoLlxuICB2YXIgXyA9IHJ1bkluQ29udGV4dCgpO1xuXG4gIC8vIFNvbWUgQU1EIGJ1aWxkIG9wdGltaXplcnMsIGxpa2Ugci5qcywgY2hlY2sgZm9yIGNvbmRpdGlvbiBwYXR0ZXJucyBsaWtlOlxuICBpZiAodHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBFeHBvc2UgTG9kYXNoIG9uIHRoZSBnbG9iYWwgb2JqZWN0IHRvIHByZXZlbnQgZXJyb3JzIHdoZW4gTG9kYXNoIGlzXG4gICAgLy8gbG9hZGVkIGJ5IGEgc2NyaXB0IHRhZyBpbiB0aGUgcHJlc2VuY2Ugb2YgYW4gQU1EIGxvYWRlci5cbiAgICAvLyBTZWUgaHR0cDovL3JlcXVpcmVqcy5vcmcvZG9jcy9lcnJvcnMuaHRtbCNtaXNtYXRjaCBmb3IgbW9yZSBkZXRhaWxzLlxuICAgIC8vIFVzZSBgXy5ub0NvbmZsaWN0YCB0byByZW1vdmUgTG9kYXNoIGZyb20gdGhlIGdsb2JhbCBvYmplY3QuXG4gICAgcm9vdC5fID0gXztcblxuICAgIC8vIERlZmluZSBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlIHNvLCB0aHJvdWdoIHBhdGggbWFwcGluZywgaXQgY2FuIGJlXG4gICAgLy8gcmVmZXJlbmNlZCBhcyB0aGUgXCJ1bmRlcnNjb3JlXCIgbW9kdWxlLlxuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBfO1xuICAgIH0pO1xuICB9XG4gIC8vIENoZWNrIGZvciBgZXhwb3J0c2AgYWZ0ZXIgYGRlZmluZWAgaW4gY2FzZSBhIGJ1aWxkIG9wdGltaXplciBhZGRzIGl0LlxuICBlbHNlIGlmIChmcmVlTW9kdWxlKSB7XG4gICAgLy8gRXhwb3J0IGZvciBOb2RlLmpzLlxuICAgIChmcmVlTW9kdWxlLmV4cG9ydHMgPSBfKS5fID0gXztcbiAgICAvLyBFeHBvcnQgZm9yIENvbW1vbkpTIHN1cHBvcnQuXG4gICAgZnJlZUV4cG9ydHMuXyA9IF87XG4gIH1cbiAgZWxzZSB7XG4gICAgLy8gRXhwb3J0IHRvIHRoZSBnbG9iYWwgb2JqZWN0LlxuICAgIHJvb3QuXyA9IF87XG4gIH1cbn0uY2FsbCh0aGlzKSk7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuXHRpZiAoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XG5cdH1cblx0cmV0dXJuIG1vZHVsZTtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9